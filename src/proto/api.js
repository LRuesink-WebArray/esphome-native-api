/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = require("protobufjs/minimal");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

/**
 * APISourceType enum.
 * @exports APISourceType
 * @enum {number}
 * @property {number} SOURCE_BOTH=0 SOURCE_BOTH value
 * @property {number} SOURCE_SERVER=1 SOURCE_SERVER value
 * @property {number} SOURCE_CLIENT=2 SOURCE_CLIENT value
 */
$root.APISourceType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "SOURCE_BOTH"] = 0;
    values[valuesById[1] = "SOURCE_SERVER"] = 1;
    values[valuesById[2] = "SOURCE_CLIENT"] = 2;
    return values;
})();

$root.VoidMessage = (function() {

    /**
     * Properties of a VoidMessage.
     * @exports IVoidMessage
     * @interface IVoidMessage
     */

    /**
     * Constructs a new VoidMessage.
     * @exports VoidMessage
     * @classdesc Represents a VoidMessage.
     * @implements IVoidMessage
     * @constructor
     * @param {IVoidMessage=} [properties] Properties to set
     */
    function VoidMessage(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new VoidMessage instance using the specified properties.
     * @function create
     * @memberof VoidMessage
     * @static
     * @param {IVoidMessage=} [properties] Properties to set
     * @returns {VoidMessage} VoidMessage instance
     */
    VoidMessage.create = function create(properties) {
        return new VoidMessage(properties);
    };

    /**
     * Encodes the specified VoidMessage message. Does not implicitly {@link VoidMessage.verify|verify} messages.
     * @function encode
     * @memberof VoidMessage
     * @static
     * @param {IVoidMessage} message VoidMessage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoidMessage.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified VoidMessage message, length delimited. Does not implicitly {@link VoidMessage.verify|verify} messages.
     * @function encodeDelimited
     * @memberof VoidMessage
     * @static
     * @param {IVoidMessage} message VoidMessage message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoidMessage.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a VoidMessage message from the specified reader or buffer.
     * @function decode
     * @memberof VoidMessage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {VoidMessage} VoidMessage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoidMessage.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.VoidMessage();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a VoidMessage message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof VoidMessage
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {VoidMessage} VoidMessage
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoidMessage.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a VoidMessage message.
     * @function verify
     * @memberof VoidMessage
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    VoidMessage.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a VoidMessage message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof VoidMessage
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {VoidMessage} VoidMessage
     */
    VoidMessage.fromObject = function fromObject(object) {
        if (object instanceof $root.VoidMessage)
            return object;
        return new $root.VoidMessage();
    };

    /**
     * Creates a plain object from a VoidMessage message. Also converts values to other types if specified.
     * @function toObject
     * @memberof VoidMessage
     * @static
     * @param {VoidMessage} message VoidMessage
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    VoidMessage.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this VoidMessage to JSON.
     * @function toJSON
     * @memberof VoidMessage
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    VoidMessage.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for VoidMessage
     * @function getTypeUrl
     * @memberof VoidMessage
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    VoidMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/VoidMessage";
    };

    return VoidMessage;
})();

$root.google = (function() {

    /**
     * Namespace google.
     * @exports google
     * @namespace
     */
    var google = {};

    google.protobuf = (function() {

        /**
         * Namespace protobuf.
         * @memberof google
         * @namespace
         */
        var protobuf = {};

        protobuf.FileDescriptorSet = (function() {

            /**
             * Properties of a FileDescriptorSet.
             * @memberof google.protobuf
             * @interface IFileDescriptorSet
             * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
             */

            /**
             * Constructs a new FileDescriptorSet.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorSet.
             * @implements IFileDescriptorSet
             * @constructor
             * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
             */
            function FileDescriptorSet(properties) {
                this.file = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorSet file.
             * @member {Array.<google.protobuf.IFileDescriptorProto>} file
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             */
            FileDescriptorSet.prototype.file = $util.emptyArray;

            /**
             * Creates a new FileDescriptorSet instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
             */
            FileDescriptorSet.create = function create(properties) {
                return new FileDescriptorSet(properties);
            };

            /**
             * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorSet.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.file != null && message.file.length)
                    for (var i = 0; i < message.file.length; ++i)
                        $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorSet.decode = function decode(reader, length, error) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    if (tag === error)
                        break;
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.file && message.file.length))
                                message.file = [];
                            message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileDescriptorSet message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorSet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.file != null && message.hasOwnProperty("file")) {
                    if (!Array.isArray(message.file))
                        return "file: array expected";
                    for (var i = 0; i < message.file.length; ++i) {
                        var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                        if (error)
                            return "file." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             */
            FileDescriptorSet.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorSet)
                    return object;
                var message = new $root.google.protobuf.FileDescriptorSet();
                if (object.file) {
                    if (!Array.isArray(object.file))
                        throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                    message.file = [];
                    for (var i = 0; i < object.file.length; ++i) {
                        if (typeof object.file[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                        message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorSet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.file = [];
                if (message.file && message.file.length) {
                    object.file = [];
                    for (var j = 0; j < message.file.length; ++j)
                        object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                }
                return object;
            };

            /**
             * Converts this FileDescriptorSet to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorSet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for FileDescriptorSet
             * @function getTypeUrl
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            FileDescriptorSet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.FileDescriptorSet";
            };

            return FileDescriptorSet;
        })();

        /**
         * Edition enum.
         * @name google.protobuf.Edition
         * @enum {number}
         * @property {number} EDITION_UNKNOWN=0 EDITION_UNKNOWN value
         * @property {number} EDITION_LEGACY=900 EDITION_LEGACY value
         * @property {number} EDITION_PROTO2=998 EDITION_PROTO2 value
         * @property {number} EDITION_PROTO3=999 EDITION_PROTO3 value
         * @property {number} EDITION_2023=1000 EDITION_2023 value
         * @property {number} EDITION_2024=1001 EDITION_2024 value
         * @property {number} EDITION_1_TEST_ONLY=1 EDITION_1_TEST_ONLY value
         * @property {number} EDITION_2_TEST_ONLY=2 EDITION_2_TEST_ONLY value
         * @property {number} EDITION_99997_TEST_ONLY=99997 EDITION_99997_TEST_ONLY value
         * @property {number} EDITION_99998_TEST_ONLY=99998 EDITION_99998_TEST_ONLY value
         * @property {number} EDITION_99999_TEST_ONLY=99999 EDITION_99999_TEST_ONLY value
         * @property {number} EDITION_MAX=2147483647 EDITION_MAX value
         */
        protobuf.Edition = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "EDITION_UNKNOWN"] = 0;
            values[valuesById[900] = "EDITION_LEGACY"] = 900;
            values[valuesById[998] = "EDITION_PROTO2"] = 998;
            values[valuesById[999] = "EDITION_PROTO3"] = 999;
            values[valuesById[1000] = "EDITION_2023"] = 1000;
            values[valuesById[1001] = "EDITION_2024"] = 1001;
            values[valuesById[1] = "EDITION_1_TEST_ONLY"] = 1;
            values[valuesById[2] = "EDITION_2_TEST_ONLY"] = 2;
            values[valuesById[99997] = "EDITION_99997_TEST_ONLY"] = 99997;
            values[valuesById[99998] = "EDITION_99998_TEST_ONLY"] = 99998;
            values[valuesById[99999] = "EDITION_99999_TEST_ONLY"] = 99999;
            values[valuesById[2147483647] = "EDITION_MAX"] = 2147483647;
            return values;
        })();

        protobuf.FileDescriptorProto = (function() {

            /**
             * Properties of a FileDescriptorProto.
             * @memberof google.protobuf
             * @interface IFileDescriptorProto
             * @property {string|null} [name] FileDescriptorProto name
             * @property {string|null} ["package"] FileDescriptorProto package
             * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
             * @property {Array.<number>|null} [public_dependency] FileDescriptorProto public_dependency
             * @property {Array.<number>|null} [weak_dependency] FileDescriptorProto weak_dependency
             * @property {Array.<string>|null} [option_dependency] FileDescriptorProto option_dependency
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [message_type] FileDescriptorProto message_type
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] FileDescriptorProto enum_type
             * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
             * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
             * @property {google.protobuf.ISourceCodeInfo|null} [source_code_info] FileDescriptorProto source_code_info
             * @property {string|null} [syntax] FileDescriptorProto syntax
             * @property {google.protobuf.Edition|null} [edition] FileDescriptorProto edition
             */

            /**
             * Constructs a new FileDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorProto.
             * @implements IFileDescriptorProto
             * @constructor
             * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
             */
            function FileDescriptorProto(properties) {
                this.dependency = [];
                this.public_dependency = [];
                this.weak_dependency = [];
                this.option_dependency = [];
                this.message_type = [];
                this.enum_type = [];
                this.service = [];
                this.extension = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.name = "";

            /**
             * FileDescriptorProto package.
             * @member {string} package
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype["package"] = "";

            /**
             * FileDescriptorProto dependency.
             * @member {Array.<string>} dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.dependency = $util.emptyArray;

            /**
             * FileDescriptorProto public_dependency.
             * @member {Array.<number>} public_dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.public_dependency = $util.emptyArray;

            /**
             * FileDescriptorProto weak_dependency.
             * @member {Array.<number>} weak_dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.weak_dependency = $util.emptyArray;

            /**
             * FileDescriptorProto option_dependency.
             * @member {Array.<string>} option_dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.option_dependency = $util.emptyArray;

            /**
             * FileDescriptorProto message_type.
             * @member {Array.<google.protobuf.IDescriptorProto>} message_type
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.message_type = $util.emptyArray;

            /**
             * FileDescriptorProto enum_type.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.enum_type = $util.emptyArray;

            /**
             * FileDescriptorProto service.
             * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.service = $util.emptyArray;

            /**
             * FileDescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * FileDescriptorProto options.
             * @member {google.protobuf.IFileOptions|null|undefined} options
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.options = null;

            /**
             * FileDescriptorProto source_code_info.
             * @member {google.protobuf.ISourceCodeInfo|null|undefined} source_code_info
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.source_code_info = null;

            /**
             * FileDescriptorProto syntax.
             * @member {string} syntax
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.syntax = "";

            /**
             * FileDescriptorProto edition.
             * @member {google.protobuf.Edition} edition
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.edition = 0;

            /**
             * Creates a new FileDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
             */
            FileDescriptorProto.create = function create(properties) {
                return new FileDescriptorProto(properties);
            };

            /**
             * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                if (message.dependency != null && message.dependency.length)
                    for (var i = 0; i < message.dependency.length; ++i)
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                if (message.message_type != null && message.message_type.length)
                    for (var i = 0; i < message.message_type.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(message.message_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.enum_type != null && message.enum_type.length)
                    for (var i = 0; i < message.enum_type.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.service != null && message.service.length)
                    for (var i = 0; i < message.service.length; ++i)
                        $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.extension != null && message.extension.length)
                    for (var i = 0; i < message.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.source_code_info != null && Object.hasOwnProperty.call(message, "source_code_info"))
                    $root.google.protobuf.SourceCodeInfo.encode(message.source_code_info, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.public_dependency != null && message.public_dependency.length)
                    for (var i = 0; i < message.public_dependency.length; ++i)
                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.public_dependency[i]);
                if (message.weak_dependency != null && message.weak_dependency.length)
                    for (var i = 0; i < message.weak_dependency.length; ++i)
                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weak_dependency[i]);
                if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                if (message.edition != null && Object.hasOwnProperty.call(message, "edition"))
                    writer.uint32(/* id 14, wireType 0 =*/112).int32(message.edition);
                if (message.option_dependency != null && message.option_dependency.length)
                    for (var i = 0; i < message.option_dependency.length; ++i)
                        writer.uint32(/* id 15, wireType 2 =*/122).string(message.option_dependency[i]);
                return writer;
            };

            /**
             * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorProto.decode = function decode(reader, length, error) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    if (tag === error)
                        break;
                    switch (tag >>> 3) {
                    case 1: {
                            message.name = reader.string();
                            break;
                        }
                    case 2: {
                            message["package"] = reader.string();
                            break;
                        }
                    case 3: {
                            if (!(message.dependency && message.dependency.length))
                                message.dependency = [];
                            message.dependency.push(reader.string());
                            break;
                        }
                    case 10: {
                            if (!(message.public_dependency && message.public_dependency.length))
                                message.public_dependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.public_dependency.push(reader.int32());
                            } else
                                message.public_dependency.push(reader.int32());
                            break;
                        }
                    case 11: {
                            if (!(message.weak_dependency && message.weak_dependency.length))
                                message.weak_dependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.weak_dependency.push(reader.int32());
                            } else
                                message.weak_dependency.push(reader.int32());
                            break;
                        }
                    case 15: {
                            if (!(message.option_dependency && message.option_dependency.length))
                                message.option_dependency = [];
                            message.option_dependency.push(reader.string());
                            break;
                        }
                    case 4: {
                            if (!(message.message_type && message.message_type.length))
                                message.message_type = [];
                            message.message_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 5: {
                            if (!(message.enum_type && message.enum_type.length))
                                message.enum_type = [];
                            message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 6: {
                            if (!(message.service && message.service.length))
                                message.service = [];
                            message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 7: {
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 8: {
                            message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                            break;
                        }
                    case 9: {
                            message.source_code_info = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                            break;
                        }
                    case 12: {
                            message.syntax = reader.string();
                            break;
                        }
                    case 14: {
                            message.edition = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message["package"] != null && message.hasOwnProperty("package"))
                    if (!$util.isString(message["package"]))
                        return "package: string expected";
                if (message.dependency != null && message.hasOwnProperty("dependency")) {
                    if (!Array.isArray(message.dependency))
                        return "dependency: array expected";
                    for (var i = 0; i < message.dependency.length; ++i)
                        if (!$util.isString(message.dependency[i]))
                            return "dependency: string[] expected";
                }
                if (message.public_dependency != null && message.hasOwnProperty("public_dependency")) {
                    if (!Array.isArray(message.public_dependency))
                        return "public_dependency: array expected";
                    for (var i = 0; i < message.public_dependency.length; ++i)
                        if (!$util.isInteger(message.public_dependency[i]))
                            return "public_dependency: integer[] expected";
                }
                if (message.weak_dependency != null && message.hasOwnProperty("weak_dependency")) {
                    if (!Array.isArray(message.weak_dependency))
                        return "weak_dependency: array expected";
                    for (var i = 0; i < message.weak_dependency.length; ++i)
                        if (!$util.isInteger(message.weak_dependency[i]))
                            return "weak_dependency: integer[] expected";
                }
                if (message.option_dependency != null && message.hasOwnProperty("option_dependency")) {
                    if (!Array.isArray(message.option_dependency))
                        return "option_dependency: array expected";
                    for (var i = 0; i < message.option_dependency.length; ++i)
                        if (!$util.isString(message.option_dependency[i]))
                            return "option_dependency: string[] expected";
                }
                if (message.message_type != null && message.hasOwnProperty("message_type")) {
                    if (!Array.isArray(message.message_type))
                        return "message_type: array expected";
                    for (var i = 0; i < message.message_type.length; ++i) {
                        var error = $root.google.protobuf.DescriptorProto.verify(message.message_type[i]);
                        if (error)
                            return "message_type." + error;
                    }
                }
                if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                    if (!Array.isArray(message.enum_type))
                        return "enum_type: array expected";
                    for (var i = 0; i < message.enum_type.length; ++i) {
                        var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                        if (error)
                            return "enum_type." + error;
                    }
                }
                if (message.service != null && message.hasOwnProperty("service")) {
                    if (!Array.isArray(message.service))
                        return "service: array expected";
                    for (var i = 0; i < message.service.length; ++i) {
                        var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                        if (error)
                            return "service." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (var i = 0; i < message.extension.length; ++i) {
                        var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.FileOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.source_code_info != null && message.hasOwnProperty("source_code_info")) {
                    var error = $root.google.protobuf.SourceCodeInfo.verify(message.source_code_info);
                    if (error)
                        return "source_code_info." + error;
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    if (!$util.isString(message.syntax))
                        return "syntax: string expected";
                if (message.edition != null && message.hasOwnProperty("edition"))
                    switch (message.edition) {
                    default:
                        return "edition: enum value expected";
                    case 0:
                    case 900:
                    case 998:
                    case 999:
                    case 1000:
                    case 1001:
                    case 1:
                    case 2:
                    case 99997:
                    case 99998:
                    case 99999:
                    case 2147483647:
                        break;
                    }
                return null;
            };

            /**
             * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             */
            FileDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.FileDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object["package"] != null)
                    message["package"] = String(object["package"]);
                if (object.dependency) {
                    if (!Array.isArray(object.dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                    message.dependency = [];
                    for (var i = 0; i < object.dependency.length; ++i)
                        message.dependency[i] = String(object.dependency[i]);
                }
                if (object.public_dependency) {
                    if (!Array.isArray(object.public_dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.public_dependency: array expected");
                    message.public_dependency = [];
                    for (var i = 0; i < object.public_dependency.length; ++i)
                        message.public_dependency[i] = object.public_dependency[i] | 0;
                }
                if (object.weak_dependency) {
                    if (!Array.isArray(object.weak_dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.weak_dependency: array expected");
                    message.weak_dependency = [];
                    for (var i = 0; i < object.weak_dependency.length; ++i)
                        message.weak_dependency[i] = object.weak_dependency[i] | 0;
                }
                if (object.option_dependency) {
                    if (!Array.isArray(object.option_dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.option_dependency: array expected");
                    message.option_dependency = [];
                    for (var i = 0; i < object.option_dependency.length; ++i)
                        message.option_dependency[i] = String(object.option_dependency[i]);
                }
                if (object.message_type) {
                    if (!Array.isArray(object.message_type))
                        throw TypeError(".google.protobuf.FileDescriptorProto.message_type: array expected");
                    message.message_type = [];
                    for (var i = 0; i < object.message_type.length; ++i) {
                        if (typeof object.message_type[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.message_type: object expected");
                        message.message_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.message_type[i]);
                    }
                }
                if (object.enum_type) {
                    if (!Array.isArray(object.enum_type))
                        throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: array expected");
                    message.enum_type = [];
                    for (var i = 0; i < object.enum_type.length; ++i) {
                        if (typeof object.enum_type[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: object expected");
                        message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                    }
                }
                if (object.service) {
                    if (!Array.isArray(object.service))
                        throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                    message.service = [];
                    for (var i = 0; i < object.service.length; ++i) {
                        if (typeof object.service[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                        message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                    message.extension = [];
                    for (var i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                }
                if (object.source_code_info != null) {
                    if (typeof object.source_code_info !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.source_code_info: object expected");
                    message.source_code_info = $root.google.protobuf.SourceCodeInfo.fromObject(object.source_code_info);
                }
                if (object.syntax != null)
                    message.syntax = String(object.syntax);
                switch (object.edition) {
                default:
                    if (typeof object.edition === "number") {
                        message.edition = object.edition;
                        break;
                    }
                    break;
                case "EDITION_UNKNOWN":
                case 0:
                    message.edition = 0;
                    break;
                case "EDITION_LEGACY":
                case 900:
                    message.edition = 900;
                    break;
                case "EDITION_PROTO2":
                case 998:
                    message.edition = 998;
                    break;
                case "EDITION_PROTO3":
                case 999:
                    message.edition = 999;
                    break;
                case "EDITION_2023":
                case 1000:
                    message.edition = 1000;
                    break;
                case "EDITION_2024":
                case 1001:
                    message.edition = 1001;
                    break;
                case "EDITION_1_TEST_ONLY":
                case 1:
                    message.edition = 1;
                    break;
                case "EDITION_2_TEST_ONLY":
                case 2:
                    message.edition = 2;
                    break;
                case "EDITION_99997_TEST_ONLY":
                case 99997:
                    message.edition = 99997;
                    break;
                case "EDITION_99998_TEST_ONLY":
                case 99998:
                    message.edition = 99998;
                    break;
                case "EDITION_99999_TEST_ONLY":
                case 99999:
                    message.edition = 99999;
                    break;
                case "EDITION_MAX":
                case 2147483647:
                    message.edition = 2147483647;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.dependency = [];
                    object.message_type = [];
                    object.enum_type = [];
                    object.service = [];
                    object.extension = [];
                    object.public_dependency = [];
                    object.weak_dependency = [];
                    object.option_dependency = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object["package"] = "";
                    object.options = null;
                    object.source_code_info = null;
                    object.syntax = "";
                    object.edition = options.enums === String ? "EDITION_UNKNOWN" : 0;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message["package"] != null && message.hasOwnProperty("package"))
                    object["package"] = message["package"];
                if (message.dependency && message.dependency.length) {
                    object.dependency = [];
                    for (var j = 0; j < message.dependency.length; ++j)
                        object.dependency[j] = message.dependency[j];
                }
                if (message.message_type && message.message_type.length) {
                    object.message_type = [];
                    for (var j = 0; j < message.message_type.length; ++j)
                        object.message_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.message_type[j], options);
                }
                if (message.enum_type && message.enum_type.length) {
                    object.enum_type = [];
                    for (var j = 0; j < message.enum_type.length; ++j)
                        object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                }
                if (message.service && message.service.length) {
                    object.service = [];
                    for (var j = 0; j < message.service.length; ++j)
                        object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (var j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                if (message.source_code_info != null && message.hasOwnProperty("source_code_info"))
                    object.source_code_info = $root.google.protobuf.SourceCodeInfo.toObject(message.source_code_info, options);
                if (message.public_dependency && message.public_dependency.length) {
                    object.public_dependency = [];
                    for (var j = 0; j < message.public_dependency.length; ++j)
                        object.public_dependency[j] = message.public_dependency[j];
                }
                if (message.weak_dependency && message.weak_dependency.length) {
                    object.weak_dependency = [];
                    for (var j = 0; j < message.weak_dependency.length; ++j)
                        object.weak_dependency[j] = message.weak_dependency[j];
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    object.syntax = message.syntax;
                if (message.edition != null && message.hasOwnProperty("edition"))
                    object.edition = options.enums === String ? $root.google.protobuf.Edition[message.edition] === undefined ? message.edition : $root.google.protobuf.Edition[message.edition] : message.edition;
                if (message.option_dependency && message.option_dependency.length) {
                    object.option_dependency = [];
                    for (var j = 0; j < message.option_dependency.length; ++j)
                        object.option_dependency[j] = message.option_dependency[j];
                }
                return object;
            };

            /**
             * Converts this FileDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for FileDescriptorProto
             * @function getTypeUrl
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            FileDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.FileDescriptorProto";
            };

            return FileDescriptorProto;
        })();

        protobuf.DescriptorProto = (function() {

            /**
             * Properties of a DescriptorProto.
             * @memberof google.protobuf
             * @interface IDescriptorProto
             * @property {string|null} [name] DescriptorProto name
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [nested_type] DescriptorProto nested_type
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] DescriptorProto enum_type
             * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extension_range] DescriptorProto extension_range
             * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneof_decl] DescriptorProto oneof_decl
             * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
             * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reserved_range] DescriptorProto reserved_range
             * @property {Array.<string>|null} [reserved_name] DescriptorProto reserved_name
             * @property {google.protobuf.SymbolVisibility|null} [visibility] DescriptorProto visibility
             */

            /**
             * Constructs a new DescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a DescriptorProto.
             * @implements IDescriptorProto
             * @constructor
             * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
             */
            function DescriptorProto(properties) {
                this.field = [];
                this.extension = [];
                this.nested_type = [];
                this.enum_type = [];
                this.extension_range = [];
                this.oneof_decl = [];
                this.reserved_range = [];
                this.reserved_name = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.name = "";

            /**
             * DescriptorProto field.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.field = $util.emptyArray;

            /**
             * DescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * DescriptorProto nested_type.
             * @member {Array.<google.protobuf.IDescriptorProto>} nested_type
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.nested_type = $util.emptyArray;

            /**
             * DescriptorProto enum_type.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.enum_type = $util.emptyArray;

            /**
             * DescriptorProto extension_range.
             * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extension_range
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extension_range = $util.emptyArray;

            /**
             * DescriptorProto oneof_decl.
             * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneof_decl
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.oneof_decl = $util.emptyArray;

            /**
             * DescriptorProto options.
             * @member {google.protobuf.IMessageOptions|null|undefined} options
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.options = null;

            /**
             * DescriptorProto reserved_range.
             * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reserved_range
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reserved_range = $util.emptyArray;

            /**
             * DescriptorProto reserved_name.
             * @member {Array.<string>} reserved_name
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reserved_name = $util.emptyArray;

            /**
             * DescriptorProto visibility.
             * @member {google.protobuf.SymbolVisibility} visibility
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.visibility = 0;

            /**
             * Creates a new DescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
             */
            DescriptorProto.create = function create(properties) {
                return new DescriptorProto(properties);
            };

            /**
             * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.field != null && message.field.length)
                    for (var i = 0; i < message.field.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.nested_type != null && message.nested_type.length)
                    for (var i = 0; i < message.nested_type.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(message.nested_type[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.enum_type != null && message.enum_type.length)
                    for (var i = 0; i < message.enum_type.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.extension_range != null && message.extension_range.length)
                    for (var i = 0; i < message.extension_range.length; ++i)
                        $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extension_range[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.extension != null && message.extension.length)
                    for (var i = 0; i < message.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.oneof_decl != null && message.oneof_decl.length)
                    for (var i = 0; i < message.oneof_decl.length; ++i)
                        $root.google.protobuf.OneofDescriptorProto.encode(message.oneof_decl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.reserved_range != null && message.reserved_range.length)
                    for (var i = 0; i < message.reserved_range.length; ++i)
                        $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reserved_range[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.reserved_name != null && message.reserved_name.length)
                    for (var i = 0; i < message.reserved_name.length; ++i)
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.reserved_name[i]);
                if (message.visibility != null && Object.hasOwnProperty.call(message, "visibility"))
                    writer.uint32(/* id 11, wireType 0 =*/88).int32(message.visibility);
                return writer;
            };

            /**
             * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DescriptorProto.decode = function decode(reader, length, error) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    if (tag === error)
                        break;
                    switch (tag >>> 3) {
                    case 1: {
                            message.name = reader.string();
                            break;
                        }
                    case 2: {
                            if (!(message.field && message.field.length))
                                message.field = [];
                            message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 6: {
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            if (!(message.nested_type && message.nested_type.length))
                                message.nested_type = [];
                            message.nested_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 4: {
                            if (!(message.enum_type && message.enum_type.length))
                                message.enum_type = [];
                            message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 5: {
                            if (!(message.extension_range && message.extension_range.length))
                                message.extension_range = [];
                            message.extension_range.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                            break;
                        }
                    case 8: {
                            if (!(message.oneof_decl && message.oneof_decl.length))
                                message.oneof_decl = [];
                            message.oneof_decl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 7: {
                            message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                            break;
                        }
                    case 9: {
                            if (!(message.reserved_range && message.reserved_range.length))
                                message.reserved_range = [];
                            message.reserved_range.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                            break;
                        }
                    case 10: {
                            if (!(message.reserved_name && message.reserved_name.length))
                                message.reserved_name = [];
                            message.reserved_name.push(reader.string());
                            break;
                        }
                    case 11: {
                            message.visibility = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DescriptorProto message.
             * @function verify
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.field != null && message.hasOwnProperty("field")) {
                    if (!Array.isArray(message.field))
                        return "field: array expected";
                    for (var i = 0; i < message.field.length; ++i) {
                        var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                        if (error)
                            return "field." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (var i = 0; i < message.extension.length; ++i) {
                        var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.nested_type != null && message.hasOwnProperty("nested_type")) {
                    if (!Array.isArray(message.nested_type))
                        return "nested_type: array expected";
                    for (var i = 0; i < message.nested_type.length; ++i) {
                        var error = $root.google.protobuf.DescriptorProto.verify(message.nested_type[i]);
                        if (error)
                            return "nested_type." + error;
                    }
                }
                if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                    if (!Array.isArray(message.enum_type))
                        return "enum_type: array expected";
                    for (var i = 0; i < message.enum_type.length; ++i) {
                        var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                        if (error)
                            return "enum_type." + error;
                    }
                }
                if (message.extension_range != null && message.hasOwnProperty("extension_range")) {
                    if (!Array.isArray(message.extension_range))
                        return "extension_range: array expected";
                    for (var i = 0; i < message.extension_range.length; ++i) {
                        var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extension_range[i]);
                        if (error)
                            return "extension_range." + error;
                    }
                }
                if (message.oneof_decl != null && message.hasOwnProperty("oneof_decl")) {
                    if (!Array.isArray(message.oneof_decl))
                        return "oneof_decl: array expected";
                    for (var i = 0; i < message.oneof_decl.length; ++i) {
                        var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneof_decl[i]);
                        if (error)
                            return "oneof_decl." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.MessageOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.reserved_range != null && message.hasOwnProperty("reserved_range")) {
                    if (!Array.isArray(message.reserved_range))
                        return "reserved_range: array expected";
                    for (var i = 0; i < message.reserved_range.length; ++i) {
                        var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reserved_range[i]);
                        if (error)
                            return "reserved_range." + error;
                    }
                }
                if (message.reserved_name != null && message.hasOwnProperty("reserved_name")) {
                    if (!Array.isArray(message.reserved_name))
                        return "reserved_name: array expected";
                    for (var i = 0; i < message.reserved_name.length; ++i)
                        if (!$util.isString(message.reserved_name[i]))
                            return "reserved_name: string[] expected";
                }
                if (message.visibility != null && message.hasOwnProperty("visibility"))
                    switch (message.visibility) {
                    default:
                        return "visibility: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                return null;
            };

            /**
             * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             */
            DescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto)
                    return object;
                var message = new $root.google.protobuf.DescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.field) {
                    if (!Array.isArray(object.field))
                        throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                    message.field = [];
                    for (var i = 0; i < object.field.length; ++i) {
                        if (typeof object.field[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                        message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                    message.extension = [];
                    for (var i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.nested_type) {
                    if (!Array.isArray(object.nested_type))
                        throw TypeError(".google.protobuf.DescriptorProto.nested_type: array expected");
                    message.nested_type = [];
                    for (var i = 0; i < object.nested_type.length; ++i) {
                        if (typeof object.nested_type[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.nested_type: object expected");
                        message.nested_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nested_type[i]);
                    }
                }
                if (object.enum_type) {
                    if (!Array.isArray(object.enum_type))
                        throw TypeError(".google.protobuf.DescriptorProto.enum_type: array expected");
                    message.enum_type = [];
                    for (var i = 0; i < object.enum_type.length; ++i) {
                        if (typeof object.enum_type[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.enum_type: object expected");
                        message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                    }
                }
                if (object.extension_range) {
                    if (!Array.isArray(object.extension_range))
                        throw TypeError(".google.protobuf.DescriptorProto.extension_range: array expected");
                    message.extension_range = [];
                    for (var i = 0; i < object.extension_range.length; ++i) {
                        if (typeof object.extension_range[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extension_range: object expected");
                        message.extension_range[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extension_range[i]);
                    }
                }
                if (object.oneof_decl) {
                    if (!Array.isArray(object.oneof_decl))
                        throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: array expected");
                    message.oneof_decl = [];
                    for (var i = 0; i < object.oneof_decl.length; ++i) {
                        if (typeof object.oneof_decl[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: object expected");
                        message.oneof_decl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneof_decl[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                }
                if (object.reserved_range) {
                    if (!Array.isArray(object.reserved_range))
                        throw TypeError(".google.protobuf.DescriptorProto.reserved_range: array expected");
                    message.reserved_range = [];
                    for (var i = 0; i < object.reserved_range.length; ++i) {
                        if (typeof object.reserved_range[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.reserved_range: object expected");
                        message.reserved_range[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reserved_range[i]);
                    }
                }
                if (object.reserved_name) {
                    if (!Array.isArray(object.reserved_name))
                        throw TypeError(".google.protobuf.DescriptorProto.reserved_name: array expected");
                    message.reserved_name = [];
                    for (var i = 0; i < object.reserved_name.length; ++i)
                        message.reserved_name[i] = String(object.reserved_name[i]);
                }
                switch (object.visibility) {
                default:
                    if (typeof object.visibility === "number") {
                        message.visibility = object.visibility;
                        break;
                    }
                    break;
                case "VISIBILITY_UNSET":
                case 0:
                    message.visibility = 0;
                    break;
                case "VISIBILITY_LOCAL":
                case 1:
                    message.visibility = 1;
                    break;
                case "VISIBILITY_EXPORT":
                case 2:
                    message.visibility = 2;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.DescriptorProto} message DescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.field = [];
                    object.nested_type = [];
                    object.enum_type = [];
                    object.extension_range = [];
                    object.extension = [];
                    object.oneof_decl = [];
                    object.reserved_range = [];
                    object.reserved_name = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                    object.visibility = options.enums === String ? "VISIBILITY_UNSET" : 0;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.field && message.field.length) {
                    object.field = [];
                    for (var j = 0; j < message.field.length; ++j)
                        object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                }
                if (message.nested_type && message.nested_type.length) {
                    object.nested_type = [];
                    for (var j = 0; j < message.nested_type.length; ++j)
                        object.nested_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.nested_type[j], options);
                }
                if (message.enum_type && message.enum_type.length) {
                    object.enum_type = [];
                    for (var j = 0; j < message.enum_type.length; ++j)
                        object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                }
                if (message.extension_range && message.extension_range.length) {
                    object.extension_range = [];
                    for (var j = 0; j < message.extension_range.length; ++j)
                        object.extension_range[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extension_range[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (var j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                if (message.oneof_decl && message.oneof_decl.length) {
                    object.oneof_decl = [];
                    for (var j = 0; j < message.oneof_decl.length; ++j)
                        object.oneof_decl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneof_decl[j], options);
                }
                if (message.reserved_range && message.reserved_range.length) {
                    object.reserved_range = [];
                    for (var j = 0; j < message.reserved_range.length; ++j)
                        object.reserved_range[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reserved_range[j], options);
                }
                if (message.reserved_name && message.reserved_name.length) {
                    object.reserved_name = [];
                    for (var j = 0; j < message.reserved_name.length; ++j)
                        object.reserved_name[j] = message.reserved_name[j];
                }
                if (message.visibility != null && message.hasOwnProperty("visibility"))
                    object.visibility = options.enums === String ? $root.google.protobuf.SymbolVisibility[message.visibility] === undefined ? message.visibility : $root.google.protobuf.SymbolVisibility[message.visibility] : message.visibility;
                return object;
            };

            /**
             * Converts this DescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.DescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for DescriptorProto
             * @function getTypeUrl
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            DescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.DescriptorProto";
            };

            DescriptorProto.ExtensionRange = (function() {

                /**
                 * Properties of an ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IExtensionRange
                 * @property {number|null} [start] ExtensionRange start
                 * @property {number|null} [end] ExtensionRange end
                 * @property {google.protobuf.IExtensionRangeOptions|null} [options] ExtensionRange options
                 */

                /**
                 * Constructs a new ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents an ExtensionRange.
                 * @implements IExtensionRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                 */
                function ExtensionRange(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ExtensionRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.start = 0;

                /**
                 * ExtensionRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.end = 0;

                /**
                 * ExtensionRange options.
                 * @member {google.protobuf.IExtensionRangeOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.options = null;

                /**
                 * Creates a new ExtensionRange instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                 */
                ExtensionRange.create = function create(properties) {
                    return new ExtensionRange(properties);
                };

                /**
                 * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRange.decode = function decode(reader, length, error) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        if (tag === error)
                            break;
                        switch (tag >>> 3) {
                        case 1: {
                                message.start = reader.int32();
                                break;
                            }
                        case 2: {
                                message.end = reader.int32();
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an ExtensionRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };

                /**
                 * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 */
                ExtensionRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                        message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                        object.options = null;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                    return object;
                };

                /**
                 * Converts this ExtensionRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for ExtensionRange
                 * @function getTypeUrl
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ExtensionRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.DescriptorProto.ExtensionRange";
                };

                return ExtensionRange;
            })();

            DescriptorProto.ReservedRange = (function() {

                /**
                 * Properties of a ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IReservedRange
                 * @property {number|null} [start] ReservedRange start
                 * @property {number|null} [end] ReservedRange end
                 */

                /**
                 * Constructs a new ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents a ReservedRange.
                 * @implements IReservedRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                 */
                function ReservedRange(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ReservedRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.start = 0;

                /**
                 * ReservedRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.end = 0;

                /**
                 * Creates a new ReservedRange instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                 */
                ReservedRange.create = function create(properties) {
                    return new ReservedRange(properties);
                };

                /**
                 * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReservedRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReservedRange.decode = function decode(reader, length, error) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        if (tag === error)
                            break;
                        switch (tag >>> 3) {
                        case 1: {
                                message.start = reader.int32();
                                break;
                            }
                        case 2: {
                                message.end = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ReservedRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ReservedRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 */
                ReservedRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ReservedRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this ReservedRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ReservedRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for ReservedRange
                 * @function getTypeUrl
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.DescriptorProto.ReservedRange";
                };

                return ReservedRange;
            })();

            return DescriptorProto;
        })();

        protobuf.ExtensionRangeOptions = (function() {

            /**
             * Properties of an ExtensionRangeOptions.
             * @memberof google.protobuf
             * @interface IExtensionRangeOptions
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] ExtensionRangeOptions uninterpreted_option
             * @property {Array.<google.protobuf.ExtensionRangeOptions.IDeclaration>|null} [declaration] ExtensionRangeOptions declaration
             * @property {google.protobuf.IFeatureSet|null} [features] ExtensionRangeOptions features
             * @property {google.protobuf.ExtensionRangeOptions.VerificationState|null} [verification] ExtensionRangeOptions verification
             */

            /**
             * Constructs a new ExtensionRangeOptions.
             * @memberof google.protobuf
             * @classdesc Represents an ExtensionRangeOptions.
             * @implements IExtensionRangeOptions
             * @constructor
             * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
             */
            function ExtensionRangeOptions(properties) {
                this.uninterpreted_option = [];
                this.declaration = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ExtensionRangeOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.ExtensionRangeOptions
             * @instance
             */
            ExtensionRangeOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * ExtensionRangeOptions declaration.
             * @member {Array.<google.protobuf.ExtensionRangeOptions.IDeclaration>} declaration
             * @memberof google.protobuf.ExtensionRangeOptions
             * @instance
             */
            ExtensionRangeOptions.prototype.declaration = $util.emptyArray;

            /**
             * ExtensionRangeOptions features.
             * @member {google.protobuf.IFeatureSet|null|undefined} features
             * @memberof google.protobuf.ExtensionRangeOptions
             * @instance
             */
            ExtensionRangeOptions.prototype.features = null;

            /**
             * ExtensionRangeOptions verification.
             * @member {google.protobuf.ExtensionRangeOptions.VerificationState} verification
             * @memberof google.protobuf.ExtensionRangeOptions
             * @instance
             */
            ExtensionRangeOptions.prototype.verification = 1;

            /**
             * Creates a new ExtensionRangeOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
             * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions instance
             */
            ExtensionRangeOptions.create = function create(properties) {
                return new ExtensionRangeOptions(properties);
            };

            /**
             * Encodes the specified ExtensionRangeOptions message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExtensionRangeOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.declaration != null && message.declaration.length)
                    for (var i = 0; i < message.declaration.length; ++i)
                        $root.google.protobuf.ExtensionRangeOptions.Declaration.encode(message.declaration[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.verification != null && Object.hasOwnProperty.call(message, "verification"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.verification);
                if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                    $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 50, wireType 2 =*/402).fork()).ldelim();
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (var i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ExtensionRangeOptions message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ExtensionRangeOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExtensionRangeOptions.decode = function decode(reader, length, error) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    if (tag === error)
                        break;
                    switch (tag >>> 3) {
                    case 999: {
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        }
                    case 2: {
                            if (!(message.declaration && message.declaration.length))
                                message.declaration = [];
                            message.declaration.push($root.google.protobuf.ExtensionRangeOptions.Declaration.decode(reader, reader.uint32()));
                            break;
                        }
                    case 50: {
                            message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.verification = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ExtensionRangeOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ExtensionRangeOptions message.
             * @function verify
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ExtensionRangeOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message.declaration != null && message.hasOwnProperty("declaration")) {
                    if (!Array.isArray(message.declaration))
                        return "declaration: array expected";
                    for (var i = 0; i < message.declaration.length; ++i) {
                        var error = $root.google.protobuf.ExtensionRangeOptions.Declaration.verify(message.declaration[i]);
                        if (error)
                            return "declaration." + error;
                    }
                }
                if (message.features != null && message.hasOwnProperty("features")) {
                    var error = $root.google.protobuf.FeatureSet.verify(message.features);
                    if (error)
                        return "features." + error;
                }
                if (message.verification != null && message.hasOwnProperty("verification"))
                    switch (message.verification) {
                    default:
                        return "verification: enum value expected";
                    case 0:
                    case 1:
                        break;
                    }
                return null;
            };

            /**
             * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
             */
            ExtensionRangeOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                    return object;
                var message = new $root.google.protobuf.ExtensionRangeOptions();
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object.declaration) {
                    if (!Array.isArray(object.declaration))
                        throw TypeError(".google.protobuf.ExtensionRangeOptions.declaration: array expected");
                    message.declaration = [];
                    for (var i = 0; i < object.declaration.length; ++i) {
                        if (typeof object.declaration[i] !== "object")
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.declaration: object expected");
                        message.declaration[i] = $root.google.protobuf.ExtensionRangeOptions.Declaration.fromObject(object.declaration[i]);
                    }
                }
                if (object.features != null) {
                    if (typeof object.features !== "object")
                        throw TypeError(".google.protobuf.ExtensionRangeOptions.features: object expected");
                    message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                }
                switch (object.verification) {
                case "DECLARATION":
                case 0:
                    message.verification = 0;
                    break;
                default:
                    if (typeof object.verification === "number") {
                        message.verification = object.verification;
                        break;
                    }
                    break;
                case "UNVERIFIED":
                case 1:
                    message.verification = 1;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {google.protobuf.ExtensionRangeOptions} message ExtensionRangeOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ExtensionRangeOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.declaration = [];
                    object.uninterpreted_option = [];
                }
                if (options.defaults) {
                    object.verification = options.enums === String ? "UNVERIFIED" : 1;
                    object.features = null;
                }
                if (message.declaration && message.declaration.length) {
                    object.declaration = [];
                    for (var j = 0; j < message.declaration.length; ++j)
                        object.declaration[j] = $root.google.protobuf.ExtensionRangeOptions.Declaration.toObject(message.declaration[j], options);
                }
                if (message.verification != null && message.hasOwnProperty("verification"))
                    object.verification = options.enums === String ? $root.google.protobuf.ExtensionRangeOptions.VerificationState[message.verification] === undefined ? message.verification : $root.google.protobuf.ExtensionRangeOptions.VerificationState[message.verification] : message.verification;
                if (message.features != null && message.hasOwnProperty("features"))
                    object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (var j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                return object;
            };

            /**
             * Converts this ExtensionRangeOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.ExtensionRangeOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ExtensionRangeOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ExtensionRangeOptions
             * @function getTypeUrl
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ExtensionRangeOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.ExtensionRangeOptions";
            };

            ExtensionRangeOptions.Declaration = (function() {

                /**
                 * Properties of a Declaration.
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @interface IDeclaration
                 * @property {number|null} [number] Declaration number
                 * @property {string|null} [full_name] Declaration full_name
                 * @property {string|null} [type] Declaration type
                 * @property {boolean|null} [reserved] Declaration reserved
                 * @property {boolean|null} [repeated] Declaration repeated
                 */

                /**
                 * Constructs a new Declaration.
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @classdesc Represents a Declaration.
                 * @implements IDeclaration
                 * @constructor
                 * @param {google.protobuf.ExtensionRangeOptions.IDeclaration=} [properties] Properties to set
                 */
                function Declaration(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Declaration number.
                 * @member {number} number
                 * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                 * @instance
                 */
                Declaration.prototype.number = 0;

                /**
                 * Declaration full_name.
                 * @member {string} full_name
                 * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                 * @instance
                 */
                Declaration.prototype.full_name = "";

                /**
                 * Declaration type.
                 * @member {string} type
                 * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                 * @instance
                 */
                Declaration.prototype.type = "";

                /**
                 * Declaration reserved.
                 * @member {boolean} reserved
                 * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                 * @instance
                 */
                Declaration.prototype.reserved = false;

                /**
                 * Declaration repeated.
                 * @member {boolean} repeated
                 * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                 * @instance
                 */
                Declaration.prototype.repeated = false;

                /**
                 * Creates a new Declaration instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                 * @static
                 * @param {google.protobuf.ExtensionRangeOptions.IDeclaration=} [properties] Properties to set
                 * @returns {google.protobuf.ExtensionRangeOptions.Declaration} Declaration instance
                 */
                Declaration.create = function create(properties) {
                    return new Declaration(properties);
                };

                /**
                 * Encodes the specified Declaration message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.Declaration.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                 * @static
                 * @param {google.protobuf.ExtensionRangeOptions.IDeclaration} message Declaration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Declaration.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.number);
                    if (message.full_name != null && Object.hasOwnProperty.call(message, "full_name"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.full_name);
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.type);
                    if (message.reserved != null && Object.hasOwnProperty.call(message, "reserved"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.reserved);
                    if (message.repeated != null && Object.hasOwnProperty.call(message, "repeated"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.repeated);
                    return writer;
                };

                /**
                 * Encodes the specified Declaration message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.Declaration.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                 * @static
                 * @param {google.protobuf.ExtensionRangeOptions.IDeclaration} message Declaration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Declaration.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Declaration message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ExtensionRangeOptions.Declaration} Declaration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Declaration.decode = function decode(reader, length, error) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions.Declaration();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        if (tag === error)
                            break;
                        switch (tag >>> 3) {
                        case 1: {
                                message.number = reader.int32();
                                break;
                            }
                        case 2: {
                                message.full_name = reader.string();
                                break;
                            }
                        case 3: {
                                message.type = reader.string();
                                break;
                            }
                        case 5: {
                                message.reserved = reader.bool();
                                break;
                            }
                        case 6: {
                                message.repeated = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Declaration message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ExtensionRangeOptions.Declaration} Declaration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Declaration.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Declaration message.
                 * @function verify
                 * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Declaration.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.full_name != null && message.hasOwnProperty("full_name"))
                        if (!$util.isString(message.full_name))
                            return "full_name: string expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.reserved != null && message.hasOwnProperty("reserved"))
                        if (typeof message.reserved !== "boolean")
                            return "reserved: boolean expected";
                    if (message.repeated != null && message.hasOwnProperty("repeated"))
                        if (typeof message.repeated !== "boolean")
                            return "repeated: boolean expected";
                    return null;
                };

                /**
                 * Creates a Declaration message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ExtensionRangeOptions.Declaration} Declaration
                 */
                Declaration.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ExtensionRangeOptions.Declaration)
                        return object;
                    var message = new $root.google.protobuf.ExtensionRangeOptions.Declaration();
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.full_name != null)
                        message.full_name = String(object.full_name);
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.reserved != null)
                        message.reserved = Boolean(object.reserved);
                    if (object.repeated != null)
                        message.repeated = Boolean(object.repeated);
                    return message;
                };

                /**
                 * Creates a plain object from a Declaration message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                 * @static
                 * @param {google.protobuf.ExtensionRangeOptions.Declaration} message Declaration
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Declaration.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.number = 0;
                        object.full_name = "";
                        object.type = "";
                        object.reserved = false;
                        object.repeated = false;
                    }
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.full_name != null && message.hasOwnProperty("full_name"))
                        object.full_name = message.full_name;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.reserved != null && message.hasOwnProperty("reserved"))
                        object.reserved = message.reserved;
                    if (message.repeated != null && message.hasOwnProperty("repeated"))
                        object.repeated = message.repeated;
                    return object;
                };

                /**
                 * Converts this Declaration to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Declaration.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Declaration
                 * @function getTypeUrl
                 * @memberof google.protobuf.ExtensionRangeOptions.Declaration
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Declaration.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ExtensionRangeOptions.Declaration";
                };

                return Declaration;
            })();

            /**
             * VerificationState enum.
             * @name google.protobuf.ExtensionRangeOptions.VerificationState
             * @enum {number}
             * @property {number} DECLARATION=0 DECLARATION value
             * @property {number} UNVERIFIED=1 UNVERIFIED value
             */
            ExtensionRangeOptions.VerificationState = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "DECLARATION"] = 0;
                values[valuesById[1] = "UNVERIFIED"] = 1;
                return values;
            })();

            return ExtensionRangeOptions;
        })();

        protobuf.FieldDescriptorProto = (function() {

            /**
             * Properties of a FieldDescriptorProto.
             * @memberof google.protobuf
             * @interface IFieldDescriptorProto
             * @property {string|null} [name] FieldDescriptorProto name
             * @property {number|null} [number] FieldDescriptorProto number
             * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
             * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
             * @property {string|null} [type_name] FieldDescriptorProto type_name
             * @property {string|null} [extendee] FieldDescriptorProto extendee
             * @property {string|null} [default_value] FieldDescriptorProto default_value
             * @property {number|null} [oneof_index] FieldDescriptorProto oneof_index
             * @property {string|null} [json_name] FieldDescriptorProto json_name
             * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
             * @property {boolean|null} [proto3_optional] FieldDescriptorProto proto3_optional
             */

            /**
             * Constructs a new FieldDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FieldDescriptorProto.
             * @implements IFieldDescriptorProto
             * @constructor
             * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
             */
            function FieldDescriptorProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.name = "";

            /**
             * FieldDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.number = 0;

            /**
             * FieldDescriptorProto label.
             * @member {google.protobuf.FieldDescriptorProto.Label} label
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.label = 1;

            /**
             * FieldDescriptorProto type.
             * @member {google.protobuf.FieldDescriptorProto.Type} type
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.type = 1;

            /**
             * FieldDescriptorProto type_name.
             * @member {string} type_name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.type_name = "";

            /**
             * FieldDescriptorProto extendee.
             * @member {string} extendee
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.extendee = "";

            /**
             * FieldDescriptorProto default_value.
             * @member {string} default_value
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.default_value = "";

            /**
             * FieldDescriptorProto oneof_index.
             * @member {number} oneof_index
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.oneof_index = 0;

            /**
             * FieldDescriptorProto json_name.
             * @member {string} json_name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.json_name = "";

            /**
             * FieldDescriptorProto options.
             * @member {google.protobuf.IFieldOptions|null|undefined} options
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.options = null;

            /**
             * FieldDescriptorProto proto3_optional.
             * @member {boolean} proto3_optional
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.proto3_optional = false;

            /**
             * Creates a new FieldDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
             */
            FieldDescriptorProto.create = function create(properties) {
                return new FieldDescriptorProto(properties);
            };

            /**
             * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                if (message.type_name != null && Object.hasOwnProperty.call(message, "type_name"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.type_name);
                if (message.default_value != null && Object.hasOwnProperty.call(message, "default_value"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.default_value);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.oneof_index != null && Object.hasOwnProperty.call(message, "oneof_index"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneof_index);
                if (message.json_name != null && Object.hasOwnProperty.call(message, "json_name"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.json_name);
                if (message.proto3_optional != null && Object.hasOwnProperty.call(message, "proto3_optional"))
                    writer.uint32(/* id 17, wireType 0 =*/136).bool(message.proto3_optional);
                return writer;
            };

            /**
             * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldDescriptorProto.decode = function decode(reader, length, error) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    if (tag === error)
                        break;
                    switch (tag >>> 3) {
                    case 1: {
                            message.name = reader.string();
                            break;
                        }
                    case 3: {
                            message.number = reader.int32();
                            break;
                        }
                    case 4: {
                            message.label = reader.int32();
                            break;
                        }
                    case 5: {
                            message.type = reader.int32();
                            break;
                        }
                    case 6: {
                            message.type_name = reader.string();
                            break;
                        }
                    case 2: {
                            message.extendee = reader.string();
                            break;
                        }
                    case 7: {
                            message.default_value = reader.string();
                            break;
                        }
                    case 9: {
                            message.oneof_index = reader.int32();
                            break;
                        }
                    case 10: {
                            message.json_name = reader.string();
                            break;
                        }
                    case 8: {
                            message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                            break;
                        }
                    case 17: {
                            message.proto3_optional = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.label != null && message.hasOwnProperty("label"))
                    switch (message.label) {
                    default:
                        return "label: enum value expected";
                    case 1:
                    case 3:
                    case 2:
                        break;
                    }
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                        break;
                    }
                if (message.type_name != null && message.hasOwnProperty("type_name"))
                    if (!$util.isString(message.type_name))
                        return "type_name: string expected";
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    if (!$util.isString(message.extendee))
                        return "extendee: string expected";
                if (message.default_value != null && message.hasOwnProperty("default_value"))
                    if (!$util.isString(message.default_value))
                        return "default_value: string expected";
                if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                    if (!$util.isInteger(message.oneof_index))
                        return "oneof_index: integer expected";
                if (message.json_name != null && message.hasOwnProperty("json_name"))
                    if (!$util.isString(message.json_name))
                        return "json_name: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.FieldOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.proto3_optional != null && message.hasOwnProperty("proto3_optional"))
                    if (typeof message.proto3_optional !== "boolean")
                        return "proto3_optional: boolean expected";
                return null;
            };

            /**
             * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             */
            FieldDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.FieldDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                switch (object.label) {
                default:
                    if (typeof object.label === "number") {
                        message.label = object.label;
                        break;
                    }
                    break;
                case "LABEL_OPTIONAL":
                case 1:
                    message.label = 1;
                    break;
                case "LABEL_REPEATED":
                case 3:
                    message.label = 3;
                    break;
                case "LABEL_REQUIRED":
                case 2:
                    message.label = 2;
                    break;
                }
                switch (object.type) {
                default:
                    if (typeof object.type === "number") {
                        message.type = object.type;
                        break;
                    }
                    break;
                case "TYPE_DOUBLE":
                case 1:
                    message.type = 1;
                    break;
                case "TYPE_FLOAT":
                case 2:
                    message.type = 2;
                    break;
                case "TYPE_INT64":
                case 3:
                    message.type = 3;
                    break;
                case "TYPE_UINT64":
                case 4:
                    message.type = 4;
                    break;
                case "TYPE_INT32":
                case 5:
                    message.type = 5;
                    break;
                case "TYPE_FIXED64":
                case 6:
                    message.type = 6;
                    break;
                case "TYPE_FIXED32":
                case 7:
                    message.type = 7;
                    break;
                case "TYPE_BOOL":
                case 8:
                    message.type = 8;
                    break;
                case "TYPE_STRING":
                case 9:
                    message.type = 9;
                    break;
                case "TYPE_GROUP":
                case 10:
                    message.type = 10;
                    break;
                case "TYPE_MESSAGE":
                case 11:
                    message.type = 11;
                    break;
                case "TYPE_BYTES":
                case 12:
                    message.type = 12;
                    break;
                case "TYPE_UINT32":
                case 13:
                    message.type = 13;
                    break;
                case "TYPE_ENUM":
                case 14:
                    message.type = 14;
                    break;
                case "TYPE_SFIXED32":
                case 15:
                    message.type = 15;
                    break;
                case "TYPE_SFIXED64":
                case 16:
                    message.type = 16;
                    break;
                case "TYPE_SINT32":
                case 17:
                    message.type = 17;
                    break;
                case "TYPE_SINT64":
                case 18:
                    message.type = 18;
                    break;
                }
                if (object.type_name != null)
                    message.type_name = String(object.type_name);
                if (object.extendee != null)
                    message.extendee = String(object.extendee);
                if (object.default_value != null)
                    message.default_value = String(object.default_value);
                if (object.oneof_index != null)
                    message.oneof_index = object.oneof_index | 0;
                if (object.json_name != null)
                    message.json_name = String(object.json_name);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                }
                if (object.proto3_optional != null)
                    message.proto3_optional = Boolean(object.proto3_optional);
                return message;
            };

            /**
             * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.extendee = "";
                    object.number = 0;
                    object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                    object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                    object.type_name = "";
                    object.default_value = "";
                    object.options = null;
                    object.oneof_index = 0;
                    object.json_name = "";
                    object.proto3_optional = false;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    object.extendee = message.extendee;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.label != null && message.hasOwnProperty("label"))
                    object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] === undefined ? message.label : $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] === undefined ? message.type : $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                if (message.type_name != null && message.hasOwnProperty("type_name"))
                    object.type_name = message.type_name;
                if (message.default_value != null && message.hasOwnProperty("default_value"))
                    object.default_value = message.default_value;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                    object.oneof_index = message.oneof_index;
                if (message.json_name != null && message.hasOwnProperty("json_name"))
                    object.json_name = message.json_name;
                if (message.proto3_optional != null && message.hasOwnProperty("proto3_optional"))
                    object.proto3_optional = message.proto3_optional;
                return object;
            };

            /**
             * Converts this FieldDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for FieldDescriptorProto
             * @function getTypeUrl
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            FieldDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.FieldDescriptorProto";
            };

            /**
             * Type enum.
             * @name google.protobuf.FieldDescriptorProto.Type
             * @enum {number}
             * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
             * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
             * @property {number} TYPE_INT64=3 TYPE_INT64 value
             * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
             * @property {number} TYPE_INT32=5 TYPE_INT32 value
             * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
             * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
             * @property {number} TYPE_BOOL=8 TYPE_BOOL value
             * @property {number} TYPE_STRING=9 TYPE_STRING value
             * @property {number} TYPE_GROUP=10 TYPE_GROUP value
             * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
             * @property {number} TYPE_BYTES=12 TYPE_BYTES value
             * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
             * @property {number} TYPE_ENUM=14 TYPE_ENUM value
             * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
             * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
             * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
             * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
             */
            FieldDescriptorProto.Type = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                values[valuesById[2] = "TYPE_FLOAT"] = 2;
                values[valuesById[3] = "TYPE_INT64"] = 3;
                values[valuesById[4] = "TYPE_UINT64"] = 4;
                values[valuesById[5] = "TYPE_INT32"] = 5;
                values[valuesById[6] = "TYPE_FIXED64"] = 6;
                values[valuesById[7] = "TYPE_FIXED32"] = 7;
                values[valuesById[8] = "TYPE_BOOL"] = 8;
                values[valuesById[9] = "TYPE_STRING"] = 9;
                values[valuesById[10] = "TYPE_GROUP"] = 10;
                values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                values[valuesById[12] = "TYPE_BYTES"] = 12;
                values[valuesById[13] = "TYPE_UINT32"] = 13;
                values[valuesById[14] = "TYPE_ENUM"] = 14;
                values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                values[valuesById[17] = "TYPE_SINT32"] = 17;
                values[valuesById[18] = "TYPE_SINT64"] = 18;
                return values;
            })();

            /**
             * Label enum.
             * @name google.protobuf.FieldDescriptorProto.Label
             * @enum {number}
             * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
             * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
             * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
             */
            FieldDescriptorProto.Label = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                values[valuesById[3] = "LABEL_REPEATED"] = 3;
                values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                return values;
            })();

            return FieldDescriptorProto;
        })();

        protobuf.OneofDescriptorProto = (function() {

            /**
             * Properties of an OneofDescriptorProto.
             * @memberof google.protobuf
             * @interface IOneofDescriptorProto
             * @property {string|null} [name] OneofDescriptorProto name
             * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
             */

            /**
             * Constructs a new OneofDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an OneofDescriptorProto.
             * @implements IOneofDescriptorProto
             * @constructor
             * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
             */
            function OneofDescriptorProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.name = "";

            /**
             * OneofDescriptorProto options.
             * @member {google.protobuf.IOneofOptions|null|undefined} options
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.options = null;

            /**
             * Creates a new OneofDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
             */
            OneofDescriptorProto.create = function create(properties) {
                return new OneofDescriptorProto(properties);
            };

            /**
             * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofDescriptorProto.decode = function decode(reader, length, error) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    if (tag === error)
                        break;
                    switch (tag >>> 3) {
                    case 1: {
                            message.name = reader.string();
                            break;
                        }
                    case 2: {
                            message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.OneofOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             */
            OneofDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.OneofDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this OneofDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for OneofDescriptorProto
             * @function getTypeUrl
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            OneofDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.OneofDescriptorProto";
            };

            return OneofDescriptorProto;
        })();

        protobuf.EnumDescriptorProto = (function() {

            /**
             * Properties of an EnumDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumDescriptorProto
             * @property {string|null} [name] EnumDescriptorProto name
             * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
             * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
             * @property {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>|null} [reserved_range] EnumDescriptorProto reserved_range
             * @property {Array.<string>|null} [reserved_name] EnumDescriptorProto reserved_name
             * @property {google.protobuf.SymbolVisibility|null} [visibility] EnumDescriptorProto visibility
             */

            /**
             * Constructs a new EnumDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumDescriptorProto.
             * @implements IEnumDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
             */
            function EnumDescriptorProto(properties) {
                this.value = [];
                this.reserved_range = [];
                this.reserved_name = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.name = "";

            /**
             * EnumDescriptorProto value.
             * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.value = $util.emptyArray;

            /**
             * EnumDescriptorProto options.
             * @member {google.protobuf.IEnumOptions|null|undefined} options
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.options = null;

            /**
             * EnumDescriptorProto reserved_range.
             * @member {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>} reserved_range
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.reserved_range = $util.emptyArray;

            /**
             * EnumDescriptorProto reserved_name.
             * @member {Array.<string>} reserved_name
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.reserved_name = $util.emptyArray;

            /**
             * EnumDescriptorProto visibility.
             * @member {google.protobuf.SymbolVisibility} visibility
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.visibility = 0;

            /**
             * Creates a new EnumDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
             */
            EnumDescriptorProto.create = function create(properties) {
                return new EnumDescriptorProto(properties);
            };

            /**
             * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.value != null && message.value.length)
                    for (var i = 0; i < message.value.length; ++i)
                        $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.reserved_range != null && message.reserved_range.length)
                    for (var i = 0; i < message.reserved_range.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reserved_range[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.reserved_name != null && message.reserved_name.length)
                    for (var i = 0; i < message.reserved_name.length; ++i)
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.reserved_name[i]);
                if (message.visibility != null && Object.hasOwnProperty.call(message, "visibility"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.visibility);
                return writer;
            };

            /**
             * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumDescriptorProto.decode = function decode(reader, length, error) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    if (tag === error)
                        break;
                    switch (tag >>> 3) {
                    case 1: {
                            message.name = reader.string();
                            break;
                        }
                    case 2: {
                            if (!(message.value && message.value.length))
                                message.value = [];
                            message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            if (!(message.reserved_range && message.reserved_range.length))
                                message.reserved_range = [];
                            message.reserved_range.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                            break;
                        }
                    case 5: {
                            if (!(message.reserved_name && message.reserved_name.length))
                                message.reserved_name = [];
                            message.reserved_name.push(reader.string());
                            break;
                        }
                    case 6: {
                            message.visibility = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.value != null && message.hasOwnProperty("value")) {
                    if (!Array.isArray(message.value))
                        return "value: array expected";
                    for (var i = 0; i < message.value.length; ++i) {
                        var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                        if (error)
                            return "value." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.EnumOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.reserved_range != null && message.hasOwnProperty("reserved_range")) {
                    if (!Array.isArray(message.reserved_range))
                        return "reserved_range: array expected";
                    for (var i = 0; i < message.reserved_range.length; ++i) {
                        var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reserved_range[i]);
                        if (error)
                            return "reserved_range." + error;
                    }
                }
                if (message.reserved_name != null && message.hasOwnProperty("reserved_name")) {
                    if (!Array.isArray(message.reserved_name))
                        return "reserved_name: array expected";
                    for (var i = 0; i < message.reserved_name.length; ++i)
                        if (!$util.isString(message.reserved_name[i]))
                            return "reserved_name: string[] expected";
                }
                if (message.visibility != null && message.hasOwnProperty("visibility"))
                    switch (message.visibility) {
                    default:
                        return "visibility: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                return null;
            };

            /**
             * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             */
            EnumDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.EnumDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.value) {
                    if (!Array.isArray(object.value))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                    message.value = [];
                    for (var i = 0; i < object.value.length; ++i) {
                        if (typeof object.value[i] !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                        message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                }
                if (object.reserved_range) {
                    if (!Array.isArray(object.reserved_range))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.reserved_range: array expected");
                    message.reserved_range = [];
                    for (var i = 0; i < object.reserved_range.length; ++i) {
                        if (typeof object.reserved_range[i] !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reserved_range: object expected");
                        message.reserved_range[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reserved_range[i]);
                    }
                }
                if (object.reserved_name) {
                    if (!Array.isArray(object.reserved_name))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.reserved_name: array expected");
                    message.reserved_name = [];
                    for (var i = 0; i < object.reserved_name.length; ++i)
                        message.reserved_name[i] = String(object.reserved_name[i]);
                }
                switch (object.visibility) {
                default:
                    if (typeof object.visibility === "number") {
                        message.visibility = object.visibility;
                        break;
                    }
                    break;
                case "VISIBILITY_UNSET":
                case 0:
                    message.visibility = 0;
                    break;
                case "VISIBILITY_LOCAL":
                case 1:
                    message.visibility = 1;
                    break;
                case "VISIBILITY_EXPORT":
                case 2:
                    message.visibility = 2;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.value = [];
                    object.reserved_range = [];
                    object.reserved_name = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                    object.visibility = options.enums === String ? "VISIBILITY_UNSET" : 0;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.value && message.value.length) {
                    object.value = [];
                    for (var j = 0; j < message.value.length; ++j)
                        object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                if (message.reserved_range && message.reserved_range.length) {
                    object.reserved_range = [];
                    for (var j = 0; j < message.reserved_range.length; ++j)
                        object.reserved_range[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reserved_range[j], options);
                }
                if (message.reserved_name && message.reserved_name.length) {
                    object.reserved_name = [];
                    for (var j = 0; j < message.reserved_name.length; ++j)
                        object.reserved_name[j] = message.reserved_name[j];
                }
                if (message.visibility != null && message.hasOwnProperty("visibility"))
                    object.visibility = options.enums === String ? $root.google.protobuf.SymbolVisibility[message.visibility] === undefined ? message.visibility : $root.google.protobuf.SymbolVisibility[message.visibility] : message.visibility;
                return object;
            };

            /**
             * Converts this EnumDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for EnumDescriptorProto
             * @function getTypeUrl
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            EnumDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto";
            };

            EnumDescriptorProto.EnumReservedRange = (function() {

                /**
                 * Properties of an EnumReservedRange.
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @interface IEnumReservedRange
                 * @property {number|null} [start] EnumReservedRange start
                 * @property {number|null} [end] EnumReservedRange end
                 */

                /**
                 * Constructs a new EnumReservedRange.
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @classdesc Represents an EnumReservedRange.
                 * @implements IEnumReservedRange
                 * @constructor
                 * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                 */
                function EnumReservedRange(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EnumReservedRange start.
                 * @member {number} start
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @instance
                 */
                EnumReservedRange.prototype.start = 0;

                /**
                 * EnumReservedRange end.
                 * @member {number} end
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @instance
                 */
                EnumReservedRange.prototype.end = 0;

                /**
                 * Creates a new EnumReservedRange instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange instance
                 */
                EnumReservedRange.create = function create(properties) {
                    return new EnumReservedRange(properties);
                };

                /**
                 * Encodes the specified EnumReservedRange message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumReservedRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified EnumReservedRange message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EnumReservedRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumReservedRange.decode = function decode(reader, length, error) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        if (tag === error)
                            break;
                        switch (tag >>> 3) {
                        case 1: {
                                message.start = reader.int32();
                                break;
                            }
                        case 2: {
                                message.end = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EnumReservedRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EnumReservedRange message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumReservedRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                 */
                EnumReservedRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto.EnumReservedRange} message EnumReservedRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumReservedRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this EnumReservedRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumReservedRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for EnumReservedRange
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto.EnumReservedRange";
                };

                return EnumReservedRange;
            })();

            return EnumDescriptorProto;
        })();

        protobuf.EnumValueDescriptorProto = (function() {

            /**
             * Properties of an EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumValueDescriptorProto
             * @property {string|null} [name] EnumValueDescriptorProto name
             * @property {number|null} [number] EnumValueDescriptorProto number
             * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
             */

            /**
             * Constructs a new EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueDescriptorProto.
             * @implements IEnumValueDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
             */
            function EnumValueDescriptorProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.name = "";

            /**
             * EnumValueDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.number = 0;

            /**
             * EnumValueDescriptorProto options.
             * @member {google.protobuf.IEnumValueOptions|null|undefined} options
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.options = null;

            /**
             * Creates a new EnumValueDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
             */
            EnumValueDescriptorProto.create = function create(properties) {
                return new EnumValueDescriptorProto(properties);
            };

            /**
             * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueDescriptorProto.decode = function decode(reader, length, error) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    if (tag === error)
                        break;
                    switch (tag >>> 3) {
                    case 1: {
                            message.name = reader.string();
                            break;
                        }
                    case 2: {
                            message.number = reader.int32();
                            break;
                        }
                    case 3: {
                            message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumValueDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             */
            EnumValueDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.EnumValueDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.number = 0;
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this EnumValueDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for EnumValueDescriptorProto
             * @function getTypeUrl
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            EnumValueDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.EnumValueDescriptorProto";
            };

            return EnumValueDescriptorProto;
        })();

        protobuf.ServiceDescriptorProto = (function() {

            /**
             * Properties of a ServiceDescriptorProto.
             * @memberof google.protobuf
             * @interface IServiceDescriptorProto
             * @property {string|null} [name] ServiceDescriptorProto name
             * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
             * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
             */

            /**
             * Constructs a new ServiceDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceDescriptorProto.
             * @implements IServiceDescriptorProto
             * @constructor
             * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
             */
            function ServiceDescriptorProto(properties) {
                this.method = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.name = "";

            /**
             * ServiceDescriptorProto method.
             * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.method = $util.emptyArray;

            /**
             * ServiceDescriptorProto options.
             * @member {google.protobuf.IServiceOptions|null|undefined} options
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.options = null;

            /**
             * Creates a new ServiceDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
             */
            ServiceDescriptorProto.create = function create(properties) {
                return new ServiceDescriptorProto(properties);
            };

            /**
             * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.method != null && message.method.length)
                    for (var i = 0; i < message.method.length; ++i)
                        $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceDescriptorProto.decode = function decode(reader, length, error) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    if (tag === error)
                        break;
                    switch (tag >>> 3) {
                    case 1: {
                            message.name = reader.string();
                            break;
                        }
                    case 2: {
                            if (!(message.method && message.method.length))
                                message.method = [];
                            message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ServiceDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.method != null && message.hasOwnProperty("method")) {
                    if (!Array.isArray(message.method))
                        return "method: array expected";
                    for (var i = 0; i < message.method.length; ++i) {
                        var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                        if (error)
                            return "method." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             */
            ServiceDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.ServiceDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.method) {
                    if (!Array.isArray(object.method))
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                    message.method = [];
                    for (var i = 0; i < object.method.length; ++i) {
                        if (typeof object.method[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                        message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.method = [];
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.method && message.method.length) {
                    object.method = [];
                    for (var j = 0; j < message.method.length; ++j)
                        object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this ServiceDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ServiceDescriptorProto
             * @function getTypeUrl
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ServiceDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.ServiceDescriptorProto";
            };

            return ServiceDescriptorProto;
        })();

        protobuf.MethodDescriptorProto = (function() {

            /**
             * Properties of a MethodDescriptorProto.
             * @memberof google.protobuf
             * @interface IMethodDescriptorProto
             * @property {string|null} [name] MethodDescriptorProto name
             * @property {string|null} [input_type] MethodDescriptorProto input_type
             * @property {string|null} [output_type] MethodDescriptorProto output_type
             * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
             * @property {boolean|null} [client_streaming] MethodDescriptorProto client_streaming
             * @property {boolean|null} [server_streaming] MethodDescriptorProto server_streaming
             */

            /**
             * Constructs a new MethodDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a MethodDescriptorProto.
             * @implements IMethodDescriptorProto
             * @constructor
             * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
             */
            function MethodDescriptorProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.name = "";

            /**
             * MethodDescriptorProto input_type.
             * @member {string} input_type
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.input_type = "";

            /**
             * MethodDescriptorProto output_type.
             * @member {string} output_type
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.output_type = "";

            /**
             * MethodDescriptorProto options.
             * @member {google.protobuf.IMethodOptions|null|undefined} options
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.options = null;

            /**
             * MethodDescriptorProto client_streaming.
             * @member {boolean} client_streaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.client_streaming = false;

            /**
             * MethodDescriptorProto server_streaming.
             * @member {boolean} server_streaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.server_streaming = false;

            /**
             * Creates a new MethodDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
             */
            MethodDescriptorProto.create = function create(properties) {
                return new MethodDescriptorProto(properties);
            };

            /**
             * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.input_type != null && Object.hasOwnProperty.call(message, "input_type"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.input_type);
                if (message.output_type != null && Object.hasOwnProperty.call(message, "output_type"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.output_type);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.client_streaming != null && Object.hasOwnProperty.call(message, "client_streaming"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.client_streaming);
                if (message.server_streaming != null && Object.hasOwnProperty.call(message, "server_streaming"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.server_streaming);
                return writer;
            };

            /**
             * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodDescriptorProto.decode = function decode(reader, length, error) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    if (tag === error)
                        break;
                    switch (tag >>> 3) {
                    case 1: {
                            message.name = reader.string();
                            break;
                        }
                    case 2: {
                            message.input_type = reader.string();
                            break;
                        }
                    case 3: {
                            message.output_type = reader.string();
                            break;
                        }
                    case 4: {
                            message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.client_streaming = reader.bool();
                            break;
                        }
                    case 6: {
                            message.server_streaming = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MethodDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.input_type != null && message.hasOwnProperty("input_type"))
                    if (!$util.isString(message.input_type))
                        return "input_type: string expected";
                if (message.output_type != null && message.hasOwnProperty("output_type"))
                    if (!$util.isString(message.output_type))
                        return "output_type: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.MethodOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                    if (typeof message.client_streaming !== "boolean")
                        return "client_streaming: boolean expected";
                if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                    if (typeof message.server_streaming !== "boolean")
                        return "server_streaming: boolean expected";
                return null;
            };

            /**
             * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             */
            MethodDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.MethodDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.input_type != null)
                    message.input_type = String(object.input_type);
                if (object.output_type != null)
                    message.output_type = String(object.output_type);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                }
                if (object.client_streaming != null)
                    message.client_streaming = Boolean(object.client_streaming);
                if (object.server_streaming != null)
                    message.server_streaming = Boolean(object.server_streaming);
                return message;
            };

            /**
             * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.input_type = "";
                    object.output_type = "";
                    object.options = null;
                    object.client_streaming = false;
                    object.server_streaming = false;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.input_type != null && message.hasOwnProperty("input_type"))
                    object.input_type = message.input_type;
                if (message.output_type != null && message.hasOwnProperty("output_type"))
                    object.output_type = message.output_type;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                    object.client_streaming = message.client_streaming;
                if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                    object.server_streaming = message.server_streaming;
                return object;
            };

            /**
             * Converts this MethodDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for MethodDescriptorProto
             * @function getTypeUrl
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            MethodDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.MethodDescriptorProto";
            };

            return MethodDescriptorProto;
        })();

        protobuf.FileOptions = (function() {

            /**
             * Properties of a FileOptions.
             * @memberof google.protobuf
             * @interface IFileOptions
             * @property {string|null} [java_package] FileOptions java_package
             * @property {string|null} [java_outer_classname] FileOptions java_outer_classname
             * @property {boolean|null} [java_multiple_files] FileOptions java_multiple_files
             * @property {boolean|null} [java_generate_equals_and_hash] FileOptions java_generate_equals_and_hash
             * @property {boolean|null} [java_string_check_utf8] FileOptions java_string_check_utf8
             * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimize_for] FileOptions optimize_for
             * @property {string|null} [go_package] FileOptions go_package
             * @property {boolean|null} [cc_generic_services] FileOptions cc_generic_services
             * @property {boolean|null} [java_generic_services] FileOptions java_generic_services
             * @property {boolean|null} [py_generic_services] FileOptions py_generic_services
             * @property {boolean|null} [deprecated] FileOptions deprecated
             * @property {boolean|null} [cc_enable_arenas] FileOptions cc_enable_arenas
             * @property {string|null} [objc_class_prefix] FileOptions objc_class_prefix
             * @property {string|null} [csharp_namespace] FileOptions csharp_namespace
             * @property {string|null} [swift_prefix] FileOptions swift_prefix
             * @property {string|null} [php_class_prefix] FileOptions php_class_prefix
             * @property {string|null} [php_namespace] FileOptions php_namespace
             * @property {string|null} [php_metadata_namespace] FileOptions php_metadata_namespace
             * @property {string|null} [ruby_package] FileOptions ruby_package
             * @property {google.protobuf.IFeatureSet|null} [features] FileOptions features
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FileOptions uninterpreted_option
             */

            /**
             * Constructs a new FileOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FileOptions.
             * @implements IFileOptions
             * @constructor
             * @param {google.protobuf.IFileOptions=} [properties] Properties to set
             */
            function FileOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileOptions java_package.
             * @member {string} java_package
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_package = "";

            /**
             * FileOptions java_outer_classname.
             * @member {string} java_outer_classname
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_outer_classname = "";

            /**
             * FileOptions java_multiple_files.
             * @member {boolean} java_multiple_files
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_multiple_files = false;

            /**
             * FileOptions java_generate_equals_and_hash.
             * @member {boolean} java_generate_equals_and_hash
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_generate_equals_and_hash = false;

            /**
             * FileOptions java_string_check_utf8.
             * @member {boolean} java_string_check_utf8
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_string_check_utf8 = false;

            /**
             * FileOptions optimize_for.
             * @member {google.protobuf.FileOptions.OptimizeMode} optimize_for
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.optimize_for = 1;

            /**
             * FileOptions go_package.
             * @member {string} go_package
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.go_package = "";

            /**
             * FileOptions cc_generic_services.
             * @member {boolean} cc_generic_services
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.cc_generic_services = false;

            /**
             * FileOptions java_generic_services.
             * @member {boolean} java_generic_services
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_generic_services = false;

            /**
             * FileOptions py_generic_services.
             * @member {boolean} py_generic_services
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.py_generic_services = false;

            /**
             * FileOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.deprecated = false;

            /**
             * FileOptions cc_enable_arenas.
             * @member {boolean} cc_enable_arenas
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.cc_enable_arenas = true;

            /**
             * FileOptions objc_class_prefix.
             * @member {string} objc_class_prefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.objc_class_prefix = "";

            /**
             * FileOptions csharp_namespace.
             * @member {string} csharp_namespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.csharp_namespace = "";

            /**
             * FileOptions swift_prefix.
             * @member {string} swift_prefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.swift_prefix = "";

            /**
             * FileOptions php_class_prefix.
             * @member {string} php_class_prefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.php_class_prefix = "";

            /**
             * FileOptions php_namespace.
             * @member {string} php_namespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.php_namespace = "";

            /**
             * FileOptions php_metadata_namespace.
             * @member {string} php_metadata_namespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.php_metadata_namespace = "";

            /**
             * FileOptions ruby_package.
             * @member {string} ruby_package
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.ruby_package = "";

            /**
             * FileOptions features.
             * @member {google.protobuf.IFeatureSet|null|undefined} features
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.features = null;

            /**
             * FileOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * Creates a new FileOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions=} [properties] Properties to set
             * @returns {google.protobuf.FileOptions} FileOptions instance
             */
            FileOptions.create = function create(properties) {
                return new FileOptions(properties);
            };

            /**
             * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.java_package != null && Object.hasOwnProperty.call(message, "java_package"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.java_package);
                if (message.java_outer_classname != null && Object.hasOwnProperty.call(message, "java_outer_classname"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.java_outer_classname);
                if (message.optimize_for != null && Object.hasOwnProperty.call(message, "optimize_for"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimize_for);
                if (message.java_multiple_files != null && Object.hasOwnProperty.call(message, "java_multiple_files"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.java_multiple_files);
                if (message.go_package != null && Object.hasOwnProperty.call(message, "go_package"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.go_package);
                if (message.cc_generic_services != null && Object.hasOwnProperty.call(message, "cc_generic_services"))
                    writer.uint32(/* id 16, wireType 0 =*/128).bool(message.cc_generic_services);
                if (message.java_generic_services != null && Object.hasOwnProperty.call(message, "java_generic_services"))
                    writer.uint32(/* id 17, wireType 0 =*/136).bool(message.java_generic_services);
                if (message.py_generic_services != null && Object.hasOwnProperty.call(message, "py_generic_services"))
                    writer.uint32(/* id 18, wireType 0 =*/144).bool(message.py_generic_services);
                if (message.java_generate_equals_and_hash != null && Object.hasOwnProperty.call(message, "java_generate_equals_and_hash"))
                    writer.uint32(/* id 20, wireType 0 =*/160).bool(message.java_generate_equals_and_hash);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                if (message.java_string_check_utf8 != null && Object.hasOwnProperty.call(message, "java_string_check_utf8"))
                    writer.uint32(/* id 27, wireType 0 =*/216).bool(message.java_string_check_utf8);
                if (message.cc_enable_arenas != null && Object.hasOwnProperty.call(message, "cc_enable_arenas"))
                    writer.uint32(/* id 31, wireType 0 =*/248).bool(message.cc_enable_arenas);
                if (message.objc_class_prefix != null && Object.hasOwnProperty.call(message, "objc_class_prefix"))
                    writer.uint32(/* id 36, wireType 2 =*/290).string(message.objc_class_prefix);
                if (message.csharp_namespace != null && Object.hasOwnProperty.call(message, "csharp_namespace"))
                    writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharp_namespace);
                if (message.swift_prefix != null && Object.hasOwnProperty.call(message, "swift_prefix"))
                    writer.uint32(/* id 39, wireType 2 =*/314).string(message.swift_prefix);
                if (message.php_class_prefix != null && Object.hasOwnProperty.call(message, "php_class_prefix"))
                    writer.uint32(/* id 40, wireType 2 =*/322).string(message.php_class_prefix);
                if (message.php_namespace != null && Object.hasOwnProperty.call(message, "php_namespace"))
                    writer.uint32(/* id 41, wireType 2 =*/330).string(message.php_namespace);
                if (message.php_metadata_namespace != null && Object.hasOwnProperty.call(message, "php_metadata_namespace"))
                    writer.uint32(/* id 44, wireType 2 =*/354).string(message.php_metadata_namespace);
                if (message.ruby_package != null && Object.hasOwnProperty.call(message, "ruby_package"))
                    writer.uint32(/* id 45, wireType 2 =*/362).string(message.ruby_package);
                if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                    $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 50, wireType 2 =*/402).fork()).ldelim();
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (var i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileOptions.decode = function decode(reader, length, error) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    if (tag === error)
                        break;
                    switch (tag >>> 3) {
                    case 1: {
                            message.java_package = reader.string();
                            break;
                        }
                    case 8: {
                            message.java_outer_classname = reader.string();
                            break;
                        }
                    case 10: {
                            message.java_multiple_files = reader.bool();
                            break;
                        }
                    case 20: {
                            message.java_generate_equals_and_hash = reader.bool();
                            break;
                        }
                    case 27: {
                            message.java_string_check_utf8 = reader.bool();
                            break;
                        }
                    case 9: {
                            message.optimize_for = reader.int32();
                            break;
                        }
                    case 11: {
                            message.go_package = reader.string();
                            break;
                        }
                    case 16: {
                            message.cc_generic_services = reader.bool();
                            break;
                        }
                    case 17: {
                            message.java_generic_services = reader.bool();
                            break;
                        }
                    case 18: {
                            message.py_generic_services = reader.bool();
                            break;
                        }
                    case 23: {
                            message.deprecated = reader.bool();
                            break;
                        }
                    case 31: {
                            message.cc_enable_arenas = reader.bool();
                            break;
                        }
                    case 36: {
                            message.objc_class_prefix = reader.string();
                            break;
                        }
                    case 37: {
                            message.csharp_namespace = reader.string();
                            break;
                        }
                    case 39: {
                            message.swift_prefix = reader.string();
                            break;
                        }
                    case 40: {
                            message.php_class_prefix = reader.string();
                            break;
                        }
                    case 41: {
                            message.php_namespace = reader.string();
                            break;
                        }
                    case 44: {
                            message.php_metadata_namespace = reader.string();
                            break;
                        }
                    case 45: {
                            message.ruby_package = reader.string();
                            break;
                        }
                    case 50: {
                            message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                            break;
                        }
                    case 999: {
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileOptions message.
             * @function verify
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.java_package != null && message.hasOwnProperty("java_package"))
                    if (!$util.isString(message.java_package))
                        return "java_package: string expected";
                if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                    if (!$util.isString(message.java_outer_classname))
                        return "java_outer_classname: string expected";
                if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                    if (typeof message.java_multiple_files !== "boolean")
                        return "java_multiple_files: boolean expected";
                if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                    if (typeof message.java_generate_equals_and_hash !== "boolean")
                        return "java_generate_equals_and_hash: boolean expected";
                if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                    if (typeof message.java_string_check_utf8 !== "boolean")
                        return "java_string_check_utf8: boolean expected";
                if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                    switch (message.optimize_for) {
                    default:
                        return "optimize_for: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.go_package != null && message.hasOwnProperty("go_package"))
                    if (!$util.isString(message.go_package))
                        return "go_package: string expected";
                if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                    if (typeof message.cc_generic_services !== "boolean")
                        return "cc_generic_services: boolean expected";
                if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                    if (typeof message.java_generic_services !== "boolean")
                        return "java_generic_services: boolean expected";
                if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                    if (typeof message.py_generic_services !== "boolean")
                        return "py_generic_services: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                    if (typeof message.cc_enable_arenas !== "boolean")
                        return "cc_enable_arenas: boolean expected";
                if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                    if (!$util.isString(message.objc_class_prefix))
                        return "objc_class_prefix: string expected";
                if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                    if (!$util.isString(message.csharp_namespace))
                        return "csharp_namespace: string expected";
                if (message.swift_prefix != null && message.hasOwnProperty("swift_prefix"))
                    if (!$util.isString(message.swift_prefix))
                        return "swift_prefix: string expected";
                if (message.php_class_prefix != null && message.hasOwnProperty("php_class_prefix"))
                    if (!$util.isString(message.php_class_prefix))
                        return "php_class_prefix: string expected";
                if (message.php_namespace != null && message.hasOwnProperty("php_namespace"))
                    if (!$util.isString(message.php_namespace))
                        return "php_namespace: string expected";
                if (message.php_metadata_namespace != null && message.hasOwnProperty("php_metadata_namespace"))
                    if (!$util.isString(message.php_metadata_namespace))
                        return "php_metadata_namespace: string expected";
                if (message.ruby_package != null && message.hasOwnProperty("ruby_package"))
                    if (!$util.isString(message.ruby_package))
                        return "ruby_package: string expected";
                if (message.features != null && message.hasOwnProperty("features")) {
                    var error = $root.google.protobuf.FeatureSet.verify(message.features);
                    if (error)
                        return "features." + error;
                }
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileOptions} FileOptions
             */
            FileOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileOptions)
                    return object;
                var message = new $root.google.protobuf.FileOptions();
                if (object.java_package != null)
                    message.java_package = String(object.java_package);
                if (object.java_outer_classname != null)
                    message.java_outer_classname = String(object.java_outer_classname);
                if (object.java_multiple_files != null)
                    message.java_multiple_files = Boolean(object.java_multiple_files);
                if (object.java_generate_equals_and_hash != null)
                    message.java_generate_equals_and_hash = Boolean(object.java_generate_equals_and_hash);
                if (object.java_string_check_utf8 != null)
                    message.java_string_check_utf8 = Boolean(object.java_string_check_utf8);
                switch (object.optimize_for) {
                default:
                    if (typeof object.optimize_for === "number") {
                        message.optimize_for = object.optimize_for;
                        break;
                    }
                    break;
                case "SPEED":
                case 1:
                    message.optimize_for = 1;
                    break;
                case "CODE_SIZE":
                case 2:
                    message.optimize_for = 2;
                    break;
                case "LITE_RUNTIME":
                case 3:
                    message.optimize_for = 3;
                    break;
                }
                if (object.go_package != null)
                    message.go_package = String(object.go_package);
                if (object.cc_generic_services != null)
                    message.cc_generic_services = Boolean(object.cc_generic_services);
                if (object.java_generic_services != null)
                    message.java_generic_services = Boolean(object.java_generic_services);
                if (object.py_generic_services != null)
                    message.py_generic_services = Boolean(object.py_generic_services);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.cc_enable_arenas != null)
                    message.cc_enable_arenas = Boolean(object.cc_enable_arenas);
                if (object.objc_class_prefix != null)
                    message.objc_class_prefix = String(object.objc_class_prefix);
                if (object.csharp_namespace != null)
                    message.csharp_namespace = String(object.csharp_namespace);
                if (object.swift_prefix != null)
                    message.swift_prefix = String(object.swift_prefix);
                if (object.php_class_prefix != null)
                    message.php_class_prefix = String(object.php_class_prefix);
                if (object.php_namespace != null)
                    message.php_namespace = String(object.php_namespace);
                if (object.php_metadata_namespace != null)
                    message.php_metadata_namespace = String(object.php_metadata_namespace);
                if (object.ruby_package != null)
                    message.ruby_package = String(object.ruby_package);
                if (object.features != null) {
                    if (typeof object.features !== "object")
                        throw TypeError(".google.protobuf.FileOptions.features: object expected");
                    message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                }
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.FileOptions} message FileOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.java_package = "";
                    object.java_outer_classname = "";
                    object.optimize_for = options.enums === String ? "SPEED" : 1;
                    object.java_multiple_files = false;
                    object.go_package = "";
                    object.cc_generic_services = false;
                    object.java_generic_services = false;
                    object.py_generic_services = false;
                    object.java_generate_equals_and_hash = false;
                    object.deprecated = false;
                    object.java_string_check_utf8 = false;
                    object.cc_enable_arenas = true;
                    object.objc_class_prefix = "";
                    object.csharp_namespace = "";
                    object.swift_prefix = "";
                    object.php_class_prefix = "";
                    object.php_namespace = "";
                    object.php_metadata_namespace = "";
                    object.ruby_package = "";
                    object.features = null;
                }
                if (message.java_package != null && message.hasOwnProperty("java_package"))
                    object.java_package = message.java_package;
                if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                    object.java_outer_classname = message.java_outer_classname;
                if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                    object.optimize_for = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimize_for] === undefined ? message.optimize_for : $root.google.protobuf.FileOptions.OptimizeMode[message.optimize_for] : message.optimize_for;
                if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                    object.java_multiple_files = message.java_multiple_files;
                if (message.go_package != null && message.hasOwnProperty("go_package"))
                    object.go_package = message.go_package;
                if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                    object.cc_generic_services = message.cc_generic_services;
                if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                    object.java_generic_services = message.java_generic_services;
                if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                    object.py_generic_services = message.py_generic_services;
                if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                    object.java_generate_equals_and_hash = message.java_generate_equals_and_hash;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                    object.java_string_check_utf8 = message.java_string_check_utf8;
                if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                    object.cc_enable_arenas = message.cc_enable_arenas;
                if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                    object.objc_class_prefix = message.objc_class_prefix;
                if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                    object.csharp_namespace = message.csharp_namespace;
                if (message.swift_prefix != null && message.hasOwnProperty("swift_prefix"))
                    object.swift_prefix = message.swift_prefix;
                if (message.php_class_prefix != null && message.hasOwnProperty("php_class_prefix"))
                    object.php_class_prefix = message.php_class_prefix;
                if (message.php_namespace != null && message.hasOwnProperty("php_namespace"))
                    object.php_namespace = message.php_namespace;
                if (message.php_metadata_namespace != null && message.hasOwnProperty("php_metadata_namespace"))
                    object.php_metadata_namespace = message.php_metadata_namespace;
                if (message.ruby_package != null && message.hasOwnProperty("ruby_package"))
                    object.ruby_package = message.ruby_package;
                if (message.features != null && message.hasOwnProperty("features"))
                    object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (var j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                return object;
            };

            /**
             * Converts this FileOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for FileOptions
             * @function getTypeUrl
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            FileOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.FileOptions";
            };

            /**
             * OptimizeMode enum.
             * @name google.protobuf.FileOptions.OptimizeMode
             * @enum {number}
             * @property {number} SPEED=1 SPEED value
             * @property {number} CODE_SIZE=2 CODE_SIZE value
             * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
             */
            FileOptions.OptimizeMode = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "SPEED"] = 1;
                values[valuesById[2] = "CODE_SIZE"] = 2;
                values[valuesById[3] = "LITE_RUNTIME"] = 3;
                return values;
            })();

            return FileOptions;
        })();

        protobuf.MessageOptions = (function() {

            /**
             * Properties of a MessageOptions.
             * @memberof google.protobuf
             * @interface IMessageOptions
             * @property {boolean|null} [message_set_wire_format] MessageOptions message_set_wire_format
             * @property {boolean|null} [no_standard_descriptor_accessor] MessageOptions no_standard_descriptor_accessor
             * @property {boolean|null} [deprecated] MessageOptions deprecated
             * @property {boolean|null} [map_entry] MessageOptions map_entry
             * @property {boolean|null} [deprecated_legacy_json_field_conflicts] MessageOptions deprecated_legacy_json_field_conflicts
             * @property {google.protobuf.IFeatureSet|null} [features] MessageOptions features
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MessageOptions uninterpreted_option
             * @property {number|null} [".id"] MessageOptions .id
             * @property {APISourceType|null} [".source"] MessageOptions .source
             * @property {string|null} [".ifdef"] MessageOptions .ifdef
             * @property {boolean|null} [".log"] MessageOptions .log
             * @property {boolean|null} [".no_delay"] MessageOptions .no_delay
             * @property {string|null} [".base_class"] MessageOptions .base_class
             */

            /**
             * Constructs a new MessageOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MessageOptions.
             * @implements IMessageOptions
             * @constructor
             * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
             */
            function MessageOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MessageOptions message_set_wire_format.
             * @member {boolean} message_set_wire_format
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.message_set_wire_format = false;

            /**
             * MessageOptions no_standard_descriptor_accessor.
             * @member {boolean} no_standard_descriptor_accessor
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.no_standard_descriptor_accessor = false;

            /**
             * MessageOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.deprecated = false;

            /**
             * MessageOptions map_entry.
             * @member {boolean} map_entry
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.map_entry = false;

            /**
             * MessageOptions deprecated_legacy_json_field_conflicts.
             * @member {boolean} deprecated_legacy_json_field_conflicts
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.deprecated_legacy_json_field_conflicts = false;

            /**
             * MessageOptions features.
             * @member {google.protobuf.IFeatureSet|null|undefined} features
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.features = null;

            /**
             * MessageOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * MessageOptions .id.
             * @member {number} .id
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".id"] = 0;

            /**
             * MessageOptions .source.
             * @member {APISourceType} .source
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".source"] = 0;

            /**
             * MessageOptions .ifdef.
             * @member {string} .ifdef
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".ifdef"] = "";

            /**
             * MessageOptions .log.
             * @member {boolean} .log
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".log"] = true;

            /**
             * MessageOptions .no_delay.
             * @member {boolean} .no_delay
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".no_delay"] = false;

            /**
             * MessageOptions .base_class.
             * @member {string} .base_class
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".base_class"] = "";

            /**
             * Creates a new MessageOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
             * @returns {google.protobuf.MessageOptions} MessageOptions instance
             */
            MessageOptions.create = function create(properties) {
                return new MessageOptions(properties);
            };

            /**
             * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.message_set_wire_format != null && Object.hasOwnProperty.call(message, "message_set_wire_format"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.message_set_wire_format);
                if (message.no_standard_descriptor_accessor != null && Object.hasOwnProperty.call(message, "no_standard_descriptor_accessor"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.no_standard_descriptor_accessor);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.map_entry != null && Object.hasOwnProperty.call(message, "map_entry"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.map_entry);
                if (message.deprecated_legacy_json_field_conflicts != null && Object.hasOwnProperty.call(message, "deprecated_legacy_json_field_conflicts"))
                    writer.uint32(/* id 11, wireType 0 =*/88).bool(message.deprecated_legacy_json_field_conflicts);
                if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                    $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (var i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".id"] != null && Object.hasOwnProperty.call(message, ".id"))
                    writer.uint32(/* id 1036, wireType 0 =*/8288).uint32(message[".id"]);
                if (message[".source"] != null && Object.hasOwnProperty.call(message, ".source"))
                    writer.uint32(/* id 1037, wireType 0 =*/8296).int32(message[".source"]);
                if (message[".ifdef"] != null && Object.hasOwnProperty.call(message, ".ifdef"))
                    writer.uint32(/* id 1038, wireType 2 =*/8306).string(message[".ifdef"]);
                if (message[".log"] != null && Object.hasOwnProperty.call(message, ".log"))
                    writer.uint32(/* id 1039, wireType 0 =*/8312).bool(message[".log"]);
                if (message[".no_delay"] != null && Object.hasOwnProperty.call(message, ".no_delay"))
                    writer.uint32(/* id 1040, wireType 0 =*/8320).bool(message[".no_delay"]);
                if (message[".base_class"] != null && Object.hasOwnProperty.call(message, ".base_class"))
                    writer.uint32(/* id 1041, wireType 2 =*/8330).string(message[".base_class"]);
                return writer;
            };

            /**
             * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decode = function decode(reader, length, error) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    if (tag === error)
                        break;
                    switch (tag >>> 3) {
                    case 1: {
                            message.message_set_wire_format = reader.bool();
                            break;
                        }
                    case 2: {
                            message.no_standard_descriptor_accessor = reader.bool();
                            break;
                        }
                    case 3: {
                            message.deprecated = reader.bool();
                            break;
                        }
                    case 7: {
                            message.map_entry = reader.bool();
                            break;
                        }
                    case 11: {
                            message.deprecated_legacy_json_field_conflicts = reader.bool();
                            break;
                        }
                    case 12: {
                            message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                            break;
                        }
                    case 999: {
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        }
                    case 1036: {
                            message[".id"] = reader.uint32();
                            break;
                        }
                    case 1037: {
                            message[".source"] = reader.int32();
                            break;
                        }
                    case 1038: {
                            message[".ifdef"] = reader.string();
                            break;
                        }
                    case 1039: {
                            message[".log"] = reader.bool();
                            break;
                        }
                    case 1040: {
                            message[".no_delay"] = reader.bool();
                            break;
                        }
                    case 1041: {
                            message[".base_class"] = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MessageOptions message.
             * @function verify
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MessageOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                    if (typeof message.message_set_wire_format !== "boolean")
                        return "message_set_wire_format: boolean expected";
                if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                    if (typeof message.no_standard_descriptor_accessor !== "boolean")
                        return "no_standard_descriptor_accessor: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                    if (typeof message.map_entry !== "boolean")
                        return "map_entry: boolean expected";
                if (message.deprecated_legacy_json_field_conflicts != null && message.hasOwnProperty("deprecated_legacy_json_field_conflicts"))
                    if (typeof message.deprecated_legacy_json_field_conflicts !== "boolean")
                        return "deprecated_legacy_json_field_conflicts: boolean expected";
                if (message.features != null && message.hasOwnProperty("features")) {
                    var error = $root.google.protobuf.FeatureSet.verify(message.features);
                    if (error)
                        return "features." + error;
                }
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".id"] != null && message.hasOwnProperty(".id"))
                    if (!$util.isInteger(message[".id"]))
                        return ".id: integer expected";
                if (message[".source"] != null && message.hasOwnProperty(".source"))
                    switch (message[".source"]) {
                    default:
                        return ".source: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message[".ifdef"] != null && message.hasOwnProperty(".ifdef"))
                    if (!$util.isString(message[".ifdef"]))
                        return ".ifdef: string expected";
                if (message[".log"] != null && message.hasOwnProperty(".log"))
                    if (typeof message[".log"] !== "boolean")
                        return ".log: boolean expected";
                if (message[".no_delay"] != null && message.hasOwnProperty(".no_delay"))
                    if (typeof message[".no_delay"] !== "boolean")
                        return ".no_delay: boolean expected";
                if (message[".base_class"] != null && message.hasOwnProperty(".base_class"))
                    if (!$util.isString(message[".base_class"]))
                        return ".base_class: string expected";
                return null;
            };

            /**
             * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MessageOptions} MessageOptions
             */
            MessageOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MessageOptions)
                    return object;
                var message = new $root.google.protobuf.MessageOptions();
                if (object.message_set_wire_format != null)
                    message.message_set_wire_format = Boolean(object.message_set_wire_format);
                if (object.no_standard_descriptor_accessor != null)
                    message.no_standard_descriptor_accessor = Boolean(object.no_standard_descriptor_accessor);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.map_entry != null)
                    message.map_entry = Boolean(object.map_entry);
                if (object.deprecated_legacy_json_field_conflicts != null)
                    message.deprecated_legacy_json_field_conflicts = Boolean(object.deprecated_legacy_json_field_conflicts);
                if (object.features != null) {
                    if (typeof object.features !== "object")
                        throw TypeError(".google.protobuf.MessageOptions.features: object expected");
                    message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                }
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".id"] != null)
                    message[".id"] = object[".id"] >>> 0;
                switch (object[".source"]) {
                default:
                    if (typeof object[".source"] === "number") {
                        message[".source"] = object[".source"];
                        break;
                    }
                    break;
                case "SOURCE_BOTH":
                case 0:
                    message[".source"] = 0;
                    break;
                case "SOURCE_SERVER":
                case 1:
                    message[".source"] = 1;
                    break;
                case "SOURCE_CLIENT":
                case 2:
                    message[".source"] = 2;
                    break;
                }
                if (object[".ifdef"] != null)
                    message[".ifdef"] = String(object[".ifdef"]);
                if (object[".log"] != null)
                    message[".log"] = Boolean(object[".log"]);
                if (object[".no_delay"] != null)
                    message[".no_delay"] = Boolean(object[".no_delay"]);
                if (object[".base_class"] != null)
                    message[".base_class"] = String(object[".base_class"]);
                return message;
            };

            /**
             * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.MessageOptions} message MessageOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MessageOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.message_set_wire_format = false;
                    object.no_standard_descriptor_accessor = false;
                    object.deprecated = false;
                    object.map_entry = false;
                    object.deprecated_legacy_json_field_conflicts = false;
                    object.features = null;
                    object[".id"] = 0;
                    object[".source"] = options.enums === String ? "SOURCE_BOTH" : 0;
                    object[".ifdef"] = "";
                    object[".log"] = true;
                    object[".no_delay"] = false;
                    object[".base_class"] = "";
                }
                if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                    object.message_set_wire_format = message.message_set_wire_format;
                if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                    object.no_standard_descriptor_accessor = message.no_standard_descriptor_accessor;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                    object.map_entry = message.map_entry;
                if (message.deprecated_legacy_json_field_conflicts != null && message.hasOwnProperty("deprecated_legacy_json_field_conflicts"))
                    object.deprecated_legacy_json_field_conflicts = message.deprecated_legacy_json_field_conflicts;
                if (message.features != null && message.hasOwnProperty("features"))
                    object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (var j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".id"] != null && message.hasOwnProperty(".id"))
                    object[".id"] = message[".id"];
                if (message[".source"] != null && message.hasOwnProperty(".source"))
                    object[".source"] = options.enums === String ? $root.APISourceType[message[".source"]] === undefined ? message[".source"] : $root.APISourceType[message[".source"]] : message[".source"];
                if (message[".ifdef"] != null && message.hasOwnProperty(".ifdef"))
                    object[".ifdef"] = message[".ifdef"];
                if (message[".log"] != null && message.hasOwnProperty(".log"))
                    object[".log"] = message[".log"];
                if (message[".no_delay"] != null && message.hasOwnProperty(".no_delay"))
                    object[".no_delay"] = message[".no_delay"];
                if (message[".base_class"] != null && message.hasOwnProperty(".base_class"))
                    object[".base_class"] = message[".base_class"];
                return object;
            };

            /**
             * Converts this MessageOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MessageOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MessageOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for MessageOptions
             * @function getTypeUrl
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            MessageOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.MessageOptions";
            };

            return MessageOptions;
        })();

        protobuf.FieldOptions = (function() {

            /**
             * Properties of a FieldOptions.
             * @memberof google.protobuf
             * @interface IFieldOptions
             * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
             * @property {boolean|null} [packed] FieldOptions packed
             * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
             * @property {boolean|null} [lazy] FieldOptions lazy
             * @property {boolean|null} [unverified_lazy] FieldOptions unverified_lazy
             * @property {boolean|null} [deprecated] FieldOptions deprecated
             * @property {boolean|null} [weak] FieldOptions weak
             * @property {boolean|null} [debug_redact] FieldOptions debug_redact
             * @property {google.protobuf.FieldOptions.OptionRetention|null} [retention] FieldOptions retention
             * @property {Array.<google.protobuf.FieldOptions.OptionTargetType>|null} [targets] FieldOptions targets
             * @property {Array.<google.protobuf.FieldOptions.IEditionDefault>|null} [edition_defaults] FieldOptions edition_defaults
             * @property {google.protobuf.IFeatureSet|null} [features] FieldOptions features
             * @property {google.protobuf.FieldOptions.IFeatureSupport|null} [feature_support] FieldOptions feature_support
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FieldOptions uninterpreted_option
             * @property {string|null} [".field_ifdef"] FieldOptions .field_ifdef
             * @property {number|null} [".fixed_array_size"] FieldOptions .fixed_array_size
             * @property {boolean|null} [".no_zero_copy"] FieldOptions .no_zero_copy
             * @property {boolean|null} [".fixed_array_skip_zero"] FieldOptions .fixed_array_skip_zero
             * @property {string|null} [".fixed_array_size_define"] FieldOptions .fixed_array_size_define
             * @property {string|null} [".fixed_array_with_length_define"] FieldOptions .fixed_array_with_length_define
             * @property {boolean|null} [".pointer_to_buffer"] FieldOptions .pointer_to_buffer
             * @property {string|null} [".container_pointer"] FieldOptions .container_pointer
             */

            /**
             * Constructs a new FieldOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FieldOptions.
             * @implements IFieldOptions
             * @constructor
             * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
             */
            function FieldOptions(properties) {
                this.targets = [];
                this.edition_defaults = [];
                this.uninterpreted_option = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldOptions ctype.
             * @member {google.protobuf.FieldOptions.CType} ctype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.ctype = 0;

            /**
             * FieldOptions packed.
             * @member {boolean} packed
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.packed = false;

            /**
             * FieldOptions jstype.
             * @member {google.protobuf.FieldOptions.JSType} jstype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.jstype = 0;

            /**
             * FieldOptions lazy.
             * @member {boolean} lazy
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.lazy = false;

            /**
             * FieldOptions unverified_lazy.
             * @member {boolean} unverified_lazy
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.unverified_lazy = false;

            /**
             * FieldOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.deprecated = false;

            /**
             * FieldOptions weak.
             * @member {boolean} weak
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.weak = false;

            /**
             * FieldOptions debug_redact.
             * @member {boolean} debug_redact
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.debug_redact = false;

            /**
             * FieldOptions retention.
             * @member {google.protobuf.FieldOptions.OptionRetention} retention
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.retention = 0;

            /**
             * FieldOptions targets.
             * @member {Array.<google.protobuf.FieldOptions.OptionTargetType>} targets
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.targets = $util.emptyArray;

            /**
             * FieldOptions edition_defaults.
             * @member {Array.<google.protobuf.FieldOptions.IEditionDefault>} edition_defaults
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.edition_defaults = $util.emptyArray;

            /**
             * FieldOptions features.
             * @member {google.protobuf.IFeatureSet|null|undefined} features
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.features = null;

            /**
             * FieldOptions feature_support.
             * @member {google.protobuf.FieldOptions.IFeatureSupport|null|undefined} feature_support
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.feature_support = null;

            /**
             * FieldOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * FieldOptions .field_ifdef.
             * @member {string} .field_ifdef
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".field_ifdef"] = "";

            /**
             * FieldOptions .fixed_array_size.
             * @member {number} .fixed_array_size
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".fixed_array_size"] = 0;

            /**
             * FieldOptions .no_zero_copy.
             * @member {boolean} .no_zero_copy
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".no_zero_copy"] = false;

            /**
             * FieldOptions .fixed_array_skip_zero.
             * @member {boolean} .fixed_array_skip_zero
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".fixed_array_skip_zero"] = false;

            /**
             * FieldOptions .fixed_array_size_define.
             * @member {string} .fixed_array_size_define
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".fixed_array_size_define"] = "";

            /**
             * FieldOptions .fixed_array_with_length_define.
             * @member {string} .fixed_array_with_length_define
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".fixed_array_with_length_define"] = "";

            /**
             * FieldOptions .pointer_to_buffer.
             * @member {boolean} .pointer_to_buffer
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".pointer_to_buffer"] = false;

            /**
             * FieldOptions .container_pointer.
             * @member {string} .container_pointer
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".container_pointer"] = "";

            /**
             * Creates a new FieldOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
             * @returns {google.protobuf.FieldOptions} FieldOptions instance
             */
            FieldOptions.create = function create(properties) {
                return new FieldOptions(properties);
            };

            /**
             * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                if (message.unverified_lazy != null && Object.hasOwnProperty.call(message, "unverified_lazy"))
                    writer.uint32(/* id 15, wireType 0 =*/120).bool(message.unverified_lazy);
                if (message.debug_redact != null && Object.hasOwnProperty.call(message, "debug_redact"))
                    writer.uint32(/* id 16, wireType 0 =*/128).bool(message.debug_redact);
                if (message.retention != null && Object.hasOwnProperty.call(message, "retention"))
                    writer.uint32(/* id 17, wireType 0 =*/136).int32(message.retention);
                if (message.targets != null && message.targets.length)
                    for (var i = 0; i < message.targets.length; ++i)
                        writer.uint32(/* id 19, wireType 0 =*/152).int32(message.targets[i]);
                if (message.edition_defaults != null && message.edition_defaults.length)
                    for (var i = 0; i < message.edition_defaults.length; ++i)
                        $root.google.protobuf.FieldOptions.EditionDefault.encode(message.edition_defaults[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
                if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                    $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
                if (message.feature_support != null && Object.hasOwnProperty.call(message, "feature_support"))
                    $root.google.protobuf.FieldOptions.FeatureSupport.encode(message.feature_support, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (var i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".field_ifdef"] != null && Object.hasOwnProperty.call(message, ".field_ifdef"))
                    writer.uint32(/* id 1042, wireType 2 =*/8338).string(message[".field_ifdef"]);
                if (message[".container_pointer"] != null && Object.hasOwnProperty.call(message, ".container_pointer"))
                    writer.uint32(/* id 50001, wireType 2 =*/400010).string(message[".container_pointer"]);
                if (message[".fixed_array_size"] != null && Object.hasOwnProperty.call(message, ".fixed_array_size"))
                    writer.uint32(/* id 50007, wireType 0 =*/400056).uint32(message[".fixed_array_size"]);
                if (message[".no_zero_copy"] != null && Object.hasOwnProperty.call(message, ".no_zero_copy"))
                    writer.uint32(/* id 50008, wireType 0 =*/400064).bool(message[".no_zero_copy"]);
                if (message[".fixed_array_skip_zero"] != null && Object.hasOwnProperty.call(message, ".fixed_array_skip_zero"))
                    writer.uint32(/* id 50009, wireType 0 =*/400072).bool(message[".fixed_array_skip_zero"]);
                if (message[".fixed_array_size_define"] != null && Object.hasOwnProperty.call(message, ".fixed_array_size_define"))
                    writer.uint32(/* id 50010, wireType 2 =*/400082).string(message[".fixed_array_size_define"]);
                if (message[".fixed_array_with_length_define"] != null && Object.hasOwnProperty.call(message, ".fixed_array_with_length_define"))
                    writer.uint32(/* id 50011, wireType 2 =*/400090).string(message[".fixed_array_with_length_define"]);
                if (message[".pointer_to_buffer"] != null && Object.hasOwnProperty.call(message, ".pointer_to_buffer"))
                    writer.uint32(/* id 50012, wireType 0 =*/400096).bool(message[".pointer_to_buffer"]);
                return writer;
            };

            /**
             * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decode = function decode(reader, length, error) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    if (tag === error)
                        break;
                    switch (tag >>> 3) {
                    case 1: {
                            message.ctype = reader.int32();
                            break;
                        }
                    case 2: {
                            message.packed = reader.bool();
                            break;
                        }
                    case 6: {
                            message.jstype = reader.int32();
                            break;
                        }
                    case 5: {
                            message.lazy = reader.bool();
                            break;
                        }
                    case 15: {
                            message.unverified_lazy = reader.bool();
                            break;
                        }
                    case 3: {
                            message.deprecated = reader.bool();
                            break;
                        }
                    case 10: {
                            message.weak = reader.bool();
                            break;
                        }
                    case 16: {
                            message.debug_redact = reader.bool();
                            break;
                        }
                    case 17: {
                            message.retention = reader.int32();
                            break;
                        }
                    case 19: {
                            if (!(message.targets && message.targets.length))
                                message.targets = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.targets.push(reader.int32());
                            } else
                                message.targets.push(reader.int32());
                            break;
                        }
                    case 20: {
                            if (!(message.edition_defaults && message.edition_defaults.length))
                                message.edition_defaults = [];
                            message.edition_defaults.push($root.google.protobuf.FieldOptions.EditionDefault.decode(reader, reader.uint32()));
                            break;
                        }
                    case 21: {
                            message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                            break;
                        }
                    case 22: {
                            message.feature_support = $root.google.protobuf.FieldOptions.FeatureSupport.decode(reader, reader.uint32());
                            break;
                        }
                    case 999: {
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        }
                    case 1042: {
                            message[".field_ifdef"] = reader.string();
                            break;
                        }
                    case 50007: {
                            message[".fixed_array_size"] = reader.uint32();
                            break;
                        }
                    case 50008: {
                            message[".no_zero_copy"] = reader.bool();
                            break;
                        }
                    case 50009: {
                            message[".fixed_array_skip_zero"] = reader.bool();
                            break;
                        }
                    case 50010: {
                            message[".fixed_array_size_define"] = reader.string();
                            break;
                        }
                    case 50011: {
                            message[".fixed_array_with_length_define"] = reader.string();
                            break;
                        }
                    case 50012: {
                            message[".pointer_to_buffer"] = reader.bool();
                            break;
                        }
                    case 50001: {
                            message[".container_pointer"] = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldOptions message.
             * @function verify
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    switch (message.ctype) {
                    default:
                        return "ctype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.packed != null && message.hasOwnProperty("packed"))
                    if (typeof message.packed !== "boolean")
                        return "packed: boolean expected";
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    switch (message.jstype) {
                    default:
                        return "jstype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    if (typeof message.lazy !== "boolean")
                        return "lazy: boolean expected";
                if (message.unverified_lazy != null && message.hasOwnProperty("unverified_lazy"))
                    if (typeof message.unverified_lazy !== "boolean")
                        return "unverified_lazy: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.weak != null && message.hasOwnProperty("weak"))
                    if (typeof message.weak !== "boolean")
                        return "weak: boolean expected";
                if (message.debug_redact != null && message.hasOwnProperty("debug_redact"))
                    if (typeof message.debug_redact !== "boolean")
                        return "debug_redact: boolean expected";
                if (message.retention != null && message.hasOwnProperty("retention"))
                    switch (message.retention) {
                    default:
                        return "retention: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.targets != null && message.hasOwnProperty("targets")) {
                    if (!Array.isArray(message.targets))
                        return "targets: array expected";
                    for (var i = 0; i < message.targets.length; ++i)
                        switch (message.targets[i]) {
                        default:
                            return "targets: enum value[] expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                            break;
                        }
                }
                if (message.edition_defaults != null && message.hasOwnProperty("edition_defaults")) {
                    if (!Array.isArray(message.edition_defaults))
                        return "edition_defaults: array expected";
                    for (var i = 0; i < message.edition_defaults.length; ++i) {
                        var error = $root.google.protobuf.FieldOptions.EditionDefault.verify(message.edition_defaults[i]);
                        if (error)
                            return "edition_defaults." + error;
                    }
                }
                if (message.features != null && message.hasOwnProperty("features")) {
                    var error = $root.google.protobuf.FeatureSet.verify(message.features);
                    if (error)
                        return "features." + error;
                }
                if (message.feature_support != null && message.hasOwnProperty("feature_support")) {
                    var error = $root.google.protobuf.FieldOptions.FeatureSupport.verify(message.feature_support);
                    if (error)
                        return "feature_support." + error;
                }
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".field_ifdef"] != null && message.hasOwnProperty(".field_ifdef"))
                    if (!$util.isString(message[".field_ifdef"]))
                        return ".field_ifdef: string expected";
                if (message[".fixed_array_size"] != null && message.hasOwnProperty(".fixed_array_size"))
                    if (!$util.isInteger(message[".fixed_array_size"]))
                        return ".fixed_array_size: integer expected";
                if (message[".no_zero_copy"] != null && message.hasOwnProperty(".no_zero_copy"))
                    if (typeof message[".no_zero_copy"] !== "boolean")
                        return ".no_zero_copy: boolean expected";
                if (message[".fixed_array_skip_zero"] != null && message.hasOwnProperty(".fixed_array_skip_zero"))
                    if (typeof message[".fixed_array_skip_zero"] !== "boolean")
                        return ".fixed_array_skip_zero: boolean expected";
                if (message[".fixed_array_size_define"] != null && message.hasOwnProperty(".fixed_array_size_define"))
                    if (!$util.isString(message[".fixed_array_size_define"]))
                        return ".fixed_array_size_define: string expected";
                if (message[".fixed_array_with_length_define"] != null && message.hasOwnProperty(".fixed_array_with_length_define"))
                    if (!$util.isString(message[".fixed_array_with_length_define"]))
                        return ".fixed_array_with_length_define: string expected";
                if (message[".pointer_to_buffer"] != null && message.hasOwnProperty(".pointer_to_buffer"))
                    if (typeof message[".pointer_to_buffer"] !== "boolean")
                        return ".pointer_to_buffer: boolean expected";
                if (message[".container_pointer"] != null && message.hasOwnProperty(".container_pointer"))
                    if (!$util.isString(message[".container_pointer"]))
                        return ".container_pointer: string expected";
                return null;
            };

            /**
             * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldOptions} FieldOptions
             */
            FieldOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldOptions)
                    return object;
                var message = new $root.google.protobuf.FieldOptions();
                switch (object.ctype) {
                default:
                    if (typeof object.ctype === "number") {
                        message.ctype = object.ctype;
                        break;
                    }
                    break;
                case "STRING":
                case 0:
                    message.ctype = 0;
                    break;
                case "CORD":
                case 1:
                    message.ctype = 1;
                    break;
                case "STRING_PIECE":
                case 2:
                    message.ctype = 2;
                    break;
                }
                if (object.packed != null)
                    message.packed = Boolean(object.packed);
                switch (object.jstype) {
                default:
                    if (typeof object.jstype === "number") {
                        message.jstype = object.jstype;
                        break;
                    }
                    break;
                case "JS_NORMAL":
                case 0:
                    message.jstype = 0;
                    break;
                case "JS_STRING":
                case 1:
                    message.jstype = 1;
                    break;
                case "JS_NUMBER":
                case 2:
                    message.jstype = 2;
                    break;
                }
                if (object.lazy != null)
                    message.lazy = Boolean(object.lazy);
                if (object.unverified_lazy != null)
                    message.unverified_lazy = Boolean(object.unverified_lazy);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.weak != null)
                    message.weak = Boolean(object.weak);
                if (object.debug_redact != null)
                    message.debug_redact = Boolean(object.debug_redact);
                switch (object.retention) {
                default:
                    if (typeof object.retention === "number") {
                        message.retention = object.retention;
                        break;
                    }
                    break;
                case "RETENTION_UNKNOWN":
                case 0:
                    message.retention = 0;
                    break;
                case "RETENTION_RUNTIME":
                case 1:
                    message.retention = 1;
                    break;
                case "RETENTION_SOURCE":
                case 2:
                    message.retention = 2;
                    break;
                }
                if (object.targets) {
                    if (!Array.isArray(object.targets))
                        throw TypeError(".google.protobuf.FieldOptions.targets: array expected");
                    message.targets = [];
                    for (var i = 0; i < object.targets.length; ++i)
                        switch (object.targets[i]) {
                        default:
                            if (typeof object.targets[i] === "number") {
                                message.targets[i] = object.targets[i];
                                break;
                            }
                        case "TARGET_TYPE_UNKNOWN":
                        case 0:
                            message.targets[i] = 0;
                            break;
                        case "TARGET_TYPE_FILE":
                        case 1:
                            message.targets[i] = 1;
                            break;
                        case "TARGET_TYPE_EXTENSION_RANGE":
                        case 2:
                            message.targets[i] = 2;
                            break;
                        case "TARGET_TYPE_MESSAGE":
                        case 3:
                            message.targets[i] = 3;
                            break;
                        case "TARGET_TYPE_FIELD":
                        case 4:
                            message.targets[i] = 4;
                            break;
                        case "TARGET_TYPE_ONEOF":
                        case 5:
                            message.targets[i] = 5;
                            break;
                        case "TARGET_TYPE_ENUM":
                        case 6:
                            message.targets[i] = 6;
                            break;
                        case "TARGET_TYPE_ENUM_ENTRY":
                        case 7:
                            message.targets[i] = 7;
                            break;
                        case "TARGET_TYPE_SERVICE":
                        case 8:
                            message.targets[i] = 8;
                            break;
                        case "TARGET_TYPE_METHOD":
                        case 9:
                            message.targets[i] = 9;
                            break;
                        }
                }
                if (object.edition_defaults) {
                    if (!Array.isArray(object.edition_defaults))
                        throw TypeError(".google.protobuf.FieldOptions.edition_defaults: array expected");
                    message.edition_defaults = [];
                    for (var i = 0; i < object.edition_defaults.length; ++i) {
                        if (typeof object.edition_defaults[i] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions.edition_defaults: object expected");
                        message.edition_defaults[i] = $root.google.protobuf.FieldOptions.EditionDefault.fromObject(object.edition_defaults[i]);
                    }
                }
                if (object.features != null) {
                    if (typeof object.features !== "object")
                        throw TypeError(".google.protobuf.FieldOptions.features: object expected");
                    message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                }
                if (object.feature_support != null) {
                    if (typeof object.feature_support !== "object")
                        throw TypeError(".google.protobuf.FieldOptions.feature_support: object expected");
                    message.feature_support = $root.google.protobuf.FieldOptions.FeatureSupport.fromObject(object.feature_support);
                }
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".field_ifdef"] != null)
                    message[".field_ifdef"] = String(object[".field_ifdef"]);
                if (object[".fixed_array_size"] != null)
                    message[".fixed_array_size"] = object[".fixed_array_size"] >>> 0;
                if (object[".no_zero_copy"] != null)
                    message[".no_zero_copy"] = Boolean(object[".no_zero_copy"]);
                if (object[".fixed_array_skip_zero"] != null)
                    message[".fixed_array_skip_zero"] = Boolean(object[".fixed_array_skip_zero"]);
                if (object[".fixed_array_size_define"] != null)
                    message[".fixed_array_size_define"] = String(object[".fixed_array_size_define"]);
                if (object[".fixed_array_with_length_define"] != null)
                    message[".fixed_array_with_length_define"] = String(object[".fixed_array_with_length_define"]);
                if (object[".pointer_to_buffer"] != null)
                    message[".pointer_to_buffer"] = Boolean(object[".pointer_to_buffer"]);
                if (object[".container_pointer"] != null)
                    message[".container_pointer"] = String(object[".container_pointer"]);
                return message;
            };

            /**
             * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.FieldOptions} message FieldOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.targets = [];
                    object.edition_defaults = [];
                    object.uninterpreted_option = [];
                }
                if (options.defaults) {
                    object.ctype = options.enums === String ? "STRING" : 0;
                    object.packed = false;
                    object.deprecated = false;
                    object.lazy = false;
                    object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                    object.weak = false;
                    object.unverified_lazy = false;
                    object.debug_redact = false;
                    object.retention = options.enums === String ? "RETENTION_UNKNOWN" : 0;
                    object.features = null;
                    object.feature_support = null;
                    object[".field_ifdef"] = "";
                    object[".container_pointer"] = "";
                    object[".fixed_array_size"] = 0;
                    object[".no_zero_copy"] = false;
                    object[".fixed_array_skip_zero"] = false;
                    object[".fixed_array_size_define"] = "";
                    object[".fixed_array_with_length_define"] = "";
                    object[".pointer_to_buffer"] = false;
                }
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] === undefined ? message.ctype : $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                if (message.packed != null && message.hasOwnProperty("packed"))
                    object.packed = message.packed;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    object.lazy = message.lazy;
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] === undefined ? message.jstype : $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                if (message.weak != null && message.hasOwnProperty("weak"))
                    object.weak = message.weak;
                if (message.unverified_lazy != null && message.hasOwnProperty("unverified_lazy"))
                    object.unverified_lazy = message.unverified_lazy;
                if (message.debug_redact != null && message.hasOwnProperty("debug_redact"))
                    object.debug_redact = message.debug_redact;
                if (message.retention != null && message.hasOwnProperty("retention"))
                    object.retention = options.enums === String ? $root.google.protobuf.FieldOptions.OptionRetention[message.retention] === undefined ? message.retention : $root.google.protobuf.FieldOptions.OptionRetention[message.retention] : message.retention;
                if (message.targets && message.targets.length) {
                    object.targets = [];
                    for (var j = 0; j < message.targets.length; ++j)
                        object.targets[j] = options.enums === String ? $root.google.protobuf.FieldOptions.OptionTargetType[message.targets[j]] === undefined ? message.targets[j] : $root.google.protobuf.FieldOptions.OptionTargetType[message.targets[j]] : message.targets[j];
                }
                if (message.edition_defaults && message.edition_defaults.length) {
                    object.edition_defaults = [];
                    for (var j = 0; j < message.edition_defaults.length; ++j)
                        object.edition_defaults[j] = $root.google.protobuf.FieldOptions.EditionDefault.toObject(message.edition_defaults[j], options);
                }
                if (message.features != null && message.hasOwnProperty("features"))
                    object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                if (message.feature_support != null && message.hasOwnProperty("feature_support"))
                    object.feature_support = $root.google.protobuf.FieldOptions.FeatureSupport.toObject(message.feature_support, options);
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (var j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".field_ifdef"] != null && message.hasOwnProperty(".field_ifdef"))
                    object[".field_ifdef"] = message[".field_ifdef"];
                if (message[".container_pointer"] != null && message.hasOwnProperty(".container_pointer"))
                    object[".container_pointer"] = message[".container_pointer"];
                if (message[".fixed_array_size"] != null && message.hasOwnProperty(".fixed_array_size"))
                    object[".fixed_array_size"] = message[".fixed_array_size"];
                if (message[".no_zero_copy"] != null && message.hasOwnProperty(".no_zero_copy"))
                    object[".no_zero_copy"] = message[".no_zero_copy"];
                if (message[".fixed_array_skip_zero"] != null && message.hasOwnProperty(".fixed_array_skip_zero"))
                    object[".fixed_array_skip_zero"] = message[".fixed_array_skip_zero"];
                if (message[".fixed_array_size_define"] != null && message.hasOwnProperty(".fixed_array_size_define"))
                    object[".fixed_array_size_define"] = message[".fixed_array_size_define"];
                if (message[".fixed_array_with_length_define"] != null && message.hasOwnProperty(".fixed_array_with_length_define"))
                    object[".fixed_array_with_length_define"] = message[".fixed_array_with_length_define"];
                if (message[".pointer_to_buffer"] != null && message.hasOwnProperty(".pointer_to_buffer"))
                    object[".pointer_to_buffer"] = message[".pointer_to_buffer"];
                return object;
            };

            /**
             * Converts this FieldOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for FieldOptions
             * @function getTypeUrl
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            FieldOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.FieldOptions";
            };

            /**
             * CType enum.
             * @name google.protobuf.FieldOptions.CType
             * @enum {number}
             * @property {number} STRING=0 STRING value
             * @property {number} CORD=1 CORD value
             * @property {number} STRING_PIECE=2 STRING_PIECE value
             */
            FieldOptions.CType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "STRING"] = 0;
                values[valuesById[1] = "CORD"] = 1;
                values[valuesById[2] = "STRING_PIECE"] = 2;
                return values;
            })();

            /**
             * JSType enum.
             * @name google.protobuf.FieldOptions.JSType
             * @enum {number}
             * @property {number} JS_NORMAL=0 JS_NORMAL value
             * @property {number} JS_STRING=1 JS_STRING value
             * @property {number} JS_NUMBER=2 JS_NUMBER value
             */
            FieldOptions.JSType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "JS_NORMAL"] = 0;
                values[valuesById[1] = "JS_STRING"] = 1;
                values[valuesById[2] = "JS_NUMBER"] = 2;
                return values;
            })();

            /**
             * OptionRetention enum.
             * @name google.protobuf.FieldOptions.OptionRetention
             * @enum {number}
             * @property {number} RETENTION_UNKNOWN=0 RETENTION_UNKNOWN value
             * @property {number} RETENTION_RUNTIME=1 RETENTION_RUNTIME value
             * @property {number} RETENTION_SOURCE=2 RETENTION_SOURCE value
             */
            FieldOptions.OptionRetention = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "RETENTION_UNKNOWN"] = 0;
                values[valuesById[1] = "RETENTION_RUNTIME"] = 1;
                values[valuesById[2] = "RETENTION_SOURCE"] = 2;
                return values;
            })();

            /**
             * OptionTargetType enum.
             * @name google.protobuf.FieldOptions.OptionTargetType
             * @enum {number}
             * @property {number} TARGET_TYPE_UNKNOWN=0 TARGET_TYPE_UNKNOWN value
             * @property {number} TARGET_TYPE_FILE=1 TARGET_TYPE_FILE value
             * @property {number} TARGET_TYPE_EXTENSION_RANGE=2 TARGET_TYPE_EXTENSION_RANGE value
             * @property {number} TARGET_TYPE_MESSAGE=3 TARGET_TYPE_MESSAGE value
             * @property {number} TARGET_TYPE_FIELD=4 TARGET_TYPE_FIELD value
             * @property {number} TARGET_TYPE_ONEOF=5 TARGET_TYPE_ONEOF value
             * @property {number} TARGET_TYPE_ENUM=6 TARGET_TYPE_ENUM value
             * @property {number} TARGET_TYPE_ENUM_ENTRY=7 TARGET_TYPE_ENUM_ENTRY value
             * @property {number} TARGET_TYPE_SERVICE=8 TARGET_TYPE_SERVICE value
             * @property {number} TARGET_TYPE_METHOD=9 TARGET_TYPE_METHOD value
             */
            FieldOptions.OptionTargetType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "TARGET_TYPE_UNKNOWN"] = 0;
                values[valuesById[1] = "TARGET_TYPE_FILE"] = 1;
                values[valuesById[2] = "TARGET_TYPE_EXTENSION_RANGE"] = 2;
                values[valuesById[3] = "TARGET_TYPE_MESSAGE"] = 3;
                values[valuesById[4] = "TARGET_TYPE_FIELD"] = 4;
                values[valuesById[5] = "TARGET_TYPE_ONEOF"] = 5;
                values[valuesById[6] = "TARGET_TYPE_ENUM"] = 6;
                values[valuesById[7] = "TARGET_TYPE_ENUM_ENTRY"] = 7;
                values[valuesById[8] = "TARGET_TYPE_SERVICE"] = 8;
                values[valuesById[9] = "TARGET_TYPE_METHOD"] = 9;
                return values;
            })();

            FieldOptions.EditionDefault = (function() {

                /**
                 * Properties of an EditionDefault.
                 * @memberof google.protobuf.FieldOptions
                 * @interface IEditionDefault
                 * @property {google.protobuf.Edition|null} [edition] EditionDefault edition
                 * @property {string|null} [value] EditionDefault value
                 */

                /**
                 * Constructs a new EditionDefault.
                 * @memberof google.protobuf.FieldOptions
                 * @classdesc Represents an EditionDefault.
                 * @implements IEditionDefault
                 * @constructor
                 * @param {google.protobuf.FieldOptions.IEditionDefault=} [properties] Properties to set
                 */
                function EditionDefault(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EditionDefault edition.
                 * @member {google.protobuf.Edition} edition
                 * @memberof google.protobuf.FieldOptions.EditionDefault
                 * @instance
                 */
                EditionDefault.prototype.edition = 0;

                /**
                 * EditionDefault value.
                 * @member {string} value
                 * @memberof google.protobuf.FieldOptions.EditionDefault
                 * @instance
                 */
                EditionDefault.prototype.value = "";

                /**
                 * Creates a new EditionDefault instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions.EditionDefault
                 * @static
                 * @param {google.protobuf.FieldOptions.IEditionDefault=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions.EditionDefault} EditionDefault instance
                 */
                EditionDefault.create = function create(properties) {
                    return new EditionDefault(properties);
                };

                /**
                 * Encodes the specified EditionDefault message. Does not implicitly {@link google.protobuf.FieldOptions.EditionDefault.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions.EditionDefault
                 * @static
                 * @param {google.protobuf.FieldOptions.IEditionDefault} message EditionDefault message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EditionDefault.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
                    if (message.edition != null && Object.hasOwnProperty.call(message, "edition"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.edition);
                    return writer;
                };

                /**
                 * Encodes the specified EditionDefault message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.EditionDefault.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions.EditionDefault
                 * @static
                 * @param {google.protobuf.FieldOptions.IEditionDefault} message EditionDefault message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EditionDefault.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EditionDefault message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions.EditionDefault
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions.EditionDefault} EditionDefault
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EditionDefault.decode = function decode(reader, length, error) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions.EditionDefault();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        if (tag === error)
                            break;
                        switch (tag >>> 3) {
                        case 3: {
                                message.edition = reader.int32();
                                break;
                            }
                        case 2: {
                                message.value = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EditionDefault message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions.EditionDefault
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions.EditionDefault} EditionDefault
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EditionDefault.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EditionDefault message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions.EditionDefault
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EditionDefault.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        switch (message.edition) {
                        default:
                            return "edition: enum value expected";
                        case 0:
                        case 900:
                        case 998:
                        case 999:
                        case 1000:
                        case 1001:
                        case 1:
                        case 2:
                        case 99997:
                        case 99998:
                        case 99999:
                        case 2147483647:
                            break;
                        }
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!$util.isString(message.value))
                            return "value: string expected";
                    return null;
                };

                /**
                 * Creates an EditionDefault message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions.EditionDefault
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions.EditionDefault} EditionDefault
                 */
                EditionDefault.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions.EditionDefault)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions.EditionDefault();
                    switch (object.edition) {
                    default:
                        if (typeof object.edition === "number") {
                            message.edition = object.edition;
                            break;
                        }
                        break;
                    case "EDITION_UNKNOWN":
                    case 0:
                        message.edition = 0;
                        break;
                    case "EDITION_LEGACY":
                    case 900:
                        message.edition = 900;
                        break;
                    case "EDITION_PROTO2":
                    case 998:
                        message.edition = 998;
                        break;
                    case "EDITION_PROTO3":
                    case 999:
                        message.edition = 999;
                        break;
                    case "EDITION_2023":
                    case 1000:
                        message.edition = 1000;
                        break;
                    case "EDITION_2024":
                    case 1001:
                        message.edition = 1001;
                        break;
                    case "EDITION_1_TEST_ONLY":
                    case 1:
                        message.edition = 1;
                        break;
                    case "EDITION_2_TEST_ONLY":
                    case 2:
                        message.edition = 2;
                        break;
                    case "EDITION_99997_TEST_ONLY":
                    case 99997:
                        message.edition = 99997;
                        break;
                    case "EDITION_99998_TEST_ONLY":
                    case 99998:
                        message.edition = 99998;
                        break;
                    case "EDITION_99999_TEST_ONLY":
                    case 99999:
                        message.edition = 99999;
                        break;
                    case "EDITION_MAX":
                    case 2147483647:
                        message.edition = 2147483647;
                        break;
                    }
                    if (object.value != null)
                        message.value = String(object.value);
                    return message;
                };

                /**
                 * Creates a plain object from an EditionDefault message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions.EditionDefault
                 * @static
                 * @param {google.protobuf.FieldOptions.EditionDefault} message EditionDefault
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EditionDefault.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.value = "";
                        object.edition = options.enums === String ? "EDITION_UNKNOWN" : 0;
                    }
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = message.value;
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        object.edition = options.enums === String ? $root.google.protobuf.Edition[message.edition] === undefined ? message.edition : $root.google.protobuf.Edition[message.edition] : message.edition;
                    return object;
                };

                /**
                 * Converts this EditionDefault to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions.EditionDefault
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EditionDefault.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for EditionDefault
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldOptions.EditionDefault
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EditionDefault.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldOptions.EditionDefault";
                };

                return EditionDefault;
            })();

            FieldOptions.FeatureSupport = (function() {

                /**
                 * Properties of a FeatureSupport.
                 * @memberof google.protobuf.FieldOptions
                 * @interface IFeatureSupport
                 * @property {google.protobuf.Edition|null} [edition_introduced] FeatureSupport edition_introduced
                 * @property {google.protobuf.Edition|null} [edition_deprecated] FeatureSupport edition_deprecated
                 * @property {string|null} [deprecation_warning] FeatureSupport deprecation_warning
                 * @property {google.protobuf.Edition|null} [edition_removed] FeatureSupport edition_removed
                 */

                /**
                 * Constructs a new FeatureSupport.
                 * @memberof google.protobuf.FieldOptions
                 * @classdesc Represents a FeatureSupport.
                 * @implements IFeatureSupport
                 * @constructor
                 * @param {google.protobuf.FieldOptions.IFeatureSupport=} [properties] Properties to set
                 */
                function FeatureSupport(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * FeatureSupport edition_introduced.
                 * @member {google.protobuf.Edition} edition_introduced
                 * @memberof google.protobuf.FieldOptions.FeatureSupport
                 * @instance
                 */
                FeatureSupport.prototype.edition_introduced = 0;

                /**
                 * FeatureSupport edition_deprecated.
                 * @member {google.protobuf.Edition} edition_deprecated
                 * @memberof google.protobuf.FieldOptions.FeatureSupport
                 * @instance
                 */
                FeatureSupport.prototype.edition_deprecated = 0;

                /**
                 * FeatureSupport deprecation_warning.
                 * @member {string} deprecation_warning
                 * @memberof google.protobuf.FieldOptions.FeatureSupport
                 * @instance
                 */
                FeatureSupport.prototype.deprecation_warning = "";

                /**
                 * FeatureSupport edition_removed.
                 * @member {google.protobuf.Edition} edition_removed
                 * @memberof google.protobuf.FieldOptions.FeatureSupport
                 * @instance
                 */
                FeatureSupport.prototype.edition_removed = 0;

                /**
                 * Creates a new FeatureSupport instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions.FeatureSupport
                 * @static
                 * @param {google.protobuf.FieldOptions.IFeatureSupport=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions.FeatureSupport} FeatureSupport instance
                 */
                FeatureSupport.create = function create(properties) {
                    return new FeatureSupport(properties);
                };

                /**
                 * Encodes the specified FeatureSupport message. Does not implicitly {@link google.protobuf.FieldOptions.FeatureSupport.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions.FeatureSupport
                 * @static
                 * @param {google.protobuf.FieldOptions.IFeatureSupport} message FeatureSupport message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeatureSupport.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.edition_introduced != null && Object.hasOwnProperty.call(message, "edition_introduced"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.edition_introduced);
                    if (message.edition_deprecated != null && Object.hasOwnProperty.call(message, "edition_deprecated"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.edition_deprecated);
                    if (message.deprecation_warning != null && Object.hasOwnProperty.call(message, "deprecation_warning"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.deprecation_warning);
                    if (message.edition_removed != null && Object.hasOwnProperty.call(message, "edition_removed"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.edition_removed);
                    return writer;
                };

                /**
                 * Encodes the specified FeatureSupport message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.FeatureSupport.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions.FeatureSupport
                 * @static
                 * @param {google.protobuf.FieldOptions.IFeatureSupport} message FeatureSupport message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeatureSupport.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a FeatureSupport message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions.FeatureSupport
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions.FeatureSupport} FeatureSupport
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeatureSupport.decode = function decode(reader, length, error) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions.FeatureSupport();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        if (tag === error)
                            break;
                        switch (tag >>> 3) {
                        case 1: {
                                message.edition_introduced = reader.int32();
                                break;
                            }
                        case 2: {
                                message.edition_deprecated = reader.int32();
                                break;
                            }
                        case 3: {
                                message.deprecation_warning = reader.string();
                                break;
                            }
                        case 4: {
                                message.edition_removed = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a FeatureSupport message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions.FeatureSupport
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions.FeatureSupport} FeatureSupport
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeatureSupport.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a FeatureSupport message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions.FeatureSupport
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FeatureSupport.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.edition_introduced != null && message.hasOwnProperty("edition_introduced"))
                        switch (message.edition_introduced) {
                        default:
                            return "edition_introduced: enum value expected";
                        case 0:
                        case 900:
                        case 998:
                        case 999:
                        case 1000:
                        case 1001:
                        case 1:
                        case 2:
                        case 99997:
                        case 99998:
                        case 99999:
                        case 2147483647:
                            break;
                        }
                    if (message.edition_deprecated != null && message.hasOwnProperty("edition_deprecated"))
                        switch (message.edition_deprecated) {
                        default:
                            return "edition_deprecated: enum value expected";
                        case 0:
                        case 900:
                        case 998:
                        case 999:
                        case 1000:
                        case 1001:
                        case 1:
                        case 2:
                        case 99997:
                        case 99998:
                        case 99999:
                        case 2147483647:
                            break;
                        }
                    if (message.deprecation_warning != null && message.hasOwnProperty("deprecation_warning"))
                        if (!$util.isString(message.deprecation_warning))
                            return "deprecation_warning: string expected";
                    if (message.edition_removed != null && message.hasOwnProperty("edition_removed"))
                        switch (message.edition_removed) {
                        default:
                            return "edition_removed: enum value expected";
                        case 0:
                        case 900:
                        case 998:
                        case 999:
                        case 1000:
                        case 1001:
                        case 1:
                        case 2:
                        case 99997:
                        case 99998:
                        case 99999:
                        case 2147483647:
                            break;
                        }
                    return null;
                };

                /**
                 * Creates a FeatureSupport message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions.FeatureSupport
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions.FeatureSupport} FeatureSupport
                 */
                FeatureSupport.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions.FeatureSupport)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions.FeatureSupport();
                    switch (object.edition_introduced) {
                    default:
                        if (typeof object.edition_introduced === "number") {
                            message.edition_introduced = object.edition_introduced;
                            break;
                        }
                        break;
                    case "EDITION_UNKNOWN":
                    case 0:
                        message.edition_introduced = 0;
                        break;
                    case "EDITION_LEGACY":
                    case 900:
                        message.edition_introduced = 900;
                        break;
                    case "EDITION_PROTO2":
                    case 998:
                        message.edition_introduced = 998;
                        break;
                    case "EDITION_PROTO3":
                    case 999:
                        message.edition_introduced = 999;
                        break;
                    case "EDITION_2023":
                    case 1000:
                        message.edition_introduced = 1000;
                        break;
                    case "EDITION_2024":
                    case 1001:
                        message.edition_introduced = 1001;
                        break;
                    case "EDITION_1_TEST_ONLY":
                    case 1:
                        message.edition_introduced = 1;
                        break;
                    case "EDITION_2_TEST_ONLY":
                    case 2:
                        message.edition_introduced = 2;
                        break;
                    case "EDITION_99997_TEST_ONLY":
                    case 99997:
                        message.edition_introduced = 99997;
                        break;
                    case "EDITION_99998_TEST_ONLY":
                    case 99998:
                        message.edition_introduced = 99998;
                        break;
                    case "EDITION_99999_TEST_ONLY":
                    case 99999:
                        message.edition_introduced = 99999;
                        break;
                    case "EDITION_MAX":
                    case 2147483647:
                        message.edition_introduced = 2147483647;
                        break;
                    }
                    switch (object.edition_deprecated) {
                    default:
                        if (typeof object.edition_deprecated === "number") {
                            message.edition_deprecated = object.edition_deprecated;
                            break;
                        }
                        break;
                    case "EDITION_UNKNOWN":
                    case 0:
                        message.edition_deprecated = 0;
                        break;
                    case "EDITION_LEGACY":
                    case 900:
                        message.edition_deprecated = 900;
                        break;
                    case "EDITION_PROTO2":
                    case 998:
                        message.edition_deprecated = 998;
                        break;
                    case "EDITION_PROTO3":
                    case 999:
                        message.edition_deprecated = 999;
                        break;
                    case "EDITION_2023":
                    case 1000:
                        message.edition_deprecated = 1000;
                        break;
                    case "EDITION_2024":
                    case 1001:
                        message.edition_deprecated = 1001;
                        break;
                    case "EDITION_1_TEST_ONLY":
                    case 1:
                        message.edition_deprecated = 1;
                        break;
                    case "EDITION_2_TEST_ONLY":
                    case 2:
                        message.edition_deprecated = 2;
                        break;
                    case "EDITION_99997_TEST_ONLY":
                    case 99997:
                        message.edition_deprecated = 99997;
                        break;
                    case "EDITION_99998_TEST_ONLY":
                    case 99998:
                        message.edition_deprecated = 99998;
                        break;
                    case "EDITION_99999_TEST_ONLY":
                    case 99999:
                        message.edition_deprecated = 99999;
                        break;
                    case "EDITION_MAX":
                    case 2147483647:
                        message.edition_deprecated = 2147483647;
                        break;
                    }
                    if (object.deprecation_warning != null)
                        message.deprecation_warning = String(object.deprecation_warning);
                    switch (object.edition_removed) {
                    default:
                        if (typeof object.edition_removed === "number") {
                            message.edition_removed = object.edition_removed;
                            break;
                        }
                        break;
                    case "EDITION_UNKNOWN":
                    case 0:
                        message.edition_removed = 0;
                        break;
                    case "EDITION_LEGACY":
                    case 900:
                        message.edition_removed = 900;
                        break;
                    case "EDITION_PROTO2":
                    case 998:
                        message.edition_removed = 998;
                        break;
                    case "EDITION_PROTO3":
                    case 999:
                        message.edition_removed = 999;
                        break;
                    case "EDITION_2023":
                    case 1000:
                        message.edition_removed = 1000;
                        break;
                    case "EDITION_2024":
                    case 1001:
                        message.edition_removed = 1001;
                        break;
                    case "EDITION_1_TEST_ONLY":
                    case 1:
                        message.edition_removed = 1;
                        break;
                    case "EDITION_2_TEST_ONLY":
                    case 2:
                        message.edition_removed = 2;
                        break;
                    case "EDITION_99997_TEST_ONLY":
                    case 99997:
                        message.edition_removed = 99997;
                        break;
                    case "EDITION_99998_TEST_ONLY":
                    case 99998:
                        message.edition_removed = 99998;
                        break;
                    case "EDITION_99999_TEST_ONLY":
                    case 99999:
                        message.edition_removed = 99999;
                        break;
                    case "EDITION_MAX":
                    case 2147483647:
                        message.edition_removed = 2147483647;
                        break;
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a FeatureSupport message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions.FeatureSupport
                 * @static
                 * @param {google.protobuf.FieldOptions.FeatureSupport} message FeatureSupport
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FeatureSupport.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.edition_introduced = options.enums === String ? "EDITION_UNKNOWN" : 0;
                        object.edition_deprecated = options.enums === String ? "EDITION_UNKNOWN" : 0;
                        object.deprecation_warning = "";
                        object.edition_removed = options.enums === String ? "EDITION_UNKNOWN" : 0;
                    }
                    if (message.edition_introduced != null && message.hasOwnProperty("edition_introduced"))
                        object.edition_introduced = options.enums === String ? $root.google.protobuf.Edition[message.edition_introduced] === undefined ? message.edition_introduced : $root.google.protobuf.Edition[message.edition_introduced] : message.edition_introduced;
                    if (message.edition_deprecated != null && message.hasOwnProperty("edition_deprecated"))
                        object.edition_deprecated = options.enums === String ? $root.google.protobuf.Edition[message.edition_deprecated] === undefined ? message.edition_deprecated : $root.google.protobuf.Edition[message.edition_deprecated] : message.edition_deprecated;
                    if (message.deprecation_warning != null && message.hasOwnProperty("deprecation_warning"))
                        object.deprecation_warning = message.deprecation_warning;
                    if (message.edition_removed != null && message.hasOwnProperty("edition_removed"))
                        object.edition_removed = options.enums === String ? $root.google.protobuf.Edition[message.edition_removed] === undefined ? message.edition_removed : $root.google.protobuf.Edition[message.edition_removed] : message.edition_removed;
                    return object;
                };

                /**
                 * Converts this FeatureSupport to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions.FeatureSupport
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FeatureSupport.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for FeatureSupport
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldOptions.FeatureSupport
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FeatureSupport.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldOptions.FeatureSupport";
                };

                return FeatureSupport;
            })();

            return FieldOptions;
        })();

        protobuf.OneofOptions = (function() {

            /**
             * Properties of an OneofOptions.
             * @memberof google.protobuf
             * @interface IOneofOptions
             * @property {google.protobuf.IFeatureSet|null} [features] OneofOptions features
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] OneofOptions uninterpreted_option
             */

            /**
             * Constructs a new OneofOptions.
             * @memberof google.protobuf
             * @classdesc Represents an OneofOptions.
             * @implements IOneofOptions
             * @constructor
             * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
             */
            function OneofOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofOptions features.
             * @member {google.protobuf.IFeatureSet|null|undefined} features
             * @memberof google.protobuf.OneofOptions
             * @instance
             */
            OneofOptions.prototype.features = null;

            /**
             * OneofOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.OneofOptions
             * @instance
             */
            OneofOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * Creates a new OneofOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
             * @returns {google.protobuf.OneofOptions} OneofOptions instance
             */
            OneofOptions.create = function create(properties) {
                return new OneofOptions(properties);
            };

            /**
             * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                    $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (var i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decode = function decode(reader, length, error) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    if (tag === error)
                        break;
                    switch (tag >>> 3) {
                    case 1: {
                            message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                            break;
                        }
                    case 999: {
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofOptions message.
             * @function verify
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.features != null && message.hasOwnProperty("features")) {
                    var error = $root.google.protobuf.FeatureSet.verify(message.features);
                    if (error)
                        return "features." + error;
                }
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofOptions} OneofOptions
             */
            OneofOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofOptions)
                    return object;
                var message = new $root.google.protobuf.OneofOptions();
                if (object.features != null) {
                    if (typeof object.features !== "object")
                        throw TypeError(".google.protobuf.OneofOptions.features: object expected");
                    message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                }
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.OneofOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.OneofOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.OneofOptions} message OneofOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults)
                    object.features = null;
                if (message.features != null && message.hasOwnProperty("features"))
                    object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (var j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                return object;
            };

            /**
             * Converts this OneofOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for OneofOptions
             * @function getTypeUrl
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            OneofOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.OneofOptions";
            };

            return OneofOptions;
        })();

        protobuf.EnumOptions = (function() {

            /**
             * Properties of an EnumOptions.
             * @memberof google.protobuf
             * @interface IEnumOptions
             * @property {boolean|null} [allow_alias] EnumOptions allow_alias
             * @property {boolean|null} [deprecated] EnumOptions deprecated
             * @property {boolean|null} [deprecated_legacy_json_field_conflicts] EnumOptions deprecated_legacy_json_field_conflicts
             * @property {google.protobuf.IFeatureSet|null} [features] EnumOptions features
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumOptions uninterpreted_option
             */

            /**
             * Constructs a new EnumOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumOptions.
             * @implements IEnumOptions
             * @constructor
             * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
             */
            function EnumOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumOptions allow_alias.
             * @member {boolean} allow_alias
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.allow_alias = false;

            /**
             * EnumOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.deprecated = false;

            /**
             * EnumOptions deprecated_legacy_json_field_conflicts.
             * @member {boolean} deprecated_legacy_json_field_conflicts
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.deprecated_legacy_json_field_conflicts = false;

            /**
             * EnumOptions features.
             * @member {google.protobuf.IFeatureSet|null|undefined} features
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.features = null;

            /**
             * EnumOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * Creates a new EnumOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
             * @returns {google.protobuf.EnumOptions} EnumOptions instance
             */
            EnumOptions.create = function create(properties) {
                return new EnumOptions(properties);
            };

            /**
             * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.allow_alias != null && Object.hasOwnProperty.call(message, "allow_alias"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allow_alias);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.deprecated_legacy_json_field_conflicts != null && Object.hasOwnProperty.call(message, "deprecated_legacy_json_field_conflicts"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.deprecated_legacy_json_field_conflicts);
                if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                    $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (var i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decode = function decode(reader, length, error) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    if (tag === error)
                        break;
                    switch (tag >>> 3) {
                    case 2: {
                            message.allow_alias = reader.bool();
                            break;
                        }
                    case 3: {
                            message.deprecated = reader.bool();
                            break;
                        }
                    case 6: {
                            message.deprecated_legacy_json_field_conflicts = reader.bool();
                            break;
                        }
                    case 7: {
                            message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                            break;
                        }
                    case 999: {
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumOptions message.
             * @function verify
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                    if (typeof message.allow_alias !== "boolean")
                        return "allow_alias: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.deprecated_legacy_json_field_conflicts != null && message.hasOwnProperty("deprecated_legacy_json_field_conflicts"))
                    if (typeof message.deprecated_legacy_json_field_conflicts !== "boolean")
                        return "deprecated_legacy_json_field_conflicts: boolean expected";
                if (message.features != null && message.hasOwnProperty("features")) {
                    var error = $root.google.protobuf.FeatureSet.verify(message.features);
                    if (error)
                        return "features." + error;
                }
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumOptions} EnumOptions
             */
            EnumOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumOptions)
                    return object;
                var message = new $root.google.protobuf.EnumOptions();
                if (object.allow_alias != null)
                    message.allow_alias = Boolean(object.allow_alias);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.deprecated_legacy_json_field_conflicts != null)
                    message.deprecated_legacy_json_field_conflicts = Boolean(object.deprecated_legacy_json_field_conflicts);
                if (object.features != null) {
                    if (typeof object.features !== "object")
                        throw TypeError(".google.protobuf.EnumOptions.features: object expected");
                    message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                }
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.EnumOptions} message EnumOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.allow_alias = false;
                    object.deprecated = false;
                    object.deprecated_legacy_json_field_conflicts = false;
                    object.features = null;
                }
                if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                    object.allow_alias = message.allow_alias;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.deprecated_legacy_json_field_conflicts != null && message.hasOwnProperty("deprecated_legacy_json_field_conflicts"))
                    object.deprecated_legacy_json_field_conflicts = message.deprecated_legacy_json_field_conflicts;
                if (message.features != null && message.hasOwnProperty("features"))
                    object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (var j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                return object;
            };

            /**
             * Converts this EnumOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for EnumOptions
             * @function getTypeUrl
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            EnumOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.EnumOptions";
            };

            return EnumOptions;
        })();

        protobuf.EnumValueOptions = (function() {

            /**
             * Properties of an EnumValueOptions.
             * @memberof google.protobuf
             * @interface IEnumValueOptions
             * @property {boolean|null} [deprecated] EnumValueOptions deprecated
             * @property {google.protobuf.IFeatureSet|null} [features] EnumValueOptions features
             * @property {boolean|null} [debug_redact] EnumValueOptions debug_redact
             * @property {google.protobuf.FieldOptions.IFeatureSupport|null} [feature_support] EnumValueOptions feature_support
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumValueOptions uninterpreted_option
             */

            /**
             * Constructs a new EnumValueOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueOptions.
             * @implements IEnumValueOptions
             * @constructor
             * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
             */
            function EnumValueOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.deprecated = false;

            /**
             * EnumValueOptions features.
             * @member {google.protobuf.IFeatureSet|null|undefined} features
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.features = null;

            /**
             * EnumValueOptions debug_redact.
             * @member {boolean} debug_redact
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.debug_redact = false;

            /**
             * EnumValueOptions feature_support.
             * @member {google.protobuf.FieldOptions.IFeatureSupport|null|undefined} feature_support
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.feature_support = null;

            /**
             * EnumValueOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * Creates a new EnumValueOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
             */
            EnumValueOptions.create = function create(properties) {
                return new EnumValueOptions(properties);
            };

            /**
             * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                    $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.debug_redact != null && Object.hasOwnProperty.call(message, "debug_redact"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.debug_redact);
                if (message.feature_support != null && Object.hasOwnProperty.call(message, "feature_support"))
                    $root.google.protobuf.FieldOptions.FeatureSupport.encode(message.feature_support, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (var i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decode = function decode(reader, length, error) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    if (tag === error)
                        break;
                    switch (tag >>> 3) {
                    case 1: {
                            message.deprecated = reader.bool();
                            break;
                        }
                    case 2: {
                            message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.debug_redact = reader.bool();
                            break;
                        }
                    case 4: {
                            message.feature_support = $root.google.protobuf.FieldOptions.FeatureSupport.decode(reader, reader.uint32());
                            break;
                        }
                    case 999: {
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumValueOptions message.
             * @function verify
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.features != null && message.hasOwnProperty("features")) {
                    var error = $root.google.protobuf.FeatureSet.verify(message.features);
                    if (error)
                        return "features." + error;
                }
                if (message.debug_redact != null && message.hasOwnProperty("debug_redact"))
                    if (typeof message.debug_redact !== "boolean")
                        return "debug_redact: boolean expected";
                if (message.feature_support != null && message.hasOwnProperty("feature_support")) {
                    var error = $root.google.protobuf.FieldOptions.FeatureSupport.verify(message.feature_support);
                    if (error)
                        return "feature_support." + error;
                }
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             */
            EnumValueOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueOptions)
                    return object;
                var message = new $root.google.protobuf.EnumValueOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.features != null) {
                    if (typeof object.features !== "object")
                        throw TypeError(".google.protobuf.EnumValueOptions.features: object expected");
                    message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                }
                if (object.debug_redact != null)
                    message.debug_redact = Boolean(object.debug_redact);
                if (object.feature_support != null) {
                    if (typeof object.feature_support !== "object")
                        throw TypeError(".google.protobuf.EnumValueOptions.feature_support: object expected");
                    message.feature_support = $root.google.protobuf.FieldOptions.FeatureSupport.fromObject(object.feature_support);
                }
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.deprecated = false;
                    object.features = null;
                    object.debug_redact = false;
                    object.feature_support = null;
                }
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.features != null && message.hasOwnProperty("features"))
                    object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                if (message.debug_redact != null && message.hasOwnProperty("debug_redact"))
                    object.debug_redact = message.debug_redact;
                if (message.feature_support != null && message.hasOwnProperty("feature_support"))
                    object.feature_support = $root.google.protobuf.FieldOptions.FeatureSupport.toObject(message.feature_support, options);
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (var j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                return object;
            };

            /**
             * Converts this EnumValueOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for EnumValueOptions
             * @function getTypeUrl
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            EnumValueOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.EnumValueOptions";
            };

            return EnumValueOptions;
        })();

        protobuf.ServiceOptions = (function() {

            /**
             * Properties of a ServiceOptions.
             * @memberof google.protobuf
             * @interface IServiceOptions
             * @property {google.protobuf.IFeatureSet|null} [features] ServiceOptions features
             * @property {boolean|null} [deprecated] ServiceOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] ServiceOptions uninterpreted_option
             */

            /**
             * Constructs a new ServiceOptions.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceOptions.
             * @implements IServiceOptions
             * @constructor
             * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
             */
            function ServiceOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceOptions features.
             * @member {google.protobuf.IFeatureSet|null|undefined} features
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.features = null;

            /**
             * ServiceOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.deprecated = false;

            /**
             * ServiceOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * Creates a new ServiceOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
             * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
             */
            ServiceOptions.create = function create(properties) {
                return new ServiceOptions(properties);
            };

            /**
             * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                    $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 34, wireType 2 =*/274).fork()).ldelim();
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (var i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceOptions.decode = function decode(reader, length, error) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    if (tag === error)
                        break;
                    switch (tag >>> 3) {
                    case 34: {
                            message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                            break;
                        }
                    case 33: {
                            message.deprecated = reader.bool();
                            break;
                        }
                    case 999: {
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ServiceOptions message.
             * @function verify
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.features != null && message.hasOwnProperty("features")) {
                    var error = $root.google.protobuf.FeatureSet.verify(message.features);
                    if (error)
                        return "features." + error;
                }
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             */
            ServiceOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceOptions)
                    return object;
                var message = new $root.google.protobuf.ServiceOptions();
                if (object.features != null) {
                    if (typeof object.features !== "object")
                        throw TypeError(".google.protobuf.ServiceOptions.features: object expected");
                    message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                }
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.ServiceOptions} message ServiceOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.deprecated = false;
                    object.features = null;
                }
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.features != null && message.hasOwnProperty("features"))
                    object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (var j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                return object;
            };

            /**
             * Converts this ServiceOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ServiceOptions
             * @function getTypeUrl
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ServiceOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.ServiceOptions";
            };

            return ServiceOptions;
        })();

        protobuf.MethodOptions = (function() {

            /**
             * Properties of a MethodOptions.
             * @memberof google.protobuf
             * @interface IMethodOptions
             * @property {boolean|null} [deprecated] MethodOptions deprecated
             * @property {google.protobuf.MethodOptions.IdempotencyLevel|null} [idempotency_level] MethodOptions idempotency_level
             * @property {google.protobuf.IFeatureSet|null} [features] MethodOptions features
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MethodOptions uninterpreted_option
             * @property {boolean|null} [".needs_setup_connection"] MethodOptions .needs_setup_connection
             * @property {boolean|null} [".needs_authentication"] MethodOptions .needs_authentication
             */

            /**
             * Constructs a new MethodOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MethodOptions.
             * @implements IMethodOptions
             * @constructor
             * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
             */
            function MethodOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.deprecated = false;

            /**
             * MethodOptions idempotency_level.
             * @member {google.protobuf.MethodOptions.IdempotencyLevel} idempotency_level
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.idempotency_level = 0;

            /**
             * MethodOptions features.
             * @member {google.protobuf.IFeatureSet|null|undefined} features
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.features = null;

            /**
             * MethodOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * MethodOptions .needs_setup_connection.
             * @member {boolean} .needs_setup_connection
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype[".needs_setup_connection"] = true;

            /**
             * MethodOptions .needs_authentication.
             * @member {boolean} .needs_authentication
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype[".needs_authentication"] = true;

            /**
             * Creates a new MethodOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
             * @returns {google.protobuf.MethodOptions} MethodOptions instance
             */
            MethodOptions.create = function create(properties) {
                return new MethodOptions(properties);
            };

            /**
             * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                if (message.idempotency_level != null && Object.hasOwnProperty.call(message, "idempotency_level"))
                    writer.uint32(/* id 34, wireType 0 =*/272).int32(message.idempotency_level);
                if (message.features != null && Object.hasOwnProperty.call(message, "features"))
                    $root.google.protobuf.FeatureSet.encode(message.features, writer.uint32(/* id 35, wireType 2 =*/282).fork()).ldelim();
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (var i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".needs_setup_connection"] != null && Object.hasOwnProperty.call(message, ".needs_setup_connection"))
                    writer.uint32(/* id 1038, wireType 0 =*/8304).bool(message[".needs_setup_connection"]);
                if (message[".needs_authentication"] != null && Object.hasOwnProperty.call(message, ".needs_authentication"))
                    writer.uint32(/* id 1039, wireType 0 =*/8312).bool(message[".needs_authentication"]);
                return writer;
            };

            /**
             * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MethodOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodOptions.decode = function decode(reader, length, error) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    if (tag === error)
                        break;
                    switch (tag >>> 3) {
                    case 33: {
                            message.deprecated = reader.bool();
                            break;
                        }
                    case 34: {
                            message.idempotency_level = reader.int32();
                            break;
                        }
                    case 35: {
                            message.features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                            break;
                        }
                    case 999: {
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        }
                    case 1038: {
                            message[".needs_setup_connection"] = reader.bool();
                            break;
                        }
                    case 1039: {
                            message[".needs_authentication"] = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MethodOptions message.
             * @function verify
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.idempotency_level != null && message.hasOwnProperty("idempotency_level"))
                    switch (message.idempotency_level) {
                    default:
                        return "idempotency_level: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.features != null && message.hasOwnProperty("features")) {
                    var error = $root.google.protobuf.FeatureSet.verify(message.features);
                    if (error)
                        return "features." + error;
                }
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".needs_setup_connection"] != null && message.hasOwnProperty(".needs_setup_connection"))
                    if (typeof message[".needs_setup_connection"] !== "boolean")
                        return ".needs_setup_connection: boolean expected";
                if (message[".needs_authentication"] != null && message.hasOwnProperty(".needs_authentication"))
                    if (typeof message[".needs_authentication"] !== "boolean")
                        return ".needs_authentication: boolean expected";
                return null;
            };

            /**
             * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodOptions} MethodOptions
             */
            MethodOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodOptions)
                    return object;
                var message = new $root.google.protobuf.MethodOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                switch (object.idempotency_level) {
                default:
                    if (typeof object.idempotency_level === "number") {
                        message.idempotency_level = object.idempotency_level;
                        break;
                    }
                    break;
                case "IDEMPOTENCY_UNKNOWN":
                case 0:
                    message.idempotency_level = 0;
                    break;
                case "NO_SIDE_EFFECTS":
                case 1:
                    message.idempotency_level = 1;
                    break;
                case "IDEMPOTENT":
                case 2:
                    message.idempotency_level = 2;
                    break;
                }
                if (object.features != null) {
                    if (typeof object.features !== "object")
                        throw TypeError(".google.protobuf.MethodOptions.features: object expected");
                    message.features = $root.google.protobuf.FeatureSet.fromObject(object.features);
                }
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".needs_setup_connection"] != null)
                    message[".needs_setup_connection"] = Boolean(object[".needs_setup_connection"]);
                if (object[".needs_authentication"] != null)
                    message[".needs_authentication"] = Boolean(object[".needs_authentication"]);
                return message;
            };

            /**
             * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.MethodOptions} message MethodOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.deprecated = false;
                    object.idempotency_level = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                    object.features = null;
                    object[".needs_setup_connection"] = true;
                    object[".needs_authentication"] = true;
                }
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.idempotency_level != null && message.hasOwnProperty("idempotency_level"))
                    object.idempotency_level = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotency_level] === undefined ? message.idempotency_level : $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotency_level] : message.idempotency_level;
                if (message.features != null && message.hasOwnProperty("features"))
                    object.features = $root.google.protobuf.FeatureSet.toObject(message.features, options);
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (var j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".needs_setup_connection"] != null && message.hasOwnProperty(".needs_setup_connection"))
                    object[".needs_setup_connection"] = message[".needs_setup_connection"];
                if (message[".needs_authentication"] != null && message.hasOwnProperty(".needs_authentication"))
                    object[".needs_authentication"] = message[".needs_authentication"];
                return object;
            };

            /**
             * Converts this MethodOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for MethodOptions
             * @function getTypeUrl
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            MethodOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.MethodOptions";
            };

            /**
             * IdempotencyLevel enum.
             * @name google.protobuf.MethodOptions.IdempotencyLevel
             * @enum {number}
             * @property {number} IDEMPOTENCY_UNKNOWN=0 IDEMPOTENCY_UNKNOWN value
             * @property {number} NO_SIDE_EFFECTS=1 NO_SIDE_EFFECTS value
             * @property {number} IDEMPOTENT=2 IDEMPOTENT value
             */
            MethodOptions.IdempotencyLevel = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
                values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
                values[valuesById[2] = "IDEMPOTENT"] = 2;
                return values;
            })();

            return MethodOptions;
        })();

        protobuf.UninterpretedOption = (function() {

            /**
             * Properties of an UninterpretedOption.
             * @memberof google.protobuf
             * @interface IUninterpretedOption
             * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
             * @property {string|null} [identifier_value] UninterpretedOption identifier_value
             * @property {number|Long|null} [positive_int_value] UninterpretedOption positive_int_value
             * @property {number|Long|null} [negative_int_value] UninterpretedOption negative_int_value
             * @property {number|null} [double_value] UninterpretedOption double_value
             * @property {Uint8Array|null} [string_value] UninterpretedOption string_value
             * @property {string|null} [aggregate_value] UninterpretedOption aggregate_value
             */

            /**
             * Constructs a new UninterpretedOption.
             * @memberof google.protobuf
             * @classdesc Represents an UninterpretedOption.
             * @implements IUninterpretedOption
             * @constructor
             * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
             */
            function UninterpretedOption(properties) {
                this.name = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UninterpretedOption name.
             * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.name = $util.emptyArray;

            /**
             * UninterpretedOption identifier_value.
             * @member {string} identifier_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.identifier_value = "";

            /**
             * UninterpretedOption positive_int_value.
             * @member {number|Long} positive_int_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.positive_int_value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * UninterpretedOption negative_int_value.
             * @member {number|Long} negative_int_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.negative_int_value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * UninterpretedOption double_value.
             * @member {number} double_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.double_value = 0;

            /**
             * UninterpretedOption string_value.
             * @member {Uint8Array} string_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.string_value = $util.newBuffer([]);

            /**
             * UninterpretedOption aggregate_value.
             * @member {string} aggregate_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.aggregate_value = "";

            /**
             * Creates a new UninterpretedOption instance using the specified properties.
             * @function create
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
             */
            UninterpretedOption.create = function create(properties) {
                return new UninterpretedOption(properties);
            };

            /**
             * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UninterpretedOption.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.name.length)
                    for (var i = 0; i < message.name.length; ++i)
                        $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.identifier_value != null && Object.hasOwnProperty.call(message, "identifier_value"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifier_value);
                if (message.positive_int_value != null && Object.hasOwnProperty.call(message, "positive_int_value"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positive_int_value);
                if (message.negative_int_value != null && Object.hasOwnProperty.call(message, "negative_int_value"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negative_int_value);
                if (message.double_value != null && Object.hasOwnProperty.call(message, "double_value"))
                    writer.uint32(/* id 6, wireType 1 =*/49).double(message.double_value);
                if (message.string_value != null && Object.hasOwnProperty.call(message, "string_value"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.string_value);
                if (message.aggregate_value != null && Object.hasOwnProperty.call(message, "aggregate_value"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregate_value);
                return writer;
            };

            /**
             * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UninterpretedOption.decode = function decode(reader, length, error) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    if (tag === error)
                        break;
                    switch (tag >>> 3) {
                    case 2: {
                            if (!(message.name && message.name.length))
                                message.name = [];
                            message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            message.identifier_value = reader.string();
                            break;
                        }
                    case 4: {
                            message.positive_int_value = reader.uint64();
                            break;
                        }
                    case 5: {
                            message.negative_int_value = reader.int64();
                            break;
                        }
                    case 6: {
                            message.double_value = reader.double();
                            break;
                        }
                    case 7: {
                            message.string_value = reader.bytes();
                            break;
                        }
                    case 8: {
                            message.aggregate_value = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UninterpretedOption message.
             * @function verify
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UninterpretedOption.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name")) {
                    if (!Array.isArray(message.name))
                        return "name: array expected";
                    for (var i = 0; i < message.name.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                        if (error)
                            return "name." + error;
                    }
                }
                if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                    if (!$util.isString(message.identifier_value))
                        return "identifier_value: string expected";
                if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                    if (!$util.isInteger(message.positive_int_value) && !(message.positive_int_value && $util.isInteger(message.positive_int_value.low) && $util.isInteger(message.positive_int_value.high)))
                        return "positive_int_value: integer|Long expected";
                if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                    if (!$util.isInteger(message.negative_int_value) && !(message.negative_int_value && $util.isInteger(message.negative_int_value.low) && $util.isInteger(message.negative_int_value.high)))
                        return "negative_int_value: integer|Long expected";
                if (message.double_value != null && message.hasOwnProperty("double_value"))
                    if (typeof message.double_value !== "number")
                        return "double_value: number expected";
                if (message.string_value != null && message.hasOwnProperty("string_value"))
                    if (!(message.string_value && typeof message.string_value.length === "number" || $util.isString(message.string_value)))
                        return "string_value: buffer expected";
                if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                    if (!$util.isString(message.aggregate_value))
                        return "aggregate_value: string expected";
                return null;
            };

            /**
             * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             */
            UninterpretedOption.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.UninterpretedOption)
                    return object;
                var message = new $root.google.protobuf.UninterpretedOption();
                if (object.name) {
                    if (!Array.isArray(object.name))
                        throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                    message.name = [];
                    for (var i = 0; i < object.name.length; ++i) {
                        if (typeof object.name[i] !== "object")
                            throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                        message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                    }
                }
                if (object.identifier_value != null)
                    message.identifier_value = String(object.identifier_value);
                if (object.positive_int_value != null)
                    if ($util.Long)
                        (message.positive_int_value = $util.Long.fromValue(object.positive_int_value)).unsigned = true;
                    else if (typeof object.positive_int_value === "string")
                        message.positive_int_value = parseInt(object.positive_int_value, 10);
                    else if (typeof object.positive_int_value === "number")
                        message.positive_int_value = object.positive_int_value;
                    else if (typeof object.positive_int_value === "object")
                        message.positive_int_value = new $util.LongBits(object.positive_int_value.low >>> 0, object.positive_int_value.high >>> 0).toNumber(true);
                if (object.negative_int_value != null)
                    if ($util.Long)
                        (message.negative_int_value = $util.Long.fromValue(object.negative_int_value)).unsigned = false;
                    else if (typeof object.negative_int_value === "string")
                        message.negative_int_value = parseInt(object.negative_int_value, 10);
                    else if (typeof object.negative_int_value === "number")
                        message.negative_int_value = object.negative_int_value;
                    else if (typeof object.negative_int_value === "object")
                        message.negative_int_value = new $util.LongBits(object.negative_int_value.low >>> 0, object.negative_int_value.high >>> 0).toNumber();
                if (object.double_value != null)
                    message.double_value = Number(object.double_value);
                if (object.string_value != null)
                    if (typeof object.string_value === "string")
                        $util.base64.decode(object.string_value, message.string_value = $util.newBuffer($util.base64.length(object.string_value)), 0);
                    else if (object.string_value.length >= 0)
                        message.string_value = object.string_value;
                if (object.aggregate_value != null)
                    message.aggregate_value = String(object.aggregate_value);
                return message;
            };

            /**
             * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UninterpretedOption.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.name = [];
                if (options.defaults) {
                    object.identifier_value = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.positive_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.positive_int_value = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.negative_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.negative_int_value = options.longs === String ? "0" : 0;
                    object.double_value = 0;
                    if (options.bytes === String)
                        object.string_value = "";
                    else {
                        object.string_value = [];
                        if (options.bytes !== Array)
                            object.string_value = $util.newBuffer(object.string_value);
                    }
                    object.aggregate_value = "";
                }
                if (message.name && message.name.length) {
                    object.name = [];
                    for (var j = 0; j < message.name.length; ++j)
                        object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                }
                if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                    object.identifier_value = message.identifier_value;
                if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                    if (typeof message.positive_int_value === "number")
                        object.positive_int_value = options.longs === String ? String(message.positive_int_value) : message.positive_int_value;
                    else
                        object.positive_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.positive_int_value) : options.longs === Number ? new $util.LongBits(message.positive_int_value.low >>> 0, message.positive_int_value.high >>> 0).toNumber(true) : message.positive_int_value;
                if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                    if (typeof message.negative_int_value === "number")
                        object.negative_int_value = options.longs === String ? String(message.negative_int_value) : message.negative_int_value;
                    else
                        object.negative_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.negative_int_value) : options.longs === Number ? new $util.LongBits(message.negative_int_value.low >>> 0, message.negative_int_value.high >>> 0).toNumber() : message.negative_int_value;
                if (message.double_value != null && message.hasOwnProperty("double_value"))
                    object.double_value = options.json && !isFinite(message.double_value) ? String(message.double_value) : message.double_value;
                if (message.string_value != null && message.hasOwnProperty("string_value"))
                    object.string_value = options.bytes === String ? $util.base64.encode(message.string_value, 0, message.string_value.length) : options.bytes === Array ? Array.prototype.slice.call(message.string_value) : message.string_value;
                if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                    object.aggregate_value = message.aggregate_value;
                return object;
            };

            /**
             * Converts this UninterpretedOption to JSON.
             * @function toJSON
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UninterpretedOption.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for UninterpretedOption
             * @function getTypeUrl
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            UninterpretedOption.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.UninterpretedOption";
            };

            UninterpretedOption.NamePart = (function() {

                /**
                 * Properties of a NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @interface INamePart
                 * @property {string} name_part NamePart name_part
                 * @property {boolean} is_extension NamePart is_extension
                 */

                /**
                 * Constructs a new NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @classdesc Represents a NamePart.
                 * @implements INamePart
                 * @constructor
                 * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                 */
                function NamePart(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * NamePart name_part.
                 * @member {string} name_part
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.name_part = "";

                /**
                 * NamePart is_extension.
                 * @member {boolean} is_extension
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.is_extension = false;

                /**
                 * Creates a new NamePart instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                 */
                NamePart.create = function create(properties) {
                    return new NamePart(properties);
                };

                /**
                 * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NamePart.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name_part);
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.is_extension);
                    return writer;
                };

                /**
                 * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a NamePart message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NamePart.decode = function decode(reader, length, error) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        if (tag === error)
                            break;
                        switch (tag >>> 3) {
                        case 1: {
                                message.name_part = reader.string();
                                break;
                            }
                        case 2: {
                                message.is_extension = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("name_part"))
                        throw $util.ProtocolError("missing required 'name_part'", { instance: message });
                    if (!message.hasOwnProperty("is_extension"))
                        throw $util.ProtocolError("missing required 'is_extension'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a NamePart message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NamePart.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a NamePart message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NamePart.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isString(message.name_part))
                        return "name_part: string expected";
                    if (typeof message.is_extension !== "boolean")
                        return "is_extension: boolean expected";
                    return null;
                };

                /**
                 * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 */
                NamePart.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    if (object.name_part != null)
                        message.name_part = String(object.name_part);
                    if (object.is_extension != null)
                        message.is_extension = Boolean(object.is_extension);
                    return message;
                };

                /**
                 * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NamePart.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name_part = "";
                        object.is_extension = false;
                    }
                    if (message.name_part != null && message.hasOwnProperty("name_part"))
                        object.name_part = message.name_part;
                    if (message.is_extension != null && message.hasOwnProperty("is_extension"))
                        object.is_extension = message.is_extension;
                    return object;
                };

                /**
                 * Converts this NamePart to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NamePart.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for NamePart
                 * @function getTypeUrl
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                NamePart.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.UninterpretedOption.NamePart";
                };

                return NamePart;
            })();

            return UninterpretedOption;
        })();

        protobuf.FeatureSet = (function() {

            /**
             * Properties of a FeatureSet.
             * @memberof google.protobuf
             * @interface IFeatureSet
             * @property {google.protobuf.FeatureSet.FieldPresence|null} [field_presence] FeatureSet field_presence
             * @property {google.protobuf.FeatureSet.EnumType|null} [enum_type] FeatureSet enum_type
             * @property {google.protobuf.FeatureSet.RepeatedFieldEncoding|null} [repeated_field_encoding] FeatureSet repeated_field_encoding
             * @property {google.protobuf.FeatureSet.Utf8Validation|null} [utf8_validation] FeatureSet utf8_validation
             * @property {google.protobuf.FeatureSet.MessageEncoding|null} [message_encoding] FeatureSet message_encoding
             * @property {google.protobuf.FeatureSet.JsonFormat|null} [json_format] FeatureSet json_format
             * @property {google.protobuf.FeatureSet.EnforceNamingStyle|null} [enforce_naming_style] FeatureSet enforce_naming_style
             * @property {google.protobuf.FeatureSet.VisibilityFeature.DefaultSymbolVisibility|null} [default_symbol_visibility] FeatureSet default_symbol_visibility
             */

            /**
             * Constructs a new FeatureSet.
             * @memberof google.protobuf
             * @classdesc Represents a FeatureSet.
             * @implements IFeatureSet
             * @constructor
             * @param {google.protobuf.IFeatureSet=} [properties] Properties to set
             */
            function FeatureSet(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FeatureSet field_presence.
             * @member {google.protobuf.FeatureSet.FieldPresence} field_presence
             * @memberof google.protobuf.FeatureSet
             * @instance
             */
            FeatureSet.prototype.field_presence = 0;

            /**
             * FeatureSet enum_type.
             * @member {google.protobuf.FeatureSet.EnumType} enum_type
             * @memberof google.protobuf.FeatureSet
             * @instance
             */
            FeatureSet.prototype.enum_type = 0;

            /**
             * FeatureSet repeated_field_encoding.
             * @member {google.protobuf.FeatureSet.RepeatedFieldEncoding} repeated_field_encoding
             * @memberof google.protobuf.FeatureSet
             * @instance
             */
            FeatureSet.prototype.repeated_field_encoding = 0;

            /**
             * FeatureSet utf8_validation.
             * @member {google.protobuf.FeatureSet.Utf8Validation} utf8_validation
             * @memberof google.protobuf.FeatureSet
             * @instance
             */
            FeatureSet.prototype.utf8_validation = 0;

            /**
             * FeatureSet message_encoding.
             * @member {google.protobuf.FeatureSet.MessageEncoding} message_encoding
             * @memberof google.protobuf.FeatureSet
             * @instance
             */
            FeatureSet.prototype.message_encoding = 0;

            /**
             * FeatureSet json_format.
             * @member {google.protobuf.FeatureSet.JsonFormat} json_format
             * @memberof google.protobuf.FeatureSet
             * @instance
             */
            FeatureSet.prototype.json_format = 0;

            /**
             * FeatureSet enforce_naming_style.
             * @member {google.protobuf.FeatureSet.EnforceNamingStyle} enforce_naming_style
             * @memberof google.protobuf.FeatureSet
             * @instance
             */
            FeatureSet.prototype.enforce_naming_style = 0;

            /**
             * FeatureSet default_symbol_visibility.
             * @member {google.protobuf.FeatureSet.VisibilityFeature.DefaultSymbolVisibility} default_symbol_visibility
             * @memberof google.protobuf.FeatureSet
             * @instance
             */
            FeatureSet.prototype.default_symbol_visibility = 0;

            /**
             * Creates a new FeatureSet instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FeatureSet
             * @static
             * @param {google.protobuf.IFeatureSet=} [properties] Properties to set
             * @returns {google.protobuf.FeatureSet} FeatureSet instance
             */
            FeatureSet.create = function create(properties) {
                return new FeatureSet(properties);
            };

            /**
             * Encodes the specified FeatureSet message. Does not implicitly {@link google.protobuf.FeatureSet.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FeatureSet
             * @static
             * @param {google.protobuf.IFeatureSet} message FeatureSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FeatureSet.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.field_presence != null && Object.hasOwnProperty.call(message, "field_presence"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.field_presence);
                if (message.enum_type != null && Object.hasOwnProperty.call(message, "enum_type"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.enum_type);
                if (message.repeated_field_encoding != null && Object.hasOwnProperty.call(message, "repeated_field_encoding"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.repeated_field_encoding);
                if (message.utf8_validation != null && Object.hasOwnProperty.call(message, "utf8_validation"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.utf8_validation);
                if (message.message_encoding != null && Object.hasOwnProperty.call(message, "message_encoding"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.message_encoding);
                if (message.json_format != null && Object.hasOwnProperty.call(message, "json_format"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.json_format);
                if (message.enforce_naming_style != null && Object.hasOwnProperty.call(message, "enforce_naming_style"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.enforce_naming_style);
                if (message.default_symbol_visibility != null && Object.hasOwnProperty.call(message, "default_symbol_visibility"))
                    writer.uint32(/* id 8, wireType 0 =*/64).int32(message.default_symbol_visibility);
                return writer;
            };

            /**
             * Encodes the specified FeatureSet message, length delimited. Does not implicitly {@link google.protobuf.FeatureSet.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FeatureSet
             * @static
             * @param {google.protobuf.IFeatureSet} message FeatureSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FeatureSet.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FeatureSet message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FeatureSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FeatureSet} FeatureSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FeatureSet.decode = function decode(reader, length, error) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FeatureSet();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    if (tag === error)
                        break;
                    switch (tag >>> 3) {
                    case 1: {
                            message.field_presence = reader.int32();
                            break;
                        }
                    case 2: {
                            message.enum_type = reader.int32();
                            break;
                        }
                    case 3: {
                            message.repeated_field_encoding = reader.int32();
                            break;
                        }
                    case 4: {
                            message.utf8_validation = reader.int32();
                            break;
                        }
                    case 5: {
                            message.message_encoding = reader.int32();
                            break;
                        }
                    case 6: {
                            message.json_format = reader.int32();
                            break;
                        }
                    case 7: {
                            message.enforce_naming_style = reader.int32();
                            break;
                        }
                    case 8: {
                            message.default_symbol_visibility = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FeatureSet message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FeatureSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FeatureSet} FeatureSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FeatureSet.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FeatureSet message.
             * @function verify
             * @memberof google.protobuf.FeatureSet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FeatureSet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.field_presence != null && message.hasOwnProperty("field_presence"))
                    switch (message.field_presence) {
                    default:
                        return "field_presence: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.enum_type != null && message.hasOwnProperty("enum_type"))
                    switch (message.enum_type) {
                    default:
                        return "enum_type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.repeated_field_encoding != null && message.hasOwnProperty("repeated_field_encoding"))
                    switch (message.repeated_field_encoding) {
                    default:
                        return "repeated_field_encoding: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.utf8_validation != null && message.hasOwnProperty("utf8_validation"))
                    switch (message.utf8_validation) {
                    default:
                        return "utf8_validation: enum value expected";
                    case 0:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.message_encoding != null && message.hasOwnProperty("message_encoding"))
                    switch (message.message_encoding) {
                    default:
                        return "message_encoding: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.json_format != null && message.hasOwnProperty("json_format"))
                    switch (message.json_format) {
                    default:
                        return "json_format: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.enforce_naming_style != null && message.hasOwnProperty("enforce_naming_style"))
                    switch (message.enforce_naming_style) {
                    default:
                        return "enforce_naming_style: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.default_symbol_visibility != null && message.hasOwnProperty("default_symbol_visibility"))
                    switch (message.default_symbol_visibility) {
                    default:
                        return "default_symbol_visibility: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                        break;
                    }
                return null;
            };

            /**
             * Creates a FeatureSet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FeatureSet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FeatureSet} FeatureSet
             */
            FeatureSet.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FeatureSet)
                    return object;
                var message = new $root.google.protobuf.FeatureSet();
                switch (object.field_presence) {
                default:
                    if (typeof object.field_presence === "number") {
                        message.field_presence = object.field_presence;
                        break;
                    }
                    break;
                case "FIELD_PRESENCE_UNKNOWN":
                case 0:
                    message.field_presence = 0;
                    break;
                case "EXPLICIT":
                case 1:
                    message.field_presence = 1;
                    break;
                case "IMPLICIT":
                case 2:
                    message.field_presence = 2;
                    break;
                case "LEGACY_REQUIRED":
                case 3:
                    message.field_presence = 3;
                    break;
                }
                switch (object.enum_type) {
                default:
                    if (typeof object.enum_type === "number") {
                        message.enum_type = object.enum_type;
                        break;
                    }
                    break;
                case "ENUM_TYPE_UNKNOWN":
                case 0:
                    message.enum_type = 0;
                    break;
                case "OPEN":
                case 1:
                    message.enum_type = 1;
                    break;
                case "CLOSED":
                case 2:
                    message.enum_type = 2;
                    break;
                }
                switch (object.repeated_field_encoding) {
                default:
                    if (typeof object.repeated_field_encoding === "number") {
                        message.repeated_field_encoding = object.repeated_field_encoding;
                        break;
                    }
                    break;
                case "REPEATED_FIELD_ENCODING_UNKNOWN":
                case 0:
                    message.repeated_field_encoding = 0;
                    break;
                case "PACKED":
                case 1:
                    message.repeated_field_encoding = 1;
                    break;
                case "EXPANDED":
                case 2:
                    message.repeated_field_encoding = 2;
                    break;
                }
                switch (object.utf8_validation) {
                default:
                    if (typeof object.utf8_validation === "number") {
                        message.utf8_validation = object.utf8_validation;
                        break;
                    }
                    break;
                case "UTF8_VALIDATION_UNKNOWN":
                case 0:
                    message.utf8_validation = 0;
                    break;
                case "VERIFY":
                case 2:
                    message.utf8_validation = 2;
                    break;
                case "NONE":
                case 3:
                    message.utf8_validation = 3;
                    break;
                }
                switch (object.message_encoding) {
                default:
                    if (typeof object.message_encoding === "number") {
                        message.message_encoding = object.message_encoding;
                        break;
                    }
                    break;
                case "MESSAGE_ENCODING_UNKNOWN":
                case 0:
                    message.message_encoding = 0;
                    break;
                case "LENGTH_PREFIXED":
                case 1:
                    message.message_encoding = 1;
                    break;
                case "DELIMITED":
                case 2:
                    message.message_encoding = 2;
                    break;
                }
                switch (object.json_format) {
                default:
                    if (typeof object.json_format === "number") {
                        message.json_format = object.json_format;
                        break;
                    }
                    break;
                case "JSON_FORMAT_UNKNOWN":
                case 0:
                    message.json_format = 0;
                    break;
                case "ALLOW":
                case 1:
                    message.json_format = 1;
                    break;
                case "LEGACY_BEST_EFFORT":
                case 2:
                    message.json_format = 2;
                    break;
                }
                switch (object.enforce_naming_style) {
                default:
                    if (typeof object.enforce_naming_style === "number") {
                        message.enforce_naming_style = object.enforce_naming_style;
                        break;
                    }
                    break;
                case "ENFORCE_NAMING_STYLE_UNKNOWN":
                case 0:
                    message.enforce_naming_style = 0;
                    break;
                case "STYLE2024":
                case 1:
                    message.enforce_naming_style = 1;
                    break;
                case "STYLE_LEGACY":
                case 2:
                    message.enforce_naming_style = 2;
                    break;
                }
                switch (object.default_symbol_visibility) {
                default:
                    if (typeof object.default_symbol_visibility === "number") {
                        message.default_symbol_visibility = object.default_symbol_visibility;
                        break;
                    }
                    break;
                case "DEFAULT_SYMBOL_VISIBILITY_UNKNOWN":
                case 0:
                    message.default_symbol_visibility = 0;
                    break;
                case "EXPORT_ALL":
                case 1:
                    message.default_symbol_visibility = 1;
                    break;
                case "EXPORT_TOP_LEVEL":
                case 2:
                    message.default_symbol_visibility = 2;
                    break;
                case "LOCAL_ALL":
                case 3:
                    message.default_symbol_visibility = 3;
                    break;
                case "STRICT":
                case 4:
                    message.default_symbol_visibility = 4;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a FeatureSet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FeatureSet
             * @static
             * @param {google.protobuf.FeatureSet} message FeatureSet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FeatureSet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.field_presence = options.enums === String ? "FIELD_PRESENCE_UNKNOWN" : 0;
                    object.enum_type = options.enums === String ? "ENUM_TYPE_UNKNOWN" : 0;
                    object.repeated_field_encoding = options.enums === String ? "REPEATED_FIELD_ENCODING_UNKNOWN" : 0;
                    object.utf8_validation = options.enums === String ? "UTF8_VALIDATION_UNKNOWN" : 0;
                    object.message_encoding = options.enums === String ? "MESSAGE_ENCODING_UNKNOWN" : 0;
                    object.json_format = options.enums === String ? "JSON_FORMAT_UNKNOWN" : 0;
                    object.enforce_naming_style = options.enums === String ? "ENFORCE_NAMING_STYLE_UNKNOWN" : 0;
                    object.default_symbol_visibility = options.enums === String ? "DEFAULT_SYMBOL_VISIBILITY_UNKNOWN" : 0;
                }
                if (message.field_presence != null && message.hasOwnProperty("field_presence"))
                    object.field_presence = options.enums === String ? $root.google.protobuf.FeatureSet.FieldPresence[message.field_presence] === undefined ? message.field_presence : $root.google.protobuf.FeatureSet.FieldPresence[message.field_presence] : message.field_presence;
                if (message.enum_type != null && message.hasOwnProperty("enum_type"))
                    object.enum_type = options.enums === String ? $root.google.protobuf.FeatureSet.EnumType[message.enum_type] === undefined ? message.enum_type : $root.google.protobuf.FeatureSet.EnumType[message.enum_type] : message.enum_type;
                if (message.repeated_field_encoding != null && message.hasOwnProperty("repeated_field_encoding"))
                    object.repeated_field_encoding = options.enums === String ? $root.google.protobuf.FeatureSet.RepeatedFieldEncoding[message.repeated_field_encoding] === undefined ? message.repeated_field_encoding : $root.google.protobuf.FeatureSet.RepeatedFieldEncoding[message.repeated_field_encoding] : message.repeated_field_encoding;
                if (message.utf8_validation != null && message.hasOwnProperty("utf8_validation"))
                    object.utf8_validation = options.enums === String ? $root.google.protobuf.FeatureSet.Utf8Validation[message.utf8_validation] === undefined ? message.utf8_validation : $root.google.protobuf.FeatureSet.Utf8Validation[message.utf8_validation] : message.utf8_validation;
                if (message.message_encoding != null && message.hasOwnProperty("message_encoding"))
                    object.message_encoding = options.enums === String ? $root.google.protobuf.FeatureSet.MessageEncoding[message.message_encoding] === undefined ? message.message_encoding : $root.google.protobuf.FeatureSet.MessageEncoding[message.message_encoding] : message.message_encoding;
                if (message.json_format != null && message.hasOwnProperty("json_format"))
                    object.json_format = options.enums === String ? $root.google.protobuf.FeatureSet.JsonFormat[message.json_format] === undefined ? message.json_format : $root.google.protobuf.FeatureSet.JsonFormat[message.json_format] : message.json_format;
                if (message.enforce_naming_style != null && message.hasOwnProperty("enforce_naming_style"))
                    object.enforce_naming_style = options.enums === String ? $root.google.protobuf.FeatureSet.EnforceNamingStyle[message.enforce_naming_style] === undefined ? message.enforce_naming_style : $root.google.protobuf.FeatureSet.EnforceNamingStyle[message.enforce_naming_style] : message.enforce_naming_style;
                if (message.default_symbol_visibility != null && message.hasOwnProperty("default_symbol_visibility"))
                    object.default_symbol_visibility = options.enums === String ? $root.google.protobuf.FeatureSet.VisibilityFeature.DefaultSymbolVisibility[message.default_symbol_visibility] === undefined ? message.default_symbol_visibility : $root.google.protobuf.FeatureSet.VisibilityFeature.DefaultSymbolVisibility[message.default_symbol_visibility] : message.default_symbol_visibility;
                return object;
            };

            /**
             * Converts this FeatureSet to JSON.
             * @function toJSON
             * @memberof google.protobuf.FeatureSet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FeatureSet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for FeatureSet
             * @function getTypeUrl
             * @memberof google.protobuf.FeatureSet
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            FeatureSet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.FeatureSet";
            };

            /**
             * FieldPresence enum.
             * @name google.protobuf.FeatureSet.FieldPresence
             * @enum {number}
             * @property {number} FIELD_PRESENCE_UNKNOWN=0 FIELD_PRESENCE_UNKNOWN value
             * @property {number} EXPLICIT=1 EXPLICIT value
             * @property {number} IMPLICIT=2 IMPLICIT value
             * @property {number} LEGACY_REQUIRED=3 LEGACY_REQUIRED value
             */
            FeatureSet.FieldPresence = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "FIELD_PRESENCE_UNKNOWN"] = 0;
                values[valuesById[1] = "EXPLICIT"] = 1;
                values[valuesById[2] = "IMPLICIT"] = 2;
                values[valuesById[3] = "LEGACY_REQUIRED"] = 3;
                return values;
            })();

            /**
             * EnumType enum.
             * @name google.protobuf.FeatureSet.EnumType
             * @enum {number}
             * @property {number} ENUM_TYPE_UNKNOWN=0 ENUM_TYPE_UNKNOWN value
             * @property {number} OPEN=1 OPEN value
             * @property {number} CLOSED=2 CLOSED value
             */
            FeatureSet.EnumType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "ENUM_TYPE_UNKNOWN"] = 0;
                values[valuesById[1] = "OPEN"] = 1;
                values[valuesById[2] = "CLOSED"] = 2;
                return values;
            })();

            /**
             * RepeatedFieldEncoding enum.
             * @name google.protobuf.FeatureSet.RepeatedFieldEncoding
             * @enum {number}
             * @property {number} REPEATED_FIELD_ENCODING_UNKNOWN=0 REPEATED_FIELD_ENCODING_UNKNOWN value
             * @property {number} PACKED=1 PACKED value
             * @property {number} EXPANDED=2 EXPANDED value
             */
            FeatureSet.RepeatedFieldEncoding = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "REPEATED_FIELD_ENCODING_UNKNOWN"] = 0;
                values[valuesById[1] = "PACKED"] = 1;
                values[valuesById[2] = "EXPANDED"] = 2;
                return values;
            })();

            /**
             * Utf8Validation enum.
             * @name google.protobuf.FeatureSet.Utf8Validation
             * @enum {number}
             * @property {number} UTF8_VALIDATION_UNKNOWN=0 UTF8_VALIDATION_UNKNOWN value
             * @property {number} VERIFY=2 VERIFY value
             * @property {number} NONE=3 NONE value
             */
            FeatureSet.Utf8Validation = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UTF8_VALIDATION_UNKNOWN"] = 0;
                values[valuesById[2] = "VERIFY"] = 2;
                values[valuesById[3] = "NONE"] = 3;
                return values;
            })();

            /**
             * MessageEncoding enum.
             * @name google.protobuf.FeatureSet.MessageEncoding
             * @enum {number}
             * @property {number} MESSAGE_ENCODING_UNKNOWN=0 MESSAGE_ENCODING_UNKNOWN value
             * @property {number} LENGTH_PREFIXED=1 LENGTH_PREFIXED value
             * @property {number} DELIMITED=2 DELIMITED value
             */
            FeatureSet.MessageEncoding = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "MESSAGE_ENCODING_UNKNOWN"] = 0;
                values[valuesById[1] = "LENGTH_PREFIXED"] = 1;
                values[valuesById[2] = "DELIMITED"] = 2;
                return values;
            })();

            /**
             * JsonFormat enum.
             * @name google.protobuf.FeatureSet.JsonFormat
             * @enum {number}
             * @property {number} JSON_FORMAT_UNKNOWN=0 JSON_FORMAT_UNKNOWN value
             * @property {number} ALLOW=1 ALLOW value
             * @property {number} LEGACY_BEST_EFFORT=2 LEGACY_BEST_EFFORT value
             */
            FeatureSet.JsonFormat = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "JSON_FORMAT_UNKNOWN"] = 0;
                values[valuesById[1] = "ALLOW"] = 1;
                values[valuesById[2] = "LEGACY_BEST_EFFORT"] = 2;
                return values;
            })();

            /**
             * EnforceNamingStyle enum.
             * @name google.protobuf.FeatureSet.EnforceNamingStyle
             * @enum {number}
             * @property {number} ENFORCE_NAMING_STYLE_UNKNOWN=0 ENFORCE_NAMING_STYLE_UNKNOWN value
             * @property {number} STYLE2024=1 STYLE2024 value
             * @property {number} STYLE_LEGACY=2 STYLE_LEGACY value
             */
            FeatureSet.EnforceNamingStyle = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "ENFORCE_NAMING_STYLE_UNKNOWN"] = 0;
                values[valuesById[1] = "STYLE2024"] = 1;
                values[valuesById[2] = "STYLE_LEGACY"] = 2;
                return values;
            })();

            FeatureSet.VisibilityFeature = (function() {

                /**
                 * Properties of a VisibilityFeature.
                 * @memberof google.protobuf.FeatureSet
                 * @interface IVisibilityFeature
                 */

                /**
                 * Constructs a new VisibilityFeature.
                 * @memberof google.protobuf.FeatureSet
                 * @classdesc Represents a VisibilityFeature.
                 * @implements IVisibilityFeature
                 * @constructor
                 * @param {google.protobuf.FeatureSet.IVisibilityFeature=} [properties] Properties to set
                 */
                function VisibilityFeature(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Creates a new VisibilityFeature instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FeatureSet.VisibilityFeature
                 * @static
                 * @param {google.protobuf.FeatureSet.IVisibilityFeature=} [properties] Properties to set
                 * @returns {google.protobuf.FeatureSet.VisibilityFeature} VisibilityFeature instance
                 */
                VisibilityFeature.create = function create(properties) {
                    return new VisibilityFeature(properties);
                };

                /**
                 * Encodes the specified VisibilityFeature message. Does not implicitly {@link google.protobuf.FeatureSet.VisibilityFeature.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FeatureSet.VisibilityFeature
                 * @static
                 * @param {google.protobuf.FeatureSet.IVisibilityFeature} message VisibilityFeature message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VisibilityFeature.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };

                /**
                 * Encodes the specified VisibilityFeature message, length delimited. Does not implicitly {@link google.protobuf.FeatureSet.VisibilityFeature.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FeatureSet.VisibilityFeature
                 * @static
                 * @param {google.protobuf.FeatureSet.IVisibilityFeature} message VisibilityFeature message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VisibilityFeature.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a VisibilityFeature message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FeatureSet.VisibilityFeature
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FeatureSet.VisibilityFeature} VisibilityFeature
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VisibilityFeature.decode = function decode(reader, length, error) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FeatureSet.VisibilityFeature();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        if (tag === error)
                            break;
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a VisibilityFeature message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FeatureSet.VisibilityFeature
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FeatureSet.VisibilityFeature} VisibilityFeature
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VisibilityFeature.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a VisibilityFeature message.
                 * @function verify
                 * @memberof google.protobuf.FeatureSet.VisibilityFeature
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                VisibilityFeature.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };

                /**
                 * Creates a VisibilityFeature message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FeatureSet.VisibilityFeature
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FeatureSet.VisibilityFeature} VisibilityFeature
                 */
                VisibilityFeature.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FeatureSet.VisibilityFeature)
                        return object;
                    return new $root.google.protobuf.FeatureSet.VisibilityFeature();
                };

                /**
                 * Creates a plain object from a VisibilityFeature message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FeatureSet.VisibilityFeature
                 * @static
                 * @param {google.protobuf.FeatureSet.VisibilityFeature} message VisibilityFeature
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                VisibilityFeature.toObject = function toObject() {
                    return {};
                };

                /**
                 * Converts this VisibilityFeature to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FeatureSet.VisibilityFeature
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                VisibilityFeature.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for VisibilityFeature
                 * @function getTypeUrl
                 * @memberof google.protobuf.FeatureSet.VisibilityFeature
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                VisibilityFeature.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FeatureSet.VisibilityFeature";
                };

                /**
                 * DefaultSymbolVisibility enum.
                 * @name google.protobuf.FeatureSet.VisibilityFeature.DefaultSymbolVisibility
                 * @enum {number}
                 * @property {number} DEFAULT_SYMBOL_VISIBILITY_UNKNOWN=0 DEFAULT_SYMBOL_VISIBILITY_UNKNOWN value
                 * @property {number} EXPORT_ALL=1 EXPORT_ALL value
                 * @property {number} EXPORT_TOP_LEVEL=2 EXPORT_TOP_LEVEL value
                 * @property {number} LOCAL_ALL=3 LOCAL_ALL value
                 * @property {number} STRICT=4 STRICT value
                 */
                VisibilityFeature.DefaultSymbolVisibility = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "DEFAULT_SYMBOL_VISIBILITY_UNKNOWN"] = 0;
                    values[valuesById[1] = "EXPORT_ALL"] = 1;
                    values[valuesById[2] = "EXPORT_TOP_LEVEL"] = 2;
                    values[valuesById[3] = "LOCAL_ALL"] = 3;
                    values[valuesById[4] = "STRICT"] = 4;
                    return values;
                })();

                return VisibilityFeature;
            })();

            return FeatureSet;
        })();

        protobuf.FeatureSetDefaults = (function() {

            /**
             * Properties of a FeatureSetDefaults.
             * @memberof google.protobuf
             * @interface IFeatureSetDefaults
             * @property {Array.<google.protobuf.FeatureSetDefaults.IFeatureSetEditionDefault>|null} [defaults] FeatureSetDefaults defaults
             * @property {google.protobuf.Edition|null} [minimum_edition] FeatureSetDefaults minimum_edition
             * @property {google.protobuf.Edition|null} [maximum_edition] FeatureSetDefaults maximum_edition
             */

            /**
             * Constructs a new FeatureSetDefaults.
             * @memberof google.protobuf
             * @classdesc Represents a FeatureSetDefaults.
             * @implements IFeatureSetDefaults
             * @constructor
             * @param {google.protobuf.IFeatureSetDefaults=} [properties] Properties to set
             */
            function FeatureSetDefaults(properties) {
                this.defaults = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FeatureSetDefaults defaults.
             * @member {Array.<google.protobuf.FeatureSetDefaults.IFeatureSetEditionDefault>} defaults
             * @memberof google.protobuf.FeatureSetDefaults
             * @instance
             */
            FeatureSetDefaults.prototype.defaults = $util.emptyArray;

            /**
             * FeatureSetDefaults minimum_edition.
             * @member {google.protobuf.Edition} minimum_edition
             * @memberof google.protobuf.FeatureSetDefaults
             * @instance
             */
            FeatureSetDefaults.prototype.minimum_edition = 0;

            /**
             * FeatureSetDefaults maximum_edition.
             * @member {google.protobuf.Edition} maximum_edition
             * @memberof google.protobuf.FeatureSetDefaults
             * @instance
             */
            FeatureSetDefaults.prototype.maximum_edition = 0;

            /**
             * Creates a new FeatureSetDefaults instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FeatureSetDefaults
             * @static
             * @param {google.protobuf.IFeatureSetDefaults=} [properties] Properties to set
             * @returns {google.protobuf.FeatureSetDefaults} FeatureSetDefaults instance
             */
            FeatureSetDefaults.create = function create(properties) {
                return new FeatureSetDefaults(properties);
            };

            /**
             * Encodes the specified FeatureSetDefaults message. Does not implicitly {@link google.protobuf.FeatureSetDefaults.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FeatureSetDefaults
             * @static
             * @param {google.protobuf.IFeatureSetDefaults} message FeatureSetDefaults message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FeatureSetDefaults.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.defaults != null && message.defaults.length)
                    for (var i = 0; i < message.defaults.length; ++i)
                        $root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.encode(message.defaults[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.minimum_edition != null && Object.hasOwnProperty.call(message, "minimum_edition"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.minimum_edition);
                if (message.maximum_edition != null && Object.hasOwnProperty.call(message, "maximum_edition"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.maximum_edition);
                return writer;
            };

            /**
             * Encodes the specified FeatureSetDefaults message, length delimited. Does not implicitly {@link google.protobuf.FeatureSetDefaults.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FeatureSetDefaults
             * @static
             * @param {google.protobuf.IFeatureSetDefaults} message FeatureSetDefaults message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FeatureSetDefaults.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FeatureSetDefaults message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FeatureSetDefaults
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FeatureSetDefaults} FeatureSetDefaults
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FeatureSetDefaults.decode = function decode(reader, length, error) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FeatureSetDefaults();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    if (tag === error)
                        break;
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.defaults && message.defaults.length))
                                message.defaults = [];
                            message.defaults.push($root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.decode(reader, reader.uint32()));
                            break;
                        }
                    case 4: {
                            message.minimum_edition = reader.int32();
                            break;
                        }
                    case 5: {
                            message.maximum_edition = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FeatureSetDefaults message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FeatureSetDefaults
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FeatureSetDefaults} FeatureSetDefaults
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FeatureSetDefaults.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FeatureSetDefaults message.
             * @function verify
             * @memberof google.protobuf.FeatureSetDefaults
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FeatureSetDefaults.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.defaults != null && message.hasOwnProperty("defaults")) {
                    if (!Array.isArray(message.defaults))
                        return "defaults: array expected";
                    for (var i = 0; i < message.defaults.length; ++i) {
                        var error = $root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.verify(message.defaults[i]);
                        if (error)
                            return "defaults." + error;
                    }
                }
                if (message.minimum_edition != null && message.hasOwnProperty("minimum_edition"))
                    switch (message.minimum_edition) {
                    default:
                        return "minimum_edition: enum value expected";
                    case 0:
                    case 900:
                    case 998:
                    case 999:
                    case 1000:
                    case 1001:
                    case 1:
                    case 2:
                    case 99997:
                    case 99998:
                    case 99999:
                    case 2147483647:
                        break;
                    }
                if (message.maximum_edition != null && message.hasOwnProperty("maximum_edition"))
                    switch (message.maximum_edition) {
                    default:
                        return "maximum_edition: enum value expected";
                    case 0:
                    case 900:
                    case 998:
                    case 999:
                    case 1000:
                    case 1001:
                    case 1:
                    case 2:
                    case 99997:
                    case 99998:
                    case 99999:
                    case 2147483647:
                        break;
                    }
                return null;
            };

            /**
             * Creates a FeatureSetDefaults message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FeatureSetDefaults
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FeatureSetDefaults} FeatureSetDefaults
             */
            FeatureSetDefaults.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FeatureSetDefaults)
                    return object;
                var message = new $root.google.protobuf.FeatureSetDefaults();
                if (object.defaults) {
                    if (!Array.isArray(object.defaults))
                        throw TypeError(".google.protobuf.FeatureSetDefaults.defaults: array expected");
                    message.defaults = [];
                    for (var i = 0; i < object.defaults.length; ++i) {
                        if (typeof object.defaults[i] !== "object")
                            throw TypeError(".google.protobuf.FeatureSetDefaults.defaults: object expected");
                        message.defaults[i] = $root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.fromObject(object.defaults[i]);
                    }
                }
                switch (object.minimum_edition) {
                default:
                    if (typeof object.minimum_edition === "number") {
                        message.minimum_edition = object.minimum_edition;
                        break;
                    }
                    break;
                case "EDITION_UNKNOWN":
                case 0:
                    message.minimum_edition = 0;
                    break;
                case "EDITION_LEGACY":
                case 900:
                    message.minimum_edition = 900;
                    break;
                case "EDITION_PROTO2":
                case 998:
                    message.minimum_edition = 998;
                    break;
                case "EDITION_PROTO3":
                case 999:
                    message.minimum_edition = 999;
                    break;
                case "EDITION_2023":
                case 1000:
                    message.minimum_edition = 1000;
                    break;
                case "EDITION_2024":
                case 1001:
                    message.minimum_edition = 1001;
                    break;
                case "EDITION_1_TEST_ONLY":
                case 1:
                    message.minimum_edition = 1;
                    break;
                case "EDITION_2_TEST_ONLY":
                case 2:
                    message.minimum_edition = 2;
                    break;
                case "EDITION_99997_TEST_ONLY":
                case 99997:
                    message.minimum_edition = 99997;
                    break;
                case "EDITION_99998_TEST_ONLY":
                case 99998:
                    message.minimum_edition = 99998;
                    break;
                case "EDITION_99999_TEST_ONLY":
                case 99999:
                    message.minimum_edition = 99999;
                    break;
                case "EDITION_MAX":
                case 2147483647:
                    message.minimum_edition = 2147483647;
                    break;
                }
                switch (object.maximum_edition) {
                default:
                    if (typeof object.maximum_edition === "number") {
                        message.maximum_edition = object.maximum_edition;
                        break;
                    }
                    break;
                case "EDITION_UNKNOWN":
                case 0:
                    message.maximum_edition = 0;
                    break;
                case "EDITION_LEGACY":
                case 900:
                    message.maximum_edition = 900;
                    break;
                case "EDITION_PROTO2":
                case 998:
                    message.maximum_edition = 998;
                    break;
                case "EDITION_PROTO3":
                case 999:
                    message.maximum_edition = 999;
                    break;
                case "EDITION_2023":
                case 1000:
                    message.maximum_edition = 1000;
                    break;
                case "EDITION_2024":
                case 1001:
                    message.maximum_edition = 1001;
                    break;
                case "EDITION_1_TEST_ONLY":
                case 1:
                    message.maximum_edition = 1;
                    break;
                case "EDITION_2_TEST_ONLY":
                case 2:
                    message.maximum_edition = 2;
                    break;
                case "EDITION_99997_TEST_ONLY":
                case 99997:
                    message.maximum_edition = 99997;
                    break;
                case "EDITION_99998_TEST_ONLY":
                case 99998:
                    message.maximum_edition = 99998;
                    break;
                case "EDITION_99999_TEST_ONLY":
                case 99999:
                    message.maximum_edition = 99999;
                    break;
                case "EDITION_MAX":
                case 2147483647:
                    message.maximum_edition = 2147483647;
                    break;
                }
                return message;
            };

            /**
             * Creates a plain object from a FeatureSetDefaults message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FeatureSetDefaults
             * @static
             * @param {google.protobuf.FeatureSetDefaults} message FeatureSetDefaults
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FeatureSetDefaults.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.defaults = [];
                if (options.defaults) {
                    object.minimum_edition = options.enums === String ? "EDITION_UNKNOWN" : 0;
                    object.maximum_edition = options.enums === String ? "EDITION_UNKNOWN" : 0;
                }
                if (message.defaults && message.defaults.length) {
                    object.defaults = [];
                    for (var j = 0; j < message.defaults.length; ++j)
                        object.defaults[j] = $root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.toObject(message.defaults[j], options);
                }
                if (message.minimum_edition != null && message.hasOwnProperty("minimum_edition"))
                    object.minimum_edition = options.enums === String ? $root.google.protobuf.Edition[message.minimum_edition] === undefined ? message.minimum_edition : $root.google.protobuf.Edition[message.minimum_edition] : message.minimum_edition;
                if (message.maximum_edition != null && message.hasOwnProperty("maximum_edition"))
                    object.maximum_edition = options.enums === String ? $root.google.protobuf.Edition[message.maximum_edition] === undefined ? message.maximum_edition : $root.google.protobuf.Edition[message.maximum_edition] : message.maximum_edition;
                return object;
            };

            /**
             * Converts this FeatureSetDefaults to JSON.
             * @function toJSON
             * @memberof google.protobuf.FeatureSetDefaults
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FeatureSetDefaults.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for FeatureSetDefaults
             * @function getTypeUrl
             * @memberof google.protobuf.FeatureSetDefaults
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            FeatureSetDefaults.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.FeatureSetDefaults";
            };

            FeatureSetDefaults.FeatureSetEditionDefault = (function() {

                /**
                 * Properties of a FeatureSetEditionDefault.
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @interface IFeatureSetEditionDefault
                 * @property {google.protobuf.Edition|null} [edition] FeatureSetEditionDefault edition
                 * @property {google.protobuf.IFeatureSet|null} [overridable_features] FeatureSetEditionDefault overridable_features
                 * @property {google.protobuf.IFeatureSet|null} [fixed_features] FeatureSetEditionDefault fixed_features
                 */

                /**
                 * Constructs a new FeatureSetEditionDefault.
                 * @memberof google.protobuf.FeatureSetDefaults
                 * @classdesc Represents a FeatureSetEditionDefault.
                 * @implements IFeatureSetEditionDefault
                 * @constructor
                 * @param {google.protobuf.FeatureSetDefaults.IFeatureSetEditionDefault=} [properties] Properties to set
                 */
                function FeatureSetEditionDefault(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * FeatureSetEditionDefault edition.
                 * @member {google.protobuf.Edition} edition
                 * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                 * @instance
                 */
                FeatureSetEditionDefault.prototype.edition = 0;

                /**
                 * FeatureSetEditionDefault overridable_features.
                 * @member {google.protobuf.IFeatureSet|null|undefined} overridable_features
                 * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                 * @instance
                 */
                FeatureSetEditionDefault.prototype.overridable_features = null;

                /**
                 * FeatureSetEditionDefault fixed_features.
                 * @member {google.protobuf.IFeatureSet|null|undefined} fixed_features
                 * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                 * @instance
                 */
                FeatureSetEditionDefault.prototype.fixed_features = null;

                /**
                 * Creates a new FeatureSetEditionDefault instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                 * @static
                 * @param {google.protobuf.FeatureSetDefaults.IFeatureSetEditionDefault=} [properties] Properties to set
                 * @returns {google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault} FeatureSetEditionDefault instance
                 */
                FeatureSetEditionDefault.create = function create(properties) {
                    return new FeatureSetEditionDefault(properties);
                };

                /**
                 * Encodes the specified FeatureSetEditionDefault message. Does not implicitly {@link google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                 * @static
                 * @param {google.protobuf.FeatureSetDefaults.IFeatureSetEditionDefault} message FeatureSetEditionDefault message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeatureSetEditionDefault.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.edition != null && Object.hasOwnProperty.call(message, "edition"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.edition);
                    if (message.overridable_features != null && Object.hasOwnProperty.call(message, "overridable_features"))
                        $root.google.protobuf.FeatureSet.encode(message.overridable_features, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.fixed_features != null && Object.hasOwnProperty.call(message, "fixed_features"))
                        $root.google.protobuf.FeatureSet.encode(message.fixed_features, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified FeatureSetEditionDefault message, length delimited. Does not implicitly {@link google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                 * @static
                 * @param {google.protobuf.FeatureSetDefaults.IFeatureSetEditionDefault} message FeatureSetEditionDefault message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeatureSetEditionDefault.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a FeatureSetEditionDefault message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault} FeatureSetEditionDefault
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeatureSetEditionDefault.decode = function decode(reader, length, error) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        if (tag === error)
                            break;
                        switch (tag >>> 3) {
                        case 3: {
                                message.edition = reader.int32();
                                break;
                            }
                        case 4: {
                                message.overridable_features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                message.fixed_features = $root.google.protobuf.FeatureSet.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a FeatureSetEditionDefault message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault} FeatureSetEditionDefault
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeatureSetEditionDefault.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a FeatureSetEditionDefault message.
                 * @function verify
                 * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FeatureSetEditionDefault.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        switch (message.edition) {
                        default:
                            return "edition: enum value expected";
                        case 0:
                        case 900:
                        case 998:
                        case 999:
                        case 1000:
                        case 1001:
                        case 1:
                        case 2:
                        case 99997:
                        case 99998:
                        case 99999:
                        case 2147483647:
                            break;
                        }
                    if (message.overridable_features != null && message.hasOwnProperty("overridable_features")) {
                        var error = $root.google.protobuf.FeatureSet.verify(message.overridable_features);
                        if (error)
                            return "overridable_features." + error;
                    }
                    if (message.fixed_features != null && message.hasOwnProperty("fixed_features")) {
                        var error = $root.google.protobuf.FeatureSet.verify(message.fixed_features);
                        if (error)
                            return "fixed_features." + error;
                    }
                    return null;
                };

                /**
                 * Creates a FeatureSetEditionDefault message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault} FeatureSetEditionDefault
                 */
                FeatureSetEditionDefault.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault)
                        return object;
                    var message = new $root.google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault();
                    switch (object.edition) {
                    default:
                        if (typeof object.edition === "number") {
                            message.edition = object.edition;
                            break;
                        }
                        break;
                    case "EDITION_UNKNOWN":
                    case 0:
                        message.edition = 0;
                        break;
                    case "EDITION_LEGACY":
                    case 900:
                        message.edition = 900;
                        break;
                    case "EDITION_PROTO2":
                    case 998:
                        message.edition = 998;
                        break;
                    case "EDITION_PROTO3":
                    case 999:
                        message.edition = 999;
                        break;
                    case "EDITION_2023":
                    case 1000:
                        message.edition = 1000;
                        break;
                    case "EDITION_2024":
                    case 1001:
                        message.edition = 1001;
                        break;
                    case "EDITION_1_TEST_ONLY":
                    case 1:
                        message.edition = 1;
                        break;
                    case "EDITION_2_TEST_ONLY":
                    case 2:
                        message.edition = 2;
                        break;
                    case "EDITION_99997_TEST_ONLY":
                    case 99997:
                        message.edition = 99997;
                        break;
                    case "EDITION_99998_TEST_ONLY":
                    case 99998:
                        message.edition = 99998;
                        break;
                    case "EDITION_99999_TEST_ONLY":
                    case 99999:
                        message.edition = 99999;
                        break;
                    case "EDITION_MAX":
                    case 2147483647:
                        message.edition = 2147483647;
                        break;
                    }
                    if (object.overridable_features != null) {
                        if (typeof object.overridable_features !== "object")
                            throw TypeError(".google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.overridable_features: object expected");
                        message.overridable_features = $root.google.protobuf.FeatureSet.fromObject(object.overridable_features);
                    }
                    if (object.fixed_features != null) {
                        if (typeof object.fixed_features !== "object")
                            throw TypeError(".google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault.fixed_features: object expected");
                        message.fixed_features = $root.google.protobuf.FeatureSet.fromObject(object.fixed_features);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a FeatureSetEditionDefault message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                 * @static
                 * @param {google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault} message FeatureSetEditionDefault
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FeatureSetEditionDefault.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.edition = options.enums === String ? "EDITION_UNKNOWN" : 0;
                        object.overridable_features = null;
                        object.fixed_features = null;
                    }
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        object.edition = options.enums === String ? $root.google.protobuf.Edition[message.edition] === undefined ? message.edition : $root.google.protobuf.Edition[message.edition] : message.edition;
                    if (message.overridable_features != null && message.hasOwnProperty("overridable_features"))
                        object.overridable_features = $root.google.protobuf.FeatureSet.toObject(message.overridable_features, options);
                    if (message.fixed_features != null && message.hasOwnProperty("fixed_features"))
                        object.fixed_features = $root.google.protobuf.FeatureSet.toObject(message.fixed_features, options);
                    return object;
                };

                /**
                 * Converts this FeatureSetEditionDefault to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FeatureSetEditionDefault.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for FeatureSetEditionDefault
                 * @function getTypeUrl
                 * @memberof google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FeatureSetEditionDefault.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault";
                };

                return FeatureSetEditionDefault;
            })();

            return FeatureSetDefaults;
        })();

        protobuf.SourceCodeInfo = (function() {

            /**
             * Properties of a SourceCodeInfo.
             * @memberof google.protobuf
             * @interface ISourceCodeInfo
             * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
             */

            /**
             * Constructs a new SourceCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a SourceCodeInfo.
             * @implements ISourceCodeInfo
             * @constructor
             * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
             */
            function SourceCodeInfo(properties) {
                this.location = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SourceCodeInfo location.
             * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             */
            SourceCodeInfo.prototype.location = $util.emptyArray;

            /**
             * Creates a new SourceCodeInfo instance using the specified properties.
             * @function create
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
             */
            SourceCodeInfo.create = function create(properties) {
                return new SourceCodeInfo(properties);
            };

            /**
             * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SourceCodeInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.location != null && message.location.length)
                    for (var i = 0; i < message.location.length; ++i)
                        $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SourceCodeInfo.decode = function decode(reader, length, error) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    if (tag === error)
                        break;
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.location && message.location.length))
                                message.location = [];
                            message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SourceCodeInfo message.
             * @function verify
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SourceCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                    if (!Array.isArray(message.location))
                        return "location: array expected";
                    for (var i = 0; i < message.location.length; ++i) {
                        var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                        if (error)
                            return "location." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             */
            SourceCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.SourceCodeInfo)
                    return object;
                var message = new $root.google.protobuf.SourceCodeInfo();
                if (object.location) {
                    if (!Array.isArray(object.location))
                        throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                    message.location = [];
                    for (var i = 0; i < object.location.length; ++i) {
                        if (typeof object.location[i] !== "object")
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                        message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SourceCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.location = [];
                if (message.location && message.location.length) {
                    object.location = [];
                    for (var j = 0; j < message.location.length; ++j)
                        object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                }
                return object;
            };

            /**
             * Converts this SourceCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SourceCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SourceCodeInfo
             * @function getTypeUrl
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SourceCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.SourceCodeInfo";
            };

            SourceCodeInfo.Location = (function() {

                /**
                 * Properties of a Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @interface ILocation
                 * @property {Array.<number>|null} [path] Location path
                 * @property {Array.<number>|null} [span] Location span
                 * @property {string|null} [leading_comments] Location leading_comments
                 * @property {string|null} [trailing_comments] Location trailing_comments
                 * @property {Array.<string>|null} [leading_detached_comments] Location leading_detached_comments
                 */

                /**
                 * Constructs a new Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @classdesc Represents a Location.
                 * @implements ILocation
                 * @constructor
                 * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                 */
                function Location(properties) {
                    this.path = [];
                    this.span = [];
                    this.leading_detached_comments = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Location path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.path = $util.emptyArray;

                /**
                 * Location span.
                 * @member {Array.<number>} span
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.span = $util.emptyArray;

                /**
                 * Location leading_comments.
                 * @member {string} leading_comments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leading_comments = "";

                /**
                 * Location trailing_comments.
                 * @member {string} trailing_comments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.trailing_comments = "";

                /**
                 * Location leading_detached_comments.
                 * @member {Array.<string>} leading_detached_comments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leading_detached_comments = $util.emptyArray;

                /**
                 * Creates a new Location instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                 */
                Location.create = function create(properties) {
                    return new Location(properties);
                };

                /**
                 * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && message.path.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (var i = 0; i < message.path.length; ++i)
                            writer.int32(message.path[i]);
                        writer.ldelim();
                    }
                    if (message.span != null && message.span.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (var i = 0; i < message.span.length; ++i)
                            writer.int32(message.span[i]);
                        writer.ldelim();
                    }
                    if (message.leading_comments != null && Object.hasOwnProperty.call(message, "leading_comments"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.leading_comments);
                    if (message.trailing_comments != null && Object.hasOwnProperty.call(message, "trailing_comments"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailing_comments);
                    if (message.leading_detached_comments != null && message.leading_detached_comments.length)
                        for (var i = 0; i < message.leading_detached_comments.length; ++i)
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.leading_detached_comments[i]);
                    return writer;
                };

                /**
                 * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Location message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decode = function decode(reader, length, error) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        if (tag === error)
                            break;
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            }
                        case 2: {
                                if (!(message.span && message.span.length))
                                    message.span = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.span.push(reader.int32());
                                } else
                                    message.span.push(reader.int32());
                                break;
                            }
                        case 3: {
                                message.leading_comments = reader.string();
                                break;
                            }
                        case 4: {
                                message.trailing_comments = reader.string();
                                break;
                            }
                        case 6: {
                                if (!(message.leading_detached_comments && message.leading_detached_comments.length))
                                    message.leading_detached_comments = [];
                                message.leading_detached_comments.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Location message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Location message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Location.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (var i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.span != null && message.hasOwnProperty("span")) {
                        if (!Array.isArray(message.span))
                            return "span: array expected";
                        for (var i = 0; i < message.span.length; ++i)
                            if (!$util.isInteger(message.span[i]))
                                return "span: integer[] expected";
                    }
                    if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                        if (!$util.isString(message.leading_comments))
                            return "leading_comments: string expected";
                    if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                        if (!$util.isString(message.trailing_comments))
                            return "trailing_comments: string expected";
                    if (message.leading_detached_comments != null && message.hasOwnProperty("leading_detached_comments")) {
                        if (!Array.isArray(message.leading_detached_comments))
                            return "leading_detached_comments: array expected";
                        for (var i = 0; i < message.leading_detached_comments.length; ++i)
                            if (!$util.isString(message.leading_detached_comments[i]))
                                return "leading_detached_comments: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a Location message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 */
                Location.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo.Location();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                        message.path = [];
                        for (var i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.span) {
                        if (!Array.isArray(object.span))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                        message.span = [];
                        for (var i = 0; i < object.span.length; ++i)
                            message.span[i] = object.span[i] | 0;
                    }
                    if (object.leading_comments != null)
                        message.leading_comments = String(object.leading_comments);
                    if (object.trailing_comments != null)
                        message.trailing_comments = String(object.trailing_comments);
                    if (object.leading_detached_comments) {
                        if (!Array.isArray(object.leading_detached_comments))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.leading_detached_comments: array expected");
                        message.leading_detached_comments = [];
                        for (var i = 0; i < object.leading_detached_comments.length; ++i)
                            message.leading_detached_comments[i] = String(object.leading_detached_comments[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Location message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.Location} message Location
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Location.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.path = [];
                        object.span = [];
                        object.leading_detached_comments = [];
                    }
                    if (options.defaults) {
                        object.leading_comments = "";
                        object.trailing_comments = "";
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (var j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.span && message.span.length) {
                        object.span = [];
                        for (var j = 0; j < message.span.length; ++j)
                            object.span[j] = message.span[j];
                    }
                    if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                        object.leading_comments = message.leading_comments;
                    if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                        object.trailing_comments = message.trailing_comments;
                    if (message.leading_detached_comments && message.leading_detached_comments.length) {
                        object.leading_detached_comments = [];
                        for (var j = 0; j < message.leading_detached_comments.length; ++j)
                            object.leading_detached_comments[j] = message.leading_detached_comments[j];
                    }
                    return object;
                };

                /**
                 * Converts this Location to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Location.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Location
                 * @function getTypeUrl
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Location.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.SourceCodeInfo.Location";
                };

                return Location;
            })();

            return SourceCodeInfo;
        })();

        protobuf.GeneratedCodeInfo = (function() {

            /**
             * Properties of a GeneratedCodeInfo.
             * @memberof google.protobuf
             * @interface IGeneratedCodeInfo
             * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
             */

            /**
             * Constructs a new GeneratedCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a GeneratedCodeInfo.
             * @implements IGeneratedCodeInfo
             * @constructor
             * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
             */
            function GeneratedCodeInfo(properties) {
                this.annotation = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GeneratedCodeInfo annotation.
             * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             */
            GeneratedCodeInfo.prototype.annotation = $util.emptyArray;

            /**
             * Creates a new GeneratedCodeInfo instance using the specified properties.
             * @function create
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
             */
            GeneratedCodeInfo.create = function create(properties) {
                return new GeneratedCodeInfo(properties);
            };

            /**
             * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneratedCodeInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.annotation != null && message.annotation.length)
                    for (var i = 0; i < message.annotation.length; ++i)
                        $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneratedCodeInfo.decode = function decode(reader, length, error) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    if (tag === error)
                        break;
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.annotation && message.annotation.length))
                                message.annotation = [];
                            message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GeneratedCodeInfo message.
             * @function verify
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GeneratedCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.annotation != null && message.hasOwnProperty("annotation")) {
                    if (!Array.isArray(message.annotation))
                        return "annotation: array expected";
                    for (var i = 0; i < message.annotation.length; ++i) {
                        var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                        if (error)
                            return "annotation." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             */
            GeneratedCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                    return object;
                var message = new $root.google.protobuf.GeneratedCodeInfo();
                if (object.annotation) {
                    if (!Array.isArray(object.annotation))
                        throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                    message.annotation = [];
                    for (var i = 0; i < object.annotation.length; ++i) {
                        if (typeof object.annotation[i] !== "object")
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                        message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GeneratedCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.annotation = [];
                if (message.annotation && message.annotation.length) {
                    object.annotation = [];
                    for (var j = 0; j < message.annotation.length; ++j)
                        object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                }
                return object;
            };

            /**
             * Converts this GeneratedCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GeneratedCodeInfo
             * @function getTypeUrl
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GeneratedCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo";
            };

            GeneratedCodeInfo.Annotation = (function() {

                /**
                 * Properties of an Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @interface IAnnotation
                 * @property {Array.<number>|null} [path] Annotation path
                 * @property {string|null} [source_file] Annotation source_file
                 * @property {number|null} [begin] Annotation begin
                 * @property {number|null} [end] Annotation end
                 * @property {google.protobuf.GeneratedCodeInfo.Annotation.Semantic|null} [semantic] Annotation semantic
                 */

                /**
                 * Constructs a new Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @classdesc Represents an Annotation.
                 * @implements IAnnotation
                 * @constructor
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                 */
                function Annotation(properties) {
                    this.path = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Annotation path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.path = $util.emptyArray;

                /**
                 * Annotation source_file.
                 * @member {string} source_file
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.source_file = "";

                /**
                 * Annotation begin.
                 * @member {number} begin
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.begin = 0;

                /**
                 * Annotation end.
                 * @member {number} end
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.end = 0;

                /**
                 * Annotation semantic.
                 * @member {google.protobuf.GeneratedCodeInfo.Annotation.Semantic} semantic
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.semantic = 0;

                /**
                 * Creates a new Annotation instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                 */
                Annotation.create = function create(properties) {
                    return new Annotation(properties);
                };

                /**
                 * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Annotation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && message.path.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (var i = 0; i < message.path.length; ++i)
                            writer.int32(message.path[i]);
                        writer.ldelim();
                    }
                    if (message.source_file != null && Object.hasOwnProperty.call(message, "source_file"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.source_file);
                    if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                    if (message.semantic != null && Object.hasOwnProperty.call(message, "semantic"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.semantic);
                    return writer;
                };

                /**
                 * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an Annotation message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Annotation.decode = function decode(reader, length, error) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        if (tag === error)
                            break;
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            }
                        case 2: {
                                message.source_file = reader.string();
                                break;
                            }
                        case 3: {
                                message.begin = reader.int32();
                                break;
                            }
                        case 4: {
                                message.end = reader.int32();
                                break;
                            }
                        case 5: {
                                message.semantic = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an Annotation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Annotation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an Annotation message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Annotation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (var i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.source_file != null && message.hasOwnProperty("source_file"))
                        if (!$util.isString(message.source_file))
                            return "source_file: string expected";
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        if (!$util.isInteger(message.begin))
                            return "begin: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    if (message.semantic != null && message.hasOwnProperty("semantic"))
                        switch (message.semantic) {
                        default:
                            return "semantic: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    return null;
                };

                /**
                 * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 */
                Annotation.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                        message.path = [];
                        for (var i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.source_file != null)
                        message.source_file = String(object.source_file);
                    if (object.begin != null)
                        message.begin = object.begin | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    switch (object.semantic) {
                    default:
                        if (typeof object.semantic === "number") {
                            message.semantic = object.semantic;
                            break;
                        }
                        break;
                    case "NONE":
                    case 0:
                        message.semantic = 0;
                        break;
                    case "SET":
                    case 1:
                        message.semantic = 1;
                        break;
                    case "ALIAS":
                    case 2:
                        message.semantic = 2;
                        break;
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Annotation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.path = [];
                    if (options.defaults) {
                        object.source_file = "";
                        object.begin = 0;
                        object.end = 0;
                        object.semantic = options.enums === String ? "NONE" : 0;
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (var j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.source_file != null && message.hasOwnProperty("source_file"))
                        object.source_file = message.source_file;
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        object.begin = message.begin;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    if (message.semantic != null && message.hasOwnProperty("semantic"))
                        object.semantic = options.enums === String ? $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] === undefined ? message.semantic : $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] : message.semantic;
                    return object;
                };

                /**
                 * Converts this Annotation to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Annotation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Annotation
                 * @function getTypeUrl
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Annotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo.Annotation";
                };

                /**
                 * Semantic enum.
                 * @name google.protobuf.GeneratedCodeInfo.Annotation.Semantic
                 * @enum {number}
                 * @property {number} NONE=0 NONE value
                 * @property {number} SET=1 SET value
                 * @property {number} ALIAS=2 ALIAS value
                 */
                Annotation.Semantic = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "NONE"] = 0;
                    values[valuesById[1] = "SET"] = 1;
                    values[valuesById[2] = "ALIAS"] = 2;
                    return values;
                })();

                return Annotation;
            })();

            return GeneratedCodeInfo;
        })();

        /**
         * SymbolVisibility enum.
         * @name google.protobuf.SymbolVisibility
         * @enum {number}
         * @property {number} VISIBILITY_UNSET=0 VISIBILITY_UNSET value
         * @property {number} VISIBILITY_LOCAL=1 VISIBILITY_LOCAL value
         * @property {number} VISIBILITY_EXPORT=2 VISIBILITY_EXPORT value
         */
        protobuf.SymbolVisibility = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "VISIBILITY_UNSET"] = 0;
            values[valuesById[1] = "VISIBILITY_LOCAL"] = 1;
            values[valuesById[2] = "VISIBILITY_EXPORT"] = 2;
            return values;
        })();

        return protobuf;
    })();

    return google;
})();

$root.APIConnection = (function() {

    /**
     * Constructs a new APIConnection service.
     * @exports APIConnection
     * @classdesc Represents a APIConnection
     * @extends $protobuf.rpc.Service
     * @constructor
     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
     */
    function APIConnection(rpcImpl, requestDelimited, responseDelimited) {
        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
    }

    (APIConnection.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = APIConnection;

    /**
     * Creates new APIConnection service using the specified rpc implementation.
     * @function create
     * @memberof APIConnection
     * @static
     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
     * @returns {APIConnection} RPC service. Useful where requests and/or responses are streamed.
     */
    APIConnection.create = function create(rpcImpl, requestDelimited, responseDelimited) {
        return new this(rpcImpl, requestDelimited, responseDelimited);
    };

    /**
     * Callback as used by {@link APIConnection#hello}.
     * @memberof APIConnection
     * @typedef helloCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {HelloResponse} [response] HelloResponse
     */

    /**
     * Calls hello.
     * @function hello
     * @memberof APIConnection
     * @instance
     * @param {IHelloRequest} request HelloRequest message or plain object
     * @param {APIConnection.helloCallback} callback Node-style callback called with the error, if any, and HelloResponse
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.hello = function hello(request, callback) {
        return this.rpcCall(hello, $root.HelloRequest, $root.HelloResponse, request, callback);
    }, "name", { value: "hello" });

    /**
     * Calls hello.
     * @function hello
     * @memberof APIConnection
     * @instance
     * @param {IHelloRequest} request HelloRequest message or plain object
     * @returns {Promise<HelloResponse>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#authenticate}.
     * @memberof APIConnection
     * @typedef authenticateCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {AuthenticationResponse} [response] AuthenticationResponse
     */

    /**
     * Calls authenticate.
     * @function authenticate
     * @memberof APIConnection
     * @instance
     * @param {IAuthenticationRequest} request AuthenticationRequest message or plain object
     * @param {APIConnection.authenticateCallback} callback Node-style callback called with the error, if any, and AuthenticationResponse
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.authenticate = function authenticate(request, callback) {
        return this.rpcCall(authenticate, $root.AuthenticationRequest, $root.AuthenticationResponse, request, callback);
    }, "name", { value: "authenticate" });

    /**
     * Calls authenticate.
     * @function authenticate
     * @memberof APIConnection
     * @instance
     * @param {IAuthenticationRequest} request AuthenticationRequest message or plain object
     * @returns {Promise<AuthenticationResponse>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#disconnect}.
     * @memberof APIConnection
     * @typedef disconnectCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {DisconnectResponse} [response] DisconnectResponse
     */

    /**
     * Calls disconnect.
     * @function disconnect
     * @memberof APIConnection
     * @instance
     * @param {IDisconnectRequest} request DisconnectRequest message or plain object
     * @param {APIConnection.disconnectCallback} callback Node-style callback called with the error, if any, and DisconnectResponse
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.disconnect = function disconnect(request, callback) {
        return this.rpcCall(disconnect, $root.DisconnectRequest, $root.DisconnectResponse, request, callback);
    }, "name", { value: "disconnect" });

    /**
     * Calls disconnect.
     * @function disconnect
     * @memberof APIConnection
     * @instance
     * @param {IDisconnectRequest} request DisconnectRequest message or plain object
     * @returns {Promise<DisconnectResponse>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#ping}.
     * @memberof APIConnection
     * @typedef pingCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {PingResponse} [response] PingResponse
     */

    /**
     * Calls ping.
     * @function ping
     * @memberof APIConnection
     * @instance
     * @param {IPingRequest} request PingRequest message or plain object
     * @param {APIConnection.pingCallback} callback Node-style callback called with the error, if any, and PingResponse
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.ping = function ping(request, callback) {
        return this.rpcCall(ping, $root.PingRequest, $root.PingResponse, request, callback);
    }, "name", { value: "ping" });

    /**
     * Calls ping.
     * @function ping
     * @memberof APIConnection
     * @instance
     * @param {IPingRequest} request PingRequest message or plain object
     * @returns {Promise<PingResponse>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#device_info}.
     * @memberof APIConnection
     * @typedef device_infoCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {DeviceInfoResponse} [response] DeviceInfoResponse
     */

    /**
     * Calls device_info.
     * @function device_info
     * @memberof APIConnection
     * @instance
     * @param {IDeviceInfoRequest} request DeviceInfoRequest message or plain object
     * @param {APIConnection.device_infoCallback} callback Node-style callback called with the error, if any, and DeviceInfoResponse
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.device_info = function device_info(request, callback) {
        return this.rpcCall(device_info, $root.DeviceInfoRequest, $root.DeviceInfoResponse, request, callback);
    }, "name", { value: "device_info" });

    /**
     * Calls device_info.
     * @function device_info
     * @memberof APIConnection
     * @instance
     * @param {IDeviceInfoRequest} request DeviceInfoRequest message or plain object
     * @returns {Promise<DeviceInfoResponse>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#list_entities}.
     * @memberof APIConnection
     * @typedef list_entitiesCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls list_entities.
     * @function list_entities
     * @memberof APIConnection
     * @instance
     * @param {IListEntitiesRequest} request ListEntitiesRequest message or plain object
     * @param {APIConnection.list_entitiesCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.list_entities = function list_entities(request, callback) {
        return this.rpcCall(list_entities, $root.ListEntitiesRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "list_entities" });

    /**
     * Calls list_entities.
     * @function list_entities
     * @memberof APIConnection
     * @instance
     * @param {IListEntitiesRequest} request ListEntitiesRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#subscribe_states}.
     * @memberof APIConnection
     * @typedef subscribe_statesCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls subscribe_states.
     * @function subscribe_states
     * @memberof APIConnection
     * @instance
     * @param {ISubscribeStatesRequest} request SubscribeStatesRequest message or plain object
     * @param {APIConnection.subscribe_statesCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.subscribe_states = function subscribe_states(request, callback) {
        return this.rpcCall(subscribe_states, $root.SubscribeStatesRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "subscribe_states" });

    /**
     * Calls subscribe_states.
     * @function subscribe_states
     * @memberof APIConnection
     * @instance
     * @param {ISubscribeStatesRequest} request SubscribeStatesRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#subscribe_logs}.
     * @memberof APIConnection
     * @typedef subscribe_logsCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls subscribe_logs.
     * @function subscribe_logs
     * @memberof APIConnection
     * @instance
     * @param {ISubscribeLogsRequest} request SubscribeLogsRequest message or plain object
     * @param {APIConnection.subscribe_logsCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.subscribe_logs = function subscribe_logs(request, callback) {
        return this.rpcCall(subscribe_logs, $root.SubscribeLogsRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "subscribe_logs" });

    /**
     * Calls subscribe_logs.
     * @function subscribe_logs
     * @memberof APIConnection
     * @instance
     * @param {ISubscribeLogsRequest} request SubscribeLogsRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#subscribe_homeassistant_services}.
     * @memberof APIConnection
     * @typedef subscribe_homeassistant_servicesCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls subscribe_homeassistant_services.
     * @function subscribe_homeassistant_services
     * @memberof APIConnection
     * @instance
     * @param {ISubscribeHomeassistantServicesRequest} request SubscribeHomeassistantServicesRequest message or plain object
     * @param {APIConnection.subscribe_homeassistant_servicesCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.subscribe_homeassistant_services = function subscribe_homeassistant_services(request, callback) {
        return this.rpcCall(subscribe_homeassistant_services, $root.SubscribeHomeassistantServicesRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "subscribe_homeassistant_services" });

    /**
     * Calls subscribe_homeassistant_services.
     * @function subscribe_homeassistant_services
     * @memberof APIConnection
     * @instance
     * @param {ISubscribeHomeassistantServicesRequest} request SubscribeHomeassistantServicesRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#subscribe_home_assistant_states}.
     * @memberof APIConnection
     * @typedef subscribe_home_assistant_statesCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls subscribe_home_assistant_states.
     * @function subscribe_home_assistant_states
     * @memberof APIConnection
     * @instance
     * @param {ISubscribeHomeAssistantStatesRequest} request SubscribeHomeAssistantStatesRequest message or plain object
     * @param {APIConnection.subscribe_home_assistant_statesCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.subscribe_home_assistant_states = function subscribe_home_assistant_states(request, callback) {
        return this.rpcCall(subscribe_home_assistant_states, $root.SubscribeHomeAssistantStatesRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "subscribe_home_assistant_states" });

    /**
     * Calls subscribe_home_assistant_states.
     * @function subscribe_home_assistant_states
     * @memberof APIConnection
     * @instance
     * @param {ISubscribeHomeAssistantStatesRequest} request SubscribeHomeAssistantStatesRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#execute_service}.
     * @memberof APIConnection
     * @typedef execute_serviceCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls execute_service.
     * @function execute_service
     * @memberof APIConnection
     * @instance
     * @param {IExecuteServiceRequest} request ExecuteServiceRequest message or plain object
     * @param {APIConnection.execute_serviceCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.execute_service = function execute_service(request, callback) {
        return this.rpcCall(execute_service, $root.ExecuteServiceRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "execute_service" });

    /**
     * Calls execute_service.
     * @function execute_service
     * @memberof APIConnection
     * @instance
     * @param {IExecuteServiceRequest} request ExecuteServiceRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#noise_encryption_set_key}.
     * @memberof APIConnection
     * @typedef noise_encryption_set_keyCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {NoiseEncryptionSetKeyResponse} [response] NoiseEncryptionSetKeyResponse
     */

    /**
     * Calls noise_encryption_set_key.
     * @function noise_encryption_set_key
     * @memberof APIConnection
     * @instance
     * @param {INoiseEncryptionSetKeyRequest} request NoiseEncryptionSetKeyRequest message or plain object
     * @param {APIConnection.noise_encryption_set_keyCallback} callback Node-style callback called with the error, if any, and NoiseEncryptionSetKeyResponse
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.noise_encryption_set_key = function noise_encryption_set_key(request, callback) {
        return this.rpcCall(noise_encryption_set_key, $root.NoiseEncryptionSetKeyRequest, $root.NoiseEncryptionSetKeyResponse, request, callback);
    }, "name", { value: "noise_encryption_set_key" });

    /**
     * Calls noise_encryption_set_key.
     * @function noise_encryption_set_key
     * @memberof APIConnection
     * @instance
     * @param {INoiseEncryptionSetKeyRequest} request NoiseEncryptionSetKeyRequest message or plain object
     * @returns {Promise<NoiseEncryptionSetKeyResponse>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#button_command}.
     * @memberof APIConnection
     * @typedef button_commandCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls button_command.
     * @function button_command
     * @memberof APIConnection
     * @instance
     * @param {IButtonCommandRequest} request ButtonCommandRequest message or plain object
     * @param {APIConnection.button_commandCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.button_command = function button_command(request, callback) {
        return this.rpcCall(button_command, $root.ButtonCommandRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "button_command" });

    /**
     * Calls button_command.
     * @function button_command
     * @memberof APIConnection
     * @instance
     * @param {IButtonCommandRequest} request ButtonCommandRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#camera_image}.
     * @memberof APIConnection
     * @typedef camera_imageCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls camera_image.
     * @function camera_image
     * @memberof APIConnection
     * @instance
     * @param {ICameraImageRequest} request CameraImageRequest message or plain object
     * @param {APIConnection.camera_imageCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.camera_image = function camera_image(request, callback) {
        return this.rpcCall(camera_image, $root.CameraImageRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "camera_image" });

    /**
     * Calls camera_image.
     * @function camera_image
     * @memberof APIConnection
     * @instance
     * @param {ICameraImageRequest} request CameraImageRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#climate_command}.
     * @memberof APIConnection
     * @typedef climate_commandCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls climate_command.
     * @function climate_command
     * @memberof APIConnection
     * @instance
     * @param {IClimateCommandRequest} request ClimateCommandRequest message or plain object
     * @param {APIConnection.climate_commandCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.climate_command = function climate_command(request, callback) {
        return this.rpcCall(climate_command, $root.ClimateCommandRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "climate_command" });

    /**
     * Calls climate_command.
     * @function climate_command
     * @memberof APIConnection
     * @instance
     * @param {IClimateCommandRequest} request ClimateCommandRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#cover_command}.
     * @memberof APIConnection
     * @typedef cover_commandCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls cover_command.
     * @function cover_command
     * @memberof APIConnection
     * @instance
     * @param {ICoverCommandRequest} request CoverCommandRequest message or plain object
     * @param {APIConnection.cover_commandCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.cover_command = function cover_command(request, callback) {
        return this.rpcCall(cover_command, $root.CoverCommandRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "cover_command" });

    /**
     * Calls cover_command.
     * @function cover_command
     * @memberof APIConnection
     * @instance
     * @param {ICoverCommandRequest} request CoverCommandRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#date_command}.
     * @memberof APIConnection
     * @typedef date_commandCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls date_command.
     * @function date_command
     * @memberof APIConnection
     * @instance
     * @param {IDateCommandRequest} request DateCommandRequest message or plain object
     * @param {APIConnection.date_commandCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.date_command = function date_command(request, callback) {
        return this.rpcCall(date_command, $root.DateCommandRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "date_command" });

    /**
     * Calls date_command.
     * @function date_command
     * @memberof APIConnection
     * @instance
     * @param {IDateCommandRequest} request DateCommandRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#datetime_command}.
     * @memberof APIConnection
     * @typedef datetime_commandCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls datetime_command.
     * @function datetime_command
     * @memberof APIConnection
     * @instance
     * @param {IDateTimeCommandRequest} request DateTimeCommandRequest message or plain object
     * @param {APIConnection.datetime_commandCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.datetime_command = function datetime_command(request, callback) {
        return this.rpcCall(datetime_command, $root.DateTimeCommandRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "datetime_command" });

    /**
     * Calls datetime_command.
     * @function datetime_command
     * @memberof APIConnection
     * @instance
     * @param {IDateTimeCommandRequest} request DateTimeCommandRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#fan_command}.
     * @memberof APIConnection
     * @typedef fan_commandCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls fan_command.
     * @function fan_command
     * @memberof APIConnection
     * @instance
     * @param {IFanCommandRequest} request FanCommandRequest message or plain object
     * @param {APIConnection.fan_commandCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.fan_command = function fan_command(request, callback) {
        return this.rpcCall(fan_command, $root.FanCommandRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "fan_command" });

    /**
     * Calls fan_command.
     * @function fan_command
     * @memberof APIConnection
     * @instance
     * @param {IFanCommandRequest} request FanCommandRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#light_command}.
     * @memberof APIConnection
     * @typedef light_commandCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls light_command.
     * @function light_command
     * @memberof APIConnection
     * @instance
     * @param {ILightCommandRequest} request LightCommandRequest message or plain object
     * @param {APIConnection.light_commandCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.light_command = function light_command(request, callback) {
        return this.rpcCall(light_command, $root.LightCommandRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "light_command" });

    /**
     * Calls light_command.
     * @function light_command
     * @memberof APIConnection
     * @instance
     * @param {ILightCommandRequest} request LightCommandRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#lock_command}.
     * @memberof APIConnection
     * @typedef lock_commandCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls lock_command.
     * @function lock_command
     * @memberof APIConnection
     * @instance
     * @param {ILockCommandRequest} request LockCommandRequest message or plain object
     * @param {APIConnection.lock_commandCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.lock_command = function lock_command(request, callback) {
        return this.rpcCall(lock_command, $root.LockCommandRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "lock_command" });

    /**
     * Calls lock_command.
     * @function lock_command
     * @memberof APIConnection
     * @instance
     * @param {ILockCommandRequest} request LockCommandRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#media_player_command}.
     * @memberof APIConnection
     * @typedef media_player_commandCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls media_player_command.
     * @function media_player_command
     * @memberof APIConnection
     * @instance
     * @param {IMediaPlayerCommandRequest} request MediaPlayerCommandRequest message or plain object
     * @param {APIConnection.media_player_commandCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.media_player_command = function media_player_command(request, callback) {
        return this.rpcCall(media_player_command, $root.MediaPlayerCommandRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "media_player_command" });

    /**
     * Calls media_player_command.
     * @function media_player_command
     * @memberof APIConnection
     * @instance
     * @param {IMediaPlayerCommandRequest} request MediaPlayerCommandRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#number_command}.
     * @memberof APIConnection
     * @typedef number_commandCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls number_command.
     * @function number_command
     * @memberof APIConnection
     * @instance
     * @param {INumberCommandRequest} request NumberCommandRequest message or plain object
     * @param {APIConnection.number_commandCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.number_command = function number_command(request, callback) {
        return this.rpcCall(number_command, $root.NumberCommandRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "number_command" });

    /**
     * Calls number_command.
     * @function number_command
     * @memberof APIConnection
     * @instance
     * @param {INumberCommandRequest} request NumberCommandRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#select_command}.
     * @memberof APIConnection
     * @typedef select_commandCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls select_command.
     * @function select_command
     * @memberof APIConnection
     * @instance
     * @param {ISelectCommandRequest} request SelectCommandRequest message or plain object
     * @param {APIConnection.select_commandCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.select_command = function select_command(request, callback) {
        return this.rpcCall(select_command, $root.SelectCommandRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "select_command" });

    /**
     * Calls select_command.
     * @function select_command
     * @memberof APIConnection
     * @instance
     * @param {ISelectCommandRequest} request SelectCommandRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#siren_command}.
     * @memberof APIConnection
     * @typedef siren_commandCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls siren_command.
     * @function siren_command
     * @memberof APIConnection
     * @instance
     * @param {ISirenCommandRequest} request SirenCommandRequest message or plain object
     * @param {APIConnection.siren_commandCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.siren_command = function siren_command(request, callback) {
        return this.rpcCall(siren_command, $root.SirenCommandRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "siren_command" });

    /**
     * Calls siren_command.
     * @function siren_command
     * @memberof APIConnection
     * @instance
     * @param {ISirenCommandRequest} request SirenCommandRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#switch_command}.
     * @memberof APIConnection
     * @typedef switch_commandCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls switch_command.
     * @function switch_command
     * @memberof APIConnection
     * @instance
     * @param {ISwitchCommandRequest} request SwitchCommandRequest message or plain object
     * @param {APIConnection.switch_commandCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.switch_command = function switch_command(request, callback) {
        return this.rpcCall(switch_command, $root.SwitchCommandRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "switch_command" });

    /**
     * Calls switch_command.
     * @function switch_command
     * @memberof APIConnection
     * @instance
     * @param {ISwitchCommandRequest} request SwitchCommandRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#text_command}.
     * @memberof APIConnection
     * @typedef text_commandCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls text_command.
     * @function text_command
     * @memberof APIConnection
     * @instance
     * @param {ITextCommandRequest} request TextCommandRequest message or plain object
     * @param {APIConnection.text_commandCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.text_command = function text_command(request, callback) {
        return this.rpcCall(text_command, $root.TextCommandRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "text_command" });

    /**
     * Calls text_command.
     * @function text_command
     * @memberof APIConnection
     * @instance
     * @param {ITextCommandRequest} request TextCommandRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#time_command}.
     * @memberof APIConnection
     * @typedef time_commandCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls time_command.
     * @function time_command
     * @memberof APIConnection
     * @instance
     * @param {ITimeCommandRequest} request TimeCommandRequest message or plain object
     * @param {APIConnection.time_commandCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.time_command = function time_command(request, callback) {
        return this.rpcCall(time_command, $root.TimeCommandRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "time_command" });

    /**
     * Calls time_command.
     * @function time_command
     * @memberof APIConnection
     * @instance
     * @param {ITimeCommandRequest} request TimeCommandRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#update_command}.
     * @memberof APIConnection
     * @typedef update_commandCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls update_command.
     * @function update_command
     * @memberof APIConnection
     * @instance
     * @param {IUpdateCommandRequest} request UpdateCommandRequest message or plain object
     * @param {APIConnection.update_commandCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.update_command = function update_command(request, callback) {
        return this.rpcCall(update_command, $root.UpdateCommandRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "update_command" });

    /**
     * Calls update_command.
     * @function update_command
     * @memberof APIConnection
     * @instance
     * @param {IUpdateCommandRequest} request UpdateCommandRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#valve_command}.
     * @memberof APIConnection
     * @typedef valve_commandCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls valve_command.
     * @function valve_command
     * @memberof APIConnection
     * @instance
     * @param {IValveCommandRequest} request ValveCommandRequest message or plain object
     * @param {APIConnection.valve_commandCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.valve_command = function valve_command(request, callback) {
        return this.rpcCall(valve_command, $root.ValveCommandRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "valve_command" });

    /**
     * Calls valve_command.
     * @function valve_command
     * @memberof APIConnection
     * @instance
     * @param {IValveCommandRequest} request ValveCommandRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#subscribe_bluetooth_le_advertisements}.
     * @memberof APIConnection
     * @typedef subscribe_bluetooth_le_advertisementsCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls subscribe_bluetooth_le_advertisements.
     * @function subscribe_bluetooth_le_advertisements
     * @memberof APIConnection
     * @instance
     * @param {ISubscribeBluetoothLEAdvertisementsRequest} request SubscribeBluetoothLEAdvertisementsRequest message or plain object
     * @param {APIConnection.subscribe_bluetooth_le_advertisementsCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.subscribe_bluetooth_le_advertisements = function subscribe_bluetooth_le_advertisements(request, callback) {
        return this.rpcCall(subscribe_bluetooth_le_advertisements, $root.SubscribeBluetoothLEAdvertisementsRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "subscribe_bluetooth_le_advertisements" });

    /**
     * Calls subscribe_bluetooth_le_advertisements.
     * @function subscribe_bluetooth_le_advertisements
     * @memberof APIConnection
     * @instance
     * @param {ISubscribeBluetoothLEAdvertisementsRequest} request SubscribeBluetoothLEAdvertisementsRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#bluetooth_device_request}.
     * @memberof APIConnection
     * @typedef bluetooth_device_requestCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls bluetooth_device_request.
     * @function bluetooth_device_request
     * @memberof APIConnection
     * @instance
     * @param {IBluetoothDeviceRequest} request BluetoothDeviceRequest message or plain object
     * @param {APIConnection.bluetooth_device_requestCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.bluetooth_device_request = function bluetooth_device_request(request, callback) {
        return this.rpcCall(bluetooth_device_request, $root.BluetoothDeviceRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "bluetooth_device_request" });

    /**
     * Calls bluetooth_device_request.
     * @function bluetooth_device_request
     * @memberof APIConnection
     * @instance
     * @param {IBluetoothDeviceRequest} request BluetoothDeviceRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#bluetooth_gatt_get_services}.
     * @memberof APIConnection
     * @typedef bluetooth_gatt_get_servicesCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls bluetooth_gatt_get_services.
     * @function bluetooth_gatt_get_services
     * @memberof APIConnection
     * @instance
     * @param {IBluetoothGATTGetServicesRequest} request BluetoothGATTGetServicesRequest message or plain object
     * @param {APIConnection.bluetooth_gatt_get_servicesCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.bluetooth_gatt_get_services = function bluetooth_gatt_get_services(request, callback) {
        return this.rpcCall(bluetooth_gatt_get_services, $root.BluetoothGATTGetServicesRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "bluetooth_gatt_get_services" });

    /**
     * Calls bluetooth_gatt_get_services.
     * @function bluetooth_gatt_get_services
     * @memberof APIConnection
     * @instance
     * @param {IBluetoothGATTGetServicesRequest} request BluetoothGATTGetServicesRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#bluetooth_gatt_read}.
     * @memberof APIConnection
     * @typedef bluetooth_gatt_readCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls bluetooth_gatt_read.
     * @function bluetooth_gatt_read
     * @memberof APIConnection
     * @instance
     * @param {IBluetoothGATTReadRequest} request BluetoothGATTReadRequest message or plain object
     * @param {APIConnection.bluetooth_gatt_readCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.bluetooth_gatt_read = function bluetooth_gatt_read(request, callback) {
        return this.rpcCall(bluetooth_gatt_read, $root.BluetoothGATTReadRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "bluetooth_gatt_read" });

    /**
     * Calls bluetooth_gatt_read.
     * @function bluetooth_gatt_read
     * @memberof APIConnection
     * @instance
     * @param {IBluetoothGATTReadRequest} request BluetoothGATTReadRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#bluetooth_gatt_write}.
     * @memberof APIConnection
     * @typedef bluetooth_gatt_writeCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls bluetooth_gatt_write.
     * @function bluetooth_gatt_write
     * @memberof APIConnection
     * @instance
     * @param {IBluetoothGATTWriteRequest} request BluetoothGATTWriteRequest message or plain object
     * @param {APIConnection.bluetooth_gatt_writeCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.bluetooth_gatt_write = function bluetooth_gatt_write(request, callback) {
        return this.rpcCall(bluetooth_gatt_write, $root.BluetoothGATTWriteRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "bluetooth_gatt_write" });

    /**
     * Calls bluetooth_gatt_write.
     * @function bluetooth_gatt_write
     * @memberof APIConnection
     * @instance
     * @param {IBluetoothGATTWriteRequest} request BluetoothGATTWriteRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#bluetooth_gatt_read_descriptor}.
     * @memberof APIConnection
     * @typedef bluetooth_gatt_read_descriptorCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls bluetooth_gatt_read_descriptor.
     * @function bluetooth_gatt_read_descriptor
     * @memberof APIConnection
     * @instance
     * @param {IBluetoothGATTReadDescriptorRequest} request BluetoothGATTReadDescriptorRequest message or plain object
     * @param {APIConnection.bluetooth_gatt_read_descriptorCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.bluetooth_gatt_read_descriptor = function bluetooth_gatt_read_descriptor(request, callback) {
        return this.rpcCall(bluetooth_gatt_read_descriptor, $root.BluetoothGATTReadDescriptorRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "bluetooth_gatt_read_descriptor" });

    /**
     * Calls bluetooth_gatt_read_descriptor.
     * @function bluetooth_gatt_read_descriptor
     * @memberof APIConnection
     * @instance
     * @param {IBluetoothGATTReadDescriptorRequest} request BluetoothGATTReadDescriptorRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#bluetooth_gatt_write_descriptor}.
     * @memberof APIConnection
     * @typedef bluetooth_gatt_write_descriptorCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls bluetooth_gatt_write_descriptor.
     * @function bluetooth_gatt_write_descriptor
     * @memberof APIConnection
     * @instance
     * @param {IBluetoothGATTWriteDescriptorRequest} request BluetoothGATTWriteDescriptorRequest message or plain object
     * @param {APIConnection.bluetooth_gatt_write_descriptorCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.bluetooth_gatt_write_descriptor = function bluetooth_gatt_write_descriptor(request, callback) {
        return this.rpcCall(bluetooth_gatt_write_descriptor, $root.BluetoothGATTWriteDescriptorRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "bluetooth_gatt_write_descriptor" });

    /**
     * Calls bluetooth_gatt_write_descriptor.
     * @function bluetooth_gatt_write_descriptor
     * @memberof APIConnection
     * @instance
     * @param {IBluetoothGATTWriteDescriptorRequest} request BluetoothGATTWriteDescriptorRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#bluetooth_gatt_notify}.
     * @memberof APIConnection
     * @typedef bluetooth_gatt_notifyCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls bluetooth_gatt_notify.
     * @function bluetooth_gatt_notify
     * @memberof APIConnection
     * @instance
     * @param {IBluetoothGATTNotifyRequest} request BluetoothGATTNotifyRequest message or plain object
     * @param {APIConnection.bluetooth_gatt_notifyCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.bluetooth_gatt_notify = function bluetooth_gatt_notify(request, callback) {
        return this.rpcCall(bluetooth_gatt_notify, $root.BluetoothGATTNotifyRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "bluetooth_gatt_notify" });

    /**
     * Calls bluetooth_gatt_notify.
     * @function bluetooth_gatt_notify
     * @memberof APIConnection
     * @instance
     * @param {IBluetoothGATTNotifyRequest} request BluetoothGATTNotifyRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#subscribe_bluetooth_connections_free}.
     * @memberof APIConnection
     * @typedef subscribe_bluetooth_connections_freeCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {BluetoothConnectionsFreeResponse} [response] BluetoothConnectionsFreeResponse
     */

    /**
     * Calls subscribe_bluetooth_connections_free.
     * @function subscribe_bluetooth_connections_free
     * @memberof APIConnection
     * @instance
     * @param {ISubscribeBluetoothConnectionsFreeRequest} request SubscribeBluetoothConnectionsFreeRequest message or plain object
     * @param {APIConnection.subscribe_bluetooth_connections_freeCallback} callback Node-style callback called with the error, if any, and BluetoothConnectionsFreeResponse
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.subscribe_bluetooth_connections_free = function subscribe_bluetooth_connections_free(request, callback) {
        return this.rpcCall(subscribe_bluetooth_connections_free, $root.SubscribeBluetoothConnectionsFreeRequest, $root.BluetoothConnectionsFreeResponse, request, callback);
    }, "name", { value: "subscribe_bluetooth_connections_free" });

    /**
     * Calls subscribe_bluetooth_connections_free.
     * @function subscribe_bluetooth_connections_free
     * @memberof APIConnection
     * @instance
     * @param {ISubscribeBluetoothConnectionsFreeRequest} request SubscribeBluetoothConnectionsFreeRequest message or plain object
     * @returns {Promise<BluetoothConnectionsFreeResponse>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#unsubscribe_bluetooth_le_advertisements}.
     * @memberof APIConnection
     * @typedef unsubscribe_bluetooth_le_advertisementsCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls unsubscribe_bluetooth_le_advertisements.
     * @function unsubscribe_bluetooth_le_advertisements
     * @memberof APIConnection
     * @instance
     * @param {IUnsubscribeBluetoothLEAdvertisementsRequest} request UnsubscribeBluetoothLEAdvertisementsRequest message or plain object
     * @param {APIConnection.unsubscribe_bluetooth_le_advertisementsCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.unsubscribe_bluetooth_le_advertisements = function unsubscribe_bluetooth_le_advertisements(request, callback) {
        return this.rpcCall(unsubscribe_bluetooth_le_advertisements, $root.UnsubscribeBluetoothLEAdvertisementsRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "unsubscribe_bluetooth_le_advertisements" });

    /**
     * Calls unsubscribe_bluetooth_le_advertisements.
     * @function unsubscribe_bluetooth_le_advertisements
     * @memberof APIConnection
     * @instance
     * @param {IUnsubscribeBluetoothLEAdvertisementsRequest} request UnsubscribeBluetoothLEAdvertisementsRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#bluetooth_scanner_set_mode}.
     * @memberof APIConnection
     * @typedef bluetooth_scanner_set_modeCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls bluetooth_scanner_set_mode.
     * @function bluetooth_scanner_set_mode
     * @memberof APIConnection
     * @instance
     * @param {IBluetoothScannerSetModeRequest} request BluetoothScannerSetModeRequest message or plain object
     * @param {APIConnection.bluetooth_scanner_set_modeCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.bluetooth_scanner_set_mode = function bluetooth_scanner_set_mode(request, callback) {
        return this.rpcCall(bluetooth_scanner_set_mode, $root.BluetoothScannerSetModeRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "bluetooth_scanner_set_mode" });

    /**
     * Calls bluetooth_scanner_set_mode.
     * @function bluetooth_scanner_set_mode
     * @memberof APIConnection
     * @instance
     * @param {IBluetoothScannerSetModeRequest} request BluetoothScannerSetModeRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#subscribe_voice_assistant}.
     * @memberof APIConnection
     * @typedef subscribe_voice_assistantCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls subscribe_voice_assistant.
     * @function subscribe_voice_assistant
     * @memberof APIConnection
     * @instance
     * @param {ISubscribeVoiceAssistantRequest} request SubscribeVoiceAssistantRequest message or plain object
     * @param {APIConnection.subscribe_voice_assistantCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.subscribe_voice_assistant = function subscribe_voice_assistant(request, callback) {
        return this.rpcCall(subscribe_voice_assistant, $root.SubscribeVoiceAssistantRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "subscribe_voice_assistant" });

    /**
     * Calls subscribe_voice_assistant.
     * @function subscribe_voice_assistant
     * @memberof APIConnection
     * @instance
     * @param {ISubscribeVoiceAssistantRequest} request SubscribeVoiceAssistantRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#voice_assistant_get_configuration}.
     * @memberof APIConnection
     * @typedef voice_assistant_get_configurationCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoiceAssistantConfigurationResponse} [response] VoiceAssistantConfigurationResponse
     */

    /**
     * Calls voice_assistant_get_configuration.
     * @function voice_assistant_get_configuration
     * @memberof APIConnection
     * @instance
     * @param {IVoiceAssistantConfigurationRequest} request VoiceAssistantConfigurationRequest message or plain object
     * @param {APIConnection.voice_assistant_get_configurationCallback} callback Node-style callback called with the error, if any, and VoiceAssistantConfigurationResponse
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.voice_assistant_get_configuration = function voice_assistant_get_configuration(request, callback) {
        return this.rpcCall(voice_assistant_get_configuration, $root.VoiceAssistantConfigurationRequest, $root.VoiceAssistantConfigurationResponse, request, callback);
    }, "name", { value: "voice_assistant_get_configuration" });

    /**
     * Calls voice_assistant_get_configuration.
     * @function voice_assistant_get_configuration
     * @memberof APIConnection
     * @instance
     * @param {IVoiceAssistantConfigurationRequest} request VoiceAssistantConfigurationRequest message or plain object
     * @returns {Promise<VoiceAssistantConfigurationResponse>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#voice_assistant_set_configuration}.
     * @memberof APIConnection
     * @typedef voice_assistant_set_configurationCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls voice_assistant_set_configuration.
     * @function voice_assistant_set_configuration
     * @memberof APIConnection
     * @instance
     * @param {IVoiceAssistantSetConfiguration} request VoiceAssistantSetConfiguration message or plain object
     * @param {APIConnection.voice_assistant_set_configurationCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.voice_assistant_set_configuration = function voice_assistant_set_configuration(request, callback) {
        return this.rpcCall(voice_assistant_set_configuration, $root.VoiceAssistantSetConfiguration, $root.VoidMessage, request, callback);
    }, "name", { value: "voice_assistant_set_configuration" });

    /**
     * Calls voice_assistant_set_configuration.
     * @function voice_assistant_set_configuration
     * @memberof APIConnection
     * @instance
     * @param {IVoiceAssistantSetConfiguration} request VoiceAssistantSetConfiguration message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#alarm_control_panel_command}.
     * @memberof APIConnection
     * @typedef alarm_control_panel_commandCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls alarm_control_panel_command.
     * @function alarm_control_panel_command
     * @memberof APIConnection
     * @instance
     * @param {IAlarmControlPanelCommandRequest} request AlarmControlPanelCommandRequest message or plain object
     * @param {APIConnection.alarm_control_panel_commandCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.alarm_control_panel_command = function alarm_control_panel_command(request, callback) {
        return this.rpcCall(alarm_control_panel_command, $root.AlarmControlPanelCommandRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "alarm_control_panel_command" });

    /**
     * Calls alarm_control_panel_command.
     * @function alarm_control_panel_command
     * @memberof APIConnection
     * @instance
     * @param {IAlarmControlPanelCommandRequest} request AlarmControlPanelCommandRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#zwave_proxy_frame}.
     * @memberof APIConnection
     * @typedef zwave_proxy_frameCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls zwave_proxy_frame.
     * @function zwave_proxy_frame
     * @memberof APIConnection
     * @instance
     * @param {IZWaveProxyFrame} request ZWaveProxyFrame message or plain object
     * @param {APIConnection.zwave_proxy_frameCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.zwave_proxy_frame = function zwave_proxy_frame(request, callback) {
        return this.rpcCall(zwave_proxy_frame, $root.ZWaveProxyFrame, $root.VoidMessage, request, callback);
    }, "name", { value: "zwave_proxy_frame" });

    /**
     * Calls zwave_proxy_frame.
     * @function zwave_proxy_frame
     * @memberof APIConnection
     * @instance
     * @param {IZWaveProxyFrame} request ZWaveProxyFrame message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    /**
     * Callback as used by {@link APIConnection#zwave_proxy_request}.
     * @memberof APIConnection
     * @typedef zwave_proxy_requestCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {VoidMessage} [response] VoidMessage
     */

    /**
     * Calls zwave_proxy_request.
     * @function zwave_proxy_request
     * @memberof APIConnection
     * @instance
     * @param {IZWaveProxyRequest} request ZWaveProxyRequest message or plain object
     * @param {APIConnection.zwave_proxy_requestCallback} callback Node-style callback called with the error, if any, and VoidMessage
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(APIConnection.prototype.zwave_proxy_request = function zwave_proxy_request(request, callback) {
        return this.rpcCall(zwave_proxy_request, $root.ZWaveProxyRequest, $root.VoidMessage, request, callback);
    }, "name", { value: "zwave_proxy_request" });

    /**
     * Calls zwave_proxy_request.
     * @function zwave_proxy_request
     * @memberof APIConnection
     * @instance
     * @param {IZWaveProxyRequest} request ZWaveProxyRequest message or plain object
     * @returns {Promise<VoidMessage>} Promise
     * @variation 2
     */

    return APIConnection;
})();

$root.HelloRequest = (function() {

    /**
     * Properties of a HelloRequest.
     * @exports IHelloRequest
     * @interface IHelloRequest
     * @property {string|null} [client_info] HelloRequest client_info
     * @property {number|null} [api_version_major] HelloRequest api_version_major
     * @property {number|null} [api_version_minor] HelloRequest api_version_minor
     */

    /**
     * Constructs a new HelloRequest.
     * @exports HelloRequest
     * @classdesc Represents a HelloRequest.
     * @implements IHelloRequest
     * @constructor
     * @param {IHelloRequest=} [properties] Properties to set
     */
    function HelloRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * HelloRequest client_info.
     * @member {string} client_info
     * @memberof HelloRequest
     * @instance
     */
    HelloRequest.prototype.client_info = "";

    /**
     * HelloRequest api_version_major.
     * @member {number} api_version_major
     * @memberof HelloRequest
     * @instance
     */
    HelloRequest.prototype.api_version_major = 0;

    /**
     * HelloRequest api_version_minor.
     * @member {number} api_version_minor
     * @memberof HelloRequest
     * @instance
     */
    HelloRequest.prototype.api_version_minor = 0;

    /**
     * Creates a new HelloRequest instance using the specified properties.
     * @function create
     * @memberof HelloRequest
     * @static
     * @param {IHelloRequest=} [properties] Properties to set
     * @returns {HelloRequest} HelloRequest instance
     */
    HelloRequest.create = function create(properties) {
        return new HelloRequest(properties);
    };

    /**
     * Encodes the specified HelloRequest message. Does not implicitly {@link HelloRequest.verify|verify} messages.
     * @function encode
     * @memberof HelloRequest
     * @static
     * @param {IHelloRequest} message HelloRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    HelloRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.client_info != null && Object.hasOwnProperty.call(message, "client_info"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_info);
        if (message.api_version_major != null && Object.hasOwnProperty.call(message, "api_version_major"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.api_version_major);
        if (message.api_version_minor != null && Object.hasOwnProperty.call(message, "api_version_minor"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.api_version_minor);
        return writer;
    };

    /**
     * Encodes the specified HelloRequest message, length delimited. Does not implicitly {@link HelloRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof HelloRequest
     * @static
     * @param {IHelloRequest} message HelloRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    HelloRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a HelloRequest message from the specified reader or buffer.
     * @function decode
     * @memberof HelloRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {HelloRequest} HelloRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    HelloRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.HelloRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.client_info = reader.string();
                    break;
                }
            case 2: {
                    message.api_version_major = reader.uint32();
                    break;
                }
            case 3: {
                    message.api_version_minor = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a HelloRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof HelloRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {HelloRequest} HelloRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    HelloRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a HelloRequest message.
     * @function verify
     * @memberof HelloRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    HelloRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.client_info != null && message.hasOwnProperty("client_info"))
            if (!$util.isString(message.client_info))
                return "client_info: string expected";
        if (message.api_version_major != null && message.hasOwnProperty("api_version_major"))
            if (!$util.isInteger(message.api_version_major))
                return "api_version_major: integer expected";
        if (message.api_version_minor != null && message.hasOwnProperty("api_version_minor"))
            if (!$util.isInteger(message.api_version_minor))
                return "api_version_minor: integer expected";
        return null;
    };

    /**
     * Creates a HelloRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof HelloRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {HelloRequest} HelloRequest
     */
    HelloRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.HelloRequest)
            return object;
        var message = new $root.HelloRequest();
        if (object.client_info != null)
            message.client_info = String(object.client_info);
        if (object.api_version_major != null)
            message.api_version_major = object.api_version_major >>> 0;
        if (object.api_version_minor != null)
            message.api_version_minor = object.api_version_minor >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a HelloRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof HelloRequest
     * @static
     * @param {HelloRequest} message HelloRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    HelloRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.client_info = "";
            object.api_version_major = 0;
            object.api_version_minor = 0;
        }
        if (message.client_info != null && message.hasOwnProperty("client_info"))
            object.client_info = message.client_info;
        if (message.api_version_major != null && message.hasOwnProperty("api_version_major"))
            object.api_version_major = message.api_version_major;
        if (message.api_version_minor != null && message.hasOwnProperty("api_version_minor"))
            object.api_version_minor = message.api_version_minor;
        return object;
    };

    /**
     * Converts this HelloRequest to JSON.
     * @function toJSON
     * @memberof HelloRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    HelloRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for HelloRequest
     * @function getTypeUrl
     * @memberof HelloRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    HelloRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/HelloRequest";
    };

    return HelloRequest;
})();

$root.HelloResponse = (function() {

    /**
     * Properties of a HelloResponse.
     * @exports IHelloResponse
     * @interface IHelloResponse
     * @property {number|null} [api_version_major] HelloResponse api_version_major
     * @property {number|null} [api_version_minor] HelloResponse api_version_minor
     * @property {string|null} [server_info] HelloResponse server_info
     * @property {string|null} [name] HelloResponse name
     */

    /**
     * Constructs a new HelloResponse.
     * @exports HelloResponse
     * @classdesc Represents a HelloResponse.
     * @implements IHelloResponse
     * @constructor
     * @param {IHelloResponse=} [properties] Properties to set
     */
    function HelloResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * HelloResponse api_version_major.
     * @member {number} api_version_major
     * @memberof HelloResponse
     * @instance
     */
    HelloResponse.prototype.api_version_major = 0;

    /**
     * HelloResponse api_version_minor.
     * @member {number} api_version_minor
     * @memberof HelloResponse
     * @instance
     */
    HelloResponse.prototype.api_version_minor = 0;

    /**
     * HelloResponse server_info.
     * @member {string} server_info
     * @memberof HelloResponse
     * @instance
     */
    HelloResponse.prototype.server_info = "";

    /**
     * HelloResponse name.
     * @member {string} name
     * @memberof HelloResponse
     * @instance
     */
    HelloResponse.prototype.name = "";

    /**
     * Creates a new HelloResponse instance using the specified properties.
     * @function create
     * @memberof HelloResponse
     * @static
     * @param {IHelloResponse=} [properties] Properties to set
     * @returns {HelloResponse} HelloResponse instance
     */
    HelloResponse.create = function create(properties) {
        return new HelloResponse(properties);
    };

    /**
     * Encodes the specified HelloResponse message. Does not implicitly {@link HelloResponse.verify|verify} messages.
     * @function encode
     * @memberof HelloResponse
     * @static
     * @param {IHelloResponse} message HelloResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    HelloResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.api_version_major != null && Object.hasOwnProperty.call(message, "api_version_major"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.api_version_major);
        if (message.api_version_minor != null && Object.hasOwnProperty.call(message, "api_version_minor"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.api_version_minor);
        if (message.server_info != null && Object.hasOwnProperty.call(message, "server_info"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.server_info);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);
        return writer;
    };

    /**
     * Encodes the specified HelloResponse message, length delimited. Does not implicitly {@link HelloResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof HelloResponse
     * @static
     * @param {IHelloResponse} message HelloResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    HelloResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a HelloResponse message from the specified reader or buffer.
     * @function decode
     * @memberof HelloResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {HelloResponse} HelloResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    HelloResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.HelloResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.api_version_major = reader.uint32();
                    break;
                }
            case 2: {
                    message.api_version_minor = reader.uint32();
                    break;
                }
            case 3: {
                    message.server_info = reader.string();
                    break;
                }
            case 4: {
                    message.name = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a HelloResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof HelloResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {HelloResponse} HelloResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    HelloResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a HelloResponse message.
     * @function verify
     * @memberof HelloResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    HelloResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.api_version_major != null && message.hasOwnProperty("api_version_major"))
            if (!$util.isInteger(message.api_version_major))
                return "api_version_major: integer expected";
        if (message.api_version_minor != null && message.hasOwnProperty("api_version_minor"))
            if (!$util.isInteger(message.api_version_minor))
                return "api_version_minor: integer expected";
        if (message.server_info != null && message.hasOwnProperty("server_info"))
            if (!$util.isString(message.server_info))
                return "server_info: string expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        return null;
    };

    /**
     * Creates a HelloResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof HelloResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {HelloResponse} HelloResponse
     */
    HelloResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.HelloResponse)
            return object;
        var message = new $root.HelloResponse();
        if (object.api_version_major != null)
            message.api_version_major = object.api_version_major >>> 0;
        if (object.api_version_minor != null)
            message.api_version_minor = object.api_version_minor >>> 0;
        if (object.server_info != null)
            message.server_info = String(object.server_info);
        if (object.name != null)
            message.name = String(object.name);
        return message;
    };

    /**
     * Creates a plain object from a HelloResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof HelloResponse
     * @static
     * @param {HelloResponse} message HelloResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    HelloResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.api_version_major = 0;
            object.api_version_minor = 0;
            object.server_info = "";
            object.name = "";
        }
        if (message.api_version_major != null && message.hasOwnProperty("api_version_major"))
            object.api_version_major = message.api_version_major;
        if (message.api_version_minor != null && message.hasOwnProperty("api_version_minor"))
            object.api_version_minor = message.api_version_minor;
        if (message.server_info != null && message.hasOwnProperty("server_info"))
            object.server_info = message.server_info;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        return object;
    };

    /**
     * Converts this HelloResponse to JSON.
     * @function toJSON
     * @memberof HelloResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    HelloResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for HelloResponse
     * @function getTypeUrl
     * @memberof HelloResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    HelloResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/HelloResponse";
    };

    return HelloResponse;
})();

$root.AuthenticationRequest = (function() {

    /**
     * Properties of an AuthenticationRequest.
     * @exports IAuthenticationRequest
     * @interface IAuthenticationRequest
     * @property {string|null} [password] AuthenticationRequest password
     */

    /**
     * Constructs a new AuthenticationRequest.
     * @exports AuthenticationRequest
     * @classdesc Represents an AuthenticationRequest.
     * @implements IAuthenticationRequest
     * @constructor
     * @param {IAuthenticationRequest=} [properties] Properties to set
     */
    function AuthenticationRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * AuthenticationRequest password.
     * @member {string} password
     * @memberof AuthenticationRequest
     * @instance
     */
    AuthenticationRequest.prototype.password = "";

    /**
     * Creates a new AuthenticationRequest instance using the specified properties.
     * @function create
     * @memberof AuthenticationRequest
     * @static
     * @param {IAuthenticationRequest=} [properties] Properties to set
     * @returns {AuthenticationRequest} AuthenticationRequest instance
     */
    AuthenticationRequest.create = function create(properties) {
        return new AuthenticationRequest(properties);
    };

    /**
     * Encodes the specified AuthenticationRequest message. Does not implicitly {@link AuthenticationRequest.verify|verify} messages.
     * @function encode
     * @memberof AuthenticationRequest
     * @static
     * @param {IAuthenticationRequest} message AuthenticationRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AuthenticationRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.password != null && Object.hasOwnProperty.call(message, "password"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.password);
        return writer;
    };

    /**
     * Encodes the specified AuthenticationRequest message, length delimited. Does not implicitly {@link AuthenticationRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof AuthenticationRequest
     * @static
     * @param {IAuthenticationRequest} message AuthenticationRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AuthenticationRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an AuthenticationRequest message from the specified reader or buffer.
     * @function decode
     * @memberof AuthenticationRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {AuthenticationRequest} AuthenticationRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AuthenticationRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AuthenticationRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.password = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an AuthenticationRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof AuthenticationRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {AuthenticationRequest} AuthenticationRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AuthenticationRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an AuthenticationRequest message.
     * @function verify
     * @memberof AuthenticationRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    AuthenticationRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.password != null && message.hasOwnProperty("password"))
            if (!$util.isString(message.password))
                return "password: string expected";
        return null;
    };

    /**
     * Creates an AuthenticationRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof AuthenticationRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {AuthenticationRequest} AuthenticationRequest
     */
    AuthenticationRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.AuthenticationRequest)
            return object;
        var message = new $root.AuthenticationRequest();
        if (object.password != null)
            message.password = String(object.password);
        return message;
    };

    /**
     * Creates a plain object from an AuthenticationRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof AuthenticationRequest
     * @static
     * @param {AuthenticationRequest} message AuthenticationRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    AuthenticationRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.password = "";
        if (message.password != null && message.hasOwnProperty("password"))
            object.password = message.password;
        return object;
    };

    /**
     * Converts this AuthenticationRequest to JSON.
     * @function toJSON
     * @memberof AuthenticationRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    AuthenticationRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for AuthenticationRequest
     * @function getTypeUrl
     * @memberof AuthenticationRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    AuthenticationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/AuthenticationRequest";
    };

    return AuthenticationRequest;
})();

$root.AuthenticationResponse = (function() {

    /**
     * Properties of an AuthenticationResponse.
     * @exports IAuthenticationResponse
     * @interface IAuthenticationResponse
     * @property {boolean|null} [invalid_password] AuthenticationResponse invalid_password
     */

    /**
     * Constructs a new AuthenticationResponse.
     * @exports AuthenticationResponse
     * @classdesc Represents an AuthenticationResponse.
     * @implements IAuthenticationResponse
     * @constructor
     * @param {IAuthenticationResponse=} [properties] Properties to set
     */
    function AuthenticationResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * AuthenticationResponse invalid_password.
     * @member {boolean} invalid_password
     * @memberof AuthenticationResponse
     * @instance
     */
    AuthenticationResponse.prototype.invalid_password = false;

    /**
     * Creates a new AuthenticationResponse instance using the specified properties.
     * @function create
     * @memberof AuthenticationResponse
     * @static
     * @param {IAuthenticationResponse=} [properties] Properties to set
     * @returns {AuthenticationResponse} AuthenticationResponse instance
     */
    AuthenticationResponse.create = function create(properties) {
        return new AuthenticationResponse(properties);
    };

    /**
     * Encodes the specified AuthenticationResponse message. Does not implicitly {@link AuthenticationResponse.verify|verify} messages.
     * @function encode
     * @memberof AuthenticationResponse
     * @static
     * @param {IAuthenticationResponse} message AuthenticationResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AuthenticationResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.invalid_password != null && Object.hasOwnProperty.call(message, "invalid_password"))
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.invalid_password);
        return writer;
    };

    /**
     * Encodes the specified AuthenticationResponse message, length delimited. Does not implicitly {@link AuthenticationResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof AuthenticationResponse
     * @static
     * @param {IAuthenticationResponse} message AuthenticationResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AuthenticationResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an AuthenticationResponse message from the specified reader or buffer.
     * @function decode
     * @memberof AuthenticationResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {AuthenticationResponse} AuthenticationResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AuthenticationResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AuthenticationResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.invalid_password = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an AuthenticationResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof AuthenticationResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {AuthenticationResponse} AuthenticationResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AuthenticationResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an AuthenticationResponse message.
     * @function verify
     * @memberof AuthenticationResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    AuthenticationResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.invalid_password != null && message.hasOwnProperty("invalid_password"))
            if (typeof message.invalid_password !== "boolean")
                return "invalid_password: boolean expected";
        return null;
    };

    /**
     * Creates an AuthenticationResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof AuthenticationResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {AuthenticationResponse} AuthenticationResponse
     */
    AuthenticationResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.AuthenticationResponse)
            return object;
        var message = new $root.AuthenticationResponse();
        if (object.invalid_password != null)
            message.invalid_password = Boolean(object.invalid_password);
        return message;
    };

    /**
     * Creates a plain object from an AuthenticationResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof AuthenticationResponse
     * @static
     * @param {AuthenticationResponse} message AuthenticationResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    AuthenticationResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.invalid_password = false;
        if (message.invalid_password != null && message.hasOwnProperty("invalid_password"))
            object.invalid_password = message.invalid_password;
        return object;
    };

    /**
     * Converts this AuthenticationResponse to JSON.
     * @function toJSON
     * @memberof AuthenticationResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    AuthenticationResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for AuthenticationResponse
     * @function getTypeUrl
     * @memberof AuthenticationResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    AuthenticationResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/AuthenticationResponse";
    };

    return AuthenticationResponse;
})();

$root.DisconnectRequest = (function() {

    /**
     * Properties of a DisconnectRequest.
     * @exports IDisconnectRequest
     * @interface IDisconnectRequest
     */

    /**
     * Constructs a new DisconnectRequest.
     * @exports DisconnectRequest
     * @classdesc Represents a DisconnectRequest.
     * @implements IDisconnectRequest
     * @constructor
     * @param {IDisconnectRequest=} [properties] Properties to set
     */
    function DisconnectRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new DisconnectRequest instance using the specified properties.
     * @function create
     * @memberof DisconnectRequest
     * @static
     * @param {IDisconnectRequest=} [properties] Properties to set
     * @returns {DisconnectRequest} DisconnectRequest instance
     */
    DisconnectRequest.create = function create(properties) {
        return new DisconnectRequest(properties);
    };

    /**
     * Encodes the specified DisconnectRequest message. Does not implicitly {@link DisconnectRequest.verify|verify} messages.
     * @function encode
     * @memberof DisconnectRequest
     * @static
     * @param {IDisconnectRequest} message DisconnectRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DisconnectRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified DisconnectRequest message, length delimited. Does not implicitly {@link DisconnectRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DisconnectRequest
     * @static
     * @param {IDisconnectRequest} message DisconnectRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DisconnectRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DisconnectRequest message from the specified reader or buffer.
     * @function decode
     * @memberof DisconnectRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DisconnectRequest} DisconnectRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DisconnectRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DisconnectRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a DisconnectRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DisconnectRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DisconnectRequest} DisconnectRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DisconnectRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DisconnectRequest message.
     * @function verify
     * @memberof DisconnectRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DisconnectRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a DisconnectRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DisconnectRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DisconnectRequest} DisconnectRequest
     */
    DisconnectRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.DisconnectRequest)
            return object;
        return new $root.DisconnectRequest();
    };

    /**
     * Creates a plain object from a DisconnectRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DisconnectRequest
     * @static
     * @param {DisconnectRequest} message DisconnectRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DisconnectRequest.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this DisconnectRequest to JSON.
     * @function toJSON
     * @memberof DisconnectRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DisconnectRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DisconnectRequest
     * @function getTypeUrl
     * @memberof DisconnectRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DisconnectRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DisconnectRequest";
    };

    return DisconnectRequest;
})();

$root.DisconnectResponse = (function() {

    /**
     * Properties of a DisconnectResponse.
     * @exports IDisconnectResponse
     * @interface IDisconnectResponse
     */

    /**
     * Constructs a new DisconnectResponse.
     * @exports DisconnectResponse
     * @classdesc Represents a DisconnectResponse.
     * @implements IDisconnectResponse
     * @constructor
     * @param {IDisconnectResponse=} [properties] Properties to set
     */
    function DisconnectResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new DisconnectResponse instance using the specified properties.
     * @function create
     * @memberof DisconnectResponse
     * @static
     * @param {IDisconnectResponse=} [properties] Properties to set
     * @returns {DisconnectResponse} DisconnectResponse instance
     */
    DisconnectResponse.create = function create(properties) {
        return new DisconnectResponse(properties);
    };

    /**
     * Encodes the specified DisconnectResponse message. Does not implicitly {@link DisconnectResponse.verify|verify} messages.
     * @function encode
     * @memberof DisconnectResponse
     * @static
     * @param {IDisconnectResponse} message DisconnectResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DisconnectResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified DisconnectResponse message, length delimited. Does not implicitly {@link DisconnectResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DisconnectResponse
     * @static
     * @param {IDisconnectResponse} message DisconnectResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DisconnectResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DisconnectResponse message from the specified reader or buffer.
     * @function decode
     * @memberof DisconnectResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DisconnectResponse} DisconnectResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DisconnectResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DisconnectResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a DisconnectResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DisconnectResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DisconnectResponse} DisconnectResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DisconnectResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DisconnectResponse message.
     * @function verify
     * @memberof DisconnectResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DisconnectResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a DisconnectResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DisconnectResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DisconnectResponse} DisconnectResponse
     */
    DisconnectResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.DisconnectResponse)
            return object;
        return new $root.DisconnectResponse();
    };

    /**
     * Creates a plain object from a DisconnectResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DisconnectResponse
     * @static
     * @param {DisconnectResponse} message DisconnectResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DisconnectResponse.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this DisconnectResponse to JSON.
     * @function toJSON
     * @memberof DisconnectResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DisconnectResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DisconnectResponse
     * @function getTypeUrl
     * @memberof DisconnectResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DisconnectResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DisconnectResponse";
    };

    return DisconnectResponse;
})();

$root.PingRequest = (function() {

    /**
     * Properties of a PingRequest.
     * @exports IPingRequest
     * @interface IPingRequest
     */

    /**
     * Constructs a new PingRequest.
     * @exports PingRequest
     * @classdesc Represents a PingRequest.
     * @implements IPingRequest
     * @constructor
     * @param {IPingRequest=} [properties] Properties to set
     */
    function PingRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new PingRequest instance using the specified properties.
     * @function create
     * @memberof PingRequest
     * @static
     * @param {IPingRequest=} [properties] Properties to set
     * @returns {PingRequest} PingRequest instance
     */
    PingRequest.create = function create(properties) {
        return new PingRequest(properties);
    };

    /**
     * Encodes the specified PingRequest message. Does not implicitly {@link PingRequest.verify|verify} messages.
     * @function encode
     * @memberof PingRequest
     * @static
     * @param {IPingRequest} message PingRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PingRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified PingRequest message, length delimited. Does not implicitly {@link PingRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PingRequest
     * @static
     * @param {IPingRequest} message PingRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PingRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PingRequest message from the specified reader or buffer.
     * @function decode
     * @memberof PingRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PingRequest} PingRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PingRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PingRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PingRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PingRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PingRequest} PingRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PingRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PingRequest message.
     * @function verify
     * @memberof PingRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PingRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a PingRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PingRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PingRequest} PingRequest
     */
    PingRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.PingRequest)
            return object;
        return new $root.PingRequest();
    };

    /**
     * Creates a plain object from a PingRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PingRequest
     * @static
     * @param {PingRequest} message PingRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PingRequest.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this PingRequest to JSON.
     * @function toJSON
     * @memberof PingRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PingRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for PingRequest
     * @function getTypeUrl
     * @memberof PingRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    PingRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/PingRequest";
    };

    return PingRequest;
})();

$root.PingResponse = (function() {

    /**
     * Properties of a PingResponse.
     * @exports IPingResponse
     * @interface IPingResponse
     */

    /**
     * Constructs a new PingResponse.
     * @exports PingResponse
     * @classdesc Represents a PingResponse.
     * @implements IPingResponse
     * @constructor
     * @param {IPingResponse=} [properties] Properties to set
     */
    function PingResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new PingResponse instance using the specified properties.
     * @function create
     * @memberof PingResponse
     * @static
     * @param {IPingResponse=} [properties] Properties to set
     * @returns {PingResponse} PingResponse instance
     */
    PingResponse.create = function create(properties) {
        return new PingResponse(properties);
    };

    /**
     * Encodes the specified PingResponse message. Does not implicitly {@link PingResponse.verify|verify} messages.
     * @function encode
     * @memberof PingResponse
     * @static
     * @param {IPingResponse} message PingResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PingResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified PingResponse message, length delimited. Does not implicitly {@link PingResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PingResponse
     * @static
     * @param {IPingResponse} message PingResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PingResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PingResponse message from the specified reader or buffer.
     * @function decode
     * @memberof PingResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PingResponse} PingResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PingResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PingResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PingResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PingResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PingResponse} PingResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PingResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PingResponse message.
     * @function verify
     * @memberof PingResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PingResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a PingResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PingResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PingResponse} PingResponse
     */
    PingResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.PingResponse)
            return object;
        return new $root.PingResponse();
    };

    /**
     * Creates a plain object from a PingResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PingResponse
     * @static
     * @param {PingResponse} message PingResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PingResponse.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this PingResponse to JSON.
     * @function toJSON
     * @memberof PingResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PingResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for PingResponse
     * @function getTypeUrl
     * @memberof PingResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    PingResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/PingResponse";
    };

    return PingResponse;
})();

$root.DeviceInfoRequest = (function() {

    /**
     * Properties of a DeviceInfoRequest.
     * @exports IDeviceInfoRequest
     * @interface IDeviceInfoRequest
     */

    /**
     * Constructs a new DeviceInfoRequest.
     * @exports DeviceInfoRequest
     * @classdesc Represents a DeviceInfoRequest.
     * @implements IDeviceInfoRequest
     * @constructor
     * @param {IDeviceInfoRequest=} [properties] Properties to set
     */
    function DeviceInfoRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new DeviceInfoRequest instance using the specified properties.
     * @function create
     * @memberof DeviceInfoRequest
     * @static
     * @param {IDeviceInfoRequest=} [properties] Properties to set
     * @returns {DeviceInfoRequest} DeviceInfoRequest instance
     */
    DeviceInfoRequest.create = function create(properties) {
        return new DeviceInfoRequest(properties);
    };

    /**
     * Encodes the specified DeviceInfoRequest message. Does not implicitly {@link DeviceInfoRequest.verify|verify} messages.
     * @function encode
     * @memberof DeviceInfoRequest
     * @static
     * @param {IDeviceInfoRequest} message DeviceInfoRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DeviceInfoRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified DeviceInfoRequest message, length delimited. Does not implicitly {@link DeviceInfoRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DeviceInfoRequest
     * @static
     * @param {IDeviceInfoRequest} message DeviceInfoRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DeviceInfoRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DeviceInfoRequest message from the specified reader or buffer.
     * @function decode
     * @memberof DeviceInfoRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DeviceInfoRequest} DeviceInfoRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DeviceInfoRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DeviceInfoRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a DeviceInfoRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DeviceInfoRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DeviceInfoRequest} DeviceInfoRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DeviceInfoRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DeviceInfoRequest message.
     * @function verify
     * @memberof DeviceInfoRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DeviceInfoRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a DeviceInfoRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DeviceInfoRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DeviceInfoRequest} DeviceInfoRequest
     */
    DeviceInfoRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.DeviceInfoRequest)
            return object;
        return new $root.DeviceInfoRequest();
    };

    /**
     * Creates a plain object from a DeviceInfoRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DeviceInfoRequest
     * @static
     * @param {DeviceInfoRequest} message DeviceInfoRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DeviceInfoRequest.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this DeviceInfoRequest to JSON.
     * @function toJSON
     * @memberof DeviceInfoRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DeviceInfoRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DeviceInfoRequest
     * @function getTypeUrl
     * @memberof DeviceInfoRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DeviceInfoRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DeviceInfoRequest";
    };

    return DeviceInfoRequest;
})();

$root.AreaInfo = (function() {

    /**
     * Properties of an AreaInfo.
     * @exports IAreaInfo
     * @interface IAreaInfo
     * @property {number|null} [area_id] AreaInfo area_id
     * @property {string|null} [name] AreaInfo name
     */

    /**
     * Constructs a new AreaInfo.
     * @exports AreaInfo
     * @classdesc Represents an AreaInfo.
     * @implements IAreaInfo
     * @constructor
     * @param {IAreaInfo=} [properties] Properties to set
     */
    function AreaInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * AreaInfo area_id.
     * @member {number} area_id
     * @memberof AreaInfo
     * @instance
     */
    AreaInfo.prototype.area_id = 0;

    /**
     * AreaInfo name.
     * @member {string} name
     * @memberof AreaInfo
     * @instance
     */
    AreaInfo.prototype.name = "";

    /**
     * Creates a new AreaInfo instance using the specified properties.
     * @function create
     * @memberof AreaInfo
     * @static
     * @param {IAreaInfo=} [properties] Properties to set
     * @returns {AreaInfo} AreaInfo instance
     */
    AreaInfo.create = function create(properties) {
        return new AreaInfo(properties);
    };

    /**
     * Encodes the specified AreaInfo message. Does not implicitly {@link AreaInfo.verify|verify} messages.
     * @function encode
     * @memberof AreaInfo
     * @static
     * @param {IAreaInfo} message AreaInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AreaInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.area_id != null && Object.hasOwnProperty.call(message, "area_id"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.area_id);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        return writer;
    };

    /**
     * Encodes the specified AreaInfo message, length delimited. Does not implicitly {@link AreaInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof AreaInfo
     * @static
     * @param {IAreaInfo} message AreaInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AreaInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an AreaInfo message from the specified reader or buffer.
     * @function decode
     * @memberof AreaInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {AreaInfo} AreaInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AreaInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AreaInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.area_id = reader.uint32();
                    break;
                }
            case 2: {
                    message.name = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an AreaInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof AreaInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {AreaInfo} AreaInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AreaInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an AreaInfo message.
     * @function verify
     * @memberof AreaInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    AreaInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.area_id != null && message.hasOwnProperty("area_id"))
            if (!$util.isInteger(message.area_id))
                return "area_id: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        return null;
    };

    /**
     * Creates an AreaInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof AreaInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {AreaInfo} AreaInfo
     */
    AreaInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.AreaInfo)
            return object;
        var message = new $root.AreaInfo();
        if (object.area_id != null)
            message.area_id = object.area_id >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        return message;
    };

    /**
     * Creates a plain object from an AreaInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof AreaInfo
     * @static
     * @param {AreaInfo} message AreaInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    AreaInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.area_id = 0;
            object.name = "";
        }
        if (message.area_id != null && message.hasOwnProperty("area_id"))
            object.area_id = message.area_id;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        return object;
    };

    /**
     * Converts this AreaInfo to JSON.
     * @function toJSON
     * @memberof AreaInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    AreaInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for AreaInfo
     * @function getTypeUrl
     * @memberof AreaInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    AreaInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/AreaInfo";
    };

    return AreaInfo;
})();

$root.DeviceInfo = (function() {

    /**
     * Properties of a DeviceInfo.
     * @exports IDeviceInfo
     * @interface IDeviceInfo
     * @property {number|null} [device_id] DeviceInfo device_id
     * @property {string|null} [name] DeviceInfo name
     * @property {number|null} [area_id] DeviceInfo area_id
     */

    /**
     * Constructs a new DeviceInfo.
     * @exports DeviceInfo
     * @classdesc Represents a DeviceInfo.
     * @implements IDeviceInfo
     * @constructor
     * @param {IDeviceInfo=} [properties] Properties to set
     */
    function DeviceInfo(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DeviceInfo device_id.
     * @member {number} device_id
     * @memberof DeviceInfo
     * @instance
     */
    DeviceInfo.prototype.device_id = 0;

    /**
     * DeviceInfo name.
     * @member {string} name
     * @memberof DeviceInfo
     * @instance
     */
    DeviceInfo.prototype.name = "";

    /**
     * DeviceInfo area_id.
     * @member {number} area_id
     * @memberof DeviceInfo
     * @instance
     */
    DeviceInfo.prototype.area_id = 0;

    /**
     * Creates a new DeviceInfo instance using the specified properties.
     * @function create
     * @memberof DeviceInfo
     * @static
     * @param {IDeviceInfo=} [properties] Properties to set
     * @returns {DeviceInfo} DeviceInfo instance
     */
    DeviceInfo.create = function create(properties) {
        return new DeviceInfo(properties);
    };

    /**
     * Encodes the specified DeviceInfo message. Does not implicitly {@link DeviceInfo.verify|verify} messages.
     * @function encode
     * @memberof DeviceInfo
     * @static
     * @param {IDeviceInfo} message DeviceInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DeviceInfo.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.device_id);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.area_id != null && Object.hasOwnProperty.call(message, "area_id"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.area_id);
        return writer;
    };

    /**
     * Encodes the specified DeviceInfo message, length delimited. Does not implicitly {@link DeviceInfo.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DeviceInfo
     * @static
     * @param {IDeviceInfo} message DeviceInfo message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DeviceInfo.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DeviceInfo message from the specified reader or buffer.
     * @function decode
     * @memberof DeviceInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DeviceInfo} DeviceInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DeviceInfo.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DeviceInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.device_id = reader.uint32();
                    break;
                }
            case 2: {
                    message.name = reader.string();
                    break;
                }
            case 3: {
                    message.area_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a DeviceInfo message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DeviceInfo
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DeviceInfo} DeviceInfo
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DeviceInfo.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DeviceInfo message.
     * @function verify
     * @memberof DeviceInfo
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DeviceInfo.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.area_id != null && message.hasOwnProperty("area_id"))
            if (!$util.isInteger(message.area_id))
                return "area_id: integer expected";
        return null;
    };

    /**
     * Creates a DeviceInfo message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DeviceInfo
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DeviceInfo} DeviceInfo
     */
    DeviceInfo.fromObject = function fromObject(object) {
        if (object instanceof $root.DeviceInfo)
            return object;
        var message = new $root.DeviceInfo();
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.area_id != null)
            message.area_id = object.area_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DeviceInfo message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DeviceInfo
     * @static
     * @param {DeviceInfo} message DeviceInfo
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DeviceInfo.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.device_id = 0;
            object.name = "";
            object.area_id = 0;
        }
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.area_id != null && message.hasOwnProperty("area_id"))
            object.area_id = message.area_id;
        return object;
    };

    /**
     * Converts this DeviceInfo to JSON.
     * @function toJSON
     * @memberof DeviceInfo
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DeviceInfo.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DeviceInfo
     * @function getTypeUrl
     * @memberof DeviceInfo
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DeviceInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DeviceInfo";
    };

    return DeviceInfo;
})();

$root.DeviceInfoResponse = (function() {

    /**
     * Properties of a DeviceInfoResponse.
     * @exports IDeviceInfoResponse
     * @interface IDeviceInfoResponse
     * @property {boolean|null} [uses_password] DeviceInfoResponse uses_password
     * @property {string|null} [name] DeviceInfoResponse name
     * @property {string|null} [mac_address] DeviceInfoResponse mac_address
     * @property {string|null} [esphome_version] DeviceInfoResponse esphome_version
     * @property {string|null} [compilation_time] DeviceInfoResponse compilation_time
     * @property {string|null} [model] DeviceInfoResponse model
     * @property {boolean|null} [has_deep_sleep] DeviceInfoResponse has_deep_sleep
     * @property {string|null} [project_name] DeviceInfoResponse project_name
     * @property {string|null} [project_version] DeviceInfoResponse project_version
     * @property {number|null} [webserver_port] DeviceInfoResponse webserver_port
     * @property {number|null} [legacy_bluetooth_proxy_version] DeviceInfoResponse legacy_bluetooth_proxy_version
     * @property {number|null} [bluetooth_proxy_feature_flags] DeviceInfoResponse bluetooth_proxy_feature_flags
     * @property {string|null} [manufacturer] DeviceInfoResponse manufacturer
     * @property {string|null} [friendly_name] DeviceInfoResponse friendly_name
     * @property {number|null} [legacy_voice_assistant_version] DeviceInfoResponse legacy_voice_assistant_version
     * @property {number|null} [voice_assistant_feature_flags] DeviceInfoResponse voice_assistant_feature_flags
     * @property {string|null} [suggested_area] DeviceInfoResponse suggested_area
     * @property {string|null} [bluetooth_mac_address] DeviceInfoResponse bluetooth_mac_address
     * @property {boolean|null} [api_encryption_supported] DeviceInfoResponse api_encryption_supported
     * @property {Array.<IDeviceInfo>|null} [devices] DeviceInfoResponse devices
     * @property {Array.<IAreaInfo>|null} [areas] DeviceInfoResponse areas
     * @property {IAreaInfo|null} [area] DeviceInfoResponse area
     * @property {number|null} [zwave_proxy_feature_flags] DeviceInfoResponse zwave_proxy_feature_flags
     * @property {number|null} [zwave_home_id] DeviceInfoResponse zwave_home_id
     */

    /**
     * Constructs a new DeviceInfoResponse.
     * @exports DeviceInfoResponse
     * @classdesc Represents a DeviceInfoResponse.
     * @implements IDeviceInfoResponse
     * @constructor
     * @param {IDeviceInfoResponse=} [properties] Properties to set
     */
    function DeviceInfoResponse(properties) {
        this.devices = [];
        this.areas = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DeviceInfoResponse uses_password.
     * @member {boolean} uses_password
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.uses_password = false;

    /**
     * DeviceInfoResponse name.
     * @member {string} name
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.name = "";

    /**
     * DeviceInfoResponse mac_address.
     * @member {string} mac_address
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.mac_address = "";

    /**
     * DeviceInfoResponse esphome_version.
     * @member {string} esphome_version
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.esphome_version = "";

    /**
     * DeviceInfoResponse compilation_time.
     * @member {string} compilation_time
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.compilation_time = "";

    /**
     * DeviceInfoResponse model.
     * @member {string} model
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.model = "";

    /**
     * DeviceInfoResponse has_deep_sleep.
     * @member {boolean} has_deep_sleep
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.has_deep_sleep = false;

    /**
     * DeviceInfoResponse project_name.
     * @member {string} project_name
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.project_name = "";

    /**
     * DeviceInfoResponse project_version.
     * @member {string} project_version
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.project_version = "";

    /**
     * DeviceInfoResponse webserver_port.
     * @member {number} webserver_port
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.webserver_port = 0;

    /**
     * DeviceInfoResponse legacy_bluetooth_proxy_version.
     * @member {number} legacy_bluetooth_proxy_version
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.legacy_bluetooth_proxy_version = 0;

    /**
     * DeviceInfoResponse bluetooth_proxy_feature_flags.
     * @member {number} bluetooth_proxy_feature_flags
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.bluetooth_proxy_feature_flags = 0;

    /**
     * DeviceInfoResponse manufacturer.
     * @member {string} manufacturer
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.manufacturer = "";

    /**
     * DeviceInfoResponse friendly_name.
     * @member {string} friendly_name
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.friendly_name = "";

    /**
     * DeviceInfoResponse legacy_voice_assistant_version.
     * @member {number} legacy_voice_assistant_version
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.legacy_voice_assistant_version = 0;

    /**
     * DeviceInfoResponse voice_assistant_feature_flags.
     * @member {number} voice_assistant_feature_flags
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.voice_assistant_feature_flags = 0;

    /**
     * DeviceInfoResponse suggested_area.
     * @member {string} suggested_area
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.suggested_area = "";

    /**
     * DeviceInfoResponse bluetooth_mac_address.
     * @member {string} bluetooth_mac_address
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.bluetooth_mac_address = "";

    /**
     * DeviceInfoResponse api_encryption_supported.
     * @member {boolean} api_encryption_supported
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.api_encryption_supported = false;

    /**
     * DeviceInfoResponse devices.
     * @member {Array.<IDeviceInfo>} devices
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.devices = $util.emptyArray;

    /**
     * DeviceInfoResponse areas.
     * @member {Array.<IAreaInfo>} areas
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.areas = $util.emptyArray;

    /**
     * DeviceInfoResponse area.
     * @member {IAreaInfo|null|undefined} area
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.area = null;

    /**
     * DeviceInfoResponse zwave_proxy_feature_flags.
     * @member {number} zwave_proxy_feature_flags
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.zwave_proxy_feature_flags = 0;

    /**
     * DeviceInfoResponse zwave_home_id.
     * @member {number} zwave_home_id
     * @memberof DeviceInfoResponse
     * @instance
     */
    DeviceInfoResponse.prototype.zwave_home_id = 0;

    /**
     * Creates a new DeviceInfoResponse instance using the specified properties.
     * @function create
     * @memberof DeviceInfoResponse
     * @static
     * @param {IDeviceInfoResponse=} [properties] Properties to set
     * @returns {DeviceInfoResponse} DeviceInfoResponse instance
     */
    DeviceInfoResponse.create = function create(properties) {
        return new DeviceInfoResponse(properties);
    };

    /**
     * Encodes the specified DeviceInfoResponse message. Does not implicitly {@link DeviceInfoResponse.verify|verify} messages.
     * @function encode
     * @memberof DeviceInfoResponse
     * @static
     * @param {IDeviceInfoResponse} message DeviceInfoResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DeviceInfoResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uses_password != null && Object.hasOwnProperty.call(message, "uses_password"))
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.uses_password);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
        if (message.mac_address != null && Object.hasOwnProperty.call(message, "mac_address"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.mac_address);
        if (message.esphome_version != null && Object.hasOwnProperty.call(message, "esphome_version"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.esphome_version);
        if (message.compilation_time != null && Object.hasOwnProperty.call(message, "compilation_time"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.compilation_time);
        if (message.model != null && Object.hasOwnProperty.call(message, "model"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.model);
        if (message.has_deep_sleep != null && Object.hasOwnProperty.call(message, "has_deep_sleep"))
            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.has_deep_sleep);
        if (message.project_name != null && Object.hasOwnProperty.call(message, "project_name"))
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.project_name);
        if (message.project_version != null && Object.hasOwnProperty.call(message, "project_version"))
            writer.uint32(/* id 9, wireType 2 =*/74).string(message.project_version);
        if (message.webserver_port != null && Object.hasOwnProperty.call(message, "webserver_port"))
            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.webserver_port);
        if (message.legacy_bluetooth_proxy_version != null && Object.hasOwnProperty.call(message, "legacy_bluetooth_proxy_version"))
            writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.legacy_bluetooth_proxy_version);
        if (message.manufacturer != null && Object.hasOwnProperty.call(message, "manufacturer"))
            writer.uint32(/* id 12, wireType 2 =*/98).string(message.manufacturer);
        if (message.friendly_name != null && Object.hasOwnProperty.call(message, "friendly_name"))
            writer.uint32(/* id 13, wireType 2 =*/106).string(message.friendly_name);
        if (message.legacy_voice_assistant_version != null && Object.hasOwnProperty.call(message, "legacy_voice_assistant_version"))
            writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.legacy_voice_assistant_version);
        if (message.bluetooth_proxy_feature_flags != null && Object.hasOwnProperty.call(message, "bluetooth_proxy_feature_flags"))
            writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.bluetooth_proxy_feature_flags);
        if (message.suggested_area != null && Object.hasOwnProperty.call(message, "suggested_area"))
            writer.uint32(/* id 16, wireType 2 =*/130).string(message.suggested_area);
        if (message.voice_assistant_feature_flags != null && Object.hasOwnProperty.call(message, "voice_assistant_feature_flags"))
            writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.voice_assistant_feature_flags);
        if (message.bluetooth_mac_address != null && Object.hasOwnProperty.call(message, "bluetooth_mac_address"))
            writer.uint32(/* id 18, wireType 2 =*/146).string(message.bluetooth_mac_address);
        if (message.api_encryption_supported != null && Object.hasOwnProperty.call(message, "api_encryption_supported"))
            writer.uint32(/* id 19, wireType 0 =*/152).bool(message.api_encryption_supported);
        if (message.devices != null && message.devices.length)
            for (var i = 0; i < message.devices.length; ++i)
                $root.DeviceInfo.encode(message.devices[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
        if (message.areas != null && message.areas.length)
            for (var i = 0; i < message.areas.length; ++i)
                $root.AreaInfo.encode(message.areas[i], writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
        if (message.area != null && Object.hasOwnProperty.call(message, "area"))
            $root.AreaInfo.encode(message.area, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
        if (message.zwave_proxy_feature_flags != null && Object.hasOwnProperty.call(message, "zwave_proxy_feature_flags"))
            writer.uint32(/* id 23, wireType 0 =*/184).uint32(message.zwave_proxy_feature_flags);
        if (message.zwave_home_id != null && Object.hasOwnProperty.call(message, "zwave_home_id"))
            writer.uint32(/* id 24, wireType 0 =*/192).uint32(message.zwave_home_id);
        return writer;
    };

    /**
     * Encodes the specified DeviceInfoResponse message, length delimited. Does not implicitly {@link DeviceInfoResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DeviceInfoResponse
     * @static
     * @param {IDeviceInfoResponse} message DeviceInfoResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DeviceInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DeviceInfoResponse message from the specified reader or buffer.
     * @function decode
     * @memberof DeviceInfoResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DeviceInfoResponse} DeviceInfoResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DeviceInfoResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DeviceInfoResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.uses_password = reader.bool();
                    break;
                }
            case 2: {
                    message.name = reader.string();
                    break;
                }
            case 3: {
                    message.mac_address = reader.string();
                    break;
                }
            case 4: {
                    message.esphome_version = reader.string();
                    break;
                }
            case 5: {
                    message.compilation_time = reader.string();
                    break;
                }
            case 6: {
                    message.model = reader.string();
                    break;
                }
            case 7: {
                    message.has_deep_sleep = reader.bool();
                    break;
                }
            case 8: {
                    message.project_name = reader.string();
                    break;
                }
            case 9: {
                    message.project_version = reader.string();
                    break;
                }
            case 10: {
                    message.webserver_port = reader.uint32();
                    break;
                }
            case 11: {
                    message.legacy_bluetooth_proxy_version = reader.uint32();
                    break;
                }
            case 15: {
                    message.bluetooth_proxy_feature_flags = reader.uint32();
                    break;
                }
            case 12: {
                    message.manufacturer = reader.string();
                    break;
                }
            case 13: {
                    message.friendly_name = reader.string();
                    break;
                }
            case 14: {
                    message.legacy_voice_assistant_version = reader.uint32();
                    break;
                }
            case 17: {
                    message.voice_assistant_feature_flags = reader.uint32();
                    break;
                }
            case 16: {
                    message.suggested_area = reader.string();
                    break;
                }
            case 18: {
                    message.bluetooth_mac_address = reader.string();
                    break;
                }
            case 19: {
                    message.api_encryption_supported = reader.bool();
                    break;
                }
            case 20: {
                    if (!(message.devices && message.devices.length))
                        message.devices = [];
                    message.devices.push($root.DeviceInfo.decode(reader, reader.uint32()));
                    break;
                }
            case 21: {
                    if (!(message.areas && message.areas.length))
                        message.areas = [];
                    message.areas.push($root.AreaInfo.decode(reader, reader.uint32()));
                    break;
                }
            case 22: {
                    message.area = $root.AreaInfo.decode(reader, reader.uint32());
                    break;
                }
            case 23: {
                    message.zwave_proxy_feature_flags = reader.uint32();
                    break;
                }
            case 24: {
                    message.zwave_home_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a DeviceInfoResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DeviceInfoResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DeviceInfoResponse} DeviceInfoResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DeviceInfoResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DeviceInfoResponse message.
     * @function verify
     * @memberof DeviceInfoResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DeviceInfoResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uses_password != null && message.hasOwnProperty("uses_password"))
            if (typeof message.uses_password !== "boolean")
                return "uses_password: boolean expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.mac_address != null && message.hasOwnProperty("mac_address"))
            if (!$util.isString(message.mac_address))
                return "mac_address: string expected";
        if (message.esphome_version != null && message.hasOwnProperty("esphome_version"))
            if (!$util.isString(message.esphome_version))
                return "esphome_version: string expected";
        if (message.compilation_time != null && message.hasOwnProperty("compilation_time"))
            if (!$util.isString(message.compilation_time))
                return "compilation_time: string expected";
        if (message.model != null && message.hasOwnProperty("model"))
            if (!$util.isString(message.model))
                return "model: string expected";
        if (message.has_deep_sleep != null && message.hasOwnProperty("has_deep_sleep"))
            if (typeof message.has_deep_sleep !== "boolean")
                return "has_deep_sleep: boolean expected";
        if (message.project_name != null && message.hasOwnProperty("project_name"))
            if (!$util.isString(message.project_name))
                return "project_name: string expected";
        if (message.project_version != null && message.hasOwnProperty("project_version"))
            if (!$util.isString(message.project_version))
                return "project_version: string expected";
        if (message.webserver_port != null && message.hasOwnProperty("webserver_port"))
            if (!$util.isInteger(message.webserver_port))
                return "webserver_port: integer expected";
        if (message.legacy_bluetooth_proxy_version != null && message.hasOwnProperty("legacy_bluetooth_proxy_version"))
            if (!$util.isInteger(message.legacy_bluetooth_proxy_version))
                return "legacy_bluetooth_proxy_version: integer expected";
        if (message.bluetooth_proxy_feature_flags != null && message.hasOwnProperty("bluetooth_proxy_feature_flags"))
            if (!$util.isInteger(message.bluetooth_proxy_feature_flags))
                return "bluetooth_proxy_feature_flags: integer expected";
        if (message.manufacturer != null && message.hasOwnProperty("manufacturer"))
            if (!$util.isString(message.manufacturer))
                return "manufacturer: string expected";
        if (message.friendly_name != null && message.hasOwnProperty("friendly_name"))
            if (!$util.isString(message.friendly_name))
                return "friendly_name: string expected";
        if (message.legacy_voice_assistant_version != null && message.hasOwnProperty("legacy_voice_assistant_version"))
            if (!$util.isInteger(message.legacy_voice_assistant_version))
                return "legacy_voice_assistant_version: integer expected";
        if (message.voice_assistant_feature_flags != null && message.hasOwnProperty("voice_assistant_feature_flags"))
            if (!$util.isInteger(message.voice_assistant_feature_flags))
                return "voice_assistant_feature_flags: integer expected";
        if (message.suggested_area != null && message.hasOwnProperty("suggested_area"))
            if (!$util.isString(message.suggested_area))
                return "suggested_area: string expected";
        if (message.bluetooth_mac_address != null && message.hasOwnProperty("bluetooth_mac_address"))
            if (!$util.isString(message.bluetooth_mac_address))
                return "bluetooth_mac_address: string expected";
        if (message.api_encryption_supported != null && message.hasOwnProperty("api_encryption_supported"))
            if (typeof message.api_encryption_supported !== "boolean")
                return "api_encryption_supported: boolean expected";
        if (message.devices != null && message.hasOwnProperty("devices")) {
            if (!Array.isArray(message.devices))
                return "devices: array expected";
            for (var i = 0; i < message.devices.length; ++i) {
                var error = $root.DeviceInfo.verify(message.devices[i]);
                if (error)
                    return "devices." + error;
            }
        }
        if (message.areas != null && message.hasOwnProperty("areas")) {
            if (!Array.isArray(message.areas))
                return "areas: array expected";
            for (var i = 0; i < message.areas.length; ++i) {
                var error = $root.AreaInfo.verify(message.areas[i]);
                if (error)
                    return "areas." + error;
            }
        }
        if (message.area != null && message.hasOwnProperty("area")) {
            var error = $root.AreaInfo.verify(message.area);
            if (error)
                return "area." + error;
        }
        if (message.zwave_proxy_feature_flags != null && message.hasOwnProperty("zwave_proxy_feature_flags"))
            if (!$util.isInteger(message.zwave_proxy_feature_flags))
                return "zwave_proxy_feature_flags: integer expected";
        if (message.zwave_home_id != null && message.hasOwnProperty("zwave_home_id"))
            if (!$util.isInteger(message.zwave_home_id))
                return "zwave_home_id: integer expected";
        return null;
    };

    /**
     * Creates a DeviceInfoResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DeviceInfoResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DeviceInfoResponse} DeviceInfoResponse
     */
    DeviceInfoResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.DeviceInfoResponse)
            return object;
        var message = new $root.DeviceInfoResponse();
        if (object.uses_password != null)
            message.uses_password = Boolean(object.uses_password);
        if (object.name != null)
            message.name = String(object.name);
        if (object.mac_address != null)
            message.mac_address = String(object.mac_address);
        if (object.esphome_version != null)
            message.esphome_version = String(object.esphome_version);
        if (object.compilation_time != null)
            message.compilation_time = String(object.compilation_time);
        if (object.model != null)
            message.model = String(object.model);
        if (object.has_deep_sleep != null)
            message.has_deep_sleep = Boolean(object.has_deep_sleep);
        if (object.project_name != null)
            message.project_name = String(object.project_name);
        if (object.project_version != null)
            message.project_version = String(object.project_version);
        if (object.webserver_port != null)
            message.webserver_port = object.webserver_port >>> 0;
        if (object.legacy_bluetooth_proxy_version != null)
            message.legacy_bluetooth_proxy_version = object.legacy_bluetooth_proxy_version >>> 0;
        if (object.bluetooth_proxy_feature_flags != null)
            message.bluetooth_proxy_feature_flags = object.bluetooth_proxy_feature_flags >>> 0;
        if (object.manufacturer != null)
            message.manufacturer = String(object.manufacturer);
        if (object.friendly_name != null)
            message.friendly_name = String(object.friendly_name);
        if (object.legacy_voice_assistant_version != null)
            message.legacy_voice_assistant_version = object.legacy_voice_assistant_version >>> 0;
        if (object.voice_assistant_feature_flags != null)
            message.voice_assistant_feature_flags = object.voice_assistant_feature_flags >>> 0;
        if (object.suggested_area != null)
            message.suggested_area = String(object.suggested_area);
        if (object.bluetooth_mac_address != null)
            message.bluetooth_mac_address = String(object.bluetooth_mac_address);
        if (object.api_encryption_supported != null)
            message.api_encryption_supported = Boolean(object.api_encryption_supported);
        if (object.devices) {
            if (!Array.isArray(object.devices))
                throw TypeError(".DeviceInfoResponse.devices: array expected");
            message.devices = [];
            for (var i = 0; i < object.devices.length; ++i) {
                if (typeof object.devices[i] !== "object")
                    throw TypeError(".DeviceInfoResponse.devices: object expected");
                message.devices[i] = $root.DeviceInfo.fromObject(object.devices[i]);
            }
        }
        if (object.areas) {
            if (!Array.isArray(object.areas))
                throw TypeError(".DeviceInfoResponse.areas: array expected");
            message.areas = [];
            for (var i = 0; i < object.areas.length; ++i) {
                if (typeof object.areas[i] !== "object")
                    throw TypeError(".DeviceInfoResponse.areas: object expected");
                message.areas[i] = $root.AreaInfo.fromObject(object.areas[i]);
            }
        }
        if (object.area != null) {
            if (typeof object.area !== "object")
                throw TypeError(".DeviceInfoResponse.area: object expected");
            message.area = $root.AreaInfo.fromObject(object.area);
        }
        if (object.zwave_proxy_feature_flags != null)
            message.zwave_proxy_feature_flags = object.zwave_proxy_feature_flags >>> 0;
        if (object.zwave_home_id != null)
            message.zwave_home_id = object.zwave_home_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DeviceInfoResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DeviceInfoResponse
     * @static
     * @param {DeviceInfoResponse} message DeviceInfoResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DeviceInfoResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.devices = [];
            object.areas = [];
        }
        if (options.defaults) {
            object.uses_password = false;
            object.name = "";
            object.mac_address = "";
            object.esphome_version = "";
            object.compilation_time = "";
            object.model = "";
            object.has_deep_sleep = false;
            object.project_name = "";
            object.project_version = "";
            object.webserver_port = 0;
            object.legacy_bluetooth_proxy_version = 0;
            object.manufacturer = "";
            object.friendly_name = "";
            object.legacy_voice_assistant_version = 0;
            object.bluetooth_proxy_feature_flags = 0;
            object.suggested_area = "";
            object.voice_assistant_feature_flags = 0;
            object.bluetooth_mac_address = "";
            object.api_encryption_supported = false;
            object.area = null;
            object.zwave_proxy_feature_flags = 0;
            object.zwave_home_id = 0;
        }
        if (message.uses_password != null && message.hasOwnProperty("uses_password"))
            object.uses_password = message.uses_password;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.mac_address != null && message.hasOwnProperty("mac_address"))
            object.mac_address = message.mac_address;
        if (message.esphome_version != null && message.hasOwnProperty("esphome_version"))
            object.esphome_version = message.esphome_version;
        if (message.compilation_time != null && message.hasOwnProperty("compilation_time"))
            object.compilation_time = message.compilation_time;
        if (message.model != null && message.hasOwnProperty("model"))
            object.model = message.model;
        if (message.has_deep_sleep != null && message.hasOwnProperty("has_deep_sleep"))
            object.has_deep_sleep = message.has_deep_sleep;
        if (message.project_name != null && message.hasOwnProperty("project_name"))
            object.project_name = message.project_name;
        if (message.project_version != null && message.hasOwnProperty("project_version"))
            object.project_version = message.project_version;
        if (message.webserver_port != null && message.hasOwnProperty("webserver_port"))
            object.webserver_port = message.webserver_port;
        if (message.legacy_bluetooth_proxy_version != null && message.hasOwnProperty("legacy_bluetooth_proxy_version"))
            object.legacy_bluetooth_proxy_version = message.legacy_bluetooth_proxy_version;
        if (message.manufacturer != null && message.hasOwnProperty("manufacturer"))
            object.manufacturer = message.manufacturer;
        if (message.friendly_name != null && message.hasOwnProperty("friendly_name"))
            object.friendly_name = message.friendly_name;
        if (message.legacy_voice_assistant_version != null && message.hasOwnProperty("legacy_voice_assistant_version"))
            object.legacy_voice_assistant_version = message.legacy_voice_assistant_version;
        if (message.bluetooth_proxy_feature_flags != null && message.hasOwnProperty("bluetooth_proxy_feature_flags"))
            object.bluetooth_proxy_feature_flags = message.bluetooth_proxy_feature_flags;
        if (message.suggested_area != null && message.hasOwnProperty("suggested_area"))
            object.suggested_area = message.suggested_area;
        if (message.voice_assistant_feature_flags != null && message.hasOwnProperty("voice_assistant_feature_flags"))
            object.voice_assistant_feature_flags = message.voice_assistant_feature_flags;
        if (message.bluetooth_mac_address != null && message.hasOwnProperty("bluetooth_mac_address"))
            object.bluetooth_mac_address = message.bluetooth_mac_address;
        if (message.api_encryption_supported != null && message.hasOwnProperty("api_encryption_supported"))
            object.api_encryption_supported = message.api_encryption_supported;
        if (message.devices && message.devices.length) {
            object.devices = [];
            for (var j = 0; j < message.devices.length; ++j)
                object.devices[j] = $root.DeviceInfo.toObject(message.devices[j], options);
        }
        if (message.areas && message.areas.length) {
            object.areas = [];
            for (var j = 0; j < message.areas.length; ++j)
                object.areas[j] = $root.AreaInfo.toObject(message.areas[j], options);
        }
        if (message.area != null && message.hasOwnProperty("area"))
            object.area = $root.AreaInfo.toObject(message.area, options);
        if (message.zwave_proxy_feature_flags != null && message.hasOwnProperty("zwave_proxy_feature_flags"))
            object.zwave_proxy_feature_flags = message.zwave_proxy_feature_flags;
        if (message.zwave_home_id != null && message.hasOwnProperty("zwave_home_id"))
            object.zwave_home_id = message.zwave_home_id;
        return object;
    };

    /**
     * Converts this DeviceInfoResponse to JSON.
     * @function toJSON
     * @memberof DeviceInfoResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DeviceInfoResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DeviceInfoResponse
     * @function getTypeUrl
     * @memberof DeviceInfoResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DeviceInfoResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DeviceInfoResponse";
    };

    return DeviceInfoResponse;
})();

$root.ListEntitiesRequest = (function() {

    /**
     * Properties of a ListEntitiesRequest.
     * @exports IListEntitiesRequest
     * @interface IListEntitiesRequest
     */

    /**
     * Constructs a new ListEntitiesRequest.
     * @exports ListEntitiesRequest
     * @classdesc Represents a ListEntitiesRequest.
     * @implements IListEntitiesRequest
     * @constructor
     * @param {IListEntitiesRequest=} [properties] Properties to set
     */
    function ListEntitiesRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new ListEntitiesRequest instance using the specified properties.
     * @function create
     * @memberof ListEntitiesRequest
     * @static
     * @param {IListEntitiesRequest=} [properties] Properties to set
     * @returns {ListEntitiesRequest} ListEntitiesRequest instance
     */
    ListEntitiesRequest.create = function create(properties) {
        return new ListEntitiesRequest(properties);
    };

    /**
     * Encodes the specified ListEntitiesRequest message. Does not implicitly {@link ListEntitiesRequest.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesRequest
     * @static
     * @param {IListEntitiesRequest} message ListEntitiesRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesRequest message, length delimited. Does not implicitly {@link ListEntitiesRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesRequest
     * @static
     * @param {IListEntitiesRequest} message ListEntitiesRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesRequest} ListEntitiesRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesRequest} ListEntitiesRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesRequest message.
     * @function verify
     * @memberof ListEntitiesRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a ListEntitiesRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesRequest} ListEntitiesRequest
     */
    ListEntitiesRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesRequest)
            return object;
        return new $root.ListEntitiesRequest();
    };

    /**
     * Creates a plain object from a ListEntitiesRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesRequest
     * @static
     * @param {ListEntitiesRequest} message ListEntitiesRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesRequest.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this ListEntitiesRequest to JSON.
     * @function toJSON
     * @memberof ListEntitiesRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesRequest
     * @function getTypeUrl
     * @memberof ListEntitiesRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesRequest";
    };

    return ListEntitiesRequest;
})();

$root.ListEntitiesDoneResponse = (function() {

    /**
     * Properties of a ListEntitiesDoneResponse.
     * @exports IListEntitiesDoneResponse
     * @interface IListEntitiesDoneResponse
     */

    /**
     * Constructs a new ListEntitiesDoneResponse.
     * @exports ListEntitiesDoneResponse
     * @classdesc Represents a ListEntitiesDoneResponse.
     * @implements IListEntitiesDoneResponse
     * @constructor
     * @param {IListEntitiesDoneResponse=} [properties] Properties to set
     */
    function ListEntitiesDoneResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new ListEntitiesDoneResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesDoneResponse
     * @static
     * @param {IListEntitiesDoneResponse=} [properties] Properties to set
     * @returns {ListEntitiesDoneResponse} ListEntitiesDoneResponse instance
     */
    ListEntitiesDoneResponse.create = function create(properties) {
        return new ListEntitiesDoneResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesDoneResponse message. Does not implicitly {@link ListEntitiesDoneResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesDoneResponse
     * @static
     * @param {IListEntitiesDoneResponse} message ListEntitiesDoneResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesDoneResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesDoneResponse message, length delimited. Does not implicitly {@link ListEntitiesDoneResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesDoneResponse
     * @static
     * @param {IListEntitiesDoneResponse} message ListEntitiesDoneResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesDoneResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesDoneResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesDoneResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesDoneResponse} ListEntitiesDoneResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesDoneResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesDoneResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesDoneResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesDoneResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesDoneResponse} ListEntitiesDoneResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesDoneResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesDoneResponse message.
     * @function verify
     * @memberof ListEntitiesDoneResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesDoneResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a ListEntitiesDoneResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesDoneResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesDoneResponse} ListEntitiesDoneResponse
     */
    ListEntitiesDoneResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesDoneResponse)
            return object;
        return new $root.ListEntitiesDoneResponse();
    };

    /**
     * Creates a plain object from a ListEntitiesDoneResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesDoneResponse
     * @static
     * @param {ListEntitiesDoneResponse} message ListEntitiesDoneResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesDoneResponse.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this ListEntitiesDoneResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesDoneResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesDoneResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesDoneResponse
     * @function getTypeUrl
     * @memberof ListEntitiesDoneResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesDoneResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesDoneResponse";
    };

    return ListEntitiesDoneResponse;
})();

$root.SubscribeStatesRequest = (function() {

    /**
     * Properties of a SubscribeStatesRequest.
     * @exports ISubscribeStatesRequest
     * @interface ISubscribeStatesRequest
     */

    /**
     * Constructs a new SubscribeStatesRequest.
     * @exports SubscribeStatesRequest
     * @classdesc Represents a SubscribeStatesRequest.
     * @implements ISubscribeStatesRequest
     * @constructor
     * @param {ISubscribeStatesRequest=} [properties] Properties to set
     */
    function SubscribeStatesRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new SubscribeStatesRequest instance using the specified properties.
     * @function create
     * @memberof SubscribeStatesRequest
     * @static
     * @param {ISubscribeStatesRequest=} [properties] Properties to set
     * @returns {SubscribeStatesRequest} SubscribeStatesRequest instance
     */
    SubscribeStatesRequest.create = function create(properties) {
        return new SubscribeStatesRequest(properties);
    };

    /**
     * Encodes the specified SubscribeStatesRequest message. Does not implicitly {@link SubscribeStatesRequest.verify|verify} messages.
     * @function encode
     * @memberof SubscribeStatesRequest
     * @static
     * @param {ISubscribeStatesRequest} message SubscribeStatesRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SubscribeStatesRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified SubscribeStatesRequest message, length delimited. Does not implicitly {@link SubscribeStatesRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SubscribeStatesRequest
     * @static
     * @param {ISubscribeStatesRequest} message SubscribeStatesRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SubscribeStatesRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SubscribeStatesRequest message from the specified reader or buffer.
     * @function decode
     * @memberof SubscribeStatesRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SubscribeStatesRequest} SubscribeStatesRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SubscribeStatesRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SubscribeStatesRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SubscribeStatesRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SubscribeStatesRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SubscribeStatesRequest} SubscribeStatesRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SubscribeStatesRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SubscribeStatesRequest message.
     * @function verify
     * @memberof SubscribeStatesRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SubscribeStatesRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a SubscribeStatesRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SubscribeStatesRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SubscribeStatesRequest} SubscribeStatesRequest
     */
    SubscribeStatesRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.SubscribeStatesRequest)
            return object;
        return new $root.SubscribeStatesRequest();
    };

    /**
     * Creates a plain object from a SubscribeStatesRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SubscribeStatesRequest
     * @static
     * @param {SubscribeStatesRequest} message SubscribeStatesRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SubscribeStatesRequest.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this SubscribeStatesRequest to JSON.
     * @function toJSON
     * @memberof SubscribeStatesRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SubscribeStatesRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SubscribeStatesRequest
     * @function getTypeUrl
     * @memberof SubscribeStatesRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SubscribeStatesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SubscribeStatesRequest";
    };

    return SubscribeStatesRequest;
})();

/**
 * EntityCategory enum.
 * @exports EntityCategory
 * @enum {number}
 * @property {number} ENTITY_CATEGORY_NONE=0 ENTITY_CATEGORY_NONE value
 * @property {number} ENTITY_CATEGORY_CONFIG=1 ENTITY_CATEGORY_CONFIG value
 * @property {number} ENTITY_CATEGORY_DIAGNOSTIC=2 ENTITY_CATEGORY_DIAGNOSTIC value
 */
$root.EntityCategory = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "ENTITY_CATEGORY_NONE"] = 0;
    values[valuesById[1] = "ENTITY_CATEGORY_CONFIG"] = 1;
    values[valuesById[2] = "ENTITY_CATEGORY_DIAGNOSTIC"] = 2;
    return values;
})();

$root.ListEntitiesBinarySensorResponse = (function() {

    /**
     * Properties of a ListEntitiesBinarySensorResponse.
     * @exports IListEntitiesBinarySensorResponse
     * @interface IListEntitiesBinarySensorResponse
     * @property {string|null} [object_id] ListEntitiesBinarySensorResponse object_id
     * @property {number|null} [key] ListEntitiesBinarySensorResponse key
     * @property {string|null} [name] ListEntitiesBinarySensorResponse name
     * @property {string|null} [device_class] ListEntitiesBinarySensorResponse device_class
     * @property {boolean|null} [is_status_binary_sensor] ListEntitiesBinarySensorResponse is_status_binary_sensor
     * @property {boolean|null} [disabled_by_default] ListEntitiesBinarySensorResponse disabled_by_default
     * @property {string|null} [icon] ListEntitiesBinarySensorResponse icon
     * @property {EntityCategory|null} [entity_category] ListEntitiesBinarySensorResponse entity_category
     * @property {number|null} [device_id] ListEntitiesBinarySensorResponse device_id
     */

    /**
     * Constructs a new ListEntitiesBinarySensorResponse.
     * @exports ListEntitiesBinarySensorResponse
     * @classdesc Represents a ListEntitiesBinarySensorResponse.
     * @implements IListEntitiesBinarySensorResponse
     * @constructor
     * @param {IListEntitiesBinarySensorResponse=} [properties] Properties to set
     */
    function ListEntitiesBinarySensorResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesBinarySensorResponse object_id.
     * @member {string} object_id
     * @memberof ListEntitiesBinarySensorResponse
     * @instance
     */
    ListEntitiesBinarySensorResponse.prototype.object_id = "";

    /**
     * ListEntitiesBinarySensorResponse key.
     * @member {number} key
     * @memberof ListEntitiesBinarySensorResponse
     * @instance
     */
    ListEntitiesBinarySensorResponse.prototype.key = 0;

    /**
     * ListEntitiesBinarySensorResponse name.
     * @member {string} name
     * @memberof ListEntitiesBinarySensorResponse
     * @instance
     */
    ListEntitiesBinarySensorResponse.prototype.name = "";

    /**
     * ListEntitiesBinarySensorResponse device_class.
     * @member {string} device_class
     * @memberof ListEntitiesBinarySensorResponse
     * @instance
     */
    ListEntitiesBinarySensorResponse.prototype.device_class = "";

    /**
     * ListEntitiesBinarySensorResponse is_status_binary_sensor.
     * @member {boolean} is_status_binary_sensor
     * @memberof ListEntitiesBinarySensorResponse
     * @instance
     */
    ListEntitiesBinarySensorResponse.prototype.is_status_binary_sensor = false;

    /**
     * ListEntitiesBinarySensorResponse disabled_by_default.
     * @member {boolean} disabled_by_default
     * @memberof ListEntitiesBinarySensorResponse
     * @instance
     */
    ListEntitiesBinarySensorResponse.prototype.disabled_by_default = false;

    /**
     * ListEntitiesBinarySensorResponse icon.
     * @member {string} icon
     * @memberof ListEntitiesBinarySensorResponse
     * @instance
     */
    ListEntitiesBinarySensorResponse.prototype.icon = "";

    /**
     * ListEntitiesBinarySensorResponse entity_category.
     * @member {EntityCategory} entity_category
     * @memberof ListEntitiesBinarySensorResponse
     * @instance
     */
    ListEntitiesBinarySensorResponse.prototype.entity_category = 0;

    /**
     * ListEntitiesBinarySensorResponse device_id.
     * @member {number} device_id
     * @memberof ListEntitiesBinarySensorResponse
     * @instance
     */
    ListEntitiesBinarySensorResponse.prototype.device_id = 0;

    /**
     * Creates a new ListEntitiesBinarySensorResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesBinarySensorResponse
     * @static
     * @param {IListEntitiesBinarySensorResponse=} [properties] Properties to set
     * @returns {ListEntitiesBinarySensorResponse} ListEntitiesBinarySensorResponse instance
     */
    ListEntitiesBinarySensorResponse.create = function create(properties) {
        return new ListEntitiesBinarySensorResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesBinarySensorResponse message. Does not implicitly {@link ListEntitiesBinarySensorResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesBinarySensorResponse
     * @static
     * @param {IListEntitiesBinarySensorResponse} message ListEntitiesBinarySensorResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesBinarySensorResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.object_id != null && Object.hasOwnProperty.call(message, "object_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.object_id);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.device_class != null && Object.hasOwnProperty.call(message, "device_class"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.device_class);
        if (message.is_status_binary_sensor != null && Object.hasOwnProperty.call(message, "is_status_binary_sensor"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.is_status_binary_sensor);
        if (message.disabled_by_default != null && Object.hasOwnProperty.call(message, "disabled_by_default"))
            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.disabled_by_default);
        if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.icon);
        if (message.entity_category != null && Object.hasOwnProperty.call(message, "entity_category"))
            writer.uint32(/* id 9, wireType 0 =*/72).int32(message.entity_category);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesBinarySensorResponse message, length delimited. Does not implicitly {@link ListEntitiesBinarySensorResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesBinarySensorResponse
     * @static
     * @param {IListEntitiesBinarySensorResponse} message ListEntitiesBinarySensorResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesBinarySensorResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesBinarySensorResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesBinarySensorResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesBinarySensorResponse} ListEntitiesBinarySensorResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesBinarySensorResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesBinarySensorResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.object_id = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 5: {
                    message.device_class = reader.string();
                    break;
                }
            case 6: {
                    message.is_status_binary_sensor = reader.bool();
                    break;
                }
            case 7: {
                    message.disabled_by_default = reader.bool();
                    break;
                }
            case 8: {
                    message.icon = reader.string();
                    break;
                }
            case 9: {
                    message.entity_category = reader.int32();
                    break;
                }
            case 10: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesBinarySensorResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesBinarySensorResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesBinarySensorResponse} ListEntitiesBinarySensorResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesBinarySensorResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesBinarySensorResponse message.
     * @function verify
     * @memberof ListEntitiesBinarySensorResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesBinarySensorResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            if (!$util.isString(message.object_id))
                return "object_id: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.device_class != null && message.hasOwnProperty("device_class"))
            if (!$util.isString(message.device_class))
                return "device_class: string expected";
        if (message.is_status_binary_sensor != null && message.hasOwnProperty("is_status_binary_sensor"))
            if (typeof message.is_status_binary_sensor !== "boolean")
                return "is_status_binary_sensor: boolean expected";
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            if (typeof message.disabled_by_default !== "boolean")
                return "disabled_by_default: boolean expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isString(message.icon))
                return "icon: string expected";
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            switch (message.entity_category) {
            default:
                return "entity_category: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ListEntitiesBinarySensorResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesBinarySensorResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesBinarySensorResponse} ListEntitiesBinarySensorResponse
     */
    ListEntitiesBinarySensorResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesBinarySensorResponse)
            return object;
        var message = new $root.ListEntitiesBinarySensorResponse();
        if (object.object_id != null)
            message.object_id = String(object.object_id);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.device_class != null)
            message.device_class = String(object.device_class);
        if (object.is_status_binary_sensor != null)
            message.is_status_binary_sensor = Boolean(object.is_status_binary_sensor);
        if (object.disabled_by_default != null)
            message.disabled_by_default = Boolean(object.disabled_by_default);
        if (object.icon != null)
            message.icon = String(object.icon);
        switch (object.entity_category) {
        default:
            if (typeof object.entity_category === "number") {
                message.entity_category = object.entity_category;
                break;
            }
            break;
        case "ENTITY_CATEGORY_NONE":
        case 0:
            message.entity_category = 0;
            break;
        case "ENTITY_CATEGORY_CONFIG":
        case 1:
            message.entity_category = 1;
            break;
        case "ENTITY_CATEGORY_DIAGNOSTIC":
        case 2:
            message.entity_category = 2;
            break;
        }
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesBinarySensorResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesBinarySensorResponse
     * @static
     * @param {ListEntitiesBinarySensorResponse} message ListEntitiesBinarySensorResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesBinarySensorResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.object_id = "";
            object.key = 0;
            object.name = "";
            object.device_class = "";
            object.is_status_binary_sensor = false;
            object.disabled_by_default = false;
            object.icon = "";
            object.entity_category = options.enums === String ? "ENTITY_CATEGORY_NONE" : 0;
            object.device_id = 0;
        }
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            object.object_id = message.object_id;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.device_class != null && message.hasOwnProperty("device_class"))
            object.device_class = message.device_class;
        if (message.is_status_binary_sensor != null && message.hasOwnProperty("is_status_binary_sensor"))
            object.is_status_binary_sensor = message.is_status_binary_sensor;
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            object.disabled_by_default = message.disabled_by_default;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            object.entity_category = options.enums === String ? $root.EntityCategory[message.entity_category] === undefined ? message.entity_category : $root.EntityCategory[message.entity_category] : message.entity_category;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ListEntitiesBinarySensorResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesBinarySensorResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesBinarySensorResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesBinarySensorResponse
     * @function getTypeUrl
     * @memberof ListEntitiesBinarySensorResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesBinarySensorResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesBinarySensorResponse";
    };

    return ListEntitiesBinarySensorResponse;
})();

$root.BinarySensorStateResponse = (function() {

    /**
     * Properties of a BinarySensorStateResponse.
     * @exports IBinarySensorStateResponse
     * @interface IBinarySensorStateResponse
     * @property {number|null} [key] BinarySensorStateResponse key
     * @property {boolean|null} [state] BinarySensorStateResponse state
     * @property {boolean|null} [missing_state] BinarySensorStateResponse missing_state
     * @property {number|null} [device_id] BinarySensorStateResponse device_id
     */

    /**
     * Constructs a new BinarySensorStateResponse.
     * @exports BinarySensorStateResponse
     * @classdesc Represents a BinarySensorStateResponse.
     * @implements IBinarySensorStateResponse
     * @constructor
     * @param {IBinarySensorStateResponse=} [properties] Properties to set
     */
    function BinarySensorStateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BinarySensorStateResponse key.
     * @member {number} key
     * @memberof BinarySensorStateResponse
     * @instance
     */
    BinarySensorStateResponse.prototype.key = 0;

    /**
     * BinarySensorStateResponse state.
     * @member {boolean} state
     * @memberof BinarySensorStateResponse
     * @instance
     */
    BinarySensorStateResponse.prototype.state = false;

    /**
     * BinarySensorStateResponse missing_state.
     * @member {boolean} missing_state
     * @memberof BinarySensorStateResponse
     * @instance
     */
    BinarySensorStateResponse.prototype.missing_state = false;

    /**
     * BinarySensorStateResponse device_id.
     * @member {number} device_id
     * @memberof BinarySensorStateResponse
     * @instance
     */
    BinarySensorStateResponse.prototype.device_id = 0;

    /**
     * Creates a new BinarySensorStateResponse instance using the specified properties.
     * @function create
     * @memberof BinarySensorStateResponse
     * @static
     * @param {IBinarySensorStateResponse=} [properties] Properties to set
     * @returns {BinarySensorStateResponse} BinarySensorStateResponse instance
     */
    BinarySensorStateResponse.create = function create(properties) {
        return new BinarySensorStateResponse(properties);
    };

    /**
     * Encodes the specified BinarySensorStateResponse message. Does not implicitly {@link BinarySensorStateResponse.verify|verify} messages.
     * @function encode
     * @memberof BinarySensorStateResponse
     * @static
     * @param {IBinarySensorStateResponse} message BinarySensorStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BinarySensorStateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.state);
        if (message.missing_state != null && Object.hasOwnProperty.call(message, "missing_state"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.missing_state);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified BinarySensorStateResponse message, length delimited. Does not implicitly {@link BinarySensorStateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BinarySensorStateResponse
     * @static
     * @param {IBinarySensorStateResponse} message BinarySensorStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BinarySensorStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BinarySensorStateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof BinarySensorStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BinarySensorStateResponse} BinarySensorStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BinarySensorStateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BinarySensorStateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.state = reader.bool();
                    break;
                }
            case 3: {
                    message.missing_state = reader.bool();
                    break;
                }
            case 4: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BinarySensorStateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BinarySensorStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BinarySensorStateResponse} BinarySensorStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BinarySensorStateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BinarySensorStateResponse message.
     * @function verify
     * @memberof BinarySensorStateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BinarySensorStateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            if (typeof message.state !== "boolean")
                return "state: boolean expected";
        if (message.missing_state != null && message.hasOwnProperty("missing_state"))
            if (typeof message.missing_state !== "boolean")
                return "missing_state: boolean expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a BinarySensorStateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BinarySensorStateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BinarySensorStateResponse} BinarySensorStateResponse
     */
    BinarySensorStateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.BinarySensorStateResponse)
            return object;
        var message = new $root.BinarySensorStateResponse();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.state != null)
            message.state = Boolean(object.state);
        if (object.missing_state != null)
            message.missing_state = Boolean(object.missing_state);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a BinarySensorStateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BinarySensorStateResponse
     * @static
     * @param {BinarySensorStateResponse} message BinarySensorStateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BinarySensorStateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.state = false;
            object.missing_state = false;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = message.state;
        if (message.missing_state != null && message.hasOwnProperty("missing_state"))
            object.missing_state = message.missing_state;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this BinarySensorStateResponse to JSON.
     * @function toJSON
     * @memberof BinarySensorStateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BinarySensorStateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BinarySensorStateResponse
     * @function getTypeUrl
     * @memberof BinarySensorStateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BinarySensorStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BinarySensorStateResponse";
    };

    return BinarySensorStateResponse;
})();

$root.ListEntitiesCoverResponse = (function() {

    /**
     * Properties of a ListEntitiesCoverResponse.
     * @exports IListEntitiesCoverResponse
     * @interface IListEntitiesCoverResponse
     * @property {string|null} [object_id] ListEntitiesCoverResponse object_id
     * @property {number|null} [key] ListEntitiesCoverResponse key
     * @property {string|null} [name] ListEntitiesCoverResponse name
     * @property {boolean|null} [assumed_state] ListEntitiesCoverResponse assumed_state
     * @property {boolean|null} [supports_position] ListEntitiesCoverResponse supports_position
     * @property {boolean|null} [supports_tilt] ListEntitiesCoverResponse supports_tilt
     * @property {string|null} [device_class] ListEntitiesCoverResponse device_class
     * @property {boolean|null} [disabled_by_default] ListEntitiesCoverResponse disabled_by_default
     * @property {string|null} [icon] ListEntitiesCoverResponse icon
     * @property {EntityCategory|null} [entity_category] ListEntitiesCoverResponse entity_category
     * @property {boolean|null} [supports_stop] ListEntitiesCoverResponse supports_stop
     * @property {number|null} [device_id] ListEntitiesCoverResponse device_id
     */

    /**
     * Constructs a new ListEntitiesCoverResponse.
     * @exports ListEntitiesCoverResponse
     * @classdesc Represents a ListEntitiesCoverResponse.
     * @implements IListEntitiesCoverResponse
     * @constructor
     * @param {IListEntitiesCoverResponse=} [properties] Properties to set
     */
    function ListEntitiesCoverResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesCoverResponse object_id.
     * @member {string} object_id
     * @memberof ListEntitiesCoverResponse
     * @instance
     */
    ListEntitiesCoverResponse.prototype.object_id = "";

    /**
     * ListEntitiesCoverResponse key.
     * @member {number} key
     * @memberof ListEntitiesCoverResponse
     * @instance
     */
    ListEntitiesCoverResponse.prototype.key = 0;

    /**
     * ListEntitiesCoverResponse name.
     * @member {string} name
     * @memberof ListEntitiesCoverResponse
     * @instance
     */
    ListEntitiesCoverResponse.prototype.name = "";

    /**
     * ListEntitiesCoverResponse assumed_state.
     * @member {boolean} assumed_state
     * @memberof ListEntitiesCoverResponse
     * @instance
     */
    ListEntitiesCoverResponse.prototype.assumed_state = false;

    /**
     * ListEntitiesCoverResponse supports_position.
     * @member {boolean} supports_position
     * @memberof ListEntitiesCoverResponse
     * @instance
     */
    ListEntitiesCoverResponse.prototype.supports_position = false;

    /**
     * ListEntitiesCoverResponse supports_tilt.
     * @member {boolean} supports_tilt
     * @memberof ListEntitiesCoverResponse
     * @instance
     */
    ListEntitiesCoverResponse.prototype.supports_tilt = false;

    /**
     * ListEntitiesCoverResponse device_class.
     * @member {string} device_class
     * @memberof ListEntitiesCoverResponse
     * @instance
     */
    ListEntitiesCoverResponse.prototype.device_class = "";

    /**
     * ListEntitiesCoverResponse disabled_by_default.
     * @member {boolean} disabled_by_default
     * @memberof ListEntitiesCoverResponse
     * @instance
     */
    ListEntitiesCoverResponse.prototype.disabled_by_default = false;

    /**
     * ListEntitiesCoverResponse icon.
     * @member {string} icon
     * @memberof ListEntitiesCoverResponse
     * @instance
     */
    ListEntitiesCoverResponse.prototype.icon = "";

    /**
     * ListEntitiesCoverResponse entity_category.
     * @member {EntityCategory} entity_category
     * @memberof ListEntitiesCoverResponse
     * @instance
     */
    ListEntitiesCoverResponse.prototype.entity_category = 0;

    /**
     * ListEntitiesCoverResponse supports_stop.
     * @member {boolean} supports_stop
     * @memberof ListEntitiesCoverResponse
     * @instance
     */
    ListEntitiesCoverResponse.prototype.supports_stop = false;

    /**
     * ListEntitiesCoverResponse device_id.
     * @member {number} device_id
     * @memberof ListEntitiesCoverResponse
     * @instance
     */
    ListEntitiesCoverResponse.prototype.device_id = 0;

    /**
     * Creates a new ListEntitiesCoverResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesCoverResponse
     * @static
     * @param {IListEntitiesCoverResponse=} [properties] Properties to set
     * @returns {ListEntitiesCoverResponse} ListEntitiesCoverResponse instance
     */
    ListEntitiesCoverResponse.create = function create(properties) {
        return new ListEntitiesCoverResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesCoverResponse message. Does not implicitly {@link ListEntitiesCoverResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesCoverResponse
     * @static
     * @param {IListEntitiesCoverResponse} message ListEntitiesCoverResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesCoverResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.object_id != null && Object.hasOwnProperty.call(message, "object_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.object_id);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.assumed_state != null && Object.hasOwnProperty.call(message, "assumed_state"))
            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.assumed_state);
        if (message.supports_position != null && Object.hasOwnProperty.call(message, "supports_position"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.supports_position);
        if (message.supports_tilt != null && Object.hasOwnProperty.call(message, "supports_tilt"))
            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.supports_tilt);
        if (message.device_class != null && Object.hasOwnProperty.call(message, "device_class"))
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.device_class);
        if (message.disabled_by_default != null && Object.hasOwnProperty.call(message, "disabled_by_default"))
            writer.uint32(/* id 9, wireType 0 =*/72).bool(message.disabled_by_default);
        if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
            writer.uint32(/* id 10, wireType 2 =*/82).string(message.icon);
        if (message.entity_category != null && Object.hasOwnProperty.call(message, "entity_category"))
            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.entity_category);
        if (message.supports_stop != null && Object.hasOwnProperty.call(message, "supports_stop"))
            writer.uint32(/* id 12, wireType 0 =*/96).bool(message.supports_stop);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesCoverResponse message, length delimited. Does not implicitly {@link ListEntitiesCoverResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesCoverResponse
     * @static
     * @param {IListEntitiesCoverResponse} message ListEntitiesCoverResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesCoverResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesCoverResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesCoverResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesCoverResponse} ListEntitiesCoverResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesCoverResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesCoverResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.object_id = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 5: {
                    message.assumed_state = reader.bool();
                    break;
                }
            case 6: {
                    message.supports_position = reader.bool();
                    break;
                }
            case 7: {
                    message.supports_tilt = reader.bool();
                    break;
                }
            case 8: {
                    message.device_class = reader.string();
                    break;
                }
            case 9: {
                    message.disabled_by_default = reader.bool();
                    break;
                }
            case 10: {
                    message.icon = reader.string();
                    break;
                }
            case 11: {
                    message.entity_category = reader.int32();
                    break;
                }
            case 12: {
                    message.supports_stop = reader.bool();
                    break;
                }
            case 13: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesCoverResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesCoverResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesCoverResponse} ListEntitiesCoverResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesCoverResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesCoverResponse message.
     * @function verify
     * @memberof ListEntitiesCoverResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesCoverResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            if (!$util.isString(message.object_id))
                return "object_id: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.assumed_state != null && message.hasOwnProperty("assumed_state"))
            if (typeof message.assumed_state !== "boolean")
                return "assumed_state: boolean expected";
        if (message.supports_position != null && message.hasOwnProperty("supports_position"))
            if (typeof message.supports_position !== "boolean")
                return "supports_position: boolean expected";
        if (message.supports_tilt != null && message.hasOwnProperty("supports_tilt"))
            if (typeof message.supports_tilt !== "boolean")
                return "supports_tilt: boolean expected";
        if (message.device_class != null && message.hasOwnProperty("device_class"))
            if (!$util.isString(message.device_class))
                return "device_class: string expected";
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            if (typeof message.disabled_by_default !== "boolean")
                return "disabled_by_default: boolean expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isString(message.icon))
                return "icon: string expected";
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            switch (message.entity_category) {
            default:
                return "entity_category: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.supports_stop != null && message.hasOwnProperty("supports_stop"))
            if (typeof message.supports_stop !== "boolean")
                return "supports_stop: boolean expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ListEntitiesCoverResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesCoverResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesCoverResponse} ListEntitiesCoverResponse
     */
    ListEntitiesCoverResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesCoverResponse)
            return object;
        var message = new $root.ListEntitiesCoverResponse();
        if (object.object_id != null)
            message.object_id = String(object.object_id);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.assumed_state != null)
            message.assumed_state = Boolean(object.assumed_state);
        if (object.supports_position != null)
            message.supports_position = Boolean(object.supports_position);
        if (object.supports_tilt != null)
            message.supports_tilt = Boolean(object.supports_tilt);
        if (object.device_class != null)
            message.device_class = String(object.device_class);
        if (object.disabled_by_default != null)
            message.disabled_by_default = Boolean(object.disabled_by_default);
        if (object.icon != null)
            message.icon = String(object.icon);
        switch (object.entity_category) {
        default:
            if (typeof object.entity_category === "number") {
                message.entity_category = object.entity_category;
                break;
            }
            break;
        case "ENTITY_CATEGORY_NONE":
        case 0:
            message.entity_category = 0;
            break;
        case "ENTITY_CATEGORY_CONFIG":
        case 1:
            message.entity_category = 1;
            break;
        case "ENTITY_CATEGORY_DIAGNOSTIC":
        case 2:
            message.entity_category = 2;
            break;
        }
        if (object.supports_stop != null)
            message.supports_stop = Boolean(object.supports_stop);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesCoverResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesCoverResponse
     * @static
     * @param {ListEntitiesCoverResponse} message ListEntitiesCoverResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesCoverResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.object_id = "";
            object.key = 0;
            object.name = "";
            object.assumed_state = false;
            object.supports_position = false;
            object.supports_tilt = false;
            object.device_class = "";
            object.disabled_by_default = false;
            object.icon = "";
            object.entity_category = options.enums === String ? "ENTITY_CATEGORY_NONE" : 0;
            object.supports_stop = false;
            object.device_id = 0;
        }
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            object.object_id = message.object_id;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.assumed_state != null && message.hasOwnProperty("assumed_state"))
            object.assumed_state = message.assumed_state;
        if (message.supports_position != null && message.hasOwnProperty("supports_position"))
            object.supports_position = message.supports_position;
        if (message.supports_tilt != null && message.hasOwnProperty("supports_tilt"))
            object.supports_tilt = message.supports_tilt;
        if (message.device_class != null && message.hasOwnProperty("device_class"))
            object.device_class = message.device_class;
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            object.disabled_by_default = message.disabled_by_default;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            object.entity_category = options.enums === String ? $root.EntityCategory[message.entity_category] === undefined ? message.entity_category : $root.EntityCategory[message.entity_category] : message.entity_category;
        if (message.supports_stop != null && message.hasOwnProperty("supports_stop"))
            object.supports_stop = message.supports_stop;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ListEntitiesCoverResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesCoverResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesCoverResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesCoverResponse
     * @function getTypeUrl
     * @memberof ListEntitiesCoverResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesCoverResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesCoverResponse";
    };

    return ListEntitiesCoverResponse;
})();

/**
 * LegacyCoverState enum.
 * @exports LegacyCoverState
 * @enum {number}
 * @property {number} LEGACY_COVER_STATE_OPEN=0 LEGACY_COVER_STATE_OPEN value
 * @property {number} LEGACY_COVER_STATE_CLOSED=1 LEGACY_COVER_STATE_CLOSED value
 */
$root.LegacyCoverState = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "LEGACY_COVER_STATE_OPEN"] = 0;
    values[valuesById[1] = "LEGACY_COVER_STATE_CLOSED"] = 1;
    return values;
})();

/**
 * CoverOperation enum.
 * @exports CoverOperation
 * @enum {number}
 * @property {number} COVER_OPERATION_IDLE=0 COVER_OPERATION_IDLE value
 * @property {number} COVER_OPERATION_IS_OPENING=1 COVER_OPERATION_IS_OPENING value
 * @property {number} COVER_OPERATION_IS_CLOSING=2 COVER_OPERATION_IS_CLOSING value
 */
$root.CoverOperation = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "COVER_OPERATION_IDLE"] = 0;
    values[valuesById[1] = "COVER_OPERATION_IS_OPENING"] = 1;
    values[valuesById[2] = "COVER_OPERATION_IS_CLOSING"] = 2;
    return values;
})();

$root.CoverStateResponse = (function() {

    /**
     * Properties of a CoverStateResponse.
     * @exports ICoverStateResponse
     * @interface ICoverStateResponse
     * @property {number|null} [key] CoverStateResponse key
     * @property {LegacyCoverState|null} [legacy_state] CoverStateResponse legacy_state
     * @property {number|null} [position] CoverStateResponse position
     * @property {number|null} [tilt] CoverStateResponse tilt
     * @property {CoverOperation|null} [current_operation] CoverStateResponse current_operation
     * @property {number|null} [device_id] CoverStateResponse device_id
     */

    /**
     * Constructs a new CoverStateResponse.
     * @exports CoverStateResponse
     * @classdesc Represents a CoverStateResponse.
     * @implements ICoverStateResponse
     * @constructor
     * @param {ICoverStateResponse=} [properties] Properties to set
     */
    function CoverStateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CoverStateResponse key.
     * @member {number} key
     * @memberof CoverStateResponse
     * @instance
     */
    CoverStateResponse.prototype.key = 0;

    /**
     * CoverStateResponse legacy_state.
     * @member {LegacyCoverState} legacy_state
     * @memberof CoverStateResponse
     * @instance
     */
    CoverStateResponse.prototype.legacy_state = 0;

    /**
     * CoverStateResponse position.
     * @member {number} position
     * @memberof CoverStateResponse
     * @instance
     */
    CoverStateResponse.prototype.position = 0;

    /**
     * CoverStateResponse tilt.
     * @member {number} tilt
     * @memberof CoverStateResponse
     * @instance
     */
    CoverStateResponse.prototype.tilt = 0;

    /**
     * CoverStateResponse current_operation.
     * @member {CoverOperation} current_operation
     * @memberof CoverStateResponse
     * @instance
     */
    CoverStateResponse.prototype.current_operation = 0;

    /**
     * CoverStateResponse device_id.
     * @member {number} device_id
     * @memberof CoverStateResponse
     * @instance
     */
    CoverStateResponse.prototype.device_id = 0;

    /**
     * Creates a new CoverStateResponse instance using the specified properties.
     * @function create
     * @memberof CoverStateResponse
     * @static
     * @param {ICoverStateResponse=} [properties] Properties to set
     * @returns {CoverStateResponse} CoverStateResponse instance
     */
    CoverStateResponse.create = function create(properties) {
        return new CoverStateResponse(properties);
    };

    /**
     * Encodes the specified CoverStateResponse message. Does not implicitly {@link CoverStateResponse.verify|verify} messages.
     * @function encode
     * @memberof CoverStateResponse
     * @static
     * @param {ICoverStateResponse} message CoverStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CoverStateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.legacy_state != null && Object.hasOwnProperty.call(message, "legacy_state"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.legacy_state);
        if (message.position != null && Object.hasOwnProperty.call(message, "position"))
            writer.uint32(/* id 3, wireType 5 =*/29).float(message.position);
        if (message.tilt != null && Object.hasOwnProperty.call(message, "tilt"))
            writer.uint32(/* id 4, wireType 5 =*/37).float(message.tilt);
        if (message.current_operation != null && Object.hasOwnProperty.call(message, "current_operation"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.current_operation);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified CoverStateResponse message, length delimited. Does not implicitly {@link CoverStateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CoverStateResponse
     * @static
     * @param {ICoverStateResponse} message CoverStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CoverStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CoverStateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof CoverStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CoverStateResponse} CoverStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CoverStateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CoverStateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.legacy_state = reader.int32();
                    break;
                }
            case 3: {
                    message.position = reader.float();
                    break;
                }
            case 4: {
                    message.tilt = reader.float();
                    break;
                }
            case 5: {
                    message.current_operation = reader.int32();
                    break;
                }
            case 6: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CoverStateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CoverStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CoverStateResponse} CoverStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CoverStateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CoverStateResponse message.
     * @function verify
     * @memberof CoverStateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CoverStateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.legacy_state != null && message.hasOwnProperty("legacy_state"))
            switch (message.legacy_state) {
            default:
                return "legacy_state: enum value expected";
            case 0:
            case 1:
                break;
            }
        if (message.position != null && message.hasOwnProperty("position"))
            if (typeof message.position !== "number")
                return "position: number expected";
        if (message.tilt != null && message.hasOwnProperty("tilt"))
            if (typeof message.tilt !== "number")
                return "tilt: number expected";
        if (message.current_operation != null && message.hasOwnProperty("current_operation"))
            switch (message.current_operation) {
            default:
                return "current_operation: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a CoverStateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CoverStateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CoverStateResponse} CoverStateResponse
     */
    CoverStateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.CoverStateResponse)
            return object;
        var message = new $root.CoverStateResponse();
        if (object.key != null)
            message.key = object.key >>> 0;
        switch (object.legacy_state) {
        default:
            if (typeof object.legacy_state === "number") {
                message.legacy_state = object.legacy_state;
                break;
            }
            break;
        case "LEGACY_COVER_STATE_OPEN":
        case 0:
            message.legacy_state = 0;
            break;
        case "LEGACY_COVER_STATE_CLOSED":
        case 1:
            message.legacy_state = 1;
            break;
        }
        if (object.position != null)
            message.position = Number(object.position);
        if (object.tilt != null)
            message.tilt = Number(object.tilt);
        switch (object.current_operation) {
        default:
            if (typeof object.current_operation === "number") {
                message.current_operation = object.current_operation;
                break;
            }
            break;
        case "COVER_OPERATION_IDLE":
        case 0:
            message.current_operation = 0;
            break;
        case "COVER_OPERATION_IS_OPENING":
        case 1:
            message.current_operation = 1;
            break;
        case "COVER_OPERATION_IS_CLOSING":
        case 2:
            message.current_operation = 2;
            break;
        }
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CoverStateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CoverStateResponse
     * @static
     * @param {CoverStateResponse} message CoverStateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CoverStateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.legacy_state = options.enums === String ? "LEGACY_COVER_STATE_OPEN" : 0;
            object.position = 0;
            object.tilt = 0;
            object.current_operation = options.enums === String ? "COVER_OPERATION_IDLE" : 0;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.legacy_state != null && message.hasOwnProperty("legacy_state"))
            object.legacy_state = options.enums === String ? $root.LegacyCoverState[message.legacy_state] === undefined ? message.legacy_state : $root.LegacyCoverState[message.legacy_state] : message.legacy_state;
        if (message.position != null && message.hasOwnProperty("position"))
            object.position = options.json && !isFinite(message.position) ? String(message.position) : message.position;
        if (message.tilt != null && message.hasOwnProperty("tilt"))
            object.tilt = options.json && !isFinite(message.tilt) ? String(message.tilt) : message.tilt;
        if (message.current_operation != null && message.hasOwnProperty("current_operation"))
            object.current_operation = options.enums === String ? $root.CoverOperation[message.current_operation] === undefined ? message.current_operation : $root.CoverOperation[message.current_operation] : message.current_operation;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this CoverStateResponse to JSON.
     * @function toJSON
     * @memberof CoverStateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CoverStateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for CoverStateResponse
     * @function getTypeUrl
     * @memberof CoverStateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    CoverStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/CoverStateResponse";
    };

    return CoverStateResponse;
})();

/**
 * LegacyCoverCommand enum.
 * @exports LegacyCoverCommand
 * @enum {number}
 * @property {number} LEGACY_COVER_COMMAND_OPEN=0 LEGACY_COVER_COMMAND_OPEN value
 * @property {number} LEGACY_COVER_COMMAND_CLOSE=1 LEGACY_COVER_COMMAND_CLOSE value
 * @property {number} LEGACY_COVER_COMMAND_STOP=2 LEGACY_COVER_COMMAND_STOP value
 */
$root.LegacyCoverCommand = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "LEGACY_COVER_COMMAND_OPEN"] = 0;
    values[valuesById[1] = "LEGACY_COVER_COMMAND_CLOSE"] = 1;
    values[valuesById[2] = "LEGACY_COVER_COMMAND_STOP"] = 2;
    return values;
})();

$root.CoverCommandRequest = (function() {

    /**
     * Properties of a CoverCommandRequest.
     * @exports ICoverCommandRequest
     * @interface ICoverCommandRequest
     * @property {number|null} [key] CoverCommandRequest key
     * @property {boolean|null} [has_legacy_command] CoverCommandRequest has_legacy_command
     * @property {LegacyCoverCommand|null} [legacy_command] CoverCommandRequest legacy_command
     * @property {boolean|null} [has_position] CoverCommandRequest has_position
     * @property {number|null} [position] CoverCommandRequest position
     * @property {boolean|null} [has_tilt] CoverCommandRequest has_tilt
     * @property {number|null} [tilt] CoverCommandRequest tilt
     * @property {boolean|null} [stop] CoverCommandRequest stop
     * @property {number|null} [device_id] CoverCommandRequest device_id
     */

    /**
     * Constructs a new CoverCommandRequest.
     * @exports CoverCommandRequest
     * @classdesc Represents a CoverCommandRequest.
     * @implements ICoverCommandRequest
     * @constructor
     * @param {ICoverCommandRequest=} [properties] Properties to set
     */
    function CoverCommandRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CoverCommandRequest key.
     * @member {number} key
     * @memberof CoverCommandRequest
     * @instance
     */
    CoverCommandRequest.prototype.key = 0;

    /**
     * CoverCommandRequest has_legacy_command.
     * @member {boolean} has_legacy_command
     * @memberof CoverCommandRequest
     * @instance
     */
    CoverCommandRequest.prototype.has_legacy_command = false;

    /**
     * CoverCommandRequest legacy_command.
     * @member {LegacyCoverCommand} legacy_command
     * @memberof CoverCommandRequest
     * @instance
     */
    CoverCommandRequest.prototype.legacy_command = 0;

    /**
     * CoverCommandRequest has_position.
     * @member {boolean} has_position
     * @memberof CoverCommandRequest
     * @instance
     */
    CoverCommandRequest.prototype.has_position = false;

    /**
     * CoverCommandRequest position.
     * @member {number} position
     * @memberof CoverCommandRequest
     * @instance
     */
    CoverCommandRequest.prototype.position = 0;

    /**
     * CoverCommandRequest has_tilt.
     * @member {boolean} has_tilt
     * @memberof CoverCommandRequest
     * @instance
     */
    CoverCommandRequest.prototype.has_tilt = false;

    /**
     * CoverCommandRequest tilt.
     * @member {number} tilt
     * @memberof CoverCommandRequest
     * @instance
     */
    CoverCommandRequest.prototype.tilt = 0;

    /**
     * CoverCommandRequest stop.
     * @member {boolean} stop
     * @memberof CoverCommandRequest
     * @instance
     */
    CoverCommandRequest.prototype.stop = false;

    /**
     * CoverCommandRequest device_id.
     * @member {number} device_id
     * @memberof CoverCommandRequest
     * @instance
     */
    CoverCommandRequest.prototype.device_id = 0;

    /**
     * Creates a new CoverCommandRequest instance using the specified properties.
     * @function create
     * @memberof CoverCommandRequest
     * @static
     * @param {ICoverCommandRequest=} [properties] Properties to set
     * @returns {CoverCommandRequest} CoverCommandRequest instance
     */
    CoverCommandRequest.create = function create(properties) {
        return new CoverCommandRequest(properties);
    };

    /**
     * Encodes the specified CoverCommandRequest message. Does not implicitly {@link CoverCommandRequest.verify|verify} messages.
     * @function encode
     * @memberof CoverCommandRequest
     * @static
     * @param {ICoverCommandRequest} message CoverCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CoverCommandRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.has_legacy_command != null && Object.hasOwnProperty.call(message, "has_legacy_command"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.has_legacy_command);
        if (message.legacy_command != null && Object.hasOwnProperty.call(message, "legacy_command"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.legacy_command);
        if (message.has_position != null && Object.hasOwnProperty.call(message, "has_position"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.has_position);
        if (message.position != null && Object.hasOwnProperty.call(message, "position"))
            writer.uint32(/* id 5, wireType 5 =*/45).float(message.position);
        if (message.has_tilt != null && Object.hasOwnProperty.call(message, "has_tilt"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.has_tilt);
        if (message.tilt != null && Object.hasOwnProperty.call(message, "tilt"))
            writer.uint32(/* id 7, wireType 5 =*/61).float(message.tilt);
        if (message.stop != null && Object.hasOwnProperty.call(message, "stop"))
            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.stop);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified CoverCommandRequest message, length delimited. Does not implicitly {@link CoverCommandRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CoverCommandRequest
     * @static
     * @param {ICoverCommandRequest} message CoverCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CoverCommandRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CoverCommandRequest message from the specified reader or buffer.
     * @function decode
     * @memberof CoverCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CoverCommandRequest} CoverCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CoverCommandRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CoverCommandRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.has_legacy_command = reader.bool();
                    break;
                }
            case 3: {
                    message.legacy_command = reader.int32();
                    break;
                }
            case 4: {
                    message.has_position = reader.bool();
                    break;
                }
            case 5: {
                    message.position = reader.float();
                    break;
                }
            case 6: {
                    message.has_tilt = reader.bool();
                    break;
                }
            case 7: {
                    message.tilt = reader.float();
                    break;
                }
            case 8: {
                    message.stop = reader.bool();
                    break;
                }
            case 9: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CoverCommandRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CoverCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CoverCommandRequest} CoverCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CoverCommandRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CoverCommandRequest message.
     * @function verify
     * @memberof CoverCommandRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CoverCommandRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.has_legacy_command != null && message.hasOwnProperty("has_legacy_command"))
            if (typeof message.has_legacy_command !== "boolean")
                return "has_legacy_command: boolean expected";
        if (message.legacy_command != null && message.hasOwnProperty("legacy_command"))
            switch (message.legacy_command) {
            default:
                return "legacy_command: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.has_position != null && message.hasOwnProperty("has_position"))
            if (typeof message.has_position !== "boolean")
                return "has_position: boolean expected";
        if (message.position != null && message.hasOwnProperty("position"))
            if (typeof message.position !== "number")
                return "position: number expected";
        if (message.has_tilt != null && message.hasOwnProperty("has_tilt"))
            if (typeof message.has_tilt !== "boolean")
                return "has_tilt: boolean expected";
        if (message.tilt != null && message.hasOwnProperty("tilt"))
            if (typeof message.tilt !== "number")
                return "tilt: number expected";
        if (message.stop != null && message.hasOwnProperty("stop"))
            if (typeof message.stop !== "boolean")
                return "stop: boolean expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a CoverCommandRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CoverCommandRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CoverCommandRequest} CoverCommandRequest
     */
    CoverCommandRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.CoverCommandRequest)
            return object;
        var message = new $root.CoverCommandRequest();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.has_legacy_command != null)
            message.has_legacy_command = Boolean(object.has_legacy_command);
        switch (object.legacy_command) {
        default:
            if (typeof object.legacy_command === "number") {
                message.legacy_command = object.legacy_command;
                break;
            }
            break;
        case "LEGACY_COVER_COMMAND_OPEN":
        case 0:
            message.legacy_command = 0;
            break;
        case "LEGACY_COVER_COMMAND_CLOSE":
        case 1:
            message.legacy_command = 1;
            break;
        case "LEGACY_COVER_COMMAND_STOP":
        case 2:
            message.legacy_command = 2;
            break;
        }
        if (object.has_position != null)
            message.has_position = Boolean(object.has_position);
        if (object.position != null)
            message.position = Number(object.position);
        if (object.has_tilt != null)
            message.has_tilt = Boolean(object.has_tilt);
        if (object.tilt != null)
            message.tilt = Number(object.tilt);
        if (object.stop != null)
            message.stop = Boolean(object.stop);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CoverCommandRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CoverCommandRequest
     * @static
     * @param {CoverCommandRequest} message CoverCommandRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CoverCommandRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.has_legacy_command = false;
            object.legacy_command = options.enums === String ? "LEGACY_COVER_COMMAND_OPEN" : 0;
            object.has_position = false;
            object.position = 0;
            object.has_tilt = false;
            object.tilt = 0;
            object.stop = false;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.has_legacy_command != null && message.hasOwnProperty("has_legacy_command"))
            object.has_legacy_command = message.has_legacy_command;
        if (message.legacy_command != null && message.hasOwnProperty("legacy_command"))
            object.legacy_command = options.enums === String ? $root.LegacyCoverCommand[message.legacy_command] === undefined ? message.legacy_command : $root.LegacyCoverCommand[message.legacy_command] : message.legacy_command;
        if (message.has_position != null && message.hasOwnProperty("has_position"))
            object.has_position = message.has_position;
        if (message.position != null && message.hasOwnProperty("position"))
            object.position = options.json && !isFinite(message.position) ? String(message.position) : message.position;
        if (message.has_tilt != null && message.hasOwnProperty("has_tilt"))
            object.has_tilt = message.has_tilt;
        if (message.tilt != null && message.hasOwnProperty("tilt"))
            object.tilt = options.json && !isFinite(message.tilt) ? String(message.tilt) : message.tilt;
        if (message.stop != null && message.hasOwnProperty("stop"))
            object.stop = message.stop;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this CoverCommandRequest to JSON.
     * @function toJSON
     * @memberof CoverCommandRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CoverCommandRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for CoverCommandRequest
     * @function getTypeUrl
     * @memberof CoverCommandRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    CoverCommandRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/CoverCommandRequest";
    };

    return CoverCommandRequest;
})();

$root.ListEntitiesFanResponse = (function() {

    /**
     * Properties of a ListEntitiesFanResponse.
     * @exports IListEntitiesFanResponse
     * @interface IListEntitiesFanResponse
     * @property {string|null} [object_id] ListEntitiesFanResponse object_id
     * @property {number|null} [key] ListEntitiesFanResponse key
     * @property {string|null} [name] ListEntitiesFanResponse name
     * @property {boolean|null} [supports_oscillation] ListEntitiesFanResponse supports_oscillation
     * @property {boolean|null} [supports_speed] ListEntitiesFanResponse supports_speed
     * @property {boolean|null} [supports_direction] ListEntitiesFanResponse supports_direction
     * @property {number|null} [supported_speed_count] ListEntitiesFanResponse supported_speed_count
     * @property {boolean|null} [disabled_by_default] ListEntitiesFanResponse disabled_by_default
     * @property {string|null} [icon] ListEntitiesFanResponse icon
     * @property {EntityCategory|null} [entity_category] ListEntitiesFanResponse entity_category
     * @property {Array.<string>|null} [supported_preset_modes] ListEntitiesFanResponse supported_preset_modes
     * @property {number|null} [device_id] ListEntitiesFanResponse device_id
     */

    /**
     * Constructs a new ListEntitiesFanResponse.
     * @exports ListEntitiesFanResponse
     * @classdesc Represents a ListEntitiesFanResponse.
     * @implements IListEntitiesFanResponse
     * @constructor
     * @param {IListEntitiesFanResponse=} [properties] Properties to set
     */
    function ListEntitiesFanResponse(properties) {
        this.supported_preset_modes = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesFanResponse object_id.
     * @member {string} object_id
     * @memberof ListEntitiesFanResponse
     * @instance
     */
    ListEntitiesFanResponse.prototype.object_id = "";

    /**
     * ListEntitiesFanResponse key.
     * @member {number} key
     * @memberof ListEntitiesFanResponse
     * @instance
     */
    ListEntitiesFanResponse.prototype.key = 0;

    /**
     * ListEntitiesFanResponse name.
     * @member {string} name
     * @memberof ListEntitiesFanResponse
     * @instance
     */
    ListEntitiesFanResponse.prototype.name = "";

    /**
     * ListEntitiesFanResponse supports_oscillation.
     * @member {boolean} supports_oscillation
     * @memberof ListEntitiesFanResponse
     * @instance
     */
    ListEntitiesFanResponse.prototype.supports_oscillation = false;

    /**
     * ListEntitiesFanResponse supports_speed.
     * @member {boolean} supports_speed
     * @memberof ListEntitiesFanResponse
     * @instance
     */
    ListEntitiesFanResponse.prototype.supports_speed = false;

    /**
     * ListEntitiesFanResponse supports_direction.
     * @member {boolean} supports_direction
     * @memberof ListEntitiesFanResponse
     * @instance
     */
    ListEntitiesFanResponse.prototype.supports_direction = false;

    /**
     * ListEntitiesFanResponse supported_speed_count.
     * @member {number} supported_speed_count
     * @memberof ListEntitiesFanResponse
     * @instance
     */
    ListEntitiesFanResponse.prototype.supported_speed_count = 0;

    /**
     * ListEntitiesFanResponse disabled_by_default.
     * @member {boolean} disabled_by_default
     * @memberof ListEntitiesFanResponse
     * @instance
     */
    ListEntitiesFanResponse.prototype.disabled_by_default = false;

    /**
     * ListEntitiesFanResponse icon.
     * @member {string} icon
     * @memberof ListEntitiesFanResponse
     * @instance
     */
    ListEntitiesFanResponse.prototype.icon = "";

    /**
     * ListEntitiesFanResponse entity_category.
     * @member {EntityCategory} entity_category
     * @memberof ListEntitiesFanResponse
     * @instance
     */
    ListEntitiesFanResponse.prototype.entity_category = 0;

    /**
     * ListEntitiesFanResponse supported_preset_modes.
     * @member {Array.<string>} supported_preset_modes
     * @memberof ListEntitiesFanResponse
     * @instance
     */
    ListEntitiesFanResponse.prototype.supported_preset_modes = $util.emptyArray;

    /**
     * ListEntitiesFanResponse device_id.
     * @member {number} device_id
     * @memberof ListEntitiesFanResponse
     * @instance
     */
    ListEntitiesFanResponse.prototype.device_id = 0;

    /**
     * Creates a new ListEntitiesFanResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesFanResponse
     * @static
     * @param {IListEntitiesFanResponse=} [properties] Properties to set
     * @returns {ListEntitiesFanResponse} ListEntitiesFanResponse instance
     */
    ListEntitiesFanResponse.create = function create(properties) {
        return new ListEntitiesFanResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesFanResponse message. Does not implicitly {@link ListEntitiesFanResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesFanResponse
     * @static
     * @param {IListEntitiesFanResponse} message ListEntitiesFanResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesFanResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.object_id != null && Object.hasOwnProperty.call(message, "object_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.object_id);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.supports_oscillation != null && Object.hasOwnProperty.call(message, "supports_oscillation"))
            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.supports_oscillation);
        if (message.supports_speed != null && Object.hasOwnProperty.call(message, "supports_speed"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.supports_speed);
        if (message.supports_direction != null && Object.hasOwnProperty.call(message, "supports_direction"))
            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.supports_direction);
        if (message.supported_speed_count != null && Object.hasOwnProperty.call(message, "supported_speed_count"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.supported_speed_count);
        if (message.disabled_by_default != null && Object.hasOwnProperty.call(message, "disabled_by_default"))
            writer.uint32(/* id 9, wireType 0 =*/72).bool(message.disabled_by_default);
        if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
            writer.uint32(/* id 10, wireType 2 =*/82).string(message.icon);
        if (message.entity_category != null && Object.hasOwnProperty.call(message, "entity_category"))
            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.entity_category);
        if (message.supported_preset_modes != null && message.supported_preset_modes.length)
            for (var i = 0; i < message.supported_preset_modes.length; ++i)
                writer.uint32(/* id 12, wireType 2 =*/98).string(message.supported_preset_modes[i]);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 13, wireType 0 =*/104).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesFanResponse message, length delimited. Does not implicitly {@link ListEntitiesFanResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesFanResponse
     * @static
     * @param {IListEntitiesFanResponse} message ListEntitiesFanResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesFanResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesFanResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesFanResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesFanResponse} ListEntitiesFanResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesFanResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesFanResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.object_id = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 5: {
                    message.supports_oscillation = reader.bool();
                    break;
                }
            case 6: {
                    message.supports_speed = reader.bool();
                    break;
                }
            case 7: {
                    message.supports_direction = reader.bool();
                    break;
                }
            case 8: {
                    message.supported_speed_count = reader.int32();
                    break;
                }
            case 9: {
                    message.disabled_by_default = reader.bool();
                    break;
                }
            case 10: {
                    message.icon = reader.string();
                    break;
                }
            case 11: {
                    message.entity_category = reader.int32();
                    break;
                }
            case 12: {
                    if (!(message.supported_preset_modes && message.supported_preset_modes.length))
                        message.supported_preset_modes = [];
                    message.supported_preset_modes.push(reader.string());
                    break;
                }
            case 13: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesFanResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesFanResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesFanResponse} ListEntitiesFanResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesFanResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesFanResponse message.
     * @function verify
     * @memberof ListEntitiesFanResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesFanResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            if (!$util.isString(message.object_id))
                return "object_id: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.supports_oscillation != null && message.hasOwnProperty("supports_oscillation"))
            if (typeof message.supports_oscillation !== "boolean")
                return "supports_oscillation: boolean expected";
        if (message.supports_speed != null && message.hasOwnProperty("supports_speed"))
            if (typeof message.supports_speed !== "boolean")
                return "supports_speed: boolean expected";
        if (message.supports_direction != null && message.hasOwnProperty("supports_direction"))
            if (typeof message.supports_direction !== "boolean")
                return "supports_direction: boolean expected";
        if (message.supported_speed_count != null && message.hasOwnProperty("supported_speed_count"))
            if (!$util.isInteger(message.supported_speed_count))
                return "supported_speed_count: integer expected";
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            if (typeof message.disabled_by_default !== "boolean")
                return "disabled_by_default: boolean expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isString(message.icon))
                return "icon: string expected";
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            switch (message.entity_category) {
            default:
                return "entity_category: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.supported_preset_modes != null && message.hasOwnProperty("supported_preset_modes")) {
            if (!Array.isArray(message.supported_preset_modes))
                return "supported_preset_modes: array expected";
            for (var i = 0; i < message.supported_preset_modes.length; ++i)
                if (!$util.isString(message.supported_preset_modes[i]))
                    return "supported_preset_modes: string[] expected";
        }
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ListEntitiesFanResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesFanResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesFanResponse} ListEntitiesFanResponse
     */
    ListEntitiesFanResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesFanResponse)
            return object;
        var message = new $root.ListEntitiesFanResponse();
        if (object.object_id != null)
            message.object_id = String(object.object_id);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.supports_oscillation != null)
            message.supports_oscillation = Boolean(object.supports_oscillation);
        if (object.supports_speed != null)
            message.supports_speed = Boolean(object.supports_speed);
        if (object.supports_direction != null)
            message.supports_direction = Boolean(object.supports_direction);
        if (object.supported_speed_count != null)
            message.supported_speed_count = object.supported_speed_count | 0;
        if (object.disabled_by_default != null)
            message.disabled_by_default = Boolean(object.disabled_by_default);
        if (object.icon != null)
            message.icon = String(object.icon);
        switch (object.entity_category) {
        default:
            if (typeof object.entity_category === "number") {
                message.entity_category = object.entity_category;
                break;
            }
            break;
        case "ENTITY_CATEGORY_NONE":
        case 0:
            message.entity_category = 0;
            break;
        case "ENTITY_CATEGORY_CONFIG":
        case 1:
            message.entity_category = 1;
            break;
        case "ENTITY_CATEGORY_DIAGNOSTIC":
        case 2:
            message.entity_category = 2;
            break;
        }
        if (object.supported_preset_modes) {
            if (!Array.isArray(object.supported_preset_modes))
                throw TypeError(".ListEntitiesFanResponse.supported_preset_modes: array expected");
            message.supported_preset_modes = [];
            for (var i = 0; i < object.supported_preset_modes.length; ++i)
                message.supported_preset_modes[i] = String(object.supported_preset_modes[i]);
        }
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesFanResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesFanResponse
     * @static
     * @param {ListEntitiesFanResponse} message ListEntitiesFanResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesFanResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.supported_preset_modes = [];
        if (options.defaults) {
            object.object_id = "";
            object.key = 0;
            object.name = "";
            object.supports_oscillation = false;
            object.supports_speed = false;
            object.supports_direction = false;
            object.supported_speed_count = 0;
            object.disabled_by_default = false;
            object.icon = "";
            object.entity_category = options.enums === String ? "ENTITY_CATEGORY_NONE" : 0;
            object.device_id = 0;
        }
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            object.object_id = message.object_id;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.supports_oscillation != null && message.hasOwnProperty("supports_oscillation"))
            object.supports_oscillation = message.supports_oscillation;
        if (message.supports_speed != null && message.hasOwnProperty("supports_speed"))
            object.supports_speed = message.supports_speed;
        if (message.supports_direction != null && message.hasOwnProperty("supports_direction"))
            object.supports_direction = message.supports_direction;
        if (message.supported_speed_count != null && message.hasOwnProperty("supported_speed_count"))
            object.supported_speed_count = message.supported_speed_count;
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            object.disabled_by_default = message.disabled_by_default;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            object.entity_category = options.enums === String ? $root.EntityCategory[message.entity_category] === undefined ? message.entity_category : $root.EntityCategory[message.entity_category] : message.entity_category;
        if (message.supported_preset_modes && message.supported_preset_modes.length) {
            object.supported_preset_modes = [];
            for (var j = 0; j < message.supported_preset_modes.length; ++j)
                object.supported_preset_modes[j] = message.supported_preset_modes[j];
        }
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ListEntitiesFanResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesFanResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesFanResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesFanResponse
     * @function getTypeUrl
     * @memberof ListEntitiesFanResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesFanResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesFanResponse";
    };

    return ListEntitiesFanResponse;
})();

/**
 * FanSpeed enum.
 * @exports FanSpeed
 * @enum {number}
 * @property {number} FAN_SPEED_LOW=0 FAN_SPEED_LOW value
 * @property {number} FAN_SPEED_MEDIUM=1 FAN_SPEED_MEDIUM value
 * @property {number} FAN_SPEED_HIGH=2 FAN_SPEED_HIGH value
 */
$root.FanSpeed = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "FAN_SPEED_LOW"] = 0;
    values[valuesById[1] = "FAN_SPEED_MEDIUM"] = 1;
    values[valuesById[2] = "FAN_SPEED_HIGH"] = 2;
    return values;
})();

/**
 * FanDirection enum.
 * @exports FanDirection
 * @enum {number}
 * @property {number} FAN_DIRECTION_FORWARD=0 FAN_DIRECTION_FORWARD value
 * @property {number} FAN_DIRECTION_REVERSE=1 FAN_DIRECTION_REVERSE value
 */
$root.FanDirection = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "FAN_DIRECTION_FORWARD"] = 0;
    values[valuesById[1] = "FAN_DIRECTION_REVERSE"] = 1;
    return values;
})();

$root.FanStateResponse = (function() {

    /**
     * Properties of a FanStateResponse.
     * @exports IFanStateResponse
     * @interface IFanStateResponse
     * @property {number|null} [key] FanStateResponse key
     * @property {boolean|null} [state] FanStateResponse state
     * @property {boolean|null} [oscillating] FanStateResponse oscillating
     * @property {FanSpeed|null} [speed] FanStateResponse speed
     * @property {FanDirection|null} [direction] FanStateResponse direction
     * @property {number|null} [speed_level] FanStateResponse speed_level
     * @property {string|null} [preset_mode] FanStateResponse preset_mode
     * @property {number|null} [device_id] FanStateResponse device_id
     */

    /**
     * Constructs a new FanStateResponse.
     * @exports FanStateResponse
     * @classdesc Represents a FanStateResponse.
     * @implements IFanStateResponse
     * @constructor
     * @param {IFanStateResponse=} [properties] Properties to set
     */
    function FanStateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * FanStateResponse key.
     * @member {number} key
     * @memberof FanStateResponse
     * @instance
     */
    FanStateResponse.prototype.key = 0;

    /**
     * FanStateResponse state.
     * @member {boolean} state
     * @memberof FanStateResponse
     * @instance
     */
    FanStateResponse.prototype.state = false;

    /**
     * FanStateResponse oscillating.
     * @member {boolean} oscillating
     * @memberof FanStateResponse
     * @instance
     */
    FanStateResponse.prototype.oscillating = false;

    /**
     * FanStateResponse speed.
     * @member {FanSpeed} speed
     * @memberof FanStateResponse
     * @instance
     */
    FanStateResponse.prototype.speed = 0;

    /**
     * FanStateResponse direction.
     * @member {FanDirection} direction
     * @memberof FanStateResponse
     * @instance
     */
    FanStateResponse.prototype.direction = 0;

    /**
     * FanStateResponse speed_level.
     * @member {number} speed_level
     * @memberof FanStateResponse
     * @instance
     */
    FanStateResponse.prototype.speed_level = 0;

    /**
     * FanStateResponse preset_mode.
     * @member {string} preset_mode
     * @memberof FanStateResponse
     * @instance
     */
    FanStateResponse.prototype.preset_mode = "";

    /**
     * FanStateResponse device_id.
     * @member {number} device_id
     * @memberof FanStateResponse
     * @instance
     */
    FanStateResponse.prototype.device_id = 0;

    /**
     * Creates a new FanStateResponse instance using the specified properties.
     * @function create
     * @memberof FanStateResponse
     * @static
     * @param {IFanStateResponse=} [properties] Properties to set
     * @returns {FanStateResponse} FanStateResponse instance
     */
    FanStateResponse.create = function create(properties) {
        return new FanStateResponse(properties);
    };

    /**
     * Encodes the specified FanStateResponse message. Does not implicitly {@link FanStateResponse.verify|verify} messages.
     * @function encode
     * @memberof FanStateResponse
     * @static
     * @param {IFanStateResponse} message FanStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FanStateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.state);
        if (message.oscillating != null && Object.hasOwnProperty.call(message, "oscillating"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.oscillating);
        if (message.speed != null && Object.hasOwnProperty.call(message, "speed"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.speed);
        if (message.direction != null && Object.hasOwnProperty.call(message, "direction"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.direction);
        if (message.speed_level != null && Object.hasOwnProperty.call(message, "speed_level"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.speed_level);
        if (message.preset_mode != null && Object.hasOwnProperty.call(message, "preset_mode"))
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.preset_mode);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified FanStateResponse message, length delimited. Does not implicitly {@link FanStateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof FanStateResponse
     * @static
     * @param {IFanStateResponse} message FanStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FanStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a FanStateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof FanStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {FanStateResponse} FanStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FanStateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FanStateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.state = reader.bool();
                    break;
                }
            case 3: {
                    message.oscillating = reader.bool();
                    break;
                }
            case 4: {
                    message.speed = reader.int32();
                    break;
                }
            case 5: {
                    message.direction = reader.int32();
                    break;
                }
            case 6: {
                    message.speed_level = reader.int32();
                    break;
                }
            case 7: {
                    message.preset_mode = reader.string();
                    break;
                }
            case 8: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a FanStateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof FanStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {FanStateResponse} FanStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FanStateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a FanStateResponse message.
     * @function verify
     * @memberof FanStateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    FanStateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            if (typeof message.state !== "boolean")
                return "state: boolean expected";
        if (message.oscillating != null && message.hasOwnProperty("oscillating"))
            if (typeof message.oscillating !== "boolean")
                return "oscillating: boolean expected";
        if (message.speed != null && message.hasOwnProperty("speed"))
            switch (message.speed) {
            default:
                return "speed: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.direction != null && message.hasOwnProperty("direction"))
            switch (message.direction) {
            default:
                return "direction: enum value expected";
            case 0:
            case 1:
                break;
            }
        if (message.speed_level != null && message.hasOwnProperty("speed_level"))
            if (!$util.isInteger(message.speed_level))
                return "speed_level: integer expected";
        if (message.preset_mode != null && message.hasOwnProperty("preset_mode"))
            if (!$util.isString(message.preset_mode))
                return "preset_mode: string expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a FanStateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof FanStateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {FanStateResponse} FanStateResponse
     */
    FanStateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.FanStateResponse)
            return object;
        var message = new $root.FanStateResponse();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.state != null)
            message.state = Boolean(object.state);
        if (object.oscillating != null)
            message.oscillating = Boolean(object.oscillating);
        switch (object.speed) {
        default:
            if (typeof object.speed === "number") {
                message.speed = object.speed;
                break;
            }
            break;
        case "FAN_SPEED_LOW":
        case 0:
            message.speed = 0;
            break;
        case "FAN_SPEED_MEDIUM":
        case 1:
            message.speed = 1;
            break;
        case "FAN_SPEED_HIGH":
        case 2:
            message.speed = 2;
            break;
        }
        switch (object.direction) {
        default:
            if (typeof object.direction === "number") {
                message.direction = object.direction;
                break;
            }
            break;
        case "FAN_DIRECTION_FORWARD":
        case 0:
            message.direction = 0;
            break;
        case "FAN_DIRECTION_REVERSE":
        case 1:
            message.direction = 1;
            break;
        }
        if (object.speed_level != null)
            message.speed_level = object.speed_level | 0;
        if (object.preset_mode != null)
            message.preset_mode = String(object.preset_mode);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a FanStateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof FanStateResponse
     * @static
     * @param {FanStateResponse} message FanStateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    FanStateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.state = false;
            object.oscillating = false;
            object.speed = options.enums === String ? "FAN_SPEED_LOW" : 0;
            object.direction = options.enums === String ? "FAN_DIRECTION_FORWARD" : 0;
            object.speed_level = 0;
            object.preset_mode = "";
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = message.state;
        if (message.oscillating != null && message.hasOwnProperty("oscillating"))
            object.oscillating = message.oscillating;
        if (message.speed != null && message.hasOwnProperty("speed"))
            object.speed = options.enums === String ? $root.FanSpeed[message.speed] === undefined ? message.speed : $root.FanSpeed[message.speed] : message.speed;
        if (message.direction != null && message.hasOwnProperty("direction"))
            object.direction = options.enums === String ? $root.FanDirection[message.direction] === undefined ? message.direction : $root.FanDirection[message.direction] : message.direction;
        if (message.speed_level != null && message.hasOwnProperty("speed_level"))
            object.speed_level = message.speed_level;
        if (message.preset_mode != null && message.hasOwnProperty("preset_mode"))
            object.preset_mode = message.preset_mode;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this FanStateResponse to JSON.
     * @function toJSON
     * @memberof FanStateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    FanStateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for FanStateResponse
     * @function getTypeUrl
     * @memberof FanStateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    FanStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/FanStateResponse";
    };

    return FanStateResponse;
})();

$root.FanCommandRequest = (function() {

    /**
     * Properties of a FanCommandRequest.
     * @exports IFanCommandRequest
     * @interface IFanCommandRequest
     * @property {number|null} [key] FanCommandRequest key
     * @property {boolean|null} [has_state] FanCommandRequest has_state
     * @property {boolean|null} [state] FanCommandRequest state
     * @property {boolean|null} [has_speed] FanCommandRequest has_speed
     * @property {FanSpeed|null} [speed] FanCommandRequest speed
     * @property {boolean|null} [has_oscillating] FanCommandRequest has_oscillating
     * @property {boolean|null} [oscillating] FanCommandRequest oscillating
     * @property {boolean|null} [has_direction] FanCommandRequest has_direction
     * @property {FanDirection|null} [direction] FanCommandRequest direction
     * @property {boolean|null} [has_speed_level] FanCommandRequest has_speed_level
     * @property {number|null} [speed_level] FanCommandRequest speed_level
     * @property {boolean|null} [has_preset_mode] FanCommandRequest has_preset_mode
     * @property {string|null} [preset_mode] FanCommandRequest preset_mode
     * @property {number|null} [device_id] FanCommandRequest device_id
     */

    /**
     * Constructs a new FanCommandRequest.
     * @exports FanCommandRequest
     * @classdesc Represents a FanCommandRequest.
     * @implements IFanCommandRequest
     * @constructor
     * @param {IFanCommandRequest=} [properties] Properties to set
     */
    function FanCommandRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * FanCommandRequest key.
     * @member {number} key
     * @memberof FanCommandRequest
     * @instance
     */
    FanCommandRequest.prototype.key = 0;

    /**
     * FanCommandRequest has_state.
     * @member {boolean} has_state
     * @memberof FanCommandRequest
     * @instance
     */
    FanCommandRequest.prototype.has_state = false;

    /**
     * FanCommandRequest state.
     * @member {boolean} state
     * @memberof FanCommandRequest
     * @instance
     */
    FanCommandRequest.prototype.state = false;

    /**
     * FanCommandRequest has_speed.
     * @member {boolean} has_speed
     * @memberof FanCommandRequest
     * @instance
     */
    FanCommandRequest.prototype.has_speed = false;

    /**
     * FanCommandRequest speed.
     * @member {FanSpeed} speed
     * @memberof FanCommandRequest
     * @instance
     */
    FanCommandRequest.prototype.speed = 0;

    /**
     * FanCommandRequest has_oscillating.
     * @member {boolean} has_oscillating
     * @memberof FanCommandRequest
     * @instance
     */
    FanCommandRequest.prototype.has_oscillating = false;

    /**
     * FanCommandRequest oscillating.
     * @member {boolean} oscillating
     * @memberof FanCommandRequest
     * @instance
     */
    FanCommandRequest.prototype.oscillating = false;

    /**
     * FanCommandRequest has_direction.
     * @member {boolean} has_direction
     * @memberof FanCommandRequest
     * @instance
     */
    FanCommandRequest.prototype.has_direction = false;

    /**
     * FanCommandRequest direction.
     * @member {FanDirection} direction
     * @memberof FanCommandRequest
     * @instance
     */
    FanCommandRequest.prototype.direction = 0;

    /**
     * FanCommandRequest has_speed_level.
     * @member {boolean} has_speed_level
     * @memberof FanCommandRequest
     * @instance
     */
    FanCommandRequest.prototype.has_speed_level = false;

    /**
     * FanCommandRequest speed_level.
     * @member {number} speed_level
     * @memberof FanCommandRequest
     * @instance
     */
    FanCommandRequest.prototype.speed_level = 0;

    /**
     * FanCommandRequest has_preset_mode.
     * @member {boolean} has_preset_mode
     * @memberof FanCommandRequest
     * @instance
     */
    FanCommandRequest.prototype.has_preset_mode = false;

    /**
     * FanCommandRequest preset_mode.
     * @member {string} preset_mode
     * @memberof FanCommandRequest
     * @instance
     */
    FanCommandRequest.prototype.preset_mode = "";

    /**
     * FanCommandRequest device_id.
     * @member {number} device_id
     * @memberof FanCommandRequest
     * @instance
     */
    FanCommandRequest.prototype.device_id = 0;

    /**
     * Creates a new FanCommandRequest instance using the specified properties.
     * @function create
     * @memberof FanCommandRequest
     * @static
     * @param {IFanCommandRequest=} [properties] Properties to set
     * @returns {FanCommandRequest} FanCommandRequest instance
     */
    FanCommandRequest.create = function create(properties) {
        return new FanCommandRequest(properties);
    };

    /**
     * Encodes the specified FanCommandRequest message. Does not implicitly {@link FanCommandRequest.verify|verify} messages.
     * @function encode
     * @memberof FanCommandRequest
     * @static
     * @param {IFanCommandRequest} message FanCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FanCommandRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.has_state != null && Object.hasOwnProperty.call(message, "has_state"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.has_state);
        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.state);
        if (message.has_speed != null && Object.hasOwnProperty.call(message, "has_speed"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.has_speed);
        if (message.speed != null && Object.hasOwnProperty.call(message, "speed"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.speed);
        if (message.has_oscillating != null && Object.hasOwnProperty.call(message, "has_oscillating"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.has_oscillating);
        if (message.oscillating != null && Object.hasOwnProperty.call(message, "oscillating"))
            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.oscillating);
        if (message.has_direction != null && Object.hasOwnProperty.call(message, "has_direction"))
            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.has_direction);
        if (message.direction != null && Object.hasOwnProperty.call(message, "direction"))
            writer.uint32(/* id 9, wireType 0 =*/72).int32(message.direction);
        if (message.has_speed_level != null && Object.hasOwnProperty.call(message, "has_speed_level"))
            writer.uint32(/* id 10, wireType 0 =*/80).bool(message.has_speed_level);
        if (message.speed_level != null && Object.hasOwnProperty.call(message, "speed_level"))
            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.speed_level);
        if (message.has_preset_mode != null && Object.hasOwnProperty.call(message, "has_preset_mode"))
            writer.uint32(/* id 12, wireType 0 =*/96).bool(message.has_preset_mode);
        if (message.preset_mode != null && Object.hasOwnProperty.call(message, "preset_mode"))
            writer.uint32(/* id 13, wireType 2 =*/106).string(message.preset_mode);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified FanCommandRequest message, length delimited. Does not implicitly {@link FanCommandRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof FanCommandRequest
     * @static
     * @param {IFanCommandRequest} message FanCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    FanCommandRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a FanCommandRequest message from the specified reader or buffer.
     * @function decode
     * @memberof FanCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {FanCommandRequest} FanCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FanCommandRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FanCommandRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.has_state = reader.bool();
                    break;
                }
            case 3: {
                    message.state = reader.bool();
                    break;
                }
            case 4: {
                    message.has_speed = reader.bool();
                    break;
                }
            case 5: {
                    message.speed = reader.int32();
                    break;
                }
            case 6: {
                    message.has_oscillating = reader.bool();
                    break;
                }
            case 7: {
                    message.oscillating = reader.bool();
                    break;
                }
            case 8: {
                    message.has_direction = reader.bool();
                    break;
                }
            case 9: {
                    message.direction = reader.int32();
                    break;
                }
            case 10: {
                    message.has_speed_level = reader.bool();
                    break;
                }
            case 11: {
                    message.speed_level = reader.int32();
                    break;
                }
            case 12: {
                    message.has_preset_mode = reader.bool();
                    break;
                }
            case 13: {
                    message.preset_mode = reader.string();
                    break;
                }
            case 14: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a FanCommandRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof FanCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {FanCommandRequest} FanCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    FanCommandRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a FanCommandRequest message.
     * @function verify
     * @memberof FanCommandRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    FanCommandRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.has_state != null && message.hasOwnProperty("has_state"))
            if (typeof message.has_state !== "boolean")
                return "has_state: boolean expected";
        if (message.state != null && message.hasOwnProperty("state"))
            if (typeof message.state !== "boolean")
                return "state: boolean expected";
        if (message.has_speed != null && message.hasOwnProperty("has_speed"))
            if (typeof message.has_speed !== "boolean")
                return "has_speed: boolean expected";
        if (message.speed != null && message.hasOwnProperty("speed"))
            switch (message.speed) {
            default:
                return "speed: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.has_oscillating != null && message.hasOwnProperty("has_oscillating"))
            if (typeof message.has_oscillating !== "boolean")
                return "has_oscillating: boolean expected";
        if (message.oscillating != null && message.hasOwnProperty("oscillating"))
            if (typeof message.oscillating !== "boolean")
                return "oscillating: boolean expected";
        if (message.has_direction != null && message.hasOwnProperty("has_direction"))
            if (typeof message.has_direction !== "boolean")
                return "has_direction: boolean expected";
        if (message.direction != null && message.hasOwnProperty("direction"))
            switch (message.direction) {
            default:
                return "direction: enum value expected";
            case 0:
            case 1:
                break;
            }
        if (message.has_speed_level != null && message.hasOwnProperty("has_speed_level"))
            if (typeof message.has_speed_level !== "boolean")
                return "has_speed_level: boolean expected";
        if (message.speed_level != null && message.hasOwnProperty("speed_level"))
            if (!$util.isInteger(message.speed_level))
                return "speed_level: integer expected";
        if (message.has_preset_mode != null && message.hasOwnProperty("has_preset_mode"))
            if (typeof message.has_preset_mode !== "boolean")
                return "has_preset_mode: boolean expected";
        if (message.preset_mode != null && message.hasOwnProperty("preset_mode"))
            if (!$util.isString(message.preset_mode))
                return "preset_mode: string expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a FanCommandRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof FanCommandRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {FanCommandRequest} FanCommandRequest
     */
    FanCommandRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.FanCommandRequest)
            return object;
        var message = new $root.FanCommandRequest();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.has_state != null)
            message.has_state = Boolean(object.has_state);
        if (object.state != null)
            message.state = Boolean(object.state);
        if (object.has_speed != null)
            message.has_speed = Boolean(object.has_speed);
        switch (object.speed) {
        default:
            if (typeof object.speed === "number") {
                message.speed = object.speed;
                break;
            }
            break;
        case "FAN_SPEED_LOW":
        case 0:
            message.speed = 0;
            break;
        case "FAN_SPEED_MEDIUM":
        case 1:
            message.speed = 1;
            break;
        case "FAN_SPEED_HIGH":
        case 2:
            message.speed = 2;
            break;
        }
        if (object.has_oscillating != null)
            message.has_oscillating = Boolean(object.has_oscillating);
        if (object.oscillating != null)
            message.oscillating = Boolean(object.oscillating);
        if (object.has_direction != null)
            message.has_direction = Boolean(object.has_direction);
        switch (object.direction) {
        default:
            if (typeof object.direction === "number") {
                message.direction = object.direction;
                break;
            }
            break;
        case "FAN_DIRECTION_FORWARD":
        case 0:
            message.direction = 0;
            break;
        case "FAN_DIRECTION_REVERSE":
        case 1:
            message.direction = 1;
            break;
        }
        if (object.has_speed_level != null)
            message.has_speed_level = Boolean(object.has_speed_level);
        if (object.speed_level != null)
            message.speed_level = object.speed_level | 0;
        if (object.has_preset_mode != null)
            message.has_preset_mode = Boolean(object.has_preset_mode);
        if (object.preset_mode != null)
            message.preset_mode = String(object.preset_mode);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a FanCommandRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof FanCommandRequest
     * @static
     * @param {FanCommandRequest} message FanCommandRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    FanCommandRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.has_state = false;
            object.state = false;
            object.has_speed = false;
            object.speed = options.enums === String ? "FAN_SPEED_LOW" : 0;
            object.has_oscillating = false;
            object.oscillating = false;
            object.has_direction = false;
            object.direction = options.enums === String ? "FAN_DIRECTION_FORWARD" : 0;
            object.has_speed_level = false;
            object.speed_level = 0;
            object.has_preset_mode = false;
            object.preset_mode = "";
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.has_state != null && message.hasOwnProperty("has_state"))
            object.has_state = message.has_state;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = message.state;
        if (message.has_speed != null && message.hasOwnProperty("has_speed"))
            object.has_speed = message.has_speed;
        if (message.speed != null && message.hasOwnProperty("speed"))
            object.speed = options.enums === String ? $root.FanSpeed[message.speed] === undefined ? message.speed : $root.FanSpeed[message.speed] : message.speed;
        if (message.has_oscillating != null && message.hasOwnProperty("has_oscillating"))
            object.has_oscillating = message.has_oscillating;
        if (message.oscillating != null && message.hasOwnProperty("oscillating"))
            object.oscillating = message.oscillating;
        if (message.has_direction != null && message.hasOwnProperty("has_direction"))
            object.has_direction = message.has_direction;
        if (message.direction != null && message.hasOwnProperty("direction"))
            object.direction = options.enums === String ? $root.FanDirection[message.direction] === undefined ? message.direction : $root.FanDirection[message.direction] : message.direction;
        if (message.has_speed_level != null && message.hasOwnProperty("has_speed_level"))
            object.has_speed_level = message.has_speed_level;
        if (message.speed_level != null && message.hasOwnProperty("speed_level"))
            object.speed_level = message.speed_level;
        if (message.has_preset_mode != null && message.hasOwnProperty("has_preset_mode"))
            object.has_preset_mode = message.has_preset_mode;
        if (message.preset_mode != null && message.hasOwnProperty("preset_mode"))
            object.preset_mode = message.preset_mode;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this FanCommandRequest to JSON.
     * @function toJSON
     * @memberof FanCommandRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    FanCommandRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for FanCommandRequest
     * @function getTypeUrl
     * @memberof FanCommandRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    FanCommandRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/FanCommandRequest";
    };

    return FanCommandRequest;
})();

/**
 * ColorMode enum.
 * @exports ColorMode
 * @enum {number}
 * @property {number} COLOR_MODE_UNKNOWN=0 COLOR_MODE_UNKNOWN value
 * @property {number} COLOR_MODE_ON_OFF=1 COLOR_MODE_ON_OFF value
 * @property {number} COLOR_MODE_LEGACY_BRIGHTNESS=2 COLOR_MODE_LEGACY_BRIGHTNESS value
 * @property {number} COLOR_MODE_BRIGHTNESS=3 COLOR_MODE_BRIGHTNESS value
 * @property {number} COLOR_MODE_WHITE=7 COLOR_MODE_WHITE value
 * @property {number} COLOR_MODE_COLOR_TEMPERATURE=11 COLOR_MODE_COLOR_TEMPERATURE value
 * @property {number} COLOR_MODE_COLD_WARM_WHITE=19 COLOR_MODE_COLD_WARM_WHITE value
 * @property {number} COLOR_MODE_RGB=35 COLOR_MODE_RGB value
 * @property {number} COLOR_MODE_RGB_WHITE=39 COLOR_MODE_RGB_WHITE value
 * @property {number} COLOR_MODE_RGB_COLOR_TEMPERATURE=47 COLOR_MODE_RGB_COLOR_TEMPERATURE value
 * @property {number} COLOR_MODE_RGB_COLD_WARM_WHITE=51 COLOR_MODE_RGB_COLD_WARM_WHITE value
 */
$root.ColorMode = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "COLOR_MODE_UNKNOWN"] = 0;
    values[valuesById[1] = "COLOR_MODE_ON_OFF"] = 1;
    values[valuesById[2] = "COLOR_MODE_LEGACY_BRIGHTNESS"] = 2;
    values[valuesById[3] = "COLOR_MODE_BRIGHTNESS"] = 3;
    values[valuesById[7] = "COLOR_MODE_WHITE"] = 7;
    values[valuesById[11] = "COLOR_MODE_COLOR_TEMPERATURE"] = 11;
    values[valuesById[19] = "COLOR_MODE_COLD_WARM_WHITE"] = 19;
    values[valuesById[35] = "COLOR_MODE_RGB"] = 35;
    values[valuesById[39] = "COLOR_MODE_RGB_WHITE"] = 39;
    values[valuesById[47] = "COLOR_MODE_RGB_COLOR_TEMPERATURE"] = 47;
    values[valuesById[51] = "COLOR_MODE_RGB_COLD_WARM_WHITE"] = 51;
    return values;
})();

$root.ListEntitiesLightResponse = (function() {

    /**
     * Properties of a ListEntitiesLightResponse.
     * @exports IListEntitiesLightResponse
     * @interface IListEntitiesLightResponse
     * @property {string|null} [object_id] ListEntitiesLightResponse object_id
     * @property {number|null} [key] ListEntitiesLightResponse key
     * @property {string|null} [name] ListEntitiesLightResponse name
     * @property {Array.<ColorMode>|null} [supported_color_modes] ListEntitiesLightResponse supported_color_modes
     * @property {boolean|null} [legacy_supports_brightness] ListEntitiesLightResponse legacy_supports_brightness
     * @property {boolean|null} [legacy_supports_rgb] ListEntitiesLightResponse legacy_supports_rgb
     * @property {boolean|null} [legacy_supports_white_value] ListEntitiesLightResponse legacy_supports_white_value
     * @property {boolean|null} [legacy_supports_color_temperature] ListEntitiesLightResponse legacy_supports_color_temperature
     * @property {number|null} [min_mireds] ListEntitiesLightResponse min_mireds
     * @property {number|null} [max_mireds] ListEntitiesLightResponse max_mireds
     * @property {Array.<string>|null} [effects] ListEntitiesLightResponse effects
     * @property {boolean|null} [disabled_by_default] ListEntitiesLightResponse disabled_by_default
     * @property {string|null} [icon] ListEntitiesLightResponse icon
     * @property {EntityCategory|null} [entity_category] ListEntitiesLightResponse entity_category
     * @property {number|null} [device_id] ListEntitiesLightResponse device_id
     */

    /**
     * Constructs a new ListEntitiesLightResponse.
     * @exports ListEntitiesLightResponse
     * @classdesc Represents a ListEntitiesLightResponse.
     * @implements IListEntitiesLightResponse
     * @constructor
     * @param {IListEntitiesLightResponse=} [properties] Properties to set
     */
    function ListEntitiesLightResponse(properties) {
        this.supported_color_modes = [];
        this.effects = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesLightResponse object_id.
     * @member {string} object_id
     * @memberof ListEntitiesLightResponse
     * @instance
     */
    ListEntitiesLightResponse.prototype.object_id = "";

    /**
     * ListEntitiesLightResponse key.
     * @member {number} key
     * @memberof ListEntitiesLightResponse
     * @instance
     */
    ListEntitiesLightResponse.prototype.key = 0;

    /**
     * ListEntitiesLightResponse name.
     * @member {string} name
     * @memberof ListEntitiesLightResponse
     * @instance
     */
    ListEntitiesLightResponse.prototype.name = "";

    /**
     * ListEntitiesLightResponse supported_color_modes.
     * @member {Array.<ColorMode>} supported_color_modes
     * @memberof ListEntitiesLightResponse
     * @instance
     */
    ListEntitiesLightResponse.prototype.supported_color_modes = $util.emptyArray;

    /**
     * ListEntitiesLightResponse legacy_supports_brightness.
     * @member {boolean} legacy_supports_brightness
     * @memberof ListEntitiesLightResponse
     * @instance
     */
    ListEntitiesLightResponse.prototype.legacy_supports_brightness = false;

    /**
     * ListEntitiesLightResponse legacy_supports_rgb.
     * @member {boolean} legacy_supports_rgb
     * @memberof ListEntitiesLightResponse
     * @instance
     */
    ListEntitiesLightResponse.prototype.legacy_supports_rgb = false;

    /**
     * ListEntitiesLightResponse legacy_supports_white_value.
     * @member {boolean} legacy_supports_white_value
     * @memberof ListEntitiesLightResponse
     * @instance
     */
    ListEntitiesLightResponse.prototype.legacy_supports_white_value = false;

    /**
     * ListEntitiesLightResponse legacy_supports_color_temperature.
     * @member {boolean} legacy_supports_color_temperature
     * @memberof ListEntitiesLightResponse
     * @instance
     */
    ListEntitiesLightResponse.prototype.legacy_supports_color_temperature = false;

    /**
     * ListEntitiesLightResponse min_mireds.
     * @member {number} min_mireds
     * @memberof ListEntitiesLightResponse
     * @instance
     */
    ListEntitiesLightResponse.prototype.min_mireds = 0;

    /**
     * ListEntitiesLightResponse max_mireds.
     * @member {number} max_mireds
     * @memberof ListEntitiesLightResponse
     * @instance
     */
    ListEntitiesLightResponse.prototype.max_mireds = 0;

    /**
     * ListEntitiesLightResponse effects.
     * @member {Array.<string>} effects
     * @memberof ListEntitiesLightResponse
     * @instance
     */
    ListEntitiesLightResponse.prototype.effects = $util.emptyArray;

    /**
     * ListEntitiesLightResponse disabled_by_default.
     * @member {boolean} disabled_by_default
     * @memberof ListEntitiesLightResponse
     * @instance
     */
    ListEntitiesLightResponse.prototype.disabled_by_default = false;

    /**
     * ListEntitiesLightResponse icon.
     * @member {string} icon
     * @memberof ListEntitiesLightResponse
     * @instance
     */
    ListEntitiesLightResponse.prototype.icon = "";

    /**
     * ListEntitiesLightResponse entity_category.
     * @member {EntityCategory} entity_category
     * @memberof ListEntitiesLightResponse
     * @instance
     */
    ListEntitiesLightResponse.prototype.entity_category = 0;

    /**
     * ListEntitiesLightResponse device_id.
     * @member {number} device_id
     * @memberof ListEntitiesLightResponse
     * @instance
     */
    ListEntitiesLightResponse.prototype.device_id = 0;

    /**
     * Creates a new ListEntitiesLightResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesLightResponse
     * @static
     * @param {IListEntitiesLightResponse=} [properties] Properties to set
     * @returns {ListEntitiesLightResponse} ListEntitiesLightResponse instance
     */
    ListEntitiesLightResponse.create = function create(properties) {
        return new ListEntitiesLightResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesLightResponse message. Does not implicitly {@link ListEntitiesLightResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesLightResponse
     * @static
     * @param {IListEntitiesLightResponse} message ListEntitiesLightResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesLightResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.object_id != null && Object.hasOwnProperty.call(message, "object_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.object_id);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.legacy_supports_brightness != null && Object.hasOwnProperty.call(message, "legacy_supports_brightness"))
            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.legacy_supports_brightness);
        if (message.legacy_supports_rgb != null && Object.hasOwnProperty.call(message, "legacy_supports_rgb"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.legacy_supports_rgb);
        if (message.legacy_supports_white_value != null && Object.hasOwnProperty.call(message, "legacy_supports_white_value"))
            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.legacy_supports_white_value);
        if (message.legacy_supports_color_temperature != null && Object.hasOwnProperty.call(message, "legacy_supports_color_temperature"))
            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.legacy_supports_color_temperature);
        if (message.min_mireds != null && Object.hasOwnProperty.call(message, "min_mireds"))
            writer.uint32(/* id 9, wireType 5 =*/77).float(message.min_mireds);
        if (message.max_mireds != null && Object.hasOwnProperty.call(message, "max_mireds"))
            writer.uint32(/* id 10, wireType 5 =*/85).float(message.max_mireds);
        if (message.effects != null && message.effects.length)
            for (var i = 0; i < message.effects.length; ++i)
                writer.uint32(/* id 11, wireType 2 =*/90).string(message.effects[i]);
        if (message.supported_color_modes != null && message.supported_color_modes.length) {
            writer.uint32(/* id 12, wireType 2 =*/98).fork();
            for (var i = 0; i < message.supported_color_modes.length; ++i)
                writer.int32(message.supported_color_modes[i]);
            writer.ldelim();
        }
        if (message.disabled_by_default != null && Object.hasOwnProperty.call(message, "disabled_by_default"))
            writer.uint32(/* id 13, wireType 0 =*/104).bool(message.disabled_by_default);
        if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
            writer.uint32(/* id 14, wireType 2 =*/114).string(message.icon);
        if (message.entity_category != null && Object.hasOwnProperty.call(message, "entity_category"))
            writer.uint32(/* id 15, wireType 0 =*/120).int32(message.entity_category);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesLightResponse message, length delimited. Does not implicitly {@link ListEntitiesLightResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesLightResponse
     * @static
     * @param {IListEntitiesLightResponse} message ListEntitiesLightResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesLightResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesLightResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesLightResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesLightResponse} ListEntitiesLightResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesLightResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesLightResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.object_id = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 12: {
                    if (!(message.supported_color_modes && message.supported_color_modes.length))
                        message.supported_color_modes = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.supported_color_modes.push(reader.int32());
                    } else
                        message.supported_color_modes.push(reader.int32());
                    break;
                }
            case 5: {
                    message.legacy_supports_brightness = reader.bool();
                    break;
                }
            case 6: {
                    message.legacy_supports_rgb = reader.bool();
                    break;
                }
            case 7: {
                    message.legacy_supports_white_value = reader.bool();
                    break;
                }
            case 8: {
                    message.legacy_supports_color_temperature = reader.bool();
                    break;
                }
            case 9: {
                    message.min_mireds = reader.float();
                    break;
                }
            case 10: {
                    message.max_mireds = reader.float();
                    break;
                }
            case 11: {
                    if (!(message.effects && message.effects.length))
                        message.effects = [];
                    message.effects.push(reader.string());
                    break;
                }
            case 13: {
                    message.disabled_by_default = reader.bool();
                    break;
                }
            case 14: {
                    message.icon = reader.string();
                    break;
                }
            case 15: {
                    message.entity_category = reader.int32();
                    break;
                }
            case 16: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesLightResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesLightResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesLightResponse} ListEntitiesLightResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesLightResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesLightResponse message.
     * @function verify
     * @memberof ListEntitiesLightResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesLightResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            if (!$util.isString(message.object_id))
                return "object_id: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.supported_color_modes != null && message.hasOwnProperty("supported_color_modes")) {
            if (!Array.isArray(message.supported_color_modes))
                return "supported_color_modes: array expected";
            for (var i = 0; i < message.supported_color_modes.length; ++i)
                switch (message.supported_color_modes[i]) {
                default:
                    return "supported_color_modes: enum value[] expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 7:
                case 11:
                case 19:
                case 35:
                case 39:
                case 47:
                case 51:
                    break;
                }
        }
        if (message.legacy_supports_brightness != null && message.hasOwnProperty("legacy_supports_brightness"))
            if (typeof message.legacy_supports_brightness !== "boolean")
                return "legacy_supports_brightness: boolean expected";
        if (message.legacy_supports_rgb != null && message.hasOwnProperty("legacy_supports_rgb"))
            if (typeof message.legacy_supports_rgb !== "boolean")
                return "legacy_supports_rgb: boolean expected";
        if (message.legacy_supports_white_value != null && message.hasOwnProperty("legacy_supports_white_value"))
            if (typeof message.legacy_supports_white_value !== "boolean")
                return "legacy_supports_white_value: boolean expected";
        if (message.legacy_supports_color_temperature != null && message.hasOwnProperty("legacy_supports_color_temperature"))
            if (typeof message.legacy_supports_color_temperature !== "boolean")
                return "legacy_supports_color_temperature: boolean expected";
        if (message.min_mireds != null && message.hasOwnProperty("min_mireds"))
            if (typeof message.min_mireds !== "number")
                return "min_mireds: number expected";
        if (message.max_mireds != null && message.hasOwnProperty("max_mireds"))
            if (typeof message.max_mireds !== "number")
                return "max_mireds: number expected";
        if (message.effects != null && message.hasOwnProperty("effects")) {
            if (!Array.isArray(message.effects))
                return "effects: array expected";
            for (var i = 0; i < message.effects.length; ++i)
                if (!$util.isString(message.effects[i]))
                    return "effects: string[] expected";
        }
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            if (typeof message.disabled_by_default !== "boolean")
                return "disabled_by_default: boolean expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isString(message.icon))
                return "icon: string expected";
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            switch (message.entity_category) {
            default:
                return "entity_category: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ListEntitiesLightResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesLightResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesLightResponse} ListEntitiesLightResponse
     */
    ListEntitiesLightResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesLightResponse)
            return object;
        var message = new $root.ListEntitiesLightResponse();
        if (object.object_id != null)
            message.object_id = String(object.object_id);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.supported_color_modes) {
            if (!Array.isArray(object.supported_color_modes))
                throw TypeError(".ListEntitiesLightResponse.supported_color_modes: array expected");
            message.supported_color_modes = [];
            for (var i = 0; i < object.supported_color_modes.length; ++i)
                switch (object.supported_color_modes[i]) {
                default:
                    if (typeof object.supported_color_modes[i] === "number") {
                        message.supported_color_modes[i] = object.supported_color_modes[i];
                        break;
                    }
                case "COLOR_MODE_UNKNOWN":
                case 0:
                    message.supported_color_modes[i] = 0;
                    break;
                case "COLOR_MODE_ON_OFF":
                case 1:
                    message.supported_color_modes[i] = 1;
                    break;
                case "COLOR_MODE_LEGACY_BRIGHTNESS":
                case 2:
                    message.supported_color_modes[i] = 2;
                    break;
                case "COLOR_MODE_BRIGHTNESS":
                case 3:
                    message.supported_color_modes[i] = 3;
                    break;
                case "COLOR_MODE_WHITE":
                case 7:
                    message.supported_color_modes[i] = 7;
                    break;
                case "COLOR_MODE_COLOR_TEMPERATURE":
                case 11:
                    message.supported_color_modes[i] = 11;
                    break;
                case "COLOR_MODE_COLD_WARM_WHITE":
                case 19:
                    message.supported_color_modes[i] = 19;
                    break;
                case "COLOR_MODE_RGB":
                case 35:
                    message.supported_color_modes[i] = 35;
                    break;
                case "COLOR_MODE_RGB_WHITE":
                case 39:
                    message.supported_color_modes[i] = 39;
                    break;
                case "COLOR_MODE_RGB_COLOR_TEMPERATURE":
                case 47:
                    message.supported_color_modes[i] = 47;
                    break;
                case "COLOR_MODE_RGB_COLD_WARM_WHITE":
                case 51:
                    message.supported_color_modes[i] = 51;
                    break;
                }
        }
        if (object.legacy_supports_brightness != null)
            message.legacy_supports_brightness = Boolean(object.legacy_supports_brightness);
        if (object.legacy_supports_rgb != null)
            message.legacy_supports_rgb = Boolean(object.legacy_supports_rgb);
        if (object.legacy_supports_white_value != null)
            message.legacy_supports_white_value = Boolean(object.legacy_supports_white_value);
        if (object.legacy_supports_color_temperature != null)
            message.legacy_supports_color_temperature = Boolean(object.legacy_supports_color_temperature);
        if (object.min_mireds != null)
            message.min_mireds = Number(object.min_mireds);
        if (object.max_mireds != null)
            message.max_mireds = Number(object.max_mireds);
        if (object.effects) {
            if (!Array.isArray(object.effects))
                throw TypeError(".ListEntitiesLightResponse.effects: array expected");
            message.effects = [];
            for (var i = 0; i < object.effects.length; ++i)
                message.effects[i] = String(object.effects[i]);
        }
        if (object.disabled_by_default != null)
            message.disabled_by_default = Boolean(object.disabled_by_default);
        if (object.icon != null)
            message.icon = String(object.icon);
        switch (object.entity_category) {
        default:
            if (typeof object.entity_category === "number") {
                message.entity_category = object.entity_category;
                break;
            }
            break;
        case "ENTITY_CATEGORY_NONE":
        case 0:
            message.entity_category = 0;
            break;
        case "ENTITY_CATEGORY_CONFIG":
        case 1:
            message.entity_category = 1;
            break;
        case "ENTITY_CATEGORY_DIAGNOSTIC":
        case 2:
            message.entity_category = 2;
            break;
        }
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesLightResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesLightResponse
     * @static
     * @param {ListEntitiesLightResponse} message ListEntitiesLightResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesLightResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.effects = [];
            object.supported_color_modes = [];
        }
        if (options.defaults) {
            object.object_id = "";
            object.key = 0;
            object.name = "";
            object.legacy_supports_brightness = false;
            object.legacy_supports_rgb = false;
            object.legacy_supports_white_value = false;
            object.legacy_supports_color_temperature = false;
            object.min_mireds = 0;
            object.max_mireds = 0;
            object.disabled_by_default = false;
            object.icon = "";
            object.entity_category = options.enums === String ? "ENTITY_CATEGORY_NONE" : 0;
            object.device_id = 0;
        }
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            object.object_id = message.object_id;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.legacy_supports_brightness != null && message.hasOwnProperty("legacy_supports_brightness"))
            object.legacy_supports_brightness = message.legacy_supports_brightness;
        if (message.legacy_supports_rgb != null && message.hasOwnProperty("legacy_supports_rgb"))
            object.legacy_supports_rgb = message.legacy_supports_rgb;
        if (message.legacy_supports_white_value != null && message.hasOwnProperty("legacy_supports_white_value"))
            object.legacy_supports_white_value = message.legacy_supports_white_value;
        if (message.legacy_supports_color_temperature != null && message.hasOwnProperty("legacy_supports_color_temperature"))
            object.legacy_supports_color_temperature = message.legacy_supports_color_temperature;
        if (message.min_mireds != null && message.hasOwnProperty("min_mireds"))
            object.min_mireds = options.json && !isFinite(message.min_mireds) ? String(message.min_mireds) : message.min_mireds;
        if (message.max_mireds != null && message.hasOwnProperty("max_mireds"))
            object.max_mireds = options.json && !isFinite(message.max_mireds) ? String(message.max_mireds) : message.max_mireds;
        if (message.effects && message.effects.length) {
            object.effects = [];
            for (var j = 0; j < message.effects.length; ++j)
                object.effects[j] = message.effects[j];
        }
        if (message.supported_color_modes && message.supported_color_modes.length) {
            object.supported_color_modes = [];
            for (var j = 0; j < message.supported_color_modes.length; ++j)
                object.supported_color_modes[j] = options.enums === String ? $root.ColorMode[message.supported_color_modes[j]] === undefined ? message.supported_color_modes[j] : $root.ColorMode[message.supported_color_modes[j]] : message.supported_color_modes[j];
        }
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            object.disabled_by_default = message.disabled_by_default;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            object.entity_category = options.enums === String ? $root.EntityCategory[message.entity_category] === undefined ? message.entity_category : $root.EntityCategory[message.entity_category] : message.entity_category;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ListEntitiesLightResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesLightResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesLightResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesLightResponse
     * @function getTypeUrl
     * @memberof ListEntitiesLightResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesLightResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesLightResponse";
    };

    return ListEntitiesLightResponse;
})();

$root.LightStateResponse = (function() {

    /**
     * Properties of a LightStateResponse.
     * @exports ILightStateResponse
     * @interface ILightStateResponse
     * @property {number|null} [key] LightStateResponse key
     * @property {boolean|null} [state] LightStateResponse state
     * @property {number|null} [brightness] LightStateResponse brightness
     * @property {ColorMode|null} [color_mode] LightStateResponse color_mode
     * @property {number|null} [color_brightness] LightStateResponse color_brightness
     * @property {number|null} [red] LightStateResponse red
     * @property {number|null} [green] LightStateResponse green
     * @property {number|null} [blue] LightStateResponse blue
     * @property {number|null} [white] LightStateResponse white
     * @property {number|null} [color_temperature] LightStateResponse color_temperature
     * @property {number|null} [cold_white] LightStateResponse cold_white
     * @property {number|null} [warm_white] LightStateResponse warm_white
     * @property {string|null} [effect] LightStateResponse effect
     * @property {number|null} [device_id] LightStateResponse device_id
     */

    /**
     * Constructs a new LightStateResponse.
     * @exports LightStateResponse
     * @classdesc Represents a LightStateResponse.
     * @implements ILightStateResponse
     * @constructor
     * @param {ILightStateResponse=} [properties] Properties to set
     */
    function LightStateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * LightStateResponse key.
     * @member {number} key
     * @memberof LightStateResponse
     * @instance
     */
    LightStateResponse.prototype.key = 0;

    /**
     * LightStateResponse state.
     * @member {boolean} state
     * @memberof LightStateResponse
     * @instance
     */
    LightStateResponse.prototype.state = false;

    /**
     * LightStateResponse brightness.
     * @member {number} brightness
     * @memberof LightStateResponse
     * @instance
     */
    LightStateResponse.prototype.brightness = 0;

    /**
     * LightStateResponse color_mode.
     * @member {ColorMode} color_mode
     * @memberof LightStateResponse
     * @instance
     */
    LightStateResponse.prototype.color_mode = 0;

    /**
     * LightStateResponse color_brightness.
     * @member {number} color_brightness
     * @memberof LightStateResponse
     * @instance
     */
    LightStateResponse.prototype.color_brightness = 0;

    /**
     * LightStateResponse red.
     * @member {number} red
     * @memberof LightStateResponse
     * @instance
     */
    LightStateResponse.prototype.red = 0;

    /**
     * LightStateResponse green.
     * @member {number} green
     * @memberof LightStateResponse
     * @instance
     */
    LightStateResponse.prototype.green = 0;

    /**
     * LightStateResponse blue.
     * @member {number} blue
     * @memberof LightStateResponse
     * @instance
     */
    LightStateResponse.prototype.blue = 0;

    /**
     * LightStateResponse white.
     * @member {number} white
     * @memberof LightStateResponse
     * @instance
     */
    LightStateResponse.prototype.white = 0;

    /**
     * LightStateResponse color_temperature.
     * @member {number} color_temperature
     * @memberof LightStateResponse
     * @instance
     */
    LightStateResponse.prototype.color_temperature = 0;

    /**
     * LightStateResponse cold_white.
     * @member {number} cold_white
     * @memberof LightStateResponse
     * @instance
     */
    LightStateResponse.prototype.cold_white = 0;

    /**
     * LightStateResponse warm_white.
     * @member {number} warm_white
     * @memberof LightStateResponse
     * @instance
     */
    LightStateResponse.prototype.warm_white = 0;

    /**
     * LightStateResponse effect.
     * @member {string} effect
     * @memberof LightStateResponse
     * @instance
     */
    LightStateResponse.prototype.effect = "";

    /**
     * LightStateResponse device_id.
     * @member {number} device_id
     * @memberof LightStateResponse
     * @instance
     */
    LightStateResponse.prototype.device_id = 0;

    /**
     * Creates a new LightStateResponse instance using the specified properties.
     * @function create
     * @memberof LightStateResponse
     * @static
     * @param {ILightStateResponse=} [properties] Properties to set
     * @returns {LightStateResponse} LightStateResponse instance
     */
    LightStateResponse.create = function create(properties) {
        return new LightStateResponse(properties);
    };

    /**
     * Encodes the specified LightStateResponse message. Does not implicitly {@link LightStateResponse.verify|verify} messages.
     * @function encode
     * @memberof LightStateResponse
     * @static
     * @param {ILightStateResponse} message LightStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    LightStateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.state);
        if (message.brightness != null && Object.hasOwnProperty.call(message, "brightness"))
            writer.uint32(/* id 3, wireType 5 =*/29).float(message.brightness);
        if (message.red != null && Object.hasOwnProperty.call(message, "red"))
            writer.uint32(/* id 4, wireType 5 =*/37).float(message.red);
        if (message.green != null && Object.hasOwnProperty.call(message, "green"))
            writer.uint32(/* id 5, wireType 5 =*/45).float(message.green);
        if (message.blue != null && Object.hasOwnProperty.call(message, "blue"))
            writer.uint32(/* id 6, wireType 5 =*/53).float(message.blue);
        if (message.white != null && Object.hasOwnProperty.call(message, "white"))
            writer.uint32(/* id 7, wireType 5 =*/61).float(message.white);
        if (message.color_temperature != null && Object.hasOwnProperty.call(message, "color_temperature"))
            writer.uint32(/* id 8, wireType 5 =*/69).float(message.color_temperature);
        if (message.effect != null && Object.hasOwnProperty.call(message, "effect"))
            writer.uint32(/* id 9, wireType 2 =*/74).string(message.effect);
        if (message.color_brightness != null && Object.hasOwnProperty.call(message, "color_brightness"))
            writer.uint32(/* id 10, wireType 5 =*/85).float(message.color_brightness);
        if (message.color_mode != null && Object.hasOwnProperty.call(message, "color_mode"))
            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.color_mode);
        if (message.cold_white != null && Object.hasOwnProperty.call(message, "cold_white"))
            writer.uint32(/* id 12, wireType 5 =*/101).float(message.cold_white);
        if (message.warm_white != null && Object.hasOwnProperty.call(message, "warm_white"))
            writer.uint32(/* id 13, wireType 5 =*/109).float(message.warm_white);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified LightStateResponse message, length delimited. Does not implicitly {@link LightStateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof LightStateResponse
     * @static
     * @param {ILightStateResponse} message LightStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    LightStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a LightStateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof LightStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {LightStateResponse} LightStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    LightStateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LightStateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.state = reader.bool();
                    break;
                }
            case 3: {
                    message.brightness = reader.float();
                    break;
                }
            case 11: {
                    message.color_mode = reader.int32();
                    break;
                }
            case 10: {
                    message.color_brightness = reader.float();
                    break;
                }
            case 4: {
                    message.red = reader.float();
                    break;
                }
            case 5: {
                    message.green = reader.float();
                    break;
                }
            case 6: {
                    message.blue = reader.float();
                    break;
                }
            case 7: {
                    message.white = reader.float();
                    break;
                }
            case 8: {
                    message.color_temperature = reader.float();
                    break;
                }
            case 12: {
                    message.cold_white = reader.float();
                    break;
                }
            case 13: {
                    message.warm_white = reader.float();
                    break;
                }
            case 9: {
                    message.effect = reader.string();
                    break;
                }
            case 14: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a LightStateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof LightStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {LightStateResponse} LightStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    LightStateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a LightStateResponse message.
     * @function verify
     * @memberof LightStateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    LightStateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            if (typeof message.state !== "boolean")
                return "state: boolean expected";
        if (message.brightness != null && message.hasOwnProperty("brightness"))
            if (typeof message.brightness !== "number")
                return "brightness: number expected";
        if (message.color_mode != null && message.hasOwnProperty("color_mode"))
            switch (message.color_mode) {
            default:
                return "color_mode: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 7:
            case 11:
            case 19:
            case 35:
            case 39:
            case 47:
            case 51:
                break;
            }
        if (message.color_brightness != null && message.hasOwnProperty("color_brightness"))
            if (typeof message.color_brightness !== "number")
                return "color_brightness: number expected";
        if (message.red != null && message.hasOwnProperty("red"))
            if (typeof message.red !== "number")
                return "red: number expected";
        if (message.green != null && message.hasOwnProperty("green"))
            if (typeof message.green !== "number")
                return "green: number expected";
        if (message.blue != null && message.hasOwnProperty("blue"))
            if (typeof message.blue !== "number")
                return "blue: number expected";
        if (message.white != null && message.hasOwnProperty("white"))
            if (typeof message.white !== "number")
                return "white: number expected";
        if (message.color_temperature != null && message.hasOwnProperty("color_temperature"))
            if (typeof message.color_temperature !== "number")
                return "color_temperature: number expected";
        if (message.cold_white != null && message.hasOwnProperty("cold_white"))
            if (typeof message.cold_white !== "number")
                return "cold_white: number expected";
        if (message.warm_white != null && message.hasOwnProperty("warm_white"))
            if (typeof message.warm_white !== "number")
                return "warm_white: number expected";
        if (message.effect != null && message.hasOwnProperty("effect"))
            if (!$util.isString(message.effect))
                return "effect: string expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a LightStateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof LightStateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {LightStateResponse} LightStateResponse
     */
    LightStateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.LightStateResponse)
            return object;
        var message = new $root.LightStateResponse();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.state != null)
            message.state = Boolean(object.state);
        if (object.brightness != null)
            message.brightness = Number(object.brightness);
        switch (object.color_mode) {
        default:
            if (typeof object.color_mode === "number") {
                message.color_mode = object.color_mode;
                break;
            }
            break;
        case "COLOR_MODE_UNKNOWN":
        case 0:
            message.color_mode = 0;
            break;
        case "COLOR_MODE_ON_OFF":
        case 1:
            message.color_mode = 1;
            break;
        case "COLOR_MODE_LEGACY_BRIGHTNESS":
        case 2:
            message.color_mode = 2;
            break;
        case "COLOR_MODE_BRIGHTNESS":
        case 3:
            message.color_mode = 3;
            break;
        case "COLOR_MODE_WHITE":
        case 7:
            message.color_mode = 7;
            break;
        case "COLOR_MODE_COLOR_TEMPERATURE":
        case 11:
            message.color_mode = 11;
            break;
        case "COLOR_MODE_COLD_WARM_WHITE":
        case 19:
            message.color_mode = 19;
            break;
        case "COLOR_MODE_RGB":
        case 35:
            message.color_mode = 35;
            break;
        case "COLOR_MODE_RGB_WHITE":
        case 39:
            message.color_mode = 39;
            break;
        case "COLOR_MODE_RGB_COLOR_TEMPERATURE":
        case 47:
            message.color_mode = 47;
            break;
        case "COLOR_MODE_RGB_COLD_WARM_WHITE":
        case 51:
            message.color_mode = 51;
            break;
        }
        if (object.color_brightness != null)
            message.color_brightness = Number(object.color_brightness);
        if (object.red != null)
            message.red = Number(object.red);
        if (object.green != null)
            message.green = Number(object.green);
        if (object.blue != null)
            message.blue = Number(object.blue);
        if (object.white != null)
            message.white = Number(object.white);
        if (object.color_temperature != null)
            message.color_temperature = Number(object.color_temperature);
        if (object.cold_white != null)
            message.cold_white = Number(object.cold_white);
        if (object.warm_white != null)
            message.warm_white = Number(object.warm_white);
        if (object.effect != null)
            message.effect = String(object.effect);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a LightStateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof LightStateResponse
     * @static
     * @param {LightStateResponse} message LightStateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    LightStateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.state = false;
            object.brightness = 0;
            object.red = 0;
            object.green = 0;
            object.blue = 0;
            object.white = 0;
            object.color_temperature = 0;
            object.effect = "";
            object.color_brightness = 0;
            object.color_mode = options.enums === String ? "COLOR_MODE_UNKNOWN" : 0;
            object.cold_white = 0;
            object.warm_white = 0;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = message.state;
        if (message.brightness != null && message.hasOwnProperty("brightness"))
            object.brightness = options.json && !isFinite(message.brightness) ? String(message.brightness) : message.brightness;
        if (message.red != null && message.hasOwnProperty("red"))
            object.red = options.json && !isFinite(message.red) ? String(message.red) : message.red;
        if (message.green != null && message.hasOwnProperty("green"))
            object.green = options.json && !isFinite(message.green) ? String(message.green) : message.green;
        if (message.blue != null && message.hasOwnProperty("blue"))
            object.blue = options.json && !isFinite(message.blue) ? String(message.blue) : message.blue;
        if (message.white != null && message.hasOwnProperty("white"))
            object.white = options.json && !isFinite(message.white) ? String(message.white) : message.white;
        if (message.color_temperature != null && message.hasOwnProperty("color_temperature"))
            object.color_temperature = options.json && !isFinite(message.color_temperature) ? String(message.color_temperature) : message.color_temperature;
        if (message.effect != null && message.hasOwnProperty("effect"))
            object.effect = message.effect;
        if (message.color_brightness != null && message.hasOwnProperty("color_brightness"))
            object.color_brightness = options.json && !isFinite(message.color_brightness) ? String(message.color_brightness) : message.color_brightness;
        if (message.color_mode != null && message.hasOwnProperty("color_mode"))
            object.color_mode = options.enums === String ? $root.ColorMode[message.color_mode] === undefined ? message.color_mode : $root.ColorMode[message.color_mode] : message.color_mode;
        if (message.cold_white != null && message.hasOwnProperty("cold_white"))
            object.cold_white = options.json && !isFinite(message.cold_white) ? String(message.cold_white) : message.cold_white;
        if (message.warm_white != null && message.hasOwnProperty("warm_white"))
            object.warm_white = options.json && !isFinite(message.warm_white) ? String(message.warm_white) : message.warm_white;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this LightStateResponse to JSON.
     * @function toJSON
     * @memberof LightStateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    LightStateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for LightStateResponse
     * @function getTypeUrl
     * @memberof LightStateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    LightStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/LightStateResponse";
    };

    return LightStateResponse;
})();

$root.LightCommandRequest = (function() {

    /**
     * Properties of a LightCommandRequest.
     * @exports ILightCommandRequest
     * @interface ILightCommandRequest
     * @property {number|null} [key] LightCommandRequest key
     * @property {boolean|null} [has_state] LightCommandRequest has_state
     * @property {boolean|null} [state] LightCommandRequest state
     * @property {boolean|null} [has_brightness] LightCommandRequest has_brightness
     * @property {number|null} [brightness] LightCommandRequest brightness
     * @property {boolean|null} [has_color_mode] LightCommandRequest has_color_mode
     * @property {ColorMode|null} [color_mode] LightCommandRequest color_mode
     * @property {boolean|null} [has_color_brightness] LightCommandRequest has_color_brightness
     * @property {number|null} [color_brightness] LightCommandRequest color_brightness
     * @property {boolean|null} [has_rgb] LightCommandRequest has_rgb
     * @property {number|null} [red] LightCommandRequest red
     * @property {number|null} [green] LightCommandRequest green
     * @property {number|null} [blue] LightCommandRequest blue
     * @property {boolean|null} [has_white] LightCommandRequest has_white
     * @property {number|null} [white] LightCommandRequest white
     * @property {boolean|null} [has_color_temperature] LightCommandRequest has_color_temperature
     * @property {number|null} [color_temperature] LightCommandRequest color_temperature
     * @property {boolean|null} [has_cold_white] LightCommandRequest has_cold_white
     * @property {number|null} [cold_white] LightCommandRequest cold_white
     * @property {boolean|null} [has_warm_white] LightCommandRequest has_warm_white
     * @property {number|null} [warm_white] LightCommandRequest warm_white
     * @property {boolean|null} [has_transition_length] LightCommandRequest has_transition_length
     * @property {number|null} [transition_length] LightCommandRequest transition_length
     * @property {boolean|null} [has_flash_length] LightCommandRequest has_flash_length
     * @property {number|null} [flash_length] LightCommandRequest flash_length
     * @property {boolean|null} [has_effect] LightCommandRequest has_effect
     * @property {string|null} [effect] LightCommandRequest effect
     * @property {number|null} [device_id] LightCommandRequest device_id
     */

    /**
     * Constructs a new LightCommandRequest.
     * @exports LightCommandRequest
     * @classdesc Represents a LightCommandRequest.
     * @implements ILightCommandRequest
     * @constructor
     * @param {ILightCommandRequest=} [properties] Properties to set
     */
    function LightCommandRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * LightCommandRequest key.
     * @member {number} key
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.key = 0;

    /**
     * LightCommandRequest has_state.
     * @member {boolean} has_state
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.has_state = false;

    /**
     * LightCommandRequest state.
     * @member {boolean} state
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.state = false;

    /**
     * LightCommandRequest has_brightness.
     * @member {boolean} has_brightness
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.has_brightness = false;

    /**
     * LightCommandRequest brightness.
     * @member {number} brightness
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.brightness = 0;

    /**
     * LightCommandRequest has_color_mode.
     * @member {boolean} has_color_mode
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.has_color_mode = false;

    /**
     * LightCommandRequest color_mode.
     * @member {ColorMode} color_mode
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.color_mode = 0;

    /**
     * LightCommandRequest has_color_brightness.
     * @member {boolean} has_color_brightness
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.has_color_brightness = false;

    /**
     * LightCommandRequest color_brightness.
     * @member {number} color_brightness
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.color_brightness = 0;

    /**
     * LightCommandRequest has_rgb.
     * @member {boolean} has_rgb
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.has_rgb = false;

    /**
     * LightCommandRequest red.
     * @member {number} red
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.red = 0;

    /**
     * LightCommandRequest green.
     * @member {number} green
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.green = 0;

    /**
     * LightCommandRequest blue.
     * @member {number} blue
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.blue = 0;

    /**
     * LightCommandRequest has_white.
     * @member {boolean} has_white
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.has_white = false;

    /**
     * LightCommandRequest white.
     * @member {number} white
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.white = 0;

    /**
     * LightCommandRequest has_color_temperature.
     * @member {boolean} has_color_temperature
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.has_color_temperature = false;

    /**
     * LightCommandRequest color_temperature.
     * @member {number} color_temperature
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.color_temperature = 0;

    /**
     * LightCommandRequest has_cold_white.
     * @member {boolean} has_cold_white
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.has_cold_white = false;

    /**
     * LightCommandRequest cold_white.
     * @member {number} cold_white
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.cold_white = 0;

    /**
     * LightCommandRequest has_warm_white.
     * @member {boolean} has_warm_white
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.has_warm_white = false;

    /**
     * LightCommandRequest warm_white.
     * @member {number} warm_white
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.warm_white = 0;

    /**
     * LightCommandRequest has_transition_length.
     * @member {boolean} has_transition_length
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.has_transition_length = false;

    /**
     * LightCommandRequest transition_length.
     * @member {number} transition_length
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.transition_length = 0;

    /**
     * LightCommandRequest has_flash_length.
     * @member {boolean} has_flash_length
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.has_flash_length = false;

    /**
     * LightCommandRequest flash_length.
     * @member {number} flash_length
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.flash_length = 0;

    /**
     * LightCommandRequest has_effect.
     * @member {boolean} has_effect
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.has_effect = false;

    /**
     * LightCommandRequest effect.
     * @member {string} effect
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.effect = "";

    /**
     * LightCommandRequest device_id.
     * @member {number} device_id
     * @memberof LightCommandRequest
     * @instance
     */
    LightCommandRequest.prototype.device_id = 0;

    /**
     * Creates a new LightCommandRequest instance using the specified properties.
     * @function create
     * @memberof LightCommandRequest
     * @static
     * @param {ILightCommandRequest=} [properties] Properties to set
     * @returns {LightCommandRequest} LightCommandRequest instance
     */
    LightCommandRequest.create = function create(properties) {
        return new LightCommandRequest(properties);
    };

    /**
     * Encodes the specified LightCommandRequest message. Does not implicitly {@link LightCommandRequest.verify|verify} messages.
     * @function encode
     * @memberof LightCommandRequest
     * @static
     * @param {ILightCommandRequest} message LightCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    LightCommandRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.has_state != null && Object.hasOwnProperty.call(message, "has_state"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.has_state);
        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.state);
        if (message.has_brightness != null && Object.hasOwnProperty.call(message, "has_brightness"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.has_brightness);
        if (message.brightness != null && Object.hasOwnProperty.call(message, "brightness"))
            writer.uint32(/* id 5, wireType 5 =*/45).float(message.brightness);
        if (message.has_rgb != null && Object.hasOwnProperty.call(message, "has_rgb"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.has_rgb);
        if (message.red != null && Object.hasOwnProperty.call(message, "red"))
            writer.uint32(/* id 7, wireType 5 =*/61).float(message.red);
        if (message.green != null && Object.hasOwnProperty.call(message, "green"))
            writer.uint32(/* id 8, wireType 5 =*/69).float(message.green);
        if (message.blue != null && Object.hasOwnProperty.call(message, "blue"))
            writer.uint32(/* id 9, wireType 5 =*/77).float(message.blue);
        if (message.has_white != null && Object.hasOwnProperty.call(message, "has_white"))
            writer.uint32(/* id 10, wireType 0 =*/80).bool(message.has_white);
        if (message.white != null && Object.hasOwnProperty.call(message, "white"))
            writer.uint32(/* id 11, wireType 5 =*/93).float(message.white);
        if (message.has_color_temperature != null && Object.hasOwnProperty.call(message, "has_color_temperature"))
            writer.uint32(/* id 12, wireType 0 =*/96).bool(message.has_color_temperature);
        if (message.color_temperature != null && Object.hasOwnProperty.call(message, "color_temperature"))
            writer.uint32(/* id 13, wireType 5 =*/109).float(message.color_temperature);
        if (message.has_transition_length != null && Object.hasOwnProperty.call(message, "has_transition_length"))
            writer.uint32(/* id 14, wireType 0 =*/112).bool(message.has_transition_length);
        if (message.transition_length != null && Object.hasOwnProperty.call(message, "transition_length"))
            writer.uint32(/* id 15, wireType 0 =*/120).uint32(message.transition_length);
        if (message.has_flash_length != null && Object.hasOwnProperty.call(message, "has_flash_length"))
            writer.uint32(/* id 16, wireType 0 =*/128).bool(message.has_flash_length);
        if (message.flash_length != null && Object.hasOwnProperty.call(message, "flash_length"))
            writer.uint32(/* id 17, wireType 0 =*/136).uint32(message.flash_length);
        if (message.has_effect != null && Object.hasOwnProperty.call(message, "has_effect"))
            writer.uint32(/* id 18, wireType 0 =*/144).bool(message.has_effect);
        if (message.effect != null && Object.hasOwnProperty.call(message, "effect"))
            writer.uint32(/* id 19, wireType 2 =*/154).string(message.effect);
        if (message.has_color_brightness != null && Object.hasOwnProperty.call(message, "has_color_brightness"))
            writer.uint32(/* id 20, wireType 0 =*/160).bool(message.has_color_brightness);
        if (message.color_brightness != null && Object.hasOwnProperty.call(message, "color_brightness"))
            writer.uint32(/* id 21, wireType 5 =*/173).float(message.color_brightness);
        if (message.has_color_mode != null && Object.hasOwnProperty.call(message, "has_color_mode"))
            writer.uint32(/* id 22, wireType 0 =*/176).bool(message.has_color_mode);
        if (message.color_mode != null && Object.hasOwnProperty.call(message, "color_mode"))
            writer.uint32(/* id 23, wireType 0 =*/184).int32(message.color_mode);
        if (message.has_cold_white != null && Object.hasOwnProperty.call(message, "has_cold_white"))
            writer.uint32(/* id 24, wireType 0 =*/192).bool(message.has_cold_white);
        if (message.cold_white != null && Object.hasOwnProperty.call(message, "cold_white"))
            writer.uint32(/* id 25, wireType 5 =*/205).float(message.cold_white);
        if (message.has_warm_white != null && Object.hasOwnProperty.call(message, "has_warm_white"))
            writer.uint32(/* id 26, wireType 0 =*/208).bool(message.has_warm_white);
        if (message.warm_white != null && Object.hasOwnProperty.call(message, "warm_white"))
            writer.uint32(/* id 27, wireType 5 =*/221).float(message.warm_white);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 28, wireType 0 =*/224).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified LightCommandRequest message, length delimited. Does not implicitly {@link LightCommandRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof LightCommandRequest
     * @static
     * @param {ILightCommandRequest} message LightCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    LightCommandRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a LightCommandRequest message from the specified reader or buffer.
     * @function decode
     * @memberof LightCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {LightCommandRequest} LightCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    LightCommandRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LightCommandRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.has_state = reader.bool();
                    break;
                }
            case 3: {
                    message.state = reader.bool();
                    break;
                }
            case 4: {
                    message.has_brightness = reader.bool();
                    break;
                }
            case 5: {
                    message.brightness = reader.float();
                    break;
                }
            case 22: {
                    message.has_color_mode = reader.bool();
                    break;
                }
            case 23: {
                    message.color_mode = reader.int32();
                    break;
                }
            case 20: {
                    message.has_color_brightness = reader.bool();
                    break;
                }
            case 21: {
                    message.color_brightness = reader.float();
                    break;
                }
            case 6: {
                    message.has_rgb = reader.bool();
                    break;
                }
            case 7: {
                    message.red = reader.float();
                    break;
                }
            case 8: {
                    message.green = reader.float();
                    break;
                }
            case 9: {
                    message.blue = reader.float();
                    break;
                }
            case 10: {
                    message.has_white = reader.bool();
                    break;
                }
            case 11: {
                    message.white = reader.float();
                    break;
                }
            case 12: {
                    message.has_color_temperature = reader.bool();
                    break;
                }
            case 13: {
                    message.color_temperature = reader.float();
                    break;
                }
            case 24: {
                    message.has_cold_white = reader.bool();
                    break;
                }
            case 25: {
                    message.cold_white = reader.float();
                    break;
                }
            case 26: {
                    message.has_warm_white = reader.bool();
                    break;
                }
            case 27: {
                    message.warm_white = reader.float();
                    break;
                }
            case 14: {
                    message.has_transition_length = reader.bool();
                    break;
                }
            case 15: {
                    message.transition_length = reader.uint32();
                    break;
                }
            case 16: {
                    message.has_flash_length = reader.bool();
                    break;
                }
            case 17: {
                    message.flash_length = reader.uint32();
                    break;
                }
            case 18: {
                    message.has_effect = reader.bool();
                    break;
                }
            case 19: {
                    message.effect = reader.string();
                    break;
                }
            case 28: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a LightCommandRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof LightCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {LightCommandRequest} LightCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    LightCommandRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a LightCommandRequest message.
     * @function verify
     * @memberof LightCommandRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    LightCommandRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.has_state != null && message.hasOwnProperty("has_state"))
            if (typeof message.has_state !== "boolean")
                return "has_state: boolean expected";
        if (message.state != null && message.hasOwnProperty("state"))
            if (typeof message.state !== "boolean")
                return "state: boolean expected";
        if (message.has_brightness != null && message.hasOwnProperty("has_brightness"))
            if (typeof message.has_brightness !== "boolean")
                return "has_brightness: boolean expected";
        if (message.brightness != null && message.hasOwnProperty("brightness"))
            if (typeof message.brightness !== "number")
                return "brightness: number expected";
        if (message.has_color_mode != null && message.hasOwnProperty("has_color_mode"))
            if (typeof message.has_color_mode !== "boolean")
                return "has_color_mode: boolean expected";
        if (message.color_mode != null && message.hasOwnProperty("color_mode"))
            switch (message.color_mode) {
            default:
                return "color_mode: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 7:
            case 11:
            case 19:
            case 35:
            case 39:
            case 47:
            case 51:
                break;
            }
        if (message.has_color_brightness != null && message.hasOwnProperty("has_color_brightness"))
            if (typeof message.has_color_brightness !== "boolean")
                return "has_color_brightness: boolean expected";
        if (message.color_brightness != null && message.hasOwnProperty("color_brightness"))
            if (typeof message.color_brightness !== "number")
                return "color_brightness: number expected";
        if (message.has_rgb != null && message.hasOwnProperty("has_rgb"))
            if (typeof message.has_rgb !== "boolean")
                return "has_rgb: boolean expected";
        if (message.red != null && message.hasOwnProperty("red"))
            if (typeof message.red !== "number")
                return "red: number expected";
        if (message.green != null && message.hasOwnProperty("green"))
            if (typeof message.green !== "number")
                return "green: number expected";
        if (message.blue != null && message.hasOwnProperty("blue"))
            if (typeof message.blue !== "number")
                return "blue: number expected";
        if (message.has_white != null && message.hasOwnProperty("has_white"))
            if (typeof message.has_white !== "boolean")
                return "has_white: boolean expected";
        if (message.white != null && message.hasOwnProperty("white"))
            if (typeof message.white !== "number")
                return "white: number expected";
        if (message.has_color_temperature != null && message.hasOwnProperty("has_color_temperature"))
            if (typeof message.has_color_temperature !== "boolean")
                return "has_color_temperature: boolean expected";
        if (message.color_temperature != null && message.hasOwnProperty("color_temperature"))
            if (typeof message.color_temperature !== "number")
                return "color_temperature: number expected";
        if (message.has_cold_white != null && message.hasOwnProperty("has_cold_white"))
            if (typeof message.has_cold_white !== "boolean")
                return "has_cold_white: boolean expected";
        if (message.cold_white != null && message.hasOwnProperty("cold_white"))
            if (typeof message.cold_white !== "number")
                return "cold_white: number expected";
        if (message.has_warm_white != null && message.hasOwnProperty("has_warm_white"))
            if (typeof message.has_warm_white !== "boolean")
                return "has_warm_white: boolean expected";
        if (message.warm_white != null && message.hasOwnProperty("warm_white"))
            if (typeof message.warm_white !== "number")
                return "warm_white: number expected";
        if (message.has_transition_length != null && message.hasOwnProperty("has_transition_length"))
            if (typeof message.has_transition_length !== "boolean")
                return "has_transition_length: boolean expected";
        if (message.transition_length != null && message.hasOwnProperty("transition_length"))
            if (!$util.isInteger(message.transition_length))
                return "transition_length: integer expected";
        if (message.has_flash_length != null && message.hasOwnProperty("has_flash_length"))
            if (typeof message.has_flash_length !== "boolean")
                return "has_flash_length: boolean expected";
        if (message.flash_length != null && message.hasOwnProperty("flash_length"))
            if (!$util.isInteger(message.flash_length))
                return "flash_length: integer expected";
        if (message.has_effect != null && message.hasOwnProperty("has_effect"))
            if (typeof message.has_effect !== "boolean")
                return "has_effect: boolean expected";
        if (message.effect != null && message.hasOwnProperty("effect"))
            if (!$util.isString(message.effect))
                return "effect: string expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a LightCommandRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof LightCommandRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {LightCommandRequest} LightCommandRequest
     */
    LightCommandRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.LightCommandRequest)
            return object;
        var message = new $root.LightCommandRequest();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.has_state != null)
            message.has_state = Boolean(object.has_state);
        if (object.state != null)
            message.state = Boolean(object.state);
        if (object.has_brightness != null)
            message.has_brightness = Boolean(object.has_brightness);
        if (object.brightness != null)
            message.brightness = Number(object.brightness);
        if (object.has_color_mode != null)
            message.has_color_mode = Boolean(object.has_color_mode);
        switch (object.color_mode) {
        default:
            if (typeof object.color_mode === "number") {
                message.color_mode = object.color_mode;
                break;
            }
            break;
        case "COLOR_MODE_UNKNOWN":
        case 0:
            message.color_mode = 0;
            break;
        case "COLOR_MODE_ON_OFF":
        case 1:
            message.color_mode = 1;
            break;
        case "COLOR_MODE_LEGACY_BRIGHTNESS":
        case 2:
            message.color_mode = 2;
            break;
        case "COLOR_MODE_BRIGHTNESS":
        case 3:
            message.color_mode = 3;
            break;
        case "COLOR_MODE_WHITE":
        case 7:
            message.color_mode = 7;
            break;
        case "COLOR_MODE_COLOR_TEMPERATURE":
        case 11:
            message.color_mode = 11;
            break;
        case "COLOR_MODE_COLD_WARM_WHITE":
        case 19:
            message.color_mode = 19;
            break;
        case "COLOR_MODE_RGB":
        case 35:
            message.color_mode = 35;
            break;
        case "COLOR_MODE_RGB_WHITE":
        case 39:
            message.color_mode = 39;
            break;
        case "COLOR_MODE_RGB_COLOR_TEMPERATURE":
        case 47:
            message.color_mode = 47;
            break;
        case "COLOR_MODE_RGB_COLD_WARM_WHITE":
        case 51:
            message.color_mode = 51;
            break;
        }
        if (object.has_color_brightness != null)
            message.has_color_brightness = Boolean(object.has_color_brightness);
        if (object.color_brightness != null)
            message.color_brightness = Number(object.color_brightness);
        if (object.has_rgb != null)
            message.has_rgb = Boolean(object.has_rgb);
        if (object.red != null)
            message.red = Number(object.red);
        if (object.green != null)
            message.green = Number(object.green);
        if (object.blue != null)
            message.blue = Number(object.blue);
        if (object.has_white != null)
            message.has_white = Boolean(object.has_white);
        if (object.white != null)
            message.white = Number(object.white);
        if (object.has_color_temperature != null)
            message.has_color_temperature = Boolean(object.has_color_temperature);
        if (object.color_temperature != null)
            message.color_temperature = Number(object.color_temperature);
        if (object.has_cold_white != null)
            message.has_cold_white = Boolean(object.has_cold_white);
        if (object.cold_white != null)
            message.cold_white = Number(object.cold_white);
        if (object.has_warm_white != null)
            message.has_warm_white = Boolean(object.has_warm_white);
        if (object.warm_white != null)
            message.warm_white = Number(object.warm_white);
        if (object.has_transition_length != null)
            message.has_transition_length = Boolean(object.has_transition_length);
        if (object.transition_length != null)
            message.transition_length = object.transition_length >>> 0;
        if (object.has_flash_length != null)
            message.has_flash_length = Boolean(object.has_flash_length);
        if (object.flash_length != null)
            message.flash_length = object.flash_length >>> 0;
        if (object.has_effect != null)
            message.has_effect = Boolean(object.has_effect);
        if (object.effect != null)
            message.effect = String(object.effect);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a LightCommandRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof LightCommandRequest
     * @static
     * @param {LightCommandRequest} message LightCommandRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    LightCommandRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.has_state = false;
            object.state = false;
            object.has_brightness = false;
            object.brightness = 0;
            object.has_rgb = false;
            object.red = 0;
            object.green = 0;
            object.blue = 0;
            object.has_white = false;
            object.white = 0;
            object.has_color_temperature = false;
            object.color_temperature = 0;
            object.has_transition_length = false;
            object.transition_length = 0;
            object.has_flash_length = false;
            object.flash_length = 0;
            object.has_effect = false;
            object.effect = "";
            object.has_color_brightness = false;
            object.color_brightness = 0;
            object.has_color_mode = false;
            object.color_mode = options.enums === String ? "COLOR_MODE_UNKNOWN" : 0;
            object.has_cold_white = false;
            object.cold_white = 0;
            object.has_warm_white = false;
            object.warm_white = 0;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.has_state != null && message.hasOwnProperty("has_state"))
            object.has_state = message.has_state;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = message.state;
        if (message.has_brightness != null && message.hasOwnProperty("has_brightness"))
            object.has_brightness = message.has_brightness;
        if (message.brightness != null && message.hasOwnProperty("brightness"))
            object.brightness = options.json && !isFinite(message.brightness) ? String(message.brightness) : message.brightness;
        if (message.has_rgb != null && message.hasOwnProperty("has_rgb"))
            object.has_rgb = message.has_rgb;
        if (message.red != null && message.hasOwnProperty("red"))
            object.red = options.json && !isFinite(message.red) ? String(message.red) : message.red;
        if (message.green != null && message.hasOwnProperty("green"))
            object.green = options.json && !isFinite(message.green) ? String(message.green) : message.green;
        if (message.blue != null && message.hasOwnProperty("blue"))
            object.blue = options.json && !isFinite(message.blue) ? String(message.blue) : message.blue;
        if (message.has_white != null && message.hasOwnProperty("has_white"))
            object.has_white = message.has_white;
        if (message.white != null && message.hasOwnProperty("white"))
            object.white = options.json && !isFinite(message.white) ? String(message.white) : message.white;
        if (message.has_color_temperature != null && message.hasOwnProperty("has_color_temperature"))
            object.has_color_temperature = message.has_color_temperature;
        if (message.color_temperature != null && message.hasOwnProperty("color_temperature"))
            object.color_temperature = options.json && !isFinite(message.color_temperature) ? String(message.color_temperature) : message.color_temperature;
        if (message.has_transition_length != null && message.hasOwnProperty("has_transition_length"))
            object.has_transition_length = message.has_transition_length;
        if (message.transition_length != null && message.hasOwnProperty("transition_length"))
            object.transition_length = message.transition_length;
        if (message.has_flash_length != null && message.hasOwnProperty("has_flash_length"))
            object.has_flash_length = message.has_flash_length;
        if (message.flash_length != null && message.hasOwnProperty("flash_length"))
            object.flash_length = message.flash_length;
        if (message.has_effect != null && message.hasOwnProperty("has_effect"))
            object.has_effect = message.has_effect;
        if (message.effect != null && message.hasOwnProperty("effect"))
            object.effect = message.effect;
        if (message.has_color_brightness != null && message.hasOwnProperty("has_color_brightness"))
            object.has_color_brightness = message.has_color_brightness;
        if (message.color_brightness != null && message.hasOwnProperty("color_brightness"))
            object.color_brightness = options.json && !isFinite(message.color_brightness) ? String(message.color_brightness) : message.color_brightness;
        if (message.has_color_mode != null && message.hasOwnProperty("has_color_mode"))
            object.has_color_mode = message.has_color_mode;
        if (message.color_mode != null && message.hasOwnProperty("color_mode"))
            object.color_mode = options.enums === String ? $root.ColorMode[message.color_mode] === undefined ? message.color_mode : $root.ColorMode[message.color_mode] : message.color_mode;
        if (message.has_cold_white != null && message.hasOwnProperty("has_cold_white"))
            object.has_cold_white = message.has_cold_white;
        if (message.cold_white != null && message.hasOwnProperty("cold_white"))
            object.cold_white = options.json && !isFinite(message.cold_white) ? String(message.cold_white) : message.cold_white;
        if (message.has_warm_white != null && message.hasOwnProperty("has_warm_white"))
            object.has_warm_white = message.has_warm_white;
        if (message.warm_white != null && message.hasOwnProperty("warm_white"))
            object.warm_white = options.json && !isFinite(message.warm_white) ? String(message.warm_white) : message.warm_white;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this LightCommandRequest to JSON.
     * @function toJSON
     * @memberof LightCommandRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    LightCommandRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for LightCommandRequest
     * @function getTypeUrl
     * @memberof LightCommandRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    LightCommandRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/LightCommandRequest";
    };

    return LightCommandRequest;
})();

/**
 * SensorStateClass enum.
 * @exports SensorStateClass
 * @enum {number}
 * @property {number} STATE_CLASS_NONE=0 STATE_CLASS_NONE value
 * @property {number} STATE_CLASS_MEASUREMENT=1 STATE_CLASS_MEASUREMENT value
 * @property {number} STATE_CLASS_TOTAL_INCREASING=2 STATE_CLASS_TOTAL_INCREASING value
 * @property {number} STATE_CLASS_TOTAL=3 STATE_CLASS_TOTAL value
 */
$root.SensorStateClass = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "STATE_CLASS_NONE"] = 0;
    values[valuesById[1] = "STATE_CLASS_MEASUREMENT"] = 1;
    values[valuesById[2] = "STATE_CLASS_TOTAL_INCREASING"] = 2;
    values[valuesById[3] = "STATE_CLASS_TOTAL"] = 3;
    return values;
})();

/**
 * SensorLastResetType enum.
 * @exports SensorLastResetType
 * @enum {number}
 * @property {number} LAST_RESET_NONE=0 LAST_RESET_NONE value
 * @property {number} LAST_RESET_NEVER=1 LAST_RESET_NEVER value
 * @property {number} LAST_RESET_AUTO=2 LAST_RESET_AUTO value
 */
$root.SensorLastResetType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "LAST_RESET_NONE"] = 0;
    values[valuesById[1] = "LAST_RESET_NEVER"] = 1;
    values[valuesById[2] = "LAST_RESET_AUTO"] = 2;
    return values;
})();

$root.ListEntitiesSensorResponse = (function() {

    /**
     * Properties of a ListEntitiesSensorResponse.
     * @exports IListEntitiesSensorResponse
     * @interface IListEntitiesSensorResponse
     * @property {string|null} [object_id] ListEntitiesSensorResponse object_id
     * @property {number|null} [key] ListEntitiesSensorResponse key
     * @property {string|null} [name] ListEntitiesSensorResponse name
     * @property {string|null} [icon] ListEntitiesSensorResponse icon
     * @property {string|null} [unit_of_measurement] ListEntitiesSensorResponse unit_of_measurement
     * @property {number|null} [accuracy_decimals] ListEntitiesSensorResponse accuracy_decimals
     * @property {boolean|null} [force_update] ListEntitiesSensorResponse force_update
     * @property {string|null} [device_class] ListEntitiesSensorResponse device_class
     * @property {SensorStateClass|null} [state_class] ListEntitiesSensorResponse state_class
     * @property {SensorLastResetType|null} [legacy_last_reset_type] ListEntitiesSensorResponse legacy_last_reset_type
     * @property {boolean|null} [disabled_by_default] ListEntitiesSensorResponse disabled_by_default
     * @property {EntityCategory|null} [entity_category] ListEntitiesSensorResponse entity_category
     * @property {number|null} [device_id] ListEntitiesSensorResponse device_id
     */

    /**
     * Constructs a new ListEntitiesSensorResponse.
     * @exports ListEntitiesSensorResponse
     * @classdesc Represents a ListEntitiesSensorResponse.
     * @implements IListEntitiesSensorResponse
     * @constructor
     * @param {IListEntitiesSensorResponse=} [properties] Properties to set
     */
    function ListEntitiesSensorResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesSensorResponse object_id.
     * @member {string} object_id
     * @memberof ListEntitiesSensorResponse
     * @instance
     */
    ListEntitiesSensorResponse.prototype.object_id = "";

    /**
     * ListEntitiesSensorResponse key.
     * @member {number} key
     * @memberof ListEntitiesSensorResponse
     * @instance
     */
    ListEntitiesSensorResponse.prototype.key = 0;

    /**
     * ListEntitiesSensorResponse name.
     * @member {string} name
     * @memberof ListEntitiesSensorResponse
     * @instance
     */
    ListEntitiesSensorResponse.prototype.name = "";

    /**
     * ListEntitiesSensorResponse icon.
     * @member {string} icon
     * @memberof ListEntitiesSensorResponse
     * @instance
     */
    ListEntitiesSensorResponse.prototype.icon = "";

    /**
     * ListEntitiesSensorResponse unit_of_measurement.
     * @member {string} unit_of_measurement
     * @memberof ListEntitiesSensorResponse
     * @instance
     */
    ListEntitiesSensorResponse.prototype.unit_of_measurement = "";

    /**
     * ListEntitiesSensorResponse accuracy_decimals.
     * @member {number} accuracy_decimals
     * @memberof ListEntitiesSensorResponse
     * @instance
     */
    ListEntitiesSensorResponse.prototype.accuracy_decimals = 0;

    /**
     * ListEntitiesSensorResponse force_update.
     * @member {boolean} force_update
     * @memberof ListEntitiesSensorResponse
     * @instance
     */
    ListEntitiesSensorResponse.prototype.force_update = false;

    /**
     * ListEntitiesSensorResponse device_class.
     * @member {string} device_class
     * @memberof ListEntitiesSensorResponse
     * @instance
     */
    ListEntitiesSensorResponse.prototype.device_class = "";

    /**
     * ListEntitiesSensorResponse state_class.
     * @member {SensorStateClass} state_class
     * @memberof ListEntitiesSensorResponse
     * @instance
     */
    ListEntitiesSensorResponse.prototype.state_class = 0;

    /**
     * ListEntitiesSensorResponse legacy_last_reset_type.
     * @member {SensorLastResetType} legacy_last_reset_type
     * @memberof ListEntitiesSensorResponse
     * @instance
     */
    ListEntitiesSensorResponse.prototype.legacy_last_reset_type = 0;

    /**
     * ListEntitiesSensorResponse disabled_by_default.
     * @member {boolean} disabled_by_default
     * @memberof ListEntitiesSensorResponse
     * @instance
     */
    ListEntitiesSensorResponse.prototype.disabled_by_default = false;

    /**
     * ListEntitiesSensorResponse entity_category.
     * @member {EntityCategory} entity_category
     * @memberof ListEntitiesSensorResponse
     * @instance
     */
    ListEntitiesSensorResponse.prototype.entity_category = 0;

    /**
     * ListEntitiesSensorResponse device_id.
     * @member {number} device_id
     * @memberof ListEntitiesSensorResponse
     * @instance
     */
    ListEntitiesSensorResponse.prototype.device_id = 0;

    /**
     * Creates a new ListEntitiesSensorResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesSensorResponse
     * @static
     * @param {IListEntitiesSensorResponse=} [properties] Properties to set
     * @returns {ListEntitiesSensorResponse} ListEntitiesSensorResponse instance
     */
    ListEntitiesSensorResponse.create = function create(properties) {
        return new ListEntitiesSensorResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesSensorResponse message. Does not implicitly {@link ListEntitiesSensorResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesSensorResponse
     * @static
     * @param {IListEntitiesSensorResponse} message ListEntitiesSensorResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesSensorResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.object_id != null && Object.hasOwnProperty.call(message, "object_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.object_id);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.icon);
        if (message.unit_of_measurement != null && Object.hasOwnProperty.call(message, "unit_of_measurement"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.unit_of_measurement);
        if (message.accuracy_decimals != null && Object.hasOwnProperty.call(message, "accuracy_decimals"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.accuracy_decimals);
        if (message.force_update != null && Object.hasOwnProperty.call(message, "force_update"))
            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.force_update);
        if (message.device_class != null && Object.hasOwnProperty.call(message, "device_class"))
            writer.uint32(/* id 9, wireType 2 =*/74).string(message.device_class);
        if (message.state_class != null && Object.hasOwnProperty.call(message, "state_class"))
            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.state_class);
        if (message.legacy_last_reset_type != null && Object.hasOwnProperty.call(message, "legacy_last_reset_type"))
            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.legacy_last_reset_type);
        if (message.disabled_by_default != null && Object.hasOwnProperty.call(message, "disabled_by_default"))
            writer.uint32(/* id 12, wireType 0 =*/96).bool(message.disabled_by_default);
        if (message.entity_category != null && Object.hasOwnProperty.call(message, "entity_category"))
            writer.uint32(/* id 13, wireType 0 =*/104).int32(message.entity_category);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesSensorResponse message, length delimited. Does not implicitly {@link ListEntitiesSensorResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesSensorResponse
     * @static
     * @param {IListEntitiesSensorResponse} message ListEntitiesSensorResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesSensorResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesSensorResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesSensorResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesSensorResponse} ListEntitiesSensorResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesSensorResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesSensorResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.object_id = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 5: {
                    message.icon = reader.string();
                    break;
                }
            case 6: {
                    message.unit_of_measurement = reader.string();
                    break;
                }
            case 7: {
                    message.accuracy_decimals = reader.int32();
                    break;
                }
            case 8: {
                    message.force_update = reader.bool();
                    break;
                }
            case 9: {
                    message.device_class = reader.string();
                    break;
                }
            case 10: {
                    message.state_class = reader.int32();
                    break;
                }
            case 11: {
                    message.legacy_last_reset_type = reader.int32();
                    break;
                }
            case 12: {
                    message.disabled_by_default = reader.bool();
                    break;
                }
            case 13: {
                    message.entity_category = reader.int32();
                    break;
                }
            case 14: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesSensorResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesSensorResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesSensorResponse} ListEntitiesSensorResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesSensorResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesSensorResponse message.
     * @function verify
     * @memberof ListEntitiesSensorResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesSensorResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            if (!$util.isString(message.object_id))
                return "object_id: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isString(message.icon))
                return "icon: string expected";
        if (message.unit_of_measurement != null && message.hasOwnProperty("unit_of_measurement"))
            if (!$util.isString(message.unit_of_measurement))
                return "unit_of_measurement: string expected";
        if (message.accuracy_decimals != null && message.hasOwnProperty("accuracy_decimals"))
            if (!$util.isInteger(message.accuracy_decimals))
                return "accuracy_decimals: integer expected";
        if (message.force_update != null && message.hasOwnProperty("force_update"))
            if (typeof message.force_update !== "boolean")
                return "force_update: boolean expected";
        if (message.device_class != null && message.hasOwnProperty("device_class"))
            if (!$util.isString(message.device_class))
                return "device_class: string expected";
        if (message.state_class != null && message.hasOwnProperty("state_class"))
            switch (message.state_class) {
            default:
                return "state_class: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        if (message.legacy_last_reset_type != null && message.hasOwnProperty("legacy_last_reset_type"))
            switch (message.legacy_last_reset_type) {
            default:
                return "legacy_last_reset_type: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            if (typeof message.disabled_by_default !== "boolean")
                return "disabled_by_default: boolean expected";
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            switch (message.entity_category) {
            default:
                return "entity_category: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ListEntitiesSensorResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesSensorResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesSensorResponse} ListEntitiesSensorResponse
     */
    ListEntitiesSensorResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesSensorResponse)
            return object;
        var message = new $root.ListEntitiesSensorResponse();
        if (object.object_id != null)
            message.object_id = String(object.object_id);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.icon != null)
            message.icon = String(object.icon);
        if (object.unit_of_measurement != null)
            message.unit_of_measurement = String(object.unit_of_measurement);
        if (object.accuracy_decimals != null)
            message.accuracy_decimals = object.accuracy_decimals | 0;
        if (object.force_update != null)
            message.force_update = Boolean(object.force_update);
        if (object.device_class != null)
            message.device_class = String(object.device_class);
        switch (object.state_class) {
        default:
            if (typeof object.state_class === "number") {
                message.state_class = object.state_class;
                break;
            }
            break;
        case "STATE_CLASS_NONE":
        case 0:
            message.state_class = 0;
            break;
        case "STATE_CLASS_MEASUREMENT":
        case 1:
            message.state_class = 1;
            break;
        case "STATE_CLASS_TOTAL_INCREASING":
        case 2:
            message.state_class = 2;
            break;
        case "STATE_CLASS_TOTAL":
        case 3:
            message.state_class = 3;
            break;
        }
        switch (object.legacy_last_reset_type) {
        default:
            if (typeof object.legacy_last_reset_type === "number") {
                message.legacy_last_reset_type = object.legacy_last_reset_type;
                break;
            }
            break;
        case "LAST_RESET_NONE":
        case 0:
            message.legacy_last_reset_type = 0;
            break;
        case "LAST_RESET_NEVER":
        case 1:
            message.legacy_last_reset_type = 1;
            break;
        case "LAST_RESET_AUTO":
        case 2:
            message.legacy_last_reset_type = 2;
            break;
        }
        if (object.disabled_by_default != null)
            message.disabled_by_default = Boolean(object.disabled_by_default);
        switch (object.entity_category) {
        default:
            if (typeof object.entity_category === "number") {
                message.entity_category = object.entity_category;
                break;
            }
            break;
        case "ENTITY_CATEGORY_NONE":
        case 0:
            message.entity_category = 0;
            break;
        case "ENTITY_CATEGORY_CONFIG":
        case 1:
            message.entity_category = 1;
            break;
        case "ENTITY_CATEGORY_DIAGNOSTIC":
        case 2:
            message.entity_category = 2;
            break;
        }
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesSensorResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesSensorResponse
     * @static
     * @param {ListEntitiesSensorResponse} message ListEntitiesSensorResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesSensorResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.object_id = "";
            object.key = 0;
            object.name = "";
            object.icon = "";
            object.unit_of_measurement = "";
            object.accuracy_decimals = 0;
            object.force_update = false;
            object.device_class = "";
            object.state_class = options.enums === String ? "STATE_CLASS_NONE" : 0;
            object.legacy_last_reset_type = options.enums === String ? "LAST_RESET_NONE" : 0;
            object.disabled_by_default = false;
            object.entity_category = options.enums === String ? "ENTITY_CATEGORY_NONE" : 0;
            object.device_id = 0;
        }
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            object.object_id = message.object_id;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.unit_of_measurement != null && message.hasOwnProperty("unit_of_measurement"))
            object.unit_of_measurement = message.unit_of_measurement;
        if (message.accuracy_decimals != null && message.hasOwnProperty("accuracy_decimals"))
            object.accuracy_decimals = message.accuracy_decimals;
        if (message.force_update != null && message.hasOwnProperty("force_update"))
            object.force_update = message.force_update;
        if (message.device_class != null && message.hasOwnProperty("device_class"))
            object.device_class = message.device_class;
        if (message.state_class != null && message.hasOwnProperty("state_class"))
            object.state_class = options.enums === String ? $root.SensorStateClass[message.state_class] === undefined ? message.state_class : $root.SensorStateClass[message.state_class] : message.state_class;
        if (message.legacy_last_reset_type != null && message.hasOwnProperty("legacy_last_reset_type"))
            object.legacy_last_reset_type = options.enums === String ? $root.SensorLastResetType[message.legacy_last_reset_type] === undefined ? message.legacy_last_reset_type : $root.SensorLastResetType[message.legacy_last_reset_type] : message.legacy_last_reset_type;
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            object.disabled_by_default = message.disabled_by_default;
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            object.entity_category = options.enums === String ? $root.EntityCategory[message.entity_category] === undefined ? message.entity_category : $root.EntityCategory[message.entity_category] : message.entity_category;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ListEntitiesSensorResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesSensorResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesSensorResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesSensorResponse
     * @function getTypeUrl
     * @memberof ListEntitiesSensorResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesSensorResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesSensorResponse";
    };

    return ListEntitiesSensorResponse;
})();

$root.SensorStateResponse = (function() {

    /**
     * Properties of a SensorStateResponse.
     * @exports ISensorStateResponse
     * @interface ISensorStateResponse
     * @property {number|null} [key] SensorStateResponse key
     * @property {number|null} [state] SensorStateResponse state
     * @property {boolean|null} [missing_state] SensorStateResponse missing_state
     * @property {number|null} [device_id] SensorStateResponse device_id
     */

    /**
     * Constructs a new SensorStateResponse.
     * @exports SensorStateResponse
     * @classdesc Represents a SensorStateResponse.
     * @implements ISensorStateResponse
     * @constructor
     * @param {ISensorStateResponse=} [properties] Properties to set
     */
    function SensorStateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SensorStateResponse key.
     * @member {number} key
     * @memberof SensorStateResponse
     * @instance
     */
    SensorStateResponse.prototype.key = 0;

    /**
     * SensorStateResponse state.
     * @member {number} state
     * @memberof SensorStateResponse
     * @instance
     */
    SensorStateResponse.prototype.state = 0;

    /**
     * SensorStateResponse missing_state.
     * @member {boolean} missing_state
     * @memberof SensorStateResponse
     * @instance
     */
    SensorStateResponse.prototype.missing_state = false;

    /**
     * SensorStateResponse device_id.
     * @member {number} device_id
     * @memberof SensorStateResponse
     * @instance
     */
    SensorStateResponse.prototype.device_id = 0;

    /**
     * Creates a new SensorStateResponse instance using the specified properties.
     * @function create
     * @memberof SensorStateResponse
     * @static
     * @param {ISensorStateResponse=} [properties] Properties to set
     * @returns {SensorStateResponse} SensorStateResponse instance
     */
    SensorStateResponse.create = function create(properties) {
        return new SensorStateResponse(properties);
    };

    /**
     * Encodes the specified SensorStateResponse message. Does not implicitly {@link SensorStateResponse.verify|verify} messages.
     * @function encode
     * @memberof SensorStateResponse
     * @static
     * @param {ISensorStateResponse} message SensorStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SensorStateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
            writer.uint32(/* id 2, wireType 5 =*/21).float(message.state);
        if (message.missing_state != null && Object.hasOwnProperty.call(message, "missing_state"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.missing_state);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified SensorStateResponse message, length delimited. Does not implicitly {@link SensorStateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SensorStateResponse
     * @static
     * @param {ISensorStateResponse} message SensorStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SensorStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SensorStateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof SensorStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SensorStateResponse} SensorStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SensorStateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SensorStateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.state = reader.float();
                    break;
                }
            case 3: {
                    message.missing_state = reader.bool();
                    break;
                }
            case 4: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SensorStateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SensorStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SensorStateResponse} SensorStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SensorStateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SensorStateResponse message.
     * @function verify
     * @memberof SensorStateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SensorStateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            if (typeof message.state !== "number")
                return "state: number expected";
        if (message.missing_state != null && message.hasOwnProperty("missing_state"))
            if (typeof message.missing_state !== "boolean")
                return "missing_state: boolean expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a SensorStateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SensorStateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SensorStateResponse} SensorStateResponse
     */
    SensorStateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.SensorStateResponse)
            return object;
        var message = new $root.SensorStateResponse();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.state != null)
            message.state = Number(object.state);
        if (object.missing_state != null)
            message.missing_state = Boolean(object.missing_state);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a SensorStateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SensorStateResponse
     * @static
     * @param {SensorStateResponse} message SensorStateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SensorStateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.state = 0;
            object.missing_state = false;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = options.json && !isFinite(message.state) ? String(message.state) : message.state;
        if (message.missing_state != null && message.hasOwnProperty("missing_state"))
            object.missing_state = message.missing_state;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this SensorStateResponse to JSON.
     * @function toJSON
     * @memberof SensorStateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SensorStateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SensorStateResponse
     * @function getTypeUrl
     * @memberof SensorStateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SensorStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SensorStateResponse";
    };

    return SensorStateResponse;
})();

$root.ListEntitiesSwitchResponse = (function() {

    /**
     * Properties of a ListEntitiesSwitchResponse.
     * @exports IListEntitiesSwitchResponse
     * @interface IListEntitiesSwitchResponse
     * @property {string|null} [object_id] ListEntitiesSwitchResponse object_id
     * @property {number|null} [key] ListEntitiesSwitchResponse key
     * @property {string|null} [name] ListEntitiesSwitchResponse name
     * @property {string|null} [icon] ListEntitiesSwitchResponse icon
     * @property {boolean|null} [assumed_state] ListEntitiesSwitchResponse assumed_state
     * @property {boolean|null} [disabled_by_default] ListEntitiesSwitchResponse disabled_by_default
     * @property {EntityCategory|null} [entity_category] ListEntitiesSwitchResponse entity_category
     * @property {string|null} [device_class] ListEntitiesSwitchResponse device_class
     * @property {number|null} [device_id] ListEntitiesSwitchResponse device_id
     */

    /**
     * Constructs a new ListEntitiesSwitchResponse.
     * @exports ListEntitiesSwitchResponse
     * @classdesc Represents a ListEntitiesSwitchResponse.
     * @implements IListEntitiesSwitchResponse
     * @constructor
     * @param {IListEntitiesSwitchResponse=} [properties] Properties to set
     */
    function ListEntitiesSwitchResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesSwitchResponse object_id.
     * @member {string} object_id
     * @memberof ListEntitiesSwitchResponse
     * @instance
     */
    ListEntitiesSwitchResponse.prototype.object_id = "";

    /**
     * ListEntitiesSwitchResponse key.
     * @member {number} key
     * @memberof ListEntitiesSwitchResponse
     * @instance
     */
    ListEntitiesSwitchResponse.prototype.key = 0;

    /**
     * ListEntitiesSwitchResponse name.
     * @member {string} name
     * @memberof ListEntitiesSwitchResponse
     * @instance
     */
    ListEntitiesSwitchResponse.prototype.name = "";

    /**
     * ListEntitiesSwitchResponse icon.
     * @member {string} icon
     * @memberof ListEntitiesSwitchResponse
     * @instance
     */
    ListEntitiesSwitchResponse.prototype.icon = "";

    /**
     * ListEntitiesSwitchResponse assumed_state.
     * @member {boolean} assumed_state
     * @memberof ListEntitiesSwitchResponse
     * @instance
     */
    ListEntitiesSwitchResponse.prototype.assumed_state = false;

    /**
     * ListEntitiesSwitchResponse disabled_by_default.
     * @member {boolean} disabled_by_default
     * @memberof ListEntitiesSwitchResponse
     * @instance
     */
    ListEntitiesSwitchResponse.prototype.disabled_by_default = false;

    /**
     * ListEntitiesSwitchResponse entity_category.
     * @member {EntityCategory} entity_category
     * @memberof ListEntitiesSwitchResponse
     * @instance
     */
    ListEntitiesSwitchResponse.prototype.entity_category = 0;

    /**
     * ListEntitiesSwitchResponse device_class.
     * @member {string} device_class
     * @memberof ListEntitiesSwitchResponse
     * @instance
     */
    ListEntitiesSwitchResponse.prototype.device_class = "";

    /**
     * ListEntitiesSwitchResponse device_id.
     * @member {number} device_id
     * @memberof ListEntitiesSwitchResponse
     * @instance
     */
    ListEntitiesSwitchResponse.prototype.device_id = 0;

    /**
     * Creates a new ListEntitiesSwitchResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesSwitchResponse
     * @static
     * @param {IListEntitiesSwitchResponse=} [properties] Properties to set
     * @returns {ListEntitiesSwitchResponse} ListEntitiesSwitchResponse instance
     */
    ListEntitiesSwitchResponse.create = function create(properties) {
        return new ListEntitiesSwitchResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesSwitchResponse message. Does not implicitly {@link ListEntitiesSwitchResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesSwitchResponse
     * @static
     * @param {IListEntitiesSwitchResponse} message ListEntitiesSwitchResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesSwitchResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.object_id != null && Object.hasOwnProperty.call(message, "object_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.object_id);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.icon);
        if (message.assumed_state != null && Object.hasOwnProperty.call(message, "assumed_state"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.assumed_state);
        if (message.disabled_by_default != null && Object.hasOwnProperty.call(message, "disabled_by_default"))
            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.disabled_by_default);
        if (message.entity_category != null && Object.hasOwnProperty.call(message, "entity_category"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.entity_category);
        if (message.device_class != null && Object.hasOwnProperty.call(message, "device_class"))
            writer.uint32(/* id 9, wireType 2 =*/74).string(message.device_class);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesSwitchResponse message, length delimited. Does not implicitly {@link ListEntitiesSwitchResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesSwitchResponse
     * @static
     * @param {IListEntitiesSwitchResponse} message ListEntitiesSwitchResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesSwitchResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesSwitchResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesSwitchResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesSwitchResponse} ListEntitiesSwitchResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesSwitchResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesSwitchResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.object_id = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 5: {
                    message.icon = reader.string();
                    break;
                }
            case 6: {
                    message.assumed_state = reader.bool();
                    break;
                }
            case 7: {
                    message.disabled_by_default = reader.bool();
                    break;
                }
            case 8: {
                    message.entity_category = reader.int32();
                    break;
                }
            case 9: {
                    message.device_class = reader.string();
                    break;
                }
            case 10: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesSwitchResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesSwitchResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesSwitchResponse} ListEntitiesSwitchResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesSwitchResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesSwitchResponse message.
     * @function verify
     * @memberof ListEntitiesSwitchResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesSwitchResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            if (!$util.isString(message.object_id))
                return "object_id: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isString(message.icon))
                return "icon: string expected";
        if (message.assumed_state != null && message.hasOwnProperty("assumed_state"))
            if (typeof message.assumed_state !== "boolean")
                return "assumed_state: boolean expected";
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            if (typeof message.disabled_by_default !== "boolean")
                return "disabled_by_default: boolean expected";
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            switch (message.entity_category) {
            default:
                return "entity_category: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.device_class != null && message.hasOwnProperty("device_class"))
            if (!$util.isString(message.device_class))
                return "device_class: string expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ListEntitiesSwitchResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesSwitchResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesSwitchResponse} ListEntitiesSwitchResponse
     */
    ListEntitiesSwitchResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesSwitchResponse)
            return object;
        var message = new $root.ListEntitiesSwitchResponse();
        if (object.object_id != null)
            message.object_id = String(object.object_id);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.icon != null)
            message.icon = String(object.icon);
        if (object.assumed_state != null)
            message.assumed_state = Boolean(object.assumed_state);
        if (object.disabled_by_default != null)
            message.disabled_by_default = Boolean(object.disabled_by_default);
        switch (object.entity_category) {
        default:
            if (typeof object.entity_category === "number") {
                message.entity_category = object.entity_category;
                break;
            }
            break;
        case "ENTITY_CATEGORY_NONE":
        case 0:
            message.entity_category = 0;
            break;
        case "ENTITY_CATEGORY_CONFIG":
        case 1:
            message.entity_category = 1;
            break;
        case "ENTITY_CATEGORY_DIAGNOSTIC":
        case 2:
            message.entity_category = 2;
            break;
        }
        if (object.device_class != null)
            message.device_class = String(object.device_class);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesSwitchResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesSwitchResponse
     * @static
     * @param {ListEntitiesSwitchResponse} message ListEntitiesSwitchResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesSwitchResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.object_id = "";
            object.key = 0;
            object.name = "";
            object.icon = "";
            object.assumed_state = false;
            object.disabled_by_default = false;
            object.entity_category = options.enums === String ? "ENTITY_CATEGORY_NONE" : 0;
            object.device_class = "";
            object.device_id = 0;
        }
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            object.object_id = message.object_id;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.assumed_state != null && message.hasOwnProperty("assumed_state"))
            object.assumed_state = message.assumed_state;
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            object.disabled_by_default = message.disabled_by_default;
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            object.entity_category = options.enums === String ? $root.EntityCategory[message.entity_category] === undefined ? message.entity_category : $root.EntityCategory[message.entity_category] : message.entity_category;
        if (message.device_class != null && message.hasOwnProperty("device_class"))
            object.device_class = message.device_class;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ListEntitiesSwitchResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesSwitchResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesSwitchResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesSwitchResponse
     * @function getTypeUrl
     * @memberof ListEntitiesSwitchResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesSwitchResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesSwitchResponse";
    };

    return ListEntitiesSwitchResponse;
})();

$root.SwitchStateResponse = (function() {

    /**
     * Properties of a SwitchStateResponse.
     * @exports ISwitchStateResponse
     * @interface ISwitchStateResponse
     * @property {number|null} [key] SwitchStateResponse key
     * @property {boolean|null} [state] SwitchStateResponse state
     * @property {number|null} [device_id] SwitchStateResponse device_id
     */

    /**
     * Constructs a new SwitchStateResponse.
     * @exports SwitchStateResponse
     * @classdesc Represents a SwitchStateResponse.
     * @implements ISwitchStateResponse
     * @constructor
     * @param {ISwitchStateResponse=} [properties] Properties to set
     */
    function SwitchStateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SwitchStateResponse key.
     * @member {number} key
     * @memberof SwitchStateResponse
     * @instance
     */
    SwitchStateResponse.prototype.key = 0;

    /**
     * SwitchStateResponse state.
     * @member {boolean} state
     * @memberof SwitchStateResponse
     * @instance
     */
    SwitchStateResponse.prototype.state = false;

    /**
     * SwitchStateResponse device_id.
     * @member {number} device_id
     * @memberof SwitchStateResponse
     * @instance
     */
    SwitchStateResponse.prototype.device_id = 0;

    /**
     * Creates a new SwitchStateResponse instance using the specified properties.
     * @function create
     * @memberof SwitchStateResponse
     * @static
     * @param {ISwitchStateResponse=} [properties] Properties to set
     * @returns {SwitchStateResponse} SwitchStateResponse instance
     */
    SwitchStateResponse.create = function create(properties) {
        return new SwitchStateResponse(properties);
    };

    /**
     * Encodes the specified SwitchStateResponse message. Does not implicitly {@link SwitchStateResponse.verify|verify} messages.
     * @function encode
     * @memberof SwitchStateResponse
     * @static
     * @param {ISwitchStateResponse} message SwitchStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SwitchStateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.state);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified SwitchStateResponse message, length delimited. Does not implicitly {@link SwitchStateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SwitchStateResponse
     * @static
     * @param {ISwitchStateResponse} message SwitchStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SwitchStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SwitchStateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof SwitchStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SwitchStateResponse} SwitchStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SwitchStateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SwitchStateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.state = reader.bool();
                    break;
                }
            case 3: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SwitchStateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SwitchStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SwitchStateResponse} SwitchStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SwitchStateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SwitchStateResponse message.
     * @function verify
     * @memberof SwitchStateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SwitchStateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            if (typeof message.state !== "boolean")
                return "state: boolean expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a SwitchStateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SwitchStateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SwitchStateResponse} SwitchStateResponse
     */
    SwitchStateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.SwitchStateResponse)
            return object;
        var message = new $root.SwitchStateResponse();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.state != null)
            message.state = Boolean(object.state);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a SwitchStateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SwitchStateResponse
     * @static
     * @param {SwitchStateResponse} message SwitchStateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SwitchStateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.state = false;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = message.state;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this SwitchStateResponse to JSON.
     * @function toJSON
     * @memberof SwitchStateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SwitchStateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SwitchStateResponse
     * @function getTypeUrl
     * @memberof SwitchStateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SwitchStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SwitchStateResponse";
    };

    return SwitchStateResponse;
})();

$root.SwitchCommandRequest = (function() {

    /**
     * Properties of a SwitchCommandRequest.
     * @exports ISwitchCommandRequest
     * @interface ISwitchCommandRequest
     * @property {number|null} [key] SwitchCommandRequest key
     * @property {boolean|null} [state] SwitchCommandRequest state
     * @property {number|null} [device_id] SwitchCommandRequest device_id
     */

    /**
     * Constructs a new SwitchCommandRequest.
     * @exports SwitchCommandRequest
     * @classdesc Represents a SwitchCommandRequest.
     * @implements ISwitchCommandRequest
     * @constructor
     * @param {ISwitchCommandRequest=} [properties] Properties to set
     */
    function SwitchCommandRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SwitchCommandRequest key.
     * @member {number} key
     * @memberof SwitchCommandRequest
     * @instance
     */
    SwitchCommandRequest.prototype.key = 0;

    /**
     * SwitchCommandRequest state.
     * @member {boolean} state
     * @memberof SwitchCommandRequest
     * @instance
     */
    SwitchCommandRequest.prototype.state = false;

    /**
     * SwitchCommandRequest device_id.
     * @member {number} device_id
     * @memberof SwitchCommandRequest
     * @instance
     */
    SwitchCommandRequest.prototype.device_id = 0;

    /**
     * Creates a new SwitchCommandRequest instance using the specified properties.
     * @function create
     * @memberof SwitchCommandRequest
     * @static
     * @param {ISwitchCommandRequest=} [properties] Properties to set
     * @returns {SwitchCommandRequest} SwitchCommandRequest instance
     */
    SwitchCommandRequest.create = function create(properties) {
        return new SwitchCommandRequest(properties);
    };

    /**
     * Encodes the specified SwitchCommandRequest message. Does not implicitly {@link SwitchCommandRequest.verify|verify} messages.
     * @function encode
     * @memberof SwitchCommandRequest
     * @static
     * @param {ISwitchCommandRequest} message SwitchCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SwitchCommandRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.state);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified SwitchCommandRequest message, length delimited. Does not implicitly {@link SwitchCommandRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SwitchCommandRequest
     * @static
     * @param {ISwitchCommandRequest} message SwitchCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SwitchCommandRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SwitchCommandRequest message from the specified reader or buffer.
     * @function decode
     * @memberof SwitchCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SwitchCommandRequest} SwitchCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SwitchCommandRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SwitchCommandRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.state = reader.bool();
                    break;
                }
            case 3: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SwitchCommandRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SwitchCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SwitchCommandRequest} SwitchCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SwitchCommandRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SwitchCommandRequest message.
     * @function verify
     * @memberof SwitchCommandRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SwitchCommandRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            if (typeof message.state !== "boolean")
                return "state: boolean expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a SwitchCommandRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SwitchCommandRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SwitchCommandRequest} SwitchCommandRequest
     */
    SwitchCommandRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.SwitchCommandRequest)
            return object;
        var message = new $root.SwitchCommandRequest();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.state != null)
            message.state = Boolean(object.state);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a SwitchCommandRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SwitchCommandRequest
     * @static
     * @param {SwitchCommandRequest} message SwitchCommandRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SwitchCommandRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.state = false;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = message.state;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this SwitchCommandRequest to JSON.
     * @function toJSON
     * @memberof SwitchCommandRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SwitchCommandRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SwitchCommandRequest
     * @function getTypeUrl
     * @memberof SwitchCommandRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SwitchCommandRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SwitchCommandRequest";
    };

    return SwitchCommandRequest;
})();

$root.ListEntitiesTextSensorResponse = (function() {

    /**
     * Properties of a ListEntitiesTextSensorResponse.
     * @exports IListEntitiesTextSensorResponse
     * @interface IListEntitiesTextSensorResponse
     * @property {string|null} [object_id] ListEntitiesTextSensorResponse object_id
     * @property {number|null} [key] ListEntitiesTextSensorResponse key
     * @property {string|null} [name] ListEntitiesTextSensorResponse name
     * @property {string|null} [icon] ListEntitiesTextSensorResponse icon
     * @property {boolean|null} [disabled_by_default] ListEntitiesTextSensorResponse disabled_by_default
     * @property {EntityCategory|null} [entity_category] ListEntitiesTextSensorResponse entity_category
     * @property {string|null} [device_class] ListEntitiesTextSensorResponse device_class
     * @property {number|null} [device_id] ListEntitiesTextSensorResponse device_id
     */

    /**
     * Constructs a new ListEntitiesTextSensorResponse.
     * @exports ListEntitiesTextSensorResponse
     * @classdesc Represents a ListEntitiesTextSensorResponse.
     * @implements IListEntitiesTextSensorResponse
     * @constructor
     * @param {IListEntitiesTextSensorResponse=} [properties] Properties to set
     */
    function ListEntitiesTextSensorResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesTextSensorResponse object_id.
     * @member {string} object_id
     * @memberof ListEntitiesTextSensorResponse
     * @instance
     */
    ListEntitiesTextSensorResponse.prototype.object_id = "";

    /**
     * ListEntitiesTextSensorResponse key.
     * @member {number} key
     * @memberof ListEntitiesTextSensorResponse
     * @instance
     */
    ListEntitiesTextSensorResponse.prototype.key = 0;

    /**
     * ListEntitiesTextSensorResponse name.
     * @member {string} name
     * @memberof ListEntitiesTextSensorResponse
     * @instance
     */
    ListEntitiesTextSensorResponse.prototype.name = "";

    /**
     * ListEntitiesTextSensorResponse icon.
     * @member {string} icon
     * @memberof ListEntitiesTextSensorResponse
     * @instance
     */
    ListEntitiesTextSensorResponse.prototype.icon = "";

    /**
     * ListEntitiesTextSensorResponse disabled_by_default.
     * @member {boolean} disabled_by_default
     * @memberof ListEntitiesTextSensorResponse
     * @instance
     */
    ListEntitiesTextSensorResponse.prototype.disabled_by_default = false;

    /**
     * ListEntitiesTextSensorResponse entity_category.
     * @member {EntityCategory} entity_category
     * @memberof ListEntitiesTextSensorResponse
     * @instance
     */
    ListEntitiesTextSensorResponse.prototype.entity_category = 0;

    /**
     * ListEntitiesTextSensorResponse device_class.
     * @member {string} device_class
     * @memberof ListEntitiesTextSensorResponse
     * @instance
     */
    ListEntitiesTextSensorResponse.prototype.device_class = "";

    /**
     * ListEntitiesTextSensorResponse device_id.
     * @member {number} device_id
     * @memberof ListEntitiesTextSensorResponse
     * @instance
     */
    ListEntitiesTextSensorResponse.prototype.device_id = 0;

    /**
     * Creates a new ListEntitiesTextSensorResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesTextSensorResponse
     * @static
     * @param {IListEntitiesTextSensorResponse=} [properties] Properties to set
     * @returns {ListEntitiesTextSensorResponse} ListEntitiesTextSensorResponse instance
     */
    ListEntitiesTextSensorResponse.create = function create(properties) {
        return new ListEntitiesTextSensorResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesTextSensorResponse message. Does not implicitly {@link ListEntitiesTextSensorResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesTextSensorResponse
     * @static
     * @param {IListEntitiesTextSensorResponse} message ListEntitiesTextSensorResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesTextSensorResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.object_id != null && Object.hasOwnProperty.call(message, "object_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.object_id);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.icon);
        if (message.disabled_by_default != null && Object.hasOwnProperty.call(message, "disabled_by_default"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.disabled_by_default);
        if (message.entity_category != null && Object.hasOwnProperty.call(message, "entity_category"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.entity_category);
        if (message.device_class != null && Object.hasOwnProperty.call(message, "device_class"))
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.device_class);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesTextSensorResponse message, length delimited. Does not implicitly {@link ListEntitiesTextSensorResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesTextSensorResponse
     * @static
     * @param {IListEntitiesTextSensorResponse} message ListEntitiesTextSensorResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesTextSensorResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesTextSensorResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesTextSensorResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesTextSensorResponse} ListEntitiesTextSensorResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesTextSensorResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesTextSensorResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.object_id = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 5: {
                    message.icon = reader.string();
                    break;
                }
            case 6: {
                    message.disabled_by_default = reader.bool();
                    break;
                }
            case 7: {
                    message.entity_category = reader.int32();
                    break;
                }
            case 8: {
                    message.device_class = reader.string();
                    break;
                }
            case 9: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesTextSensorResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesTextSensorResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesTextSensorResponse} ListEntitiesTextSensorResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesTextSensorResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesTextSensorResponse message.
     * @function verify
     * @memberof ListEntitiesTextSensorResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesTextSensorResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            if (!$util.isString(message.object_id))
                return "object_id: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isString(message.icon))
                return "icon: string expected";
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            if (typeof message.disabled_by_default !== "boolean")
                return "disabled_by_default: boolean expected";
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            switch (message.entity_category) {
            default:
                return "entity_category: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.device_class != null && message.hasOwnProperty("device_class"))
            if (!$util.isString(message.device_class))
                return "device_class: string expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ListEntitiesTextSensorResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesTextSensorResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesTextSensorResponse} ListEntitiesTextSensorResponse
     */
    ListEntitiesTextSensorResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesTextSensorResponse)
            return object;
        var message = new $root.ListEntitiesTextSensorResponse();
        if (object.object_id != null)
            message.object_id = String(object.object_id);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.icon != null)
            message.icon = String(object.icon);
        if (object.disabled_by_default != null)
            message.disabled_by_default = Boolean(object.disabled_by_default);
        switch (object.entity_category) {
        default:
            if (typeof object.entity_category === "number") {
                message.entity_category = object.entity_category;
                break;
            }
            break;
        case "ENTITY_CATEGORY_NONE":
        case 0:
            message.entity_category = 0;
            break;
        case "ENTITY_CATEGORY_CONFIG":
        case 1:
            message.entity_category = 1;
            break;
        case "ENTITY_CATEGORY_DIAGNOSTIC":
        case 2:
            message.entity_category = 2;
            break;
        }
        if (object.device_class != null)
            message.device_class = String(object.device_class);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesTextSensorResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesTextSensorResponse
     * @static
     * @param {ListEntitiesTextSensorResponse} message ListEntitiesTextSensorResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesTextSensorResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.object_id = "";
            object.key = 0;
            object.name = "";
            object.icon = "";
            object.disabled_by_default = false;
            object.entity_category = options.enums === String ? "ENTITY_CATEGORY_NONE" : 0;
            object.device_class = "";
            object.device_id = 0;
        }
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            object.object_id = message.object_id;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            object.disabled_by_default = message.disabled_by_default;
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            object.entity_category = options.enums === String ? $root.EntityCategory[message.entity_category] === undefined ? message.entity_category : $root.EntityCategory[message.entity_category] : message.entity_category;
        if (message.device_class != null && message.hasOwnProperty("device_class"))
            object.device_class = message.device_class;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ListEntitiesTextSensorResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesTextSensorResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesTextSensorResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesTextSensorResponse
     * @function getTypeUrl
     * @memberof ListEntitiesTextSensorResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesTextSensorResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesTextSensorResponse";
    };

    return ListEntitiesTextSensorResponse;
})();

$root.TextSensorStateResponse = (function() {

    /**
     * Properties of a TextSensorStateResponse.
     * @exports ITextSensorStateResponse
     * @interface ITextSensorStateResponse
     * @property {number|null} [key] TextSensorStateResponse key
     * @property {string|null} [state] TextSensorStateResponse state
     * @property {boolean|null} [missing_state] TextSensorStateResponse missing_state
     * @property {number|null} [device_id] TextSensorStateResponse device_id
     */

    /**
     * Constructs a new TextSensorStateResponse.
     * @exports TextSensorStateResponse
     * @classdesc Represents a TextSensorStateResponse.
     * @implements ITextSensorStateResponse
     * @constructor
     * @param {ITextSensorStateResponse=} [properties] Properties to set
     */
    function TextSensorStateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * TextSensorStateResponse key.
     * @member {number} key
     * @memberof TextSensorStateResponse
     * @instance
     */
    TextSensorStateResponse.prototype.key = 0;

    /**
     * TextSensorStateResponse state.
     * @member {string} state
     * @memberof TextSensorStateResponse
     * @instance
     */
    TextSensorStateResponse.prototype.state = "";

    /**
     * TextSensorStateResponse missing_state.
     * @member {boolean} missing_state
     * @memberof TextSensorStateResponse
     * @instance
     */
    TextSensorStateResponse.prototype.missing_state = false;

    /**
     * TextSensorStateResponse device_id.
     * @member {number} device_id
     * @memberof TextSensorStateResponse
     * @instance
     */
    TextSensorStateResponse.prototype.device_id = 0;

    /**
     * Creates a new TextSensorStateResponse instance using the specified properties.
     * @function create
     * @memberof TextSensorStateResponse
     * @static
     * @param {ITextSensorStateResponse=} [properties] Properties to set
     * @returns {TextSensorStateResponse} TextSensorStateResponse instance
     */
    TextSensorStateResponse.create = function create(properties) {
        return new TextSensorStateResponse(properties);
    };

    /**
     * Encodes the specified TextSensorStateResponse message. Does not implicitly {@link TextSensorStateResponse.verify|verify} messages.
     * @function encode
     * @memberof TextSensorStateResponse
     * @static
     * @param {ITextSensorStateResponse} message TextSensorStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    TextSensorStateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.state);
        if (message.missing_state != null && Object.hasOwnProperty.call(message, "missing_state"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.missing_state);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified TextSensorStateResponse message, length delimited. Does not implicitly {@link TextSensorStateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof TextSensorStateResponse
     * @static
     * @param {ITextSensorStateResponse} message TextSensorStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    TextSensorStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a TextSensorStateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof TextSensorStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {TextSensorStateResponse} TextSensorStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    TextSensorStateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TextSensorStateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.state = reader.string();
                    break;
                }
            case 3: {
                    message.missing_state = reader.bool();
                    break;
                }
            case 4: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a TextSensorStateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof TextSensorStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {TextSensorStateResponse} TextSensorStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    TextSensorStateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a TextSensorStateResponse message.
     * @function verify
     * @memberof TextSensorStateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    TextSensorStateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            if (!$util.isString(message.state))
                return "state: string expected";
        if (message.missing_state != null && message.hasOwnProperty("missing_state"))
            if (typeof message.missing_state !== "boolean")
                return "missing_state: boolean expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a TextSensorStateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof TextSensorStateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {TextSensorStateResponse} TextSensorStateResponse
     */
    TextSensorStateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.TextSensorStateResponse)
            return object;
        var message = new $root.TextSensorStateResponse();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.state != null)
            message.state = String(object.state);
        if (object.missing_state != null)
            message.missing_state = Boolean(object.missing_state);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a TextSensorStateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof TextSensorStateResponse
     * @static
     * @param {TextSensorStateResponse} message TextSensorStateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    TextSensorStateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.state = "";
            object.missing_state = false;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = message.state;
        if (message.missing_state != null && message.hasOwnProperty("missing_state"))
            object.missing_state = message.missing_state;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this TextSensorStateResponse to JSON.
     * @function toJSON
     * @memberof TextSensorStateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    TextSensorStateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for TextSensorStateResponse
     * @function getTypeUrl
     * @memberof TextSensorStateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    TextSensorStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/TextSensorStateResponse";
    };

    return TextSensorStateResponse;
})();

/**
 * LogLevel enum.
 * @exports LogLevel
 * @enum {number}
 * @property {number} LOG_LEVEL_NONE=0 LOG_LEVEL_NONE value
 * @property {number} LOG_LEVEL_ERROR=1 LOG_LEVEL_ERROR value
 * @property {number} LOG_LEVEL_WARN=2 LOG_LEVEL_WARN value
 * @property {number} LOG_LEVEL_INFO=3 LOG_LEVEL_INFO value
 * @property {number} LOG_LEVEL_CONFIG=4 LOG_LEVEL_CONFIG value
 * @property {number} LOG_LEVEL_DEBUG=5 LOG_LEVEL_DEBUG value
 * @property {number} LOG_LEVEL_VERBOSE=6 LOG_LEVEL_VERBOSE value
 * @property {number} LOG_LEVEL_VERY_VERBOSE=7 LOG_LEVEL_VERY_VERBOSE value
 */
$root.LogLevel = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "LOG_LEVEL_NONE"] = 0;
    values[valuesById[1] = "LOG_LEVEL_ERROR"] = 1;
    values[valuesById[2] = "LOG_LEVEL_WARN"] = 2;
    values[valuesById[3] = "LOG_LEVEL_INFO"] = 3;
    values[valuesById[4] = "LOG_LEVEL_CONFIG"] = 4;
    values[valuesById[5] = "LOG_LEVEL_DEBUG"] = 5;
    values[valuesById[6] = "LOG_LEVEL_VERBOSE"] = 6;
    values[valuesById[7] = "LOG_LEVEL_VERY_VERBOSE"] = 7;
    return values;
})();

$root.SubscribeLogsRequest = (function() {

    /**
     * Properties of a SubscribeLogsRequest.
     * @exports ISubscribeLogsRequest
     * @interface ISubscribeLogsRequest
     * @property {LogLevel|null} [level] SubscribeLogsRequest level
     * @property {boolean|null} [dump_config] SubscribeLogsRequest dump_config
     */

    /**
     * Constructs a new SubscribeLogsRequest.
     * @exports SubscribeLogsRequest
     * @classdesc Represents a SubscribeLogsRequest.
     * @implements ISubscribeLogsRequest
     * @constructor
     * @param {ISubscribeLogsRequest=} [properties] Properties to set
     */
    function SubscribeLogsRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SubscribeLogsRequest level.
     * @member {LogLevel} level
     * @memberof SubscribeLogsRequest
     * @instance
     */
    SubscribeLogsRequest.prototype.level = 0;

    /**
     * SubscribeLogsRequest dump_config.
     * @member {boolean} dump_config
     * @memberof SubscribeLogsRequest
     * @instance
     */
    SubscribeLogsRequest.prototype.dump_config = false;

    /**
     * Creates a new SubscribeLogsRequest instance using the specified properties.
     * @function create
     * @memberof SubscribeLogsRequest
     * @static
     * @param {ISubscribeLogsRequest=} [properties] Properties to set
     * @returns {SubscribeLogsRequest} SubscribeLogsRequest instance
     */
    SubscribeLogsRequest.create = function create(properties) {
        return new SubscribeLogsRequest(properties);
    };

    /**
     * Encodes the specified SubscribeLogsRequest message. Does not implicitly {@link SubscribeLogsRequest.verify|verify} messages.
     * @function encode
     * @memberof SubscribeLogsRequest
     * @static
     * @param {ISubscribeLogsRequest} message SubscribeLogsRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SubscribeLogsRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.level != null && Object.hasOwnProperty.call(message, "level"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.level);
        if (message.dump_config != null && Object.hasOwnProperty.call(message, "dump_config"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.dump_config);
        return writer;
    };

    /**
     * Encodes the specified SubscribeLogsRequest message, length delimited. Does not implicitly {@link SubscribeLogsRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SubscribeLogsRequest
     * @static
     * @param {ISubscribeLogsRequest} message SubscribeLogsRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SubscribeLogsRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SubscribeLogsRequest message from the specified reader or buffer.
     * @function decode
     * @memberof SubscribeLogsRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SubscribeLogsRequest} SubscribeLogsRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SubscribeLogsRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SubscribeLogsRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.level = reader.int32();
                    break;
                }
            case 2: {
                    message.dump_config = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SubscribeLogsRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SubscribeLogsRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SubscribeLogsRequest} SubscribeLogsRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SubscribeLogsRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SubscribeLogsRequest message.
     * @function verify
     * @memberof SubscribeLogsRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SubscribeLogsRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.level != null && message.hasOwnProperty("level"))
            switch (message.level) {
            default:
                return "level: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                break;
            }
        if (message.dump_config != null && message.hasOwnProperty("dump_config"))
            if (typeof message.dump_config !== "boolean")
                return "dump_config: boolean expected";
        return null;
    };

    /**
     * Creates a SubscribeLogsRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SubscribeLogsRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SubscribeLogsRequest} SubscribeLogsRequest
     */
    SubscribeLogsRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.SubscribeLogsRequest)
            return object;
        var message = new $root.SubscribeLogsRequest();
        switch (object.level) {
        default:
            if (typeof object.level === "number") {
                message.level = object.level;
                break;
            }
            break;
        case "LOG_LEVEL_NONE":
        case 0:
            message.level = 0;
            break;
        case "LOG_LEVEL_ERROR":
        case 1:
            message.level = 1;
            break;
        case "LOG_LEVEL_WARN":
        case 2:
            message.level = 2;
            break;
        case "LOG_LEVEL_INFO":
        case 3:
            message.level = 3;
            break;
        case "LOG_LEVEL_CONFIG":
        case 4:
            message.level = 4;
            break;
        case "LOG_LEVEL_DEBUG":
        case 5:
            message.level = 5;
            break;
        case "LOG_LEVEL_VERBOSE":
        case 6:
            message.level = 6;
            break;
        case "LOG_LEVEL_VERY_VERBOSE":
        case 7:
            message.level = 7;
            break;
        }
        if (object.dump_config != null)
            message.dump_config = Boolean(object.dump_config);
        return message;
    };

    /**
     * Creates a plain object from a SubscribeLogsRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SubscribeLogsRequest
     * @static
     * @param {SubscribeLogsRequest} message SubscribeLogsRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SubscribeLogsRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.level = options.enums === String ? "LOG_LEVEL_NONE" : 0;
            object.dump_config = false;
        }
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = options.enums === String ? $root.LogLevel[message.level] === undefined ? message.level : $root.LogLevel[message.level] : message.level;
        if (message.dump_config != null && message.hasOwnProperty("dump_config"))
            object.dump_config = message.dump_config;
        return object;
    };

    /**
     * Converts this SubscribeLogsRequest to JSON.
     * @function toJSON
     * @memberof SubscribeLogsRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SubscribeLogsRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SubscribeLogsRequest
     * @function getTypeUrl
     * @memberof SubscribeLogsRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SubscribeLogsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SubscribeLogsRequest";
    };

    return SubscribeLogsRequest;
})();

$root.SubscribeLogsResponse = (function() {

    /**
     * Properties of a SubscribeLogsResponse.
     * @exports ISubscribeLogsResponse
     * @interface ISubscribeLogsResponse
     * @property {LogLevel|null} [level] SubscribeLogsResponse level
     * @property {Uint8Array|null} [message] SubscribeLogsResponse message
     */

    /**
     * Constructs a new SubscribeLogsResponse.
     * @exports SubscribeLogsResponse
     * @classdesc Represents a SubscribeLogsResponse.
     * @implements ISubscribeLogsResponse
     * @constructor
     * @param {ISubscribeLogsResponse=} [properties] Properties to set
     */
    function SubscribeLogsResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SubscribeLogsResponse level.
     * @member {LogLevel} level
     * @memberof SubscribeLogsResponse
     * @instance
     */
    SubscribeLogsResponse.prototype.level = 0;

    /**
     * SubscribeLogsResponse message.
     * @member {Uint8Array} message
     * @memberof SubscribeLogsResponse
     * @instance
     */
    SubscribeLogsResponse.prototype.message = $util.newBuffer([]);

    /**
     * Creates a new SubscribeLogsResponse instance using the specified properties.
     * @function create
     * @memberof SubscribeLogsResponse
     * @static
     * @param {ISubscribeLogsResponse=} [properties] Properties to set
     * @returns {SubscribeLogsResponse} SubscribeLogsResponse instance
     */
    SubscribeLogsResponse.create = function create(properties) {
        return new SubscribeLogsResponse(properties);
    };

    /**
     * Encodes the specified SubscribeLogsResponse message. Does not implicitly {@link SubscribeLogsResponse.verify|verify} messages.
     * @function encode
     * @memberof SubscribeLogsResponse
     * @static
     * @param {ISubscribeLogsResponse} message SubscribeLogsResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SubscribeLogsResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.level != null && Object.hasOwnProperty.call(message, "level"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.level);
        if (message.message != null && Object.hasOwnProperty.call(message, "message"))
            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.message);
        return writer;
    };

    /**
     * Encodes the specified SubscribeLogsResponse message, length delimited. Does not implicitly {@link SubscribeLogsResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SubscribeLogsResponse
     * @static
     * @param {ISubscribeLogsResponse} message SubscribeLogsResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SubscribeLogsResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SubscribeLogsResponse message from the specified reader or buffer.
     * @function decode
     * @memberof SubscribeLogsResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SubscribeLogsResponse} SubscribeLogsResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SubscribeLogsResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SubscribeLogsResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.level = reader.int32();
                    break;
                }
            case 3: {
                    message.message = reader.bytes();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SubscribeLogsResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SubscribeLogsResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SubscribeLogsResponse} SubscribeLogsResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SubscribeLogsResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SubscribeLogsResponse message.
     * @function verify
     * @memberof SubscribeLogsResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SubscribeLogsResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.level != null && message.hasOwnProperty("level"))
            switch (message.level) {
            default:
                return "level: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                break;
            }
        if (message.message != null && message.hasOwnProperty("message"))
            if (!(message.message && typeof message.message.length === "number" || $util.isString(message.message)))
                return "message: buffer expected";
        return null;
    };

    /**
     * Creates a SubscribeLogsResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SubscribeLogsResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SubscribeLogsResponse} SubscribeLogsResponse
     */
    SubscribeLogsResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.SubscribeLogsResponse)
            return object;
        var message = new $root.SubscribeLogsResponse();
        switch (object.level) {
        default:
            if (typeof object.level === "number") {
                message.level = object.level;
                break;
            }
            break;
        case "LOG_LEVEL_NONE":
        case 0:
            message.level = 0;
            break;
        case "LOG_LEVEL_ERROR":
        case 1:
            message.level = 1;
            break;
        case "LOG_LEVEL_WARN":
        case 2:
            message.level = 2;
            break;
        case "LOG_LEVEL_INFO":
        case 3:
            message.level = 3;
            break;
        case "LOG_LEVEL_CONFIG":
        case 4:
            message.level = 4;
            break;
        case "LOG_LEVEL_DEBUG":
        case 5:
            message.level = 5;
            break;
        case "LOG_LEVEL_VERBOSE":
        case 6:
            message.level = 6;
            break;
        case "LOG_LEVEL_VERY_VERBOSE":
        case 7:
            message.level = 7;
            break;
        }
        if (object.message != null)
            if (typeof object.message === "string")
                $util.base64.decode(object.message, message.message = $util.newBuffer($util.base64.length(object.message)), 0);
            else if (object.message.length >= 0)
                message.message = object.message;
        return message;
    };

    /**
     * Creates a plain object from a SubscribeLogsResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SubscribeLogsResponse
     * @static
     * @param {SubscribeLogsResponse} message SubscribeLogsResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SubscribeLogsResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.level = options.enums === String ? "LOG_LEVEL_NONE" : 0;
            if (options.bytes === String)
                object.message = "";
            else {
                object.message = [];
                if (options.bytes !== Array)
                    object.message = $util.newBuffer(object.message);
            }
        }
        if (message.level != null && message.hasOwnProperty("level"))
            object.level = options.enums === String ? $root.LogLevel[message.level] === undefined ? message.level : $root.LogLevel[message.level] : message.level;
        if (message.message != null && message.hasOwnProperty("message"))
            object.message = options.bytes === String ? $util.base64.encode(message.message, 0, message.message.length) : options.bytes === Array ? Array.prototype.slice.call(message.message) : message.message;
        return object;
    };

    /**
     * Converts this SubscribeLogsResponse to JSON.
     * @function toJSON
     * @memberof SubscribeLogsResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SubscribeLogsResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SubscribeLogsResponse
     * @function getTypeUrl
     * @memberof SubscribeLogsResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SubscribeLogsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SubscribeLogsResponse";
    };

    return SubscribeLogsResponse;
})();

$root.NoiseEncryptionSetKeyRequest = (function() {

    /**
     * Properties of a NoiseEncryptionSetKeyRequest.
     * @exports INoiseEncryptionSetKeyRequest
     * @interface INoiseEncryptionSetKeyRequest
     * @property {Uint8Array|null} [key] NoiseEncryptionSetKeyRequest key
     */

    /**
     * Constructs a new NoiseEncryptionSetKeyRequest.
     * @exports NoiseEncryptionSetKeyRequest
     * @classdesc Represents a NoiseEncryptionSetKeyRequest.
     * @implements INoiseEncryptionSetKeyRequest
     * @constructor
     * @param {INoiseEncryptionSetKeyRequest=} [properties] Properties to set
     */
    function NoiseEncryptionSetKeyRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * NoiseEncryptionSetKeyRequest key.
     * @member {Uint8Array} key
     * @memberof NoiseEncryptionSetKeyRequest
     * @instance
     */
    NoiseEncryptionSetKeyRequest.prototype.key = $util.newBuffer([]);

    /**
     * Creates a new NoiseEncryptionSetKeyRequest instance using the specified properties.
     * @function create
     * @memberof NoiseEncryptionSetKeyRequest
     * @static
     * @param {INoiseEncryptionSetKeyRequest=} [properties] Properties to set
     * @returns {NoiseEncryptionSetKeyRequest} NoiseEncryptionSetKeyRequest instance
     */
    NoiseEncryptionSetKeyRequest.create = function create(properties) {
        return new NoiseEncryptionSetKeyRequest(properties);
    };

    /**
     * Encodes the specified NoiseEncryptionSetKeyRequest message. Does not implicitly {@link NoiseEncryptionSetKeyRequest.verify|verify} messages.
     * @function encode
     * @memberof NoiseEncryptionSetKeyRequest
     * @static
     * @param {INoiseEncryptionSetKeyRequest} message NoiseEncryptionSetKeyRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    NoiseEncryptionSetKeyRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
        return writer;
    };

    /**
     * Encodes the specified NoiseEncryptionSetKeyRequest message, length delimited. Does not implicitly {@link NoiseEncryptionSetKeyRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof NoiseEncryptionSetKeyRequest
     * @static
     * @param {INoiseEncryptionSetKeyRequest} message NoiseEncryptionSetKeyRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    NoiseEncryptionSetKeyRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a NoiseEncryptionSetKeyRequest message from the specified reader or buffer.
     * @function decode
     * @memberof NoiseEncryptionSetKeyRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {NoiseEncryptionSetKeyRequest} NoiseEncryptionSetKeyRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    NoiseEncryptionSetKeyRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.NoiseEncryptionSetKeyRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.bytes();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a NoiseEncryptionSetKeyRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof NoiseEncryptionSetKeyRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {NoiseEncryptionSetKeyRequest} NoiseEncryptionSetKeyRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    NoiseEncryptionSetKeyRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a NoiseEncryptionSetKeyRequest message.
     * @function verify
     * @memberof NoiseEncryptionSetKeyRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    NoiseEncryptionSetKeyRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                return "key: buffer expected";
        return null;
    };

    /**
     * Creates a NoiseEncryptionSetKeyRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof NoiseEncryptionSetKeyRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {NoiseEncryptionSetKeyRequest} NoiseEncryptionSetKeyRequest
     */
    NoiseEncryptionSetKeyRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.NoiseEncryptionSetKeyRequest)
            return object;
        var message = new $root.NoiseEncryptionSetKeyRequest();
        if (object.key != null)
            if (typeof object.key === "string")
                $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
            else if (object.key.length >= 0)
                message.key = object.key;
        return message;
    };

    /**
     * Creates a plain object from a NoiseEncryptionSetKeyRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof NoiseEncryptionSetKeyRequest
     * @static
     * @param {NoiseEncryptionSetKeyRequest} message NoiseEncryptionSetKeyRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    NoiseEncryptionSetKeyRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            if (options.bytes === String)
                object.key = "";
            else {
                object.key = [];
                if (options.bytes !== Array)
                    object.key = $util.newBuffer(object.key);
            }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
        return object;
    };

    /**
     * Converts this NoiseEncryptionSetKeyRequest to JSON.
     * @function toJSON
     * @memberof NoiseEncryptionSetKeyRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    NoiseEncryptionSetKeyRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for NoiseEncryptionSetKeyRequest
     * @function getTypeUrl
     * @memberof NoiseEncryptionSetKeyRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    NoiseEncryptionSetKeyRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/NoiseEncryptionSetKeyRequest";
    };

    return NoiseEncryptionSetKeyRequest;
})();

$root.NoiseEncryptionSetKeyResponse = (function() {

    /**
     * Properties of a NoiseEncryptionSetKeyResponse.
     * @exports INoiseEncryptionSetKeyResponse
     * @interface INoiseEncryptionSetKeyResponse
     * @property {boolean|null} [success] NoiseEncryptionSetKeyResponse success
     */

    /**
     * Constructs a new NoiseEncryptionSetKeyResponse.
     * @exports NoiseEncryptionSetKeyResponse
     * @classdesc Represents a NoiseEncryptionSetKeyResponse.
     * @implements INoiseEncryptionSetKeyResponse
     * @constructor
     * @param {INoiseEncryptionSetKeyResponse=} [properties] Properties to set
     */
    function NoiseEncryptionSetKeyResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * NoiseEncryptionSetKeyResponse success.
     * @member {boolean} success
     * @memberof NoiseEncryptionSetKeyResponse
     * @instance
     */
    NoiseEncryptionSetKeyResponse.prototype.success = false;

    /**
     * Creates a new NoiseEncryptionSetKeyResponse instance using the specified properties.
     * @function create
     * @memberof NoiseEncryptionSetKeyResponse
     * @static
     * @param {INoiseEncryptionSetKeyResponse=} [properties] Properties to set
     * @returns {NoiseEncryptionSetKeyResponse} NoiseEncryptionSetKeyResponse instance
     */
    NoiseEncryptionSetKeyResponse.create = function create(properties) {
        return new NoiseEncryptionSetKeyResponse(properties);
    };

    /**
     * Encodes the specified NoiseEncryptionSetKeyResponse message. Does not implicitly {@link NoiseEncryptionSetKeyResponse.verify|verify} messages.
     * @function encode
     * @memberof NoiseEncryptionSetKeyResponse
     * @static
     * @param {INoiseEncryptionSetKeyResponse} message NoiseEncryptionSetKeyResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    NoiseEncryptionSetKeyResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.success != null && Object.hasOwnProperty.call(message, "success"))
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);
        return writer;
    };

    /**
     * Encodes the specified NoiseEncryptionSetKeyResponse message, length delimited. Does not implicitly {@link NoiseEncryptionSetKeyResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof NoiseEncryptionSetKeyResponse
     * @static
     * @param {INoiseEncryptionSetKeyResponse} message NoiseEncryptionSetKeyResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    NoiseEncryptionSetKeyResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a NoiseEncryptionSetKeyResponse message from the specified reader or buffer.
     * @function decode
     * @memberof NoiseEncryptionSetKeyResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {NoiseEncryptionSetKeyResponse} NoiseEncryptionSetKeyResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    NoiseEncryptionSetKeyResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.NoiseEncryptionSetKeyResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.success = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a NoiseEncryptionSetKeyResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof NoiseEncryptionSetKeyResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {NoiseEncryptionSetKeyResponse} NoiseEncryptionSetKeyResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    NoiseEncryptionSetKeyResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a NoiseEncryptionSetKeyResponse message.
     * @function verify
     * @memberof NoiseEncryptionSetKeyResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    NoiseEncryptionSetKeyResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.success != null && message.hasOwnProperty("success"))
            if (typeof message.success !== "boolean")
                return "success: boolean expected";
        return null;
    };

    /**
     * Creates a NoiseEncryptionSetKeyResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof NoiseEncryptionSetKeyResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {NoiseEncryptionSetKeyResponse} NoiseEncryptionSetKeyResponse
     */
    NoiseEncryptionSetKeyResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.NoiseEncryptionSetKeyResponse)
            return object;
        var message = new $root.NoiseEncryptionSetKeyResponse();
        if (object.success != null)
            message.success = Boolean(object.success);
        return message;
    };

    /**
     * Creates a plain object from a NoiseEncryptionSetKeyResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof NoiseEncryptionSetKeyResponse
     * @static
     * @param {NoiseEncryptionSetKeyResponse} message NoiseEncryptionSetKeyResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    NoiseEncryptionSetKeyResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.success = false;
        if (message.success != null && message.hasOwnProperty("success"))
            object.success = message.success;
        return object;
    };

    /**
     * Converts this NoiseEncryptionSetKeyResponse to JSON.
     * @function toJSON
     * @memberof NoiseEncryptionSetKeyResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    NoiseEncryptionSetKeyResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for NoiseEncryptionSetKeyResponse
     * @function getTypeUrl
     * @memberof NoiseEncryptionSetKeyResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    NoiseEncryptionSetKeyResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/NoiseEncryptionSetKeyResponse";
    };

    return NoiseEncryptionSetKeyResponse;
})();

$root.SubscribeHomeassistantServicesRequest = (function() {

    /**
     * Properties of a SubscribeHomeassistantServicesRequest.
     * @exports ISubscribeHomeassistantServicesRequest
     * @interface ISubscribeHomeassistantServicesRequest
     */

    /**
     * Constructs a new SubscribeHomeassistantServicesRequest.
     * @exports SubscribeHomeassistantServicesRequest
     * @classdesc Represents a SubscribeHomeassistantServicesRequest.
     * @implements ISubscribeHomeassistantServicesRequest
     * @constructor
     * @param {ISubscribeHomeassistantServicesRequest=} [properties] Properties to set
     */
    function SubscribeHomeassistantServicesRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new SubscribeHomeassistantServicesRequest instance using the specified properties.
     * @function create
     * @memberof SubscribeHomeassistantServicesRequest
     * @static
     * @param {ISubscribeHomeassistantServicesRequest=} [properties] Properties to set
     * @returns {SubscribeHomeassistantServicesRequest} SubscribeHomeassistantServicesRequest instance
     */
    SubscribeHomeassistantServicesRequest.create = function create(properties) {
        return new SubscribeHomeassistantServicesRequest(properties);
    };

    /**
     * Encodes the specified SubscribeHomeassistantServicesRequest message. Does not implicitly {@link SubscribeHomeassistantServicesRequest.verify|verify} messages.
     * @function encode
     * @memberof SubscribeHomeassistantServicesRequest
     * @static
     * @param {ISubscribeHomeassistantServicesRequest} message SubscribeHomeassistantServicesRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SubscribeHomeassistantServicesRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified SubscribeHomeassistantServicesRequest message, length delimited. Does not implicitly {@link SubscribeHomeassistantServicesRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SubscribeHomeassistantServicesRequest
     * @static
     * @param {ISubscribeHomeassistantServicesRequest} message SubscribeHomeassistantServicesRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SubscribeHomeassistantServicesRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SubscribeHomeassistantServicesRequest message from the specified reader or buffer.
     * @function decode
     * @memberof SubscribeHomeassistantServicesRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SubscribeHomeassistantServicesRequest} SubscribeHomeassistantServicesRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SubscribeHomeassistantServicesRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SubscribeHomeassistantServicesRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SubscribeHomeassistantServicesRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SubscribeHomeassistantServicesRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SubscribeHomeassistantServicesRequest} SubscribeHomeassistantServicesRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SubscribeHomeassistantServicesRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SubscribeHomeassistantServicesRequest message.
     * @function verify
     * @memberof SubscribeHomeassistantServicesRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SubscribeHomeassistantServicesRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a SubscribeHomeassistantServicesRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SubscribeHomeassistantServicesRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SubscribeHomeassistantServicesRequest} SubscribeHomeassistantServicesRequest
     */
    SubscribeHomeassistantServicesRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.SubscribeHomeassistantServicesRequest)
            return object;
        return new $root.SubscribeHomeassistantServicesRequest();
    };

    /**
     * Creates a plain object from a SubscribeHomeassistantServicesRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SubscribeHomeassistantServicesRequest
     * @static
     * @param {SubscribeHomeassistantServicesRequest} message SubscribeHomeassistantServicesRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SubscribeHomeassistantServicesRequest.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this SubscribeHomeassistantServicesRequest to JSON.
     * @function toJSON
     * @memberof SubscribeHomeassistantServicesRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SubscribeHomeassistantServicesRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SubscribeHomeassistantServicesRequest
     * @function getTypeUrl
     * @memberof SubscribeHomeassistantServicesRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SubscribeHomeassistantServicesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SubscribeHomeassistantServicesRequest";
    };

    return SubscribeHomeassistantServicesRequest;
})();

$root.HomeassistantServiceMap = (function() {

    /**
     * Properties of a HomeassistantServiceMap.
     * @exports IHomeassistantServiceMap
     * @interface IHomeassistantServiceMap
     * @property {string|null} [key] HomeassistantServiceMap key
     * @property {string|null} [value] HomeassistantServiceMap value
     */

    /**
     * Constructs a new HomeassistantServiceMap.
     * @exports HomeassistantServiceMap
     * @classdesc Represents a HomeassistantServiceMap.
     * @implements IHomeassistantServiceMap
     * @constructor
     * @param {IHomeassistantServiceMap=} [properties] Properties to set
     */
    function HomeassistantServiceMap(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * HomeassistantServiceMap key.
     * @member {string} key
     * @memberof HomeassistantServiceMap
     * @instance
     */
    HomeassistantServiceMap.prototype.key = "";

    /**
     * HomeassistantServiceMap value.
     * @member {string} value
     * @memberof HomeassistantServiceMap
     * @instance
     */
    HomeassistantServiceMap.prototype.value = "";

    /**
     * Creates a new HomeassistantServiceMap instance using the specified properties.
     * @function create
     * @memberof HomeassistantServiceMap
     * @static
     * @param {IHomeassistantServiceMap=} [properties] Properties to set
     * @returns {HomeassistantServiceMap} HomeassistantServiceMap instance
     */
    HomeassistantServiceMap.create = function create(properties) {
        return new HomeassistantServiceMap(properties);
    };

    /**
     * Encodes the specified HomeassistantServiceMap message. Does not implicitly {@link HomeassistantServiceMap.verify|verify} messages.
     * @function encode
     * @memberof HomeassistantServiceMap
     * @static
     * @param {IHomeassistantServiceMap} message HomeassistantServiceMap message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    HomeassistantServiceMap.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
        return writer;
    };

    /**
     * Encodes the specified HomeassistantServiceMap message, length delimited. Does not implicitly {@link HomeassistantServiceMap.verify|verify} messages.
     * @function encodeDelimited
     * @memberof HomeassistantServiceMap
     * @static
     * @param {IHomeassistantServiceMap} message HomeassistantServiceMap message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    HomeassistantServiceMap.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a HomeassistantServiceMap message from the specified reader or buffer.
     * @function decode
     * @memberof HomeassistantServiceMap
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {HomeassistantServiceMap} HomeassistantServiceMap
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    HomeassistantServiceMap.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.HomeassistantServiceMap();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.string();
                    break;
                }
            case 2: {
                    message.value = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a HomeassistantServiceMap message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof HomeassistantServiceMap
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {HomeassistantServiceMap} HomeassistantServiceMap
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    HomeassistantServiceMap.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a HomeassistantServiceMap message.
     * @function verify
     * @memberof HomeassistantServiceMap
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    HomeassistantServiceMap.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isString(message.key))
                return "key: string expected";
        if (message.value != null && message.hasOwnProperty("value"))
            if (!$util.isString(message.value))
                return "value: string expected";
        return null;
    };

    /**
     * Creates a HomeassistantServiceMap message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof HomeassistantServiceMap
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {HomeassistantServiceMap} HomeassistantServiceMap
     */
    HomeassistantServiceMap.fromObject = function fromObject(object) {
        if (object instanceof $root.HomeassistantServiceMap)
            return object;
        var message = new $root.HomeassistantServiceMap();
        if (object.key != null)
            message.key = String(object.key);
        if (object.value != null)
            message.value = String(object.value);
        return message;
    };

    /**
     * Creates a plain object from a HomeassistantServiceMap message. Also converts values to other types if specified.
     * @function toObject
     * @memberof HomeassistantServiceMap
     * @static
     * @param {HomeassistantServiceMap} message HomeassistantServiceMap
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    HomeassistantServiceMap.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = "";
            object.value = "";
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = message.value;
        return object;
    };

    /**
     * Converts this HomeassistantServiceMap to JSON.
     * @function toJSON
     * @memberof HomeassistantServiceMap
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    HomeassistantServiceMap.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for HomeassistantServiceMap
     * @function getTypeUrl
     * @memberof HomeassistantServiceMap
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    HomeassistantServiceMap.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/HomeassistantServiceMap";
    };

    return HomeassistantServiceMap;
})();

$root.HomeassistantActionRequest = (function() {

    /**
     * Properties of a HomeassistantActionRequest.
     * @exports IHomeassistantActionRequest
     * @interface IHomeassistantActionRequest
     * @property {string|null} [service] HomeassistantActionRequest service
     * @property {Array.<IHomeassistantServiceMap>|null} [data] HomeassistantActionRequest data
     * @property {Array.<IHomeassistantServiceMap>|null} [data_template] HomeassistantActionRequest data_template
     * @property {Array.<IHomeassistantServiceMap>|null} [variables] HomeassistantActionRequest variables
     * @property {boolean|null} [is_event] HomeassistantActionRequest is_event
     */

    /**
     * Constructs a new HomeassistantActionRequest.
     * @exports HomeassistantActionRequest
     * @classdesc Represents a HomeassistantActionRequest.
     * @implements IHomeassistantActionRequest
     * @constructor
     * @param {IHomeassistantActionRequest=} [properties] Properties to set
     */
    function HomeassistantActionRequest(properties) {
        this.data = [];
        this.data_template = [];
        this.variables = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * HomeassistantActionRequest service.
     * @member {string} service
     * @memberof HomeassistantActionRequest
     * @instance
     */
    HomeassistantActionRequest.prototype.service = "";

    /**
     * HomeassistantActionRequest data.
     * @member {Array.<IHomeassistantServiceMap>} data
     * @memberof HomeassistantActionRequest
     * @instance
     */
    HomeassistantActionRequest.prototype.data = $util.emptyArray;

    /**
     * HomeassistantActionRequest data_template.
     * @member {Array.<IHomeassistantServiceMap>} data_template
     * @memberof HomeassistantActionRequest
     * @instance
     */
    HomeassistantActionRequest.prototype.data_template = $util.emptyArray;

    /**
     * HomeassistantActionRequest variables.
     * @member {Array.<IHomeassistantServiceMap>} variables
     * @memberof HomeassistantActionRequest
     * @instance
     */
    HomeassistantActionRequest.prototype.variables = $util.emptyArray;

    /**
     * HomeassistantActionRequest is_event.
     * @member {boolean} is_event
     * @memberof HomeassistantActionRequest
     * @instance
     */
    HomeassistantActionRequest.prototype.is_event = false;

    /**
     * Creates a new HomeassistantActionRequest instance using the specified properties.
     * @function create
     * @memberof HomeassistantActionRequest
     * @static
     * @param {IHomeassistantActionRequest=} [properties] Properties to set
     * @returns {HomeassistantActionRequest} HomeassistantActionRequest instance
     */
    HomeassistantActionRequest.create = function create(properties) {
        return new HomeassistantActionRequest(properties);
    };

    /**
     * Encodes the specified HomeassistantActionRequest message. Does not implicitly {@link HomeassistantActionRequest.verify|verify} messages.
     * @function encode
     * @memberof HomeassistantActionRequest
     * @static
     * @param {IHomeassistantActionRequest} message HomeassistantActionRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    HomeassistantActionRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.service != null && Object.hasOwnProperty.call(message, "service"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.service);
        if (message.data != null && message.data.length)
            for (var i = 0; i < message.data.length; ++i)
                $root.HomeassistantServiceMap.encode(message.data[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        if (message.data_template != null && message.data_template.length)
            for (var i = 0; i < message.data_template.length; ++i)
                $root.HomeassistantServiceMap.encode(message.data_template[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.variables != null && message.variables.length)
            for (var i = 0; i < message.variables.length; ++i)
                $root.HomeassistantServiceMap.encode(message.variables[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.is_event != null && Object.hasOwnProperty.call(message, "is_event"))
            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.is_event);
        return writer;
    };

    /**
     * Encodes the specified HomeassistantActionRequest message, length delimited. Does not implicitly {@link HomeassistantActionRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof HomeassistantActionRequest
     * @static
     * @param {IHomeassistantActionRequest} message HomeassistantActionRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    HomeassistantActionRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a HomeassistantActionRequest message from the specified reader or buffer.
     * @function decode
     * @memberof HomeassistantActionRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {HomeassistantActionRequest} HomeassistantActionRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    HomeassistantActionRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.HomeassistantActionRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.service = reader.string();
                    break;
                }
            case 2: {
                    if (!(message.data && message.data.length))
                        message.data = [];
                    message.data.push($root.HomeassistantServiceMap.decode(reader, reader.uint32()));
                    break;
                }
            case 3: {
                    if (!(message.data_template && message.data_template.length))
                        message.data_template = [];
                    message.data_template.push($root.HomeassistantServiceMap.decode(reader, reader.uint32()));
                    break;
                }
            case 4: {
                    if (!(message.variables && message.variables.length))
                        message.variables = [];
                    message.variables.push($root.HomeassistantServiceMap.decode(reader, reader.uint32()));
                    break;
                }
            case 5: {
                    message.is_event = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a HomeassistantActionRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof HomeassistantActionRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {HomeassistantActionRequest} HomeassistantActionRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    HomeassistantActionRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a HomeassistantActionRequest message.
     * @function verify
     * @memberof HomeassistantActionRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    HomeassistantActionRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.service != null && message.hasOwnProperty("service"))
            if (!$util.isString(message.service))
                return "service: string expected";
        if (message.data != null && message.hasOwnProperty("data")) {
            if (!Array.isArray(message.data))
                return "data: array expected";
            for (var i = 0; i < message.data.length; ++i) {
                var error = $root.HomeassistantServiceMap.verify(message.data[i]);
                if (error)
                    return "data." + error;
            }
        }
        if (message.data_template != null && message.hasOwnProperty("data_template")) {
            if (!Array.isArray(message.data_template))
                return "data_template: array expected";
            for (var i = 0; i < message.data_template.length; ++i) {
                var error = $root.HomeassistantServiceMap.verify(message.data_template[i]);
                if (error)
                    return "data_template." + error;
            }
        }
        if (message.variables != null && message.hasOwnProperty("variables")) {
            if (!Array.isArray(message.variables))
                return "variables: array expected";
            for (var i = 0; i < message.variables.length; ++i) {
                var error = $root.HomeassistantServiceMap.verify(message.variables[i]);
                if (error)
                    return "variables." + error;
            }
        }
        if (message.is_event != null && message.hasOwnProperty("is_event"))
            if (typeof message.is_event !== "boolean")
                return "is_event: boolean expected";
        return null;
    };

    /**
     * Creates a HomeassistantActionRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof HomeassistantActionRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {HomeassistantActionRequest} HomeassistantActionRequest
     */
    HomeassistantActionRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.HomeassistantActionRequest)
            return object;
        var message = new $root.HomeassistantActionRequest();
        if (object.service != null)
            message.service = String(object.service);
        if (object.data) {
            if (!Array.isArray(object.data))
                throw TypeError(".HomeassistantActionRequest.data: array expected");
            message.data = [];
            for (var i = 0; i < object.data.length; ++i) {
                if (typeof object.data[i] !== "object")
                    throw TypeError(".HomeassistantActionRequest.data: object expected");
                message.data[i] = $root.HomeassistantServiceMap.fromObject(object.data[i]);
            }
        }
        if (object.data_template) {
            if (!Array.isArray(object.data_template))
                throw TypeError(".HomeassistantActionRequest.data_template: array expected");
            message.data_template = [];
            for (var i = 0; i < object.data_template.length; ++i) {
                if (typeof object.data_template[i] !== "object")
                    throw TypeError(".HomeassistantActionRequest.data_template: object expected");
                message.data_template[i] = $root.HomeassistantServiceMap.fromObject(object.data_template[i]);
            }
        }
        if (object.variables) {
            if (!Array.isArray(object.variables))
                throw TypeError(".HomeassistantActionRequest.variables: array expected");
            message.variables = [];
            for (var i = 0; i < object.variables.length; ++i) {
                if (typeof object.variables[i] !== "object")
                    throw TypeError(".HomeassistantActionRequest.variables: object expected");
                message.variables[i] = $root.HomeassistantServiceMap.fromObject(object.variables[i]);
            }
        }
        if (object.is_event != null)
            message.is_event = Boolean(object.is_event);
        return message;
    };

    /**
     * Creates a plain object from a HomeassistantActionRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof HomeassistantActionRequest
     * @static
     * @param {HomeassistantActionRequest} message HomeassistantActionRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    HomeassistantActionRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.data = [];
            object.data_template = [];
            object.variables = [];
        }
        if (options.defaults) {
            object.service = "";
            object.is_event = false;
        }
        if (message.service != null && message.hasOwnProperty("service"))
            object.service = message.service;
        if (message.data && message.data.length) {
            object.data = [];
            for (var j = 0; j < message.data.length; ++j)
                object.data[j] = $root.HomeassistantServiceMap.toObject(message.data[j], options);
        }
        if (message.data_template && message.data_template.length) {
            object.data_template = [];
            for (var j = 0; j < message.data_template.length; ++j)
                object.data_template[j] = $root.HomeassistantServiceMap.toObject(message.data_template[j], options);
        }
        if (message.variables && message.variables.length) {
            object.variables = [];
            for (var j = 0; j < message.variables.length; ++j)
                object.variables[j] = $root.HomeassistantServiceMap.toObject(message.variables[j], options);
        }
        if (message.is_event != null && message.hasOwnProperty("is_event"))
            object.is_event = message.is_event;
        return object;
    };

    /**
     * Converts this HomeassistantActionRequest to JSON.
     * @function toJSON
     * @memberof HomeassistantActionRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    HomeassistantActionRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for HomeassistantActionRequest
     * @function getTypeUrl
     * @memberof HomeassistantActionRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    HomeassistantActionRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/HomeassistantActionRequest";
    };

    return HomeassistantActionRequest;
})();

$root.SubscribeHomeAssistantStatesRequest = (function() {

    /**
     * Properties of a SubscribeHomeAssistantStatesRequest.
     * @exports ISubscribeHomeAssistantStatesRequest
     * @interface ISubscribeHomeAssistantStatesRequest
     */

    /**
     * Constructs a new SubscribeHomeAssistantStatesRequest.
     * @exports SubscribeHomeAssistantStatesRequest
     * @classdesc Represents a SubscribeHomeAssistantStatesRequest.
     * @implements ISubscribeHomeAssistantStatesRequest
     * @constructor
     * @param {ISubscribeHomeAssistantStatesRequest=} [properties] Properties to set
     */
    function SubscribeHomeAssistantStatesRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new SubscribeHomeAssistantStatesRequest instance using the specified properties.
     * @function create
     * @memberof SubscribeHomeAssistantStatesRequest
     * @static
     * @param {ISubscribeHomeAssistantStatesRequest=} [properties] Properties to set
     * @returns {SubscribeHomeAssistantStatesRequest} SubscribeHomeAssistantStatesRequest instance
     */
    SubscribeHomeAssistantStatesRequest.create = function create(properties) {
        return new SubscribeHomeAssistantStatesRequest(properties);
    };

    /**
     * Encodes the specified SubscribeHomeAssistantStatesRequest message. Does not implicitly {@link SubscribeHomeAssistantStatesRequest.verify|verify} messages.
     * @function encode
     * @memberof SubscribeHomeAssistantStatesRequest
     * @static
     * @param {ISubscribeHomeAssistantStatesRequest} message SubscribeHomeAssistantStatesRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SubscribeHomeAssistantStatesRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified SubscribeHomeAssistantStatesRequest message, length delimited. Does not implicitly {@link SubscribeHomeAssistantStatesRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SubscribeHomeAssistantStatesRequest
     * @static
     * @param {ISubscribeHomeAssistantStatesRequest} message SubscribeHomeAssistantStatesRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SubscribeHomeAssistantStatesRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SubscribeHomeAssistantStatesRequest message from the specified reader or buffer.
     * @function decode
     * @memberof SubscribeHomeAssistantStatesRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SubscribeHomeAssistantStatesRequest} SubscribeHomeAssistantStatesRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SubscribeHomeAssistantStatesRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SubscribeHomeAssistantStatesRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SubscribeHomeAssistantStatesRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SubscribeHomeAssistantStatesRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SubscribeHomeAssistantStatesRequest} SubscribeHomeAssistantStatesRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SubscribeHomeAssistantStatesRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SubscribeHomeAssistantStatesRequest message.
     * @function verify
     * @memberof SubscribeHomeAssistantStatesRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SubscribeHomeAssistantStatesRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a SubscribeHomeAssistantStatesRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SubscribeHomeAssistantStatesRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SubscribeHomeAssistantStatesRequest} SubscribeHomeAssistantStatesRequest
     */
    SubscribeHomeAssistantStatesRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.SubscribeHomeAssistantStatesRequest)
            return object;
        return new $root.SubscribeHomeAssistantStatesRequest();
    };

    /**
     * Creates a plain object from a SubscribeHomeAssistantStatesRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SubscribeHomeAssistantStatesRequest
     * @static
     * @param {SubscribeHomeAssistantStatesRequest} message SubscribeHomeAssistantStatesRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SubscribeHomeAssistantStatesRequest.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this SubscribeHomeAssistantStatesRequest to JSON.
     * @function toJSON
     * @memberof SubscribeHomeAssistantStatesRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SubscribeHomeAssistantStatesRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SubscribeHomeAssistantStatesRequest
     * @function getTypeUrl
     * @memberof SubscribeHomeAssistantStatesRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SubscribeHomeAssistantStatesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SubscribeHomeAssistantStatesRequest";
    };

    return SubscribeHomeAssistantStatesRequest;
})();

$root.SubscribeHomeAssistantStateResponse = (function() {

    /**
     * Properties of a SubscribeHomeAssistantStateResponse.
     * @exports ISubscribeHomeAssistantStateResponse
     * @interface ISubscribeHomeAssistantStateResponse
     * @property {string|null} [entity_id] SubscribeHomeAssistantStateResponse entity_id
     * @property {string|null} [attribute] SubscribeHomeAssistantStateResponse attribute
     * @property {boolean|null} [once] SubscribeHomeAssistantStateResponse once
     */

    /**
     * Constructs a new SubscribeHomeAssistantStateResponse.
     * @exports SubscribeHomeAssistantStateResponse
     * @classdesc Represents a SubscribeHomeAssistantStateResponse.
     * @implements ISubscribeHomeAssistantStateResponse
     * @constructor
     * @param {ISubscribeHomeAssistantStateResponse=} [properties] Properties to set
     */
    function SubscribeHomeAssistantStateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SubscribeHomeAssistantStateResponse entity_id.
     * @member {string} entity_id
     * @memberof SubscribeHomeAssistantStateResponse
     * @instance
     */
    SubscribeHomeAssistantStateResponse.prototype.entity_id = "";

    /**
     * SubscribeHomeAssistantStateResponse attribute.
     * @member {string} attribute
     * @memberof SubscribeHomeAssistantStateResponse
     * @instance
     */
    SubscribeHomeAssistantStateResponse.prototype.attribute = "";

    /**
     * SubscribeHomeAssistantStateResponse once.
     * @member {boolean} once
     * @memberof SubscribeHomeAssistantStateResponse
     * @instance
     */
    SubscribeHomeAssistantStateResponse.prototype.once = false;

    /**
     * Creates a new SubscribeHomeAssistantStateResponse instance using the specified properties.
     * @function create
     * @memberof SubscribeHomeAssistantStateResponse
     * @static
     * @param {ISubscribeHomeAssistantStateResponse=} [properties] Properties to set
     * @returns {SubscribeHomeAssistantStateResponse} SubscribeHomeAssistantStateResponse instance
     */
    SubscribeHomeAssistantStateResponse.create = function create(properties) {
        return new SubscribeHomeAssistantStateResponse(properties);
    };

    /**
     * Encodes the specified SubscribeHomeAssistantStateResponse message. Does not implicitly {@link SubscribeHomeAssistantStateResponse.verify|verify} messages.
     * @function encode
     * @memberof SubscribeHomeAssistantStateResponse
     * @static
     * @param {ISubscribeHomeAssistantStateResponse} message SubscribeHomeAssistantStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SubscribeHomeAssistantStateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.entity_id != null && Object.hasOwnProperty.call(message, "entity_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.entity_id);
        if (message.attribute != null && Object.hasOwnProperty.call(message, "attribute"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.attribute);
        if (message.once != null && Object.hasOwnProperty.call(message, "once"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.once);
        return writer;
    };

    /**
     * Encodes the specified SubscribeHomeAssistantStateResponse message, length delimited. Does not implicitly {@link SubscribeHomeAssistantStateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SubscribeHomeAssistantStateResponse
     * @static
     * @param {ISubscribeHomeAssistantStateResponse} message SubscribeHomeAssistantStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SubscribeHomeAssistantStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SubscribeHomeAssistantStateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof SubscribeHomeAssistantStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SubscribeHomeAssistantStateResponse} SubscribeHomeAssistantStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SubscribeHomeAssistantStateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SubscribeHomeAssistantStateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.entity_id = reader.string();
                    break;
                }
            case 2: {
                    message.attribute = reader.string();
                    break;
                }
            case 3: {
                    message.once = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SubscribeHomeAssistantStateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SubscribeHomeAssistantStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SubscribeHomeAssistantStateResponse} SubscribeHomeAssistantStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SubscribeHomeAssistantStateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SubscribeHomeAssistantStateResponse message.
     * @function verify
     * @memberof SubscribeHomeAssistantStateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SubscribeHomeAssistantStateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.entity_id != null && message.hasOwnProperty("entity_id"))
            if (!$util.isString(message.entity_id))
                return "entity_id: string expected";
        if (message.attribute != null && message.hasOwnProperty("attribute"))
            if (!$util.isString(message.attribute))
                return "attribute: string expected";
        if (message.once != null && message.hasOwnProperty("once"))
            if (typeof message.once !== "boolean")
                return "once: boolean expected";
        return null;
    };

    /**
     * Creates a SubscribeHomeAssistantStateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SubscribeHomeAssistantStateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SubscribeHomeAssistantStateResponse} SubscribeHomeAssistantStateResponse
     */
    SubscribeHomeAssistantStateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.SubscribeHomeAssistantStateResponse)
            return object;
        var message = new $root.SubscribeHomeAssistantStateResponse();
        if (object.entity_id != null)
            message.entity_id = String(object.entity_id);
        if (object.attribute != null)
            message.attribute = String(object.attribute);
        if (object.once != null)
            message.once = Boolean(object.once);
        return message;
    };

    /**
     * Creates a plain object from a SubscribeHomeAssistantStateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SubscribeHomeAssistantStateResponse
     * @static
     * @param {SubscribeHomeAssistantStateResponse} message SubscribeHomeAssistantStateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SubscribeHomeAssistantStateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.entity_id = "";
            object.attribute = "";
            object.once = false;
        }
        if (message.entity_id != null && message.hasOwnProperty("entity_id"))
            object.entity_id = message.entity_id;
        if (message.attribute != null && message.hasOwnProperty("attribute"))
            object.attribute = message.attribute;
        if (message.once != null && message.hasOwnProperty("once"))
            object.once = message.once;
        return object;
    };

    /**
     * Converts this SubscribeHomeAssistantStateResponse to JSON.
     * @function toJSON
     * @memberof SubscribeHomeAssistantStateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SubscribeHomeAssistantStateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SubscribeHomeAssistantStateResponse
     * @function getTypeUrl
     * @memberof SubscribeHomeAssistantStateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SubscribeHomeAssistantStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SubscribeHomeAssistantStateResponse";
    };

    return SubscribeHomeAssistantStateResponse;
})();

$root.HomeAssistantStateResponse = (function() {

    /**
     * Properties of a HomeAssistantStateResponse.
     * @exports IHomeAssistantStateResponse
     * @interface IHomeAssistantStateResponse
     * @property {string|null} [entity_id] HomeAssistantStateResponse entity_id
     * @property {string|null} [state] HomeAssistantStateResponse state
     * @property {string|null} [attribute] HomeAssistantStateResponse attribute
     */

    /**
     * Constructs a new HomeAssistantStateResponse.
     * @exports HomeAssistantStateResponse
     * @classdesc Represents a HomeAssistantStateResponse.
     * @implements IHomeAssistantStateResponse
     * @constructor
     * @param {IHomeAssistantStateResponse=} [properties] Properties to set
     */
    function HomeAssistantStateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * HomeAssistantStateResponse entity_id.
     * @member {string} entity_id
     * @memberof HomeAssistantStateResponse
     * @instance
     */
    HomeAssistantStateResponse.prototype.entity_id = "";

    /**
     * HomeAssistantStateResponse state.
     * @member {string} state
     * @memberof HomeAssistantStateResponse
     * @instance
     */
    HomeAssistantStateResponse.prototype.state = "";

    /**
     * HomeAssistantStateResponse attribute.
     * @member {string} attribute
     * @memberof HomeAssistantStateResponse
     * @instance
     */
    HomeAssistantStateResponse.prototype.attribute = "";

    /**
     * Creates a new HomeAssistantStateResponse instance using the specified properties.
     * @function create
     * @memberof HomeAssistantStateResponse
     * @static
     * @param {IHomeAssistantStateResponse=} [properties] Properties to set
     * @returns {HomeAssistantStateResponse} HomeAssistantStateResponse instance
     */
    HomeAssistantStateResponse.create = function create(properties) {
        return new HomeAssistantStateResponse(properties);
    };

    /**
     * Encodes the specified HomeAssistantStateResponse message. Does not implicitly {@link HomeAssistantStateResponse.verify|verify} messages.
     * @function encode
     * @memberof HomeAssistantStateResponse
     * @static
     * @param {IHomeAssistantStateResponse} message HomeAssistantStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    HomeAssistantStateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.entity_id != null && Object.hasOwnProperty.call(message, "entity_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.entity_id);
        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.state);
        if (message.attribute != null && Object.hasOwnProperty.call(message, "attribute"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.attribute);
        return writer;
    };

    /**
     * Encodes the specified HomeAssistantStateResponse message, length delimited. Does not implicitly {@link HomeAssistantStateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof HomeAssistantStateResponse
     * @static
     * @param {IHomeAssistantStateResponse} message HomeAssistantStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    HomeAssistantStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a HomeAssistantStateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof HomeAssistantStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {HomeAssistantStateResponse} HomeAssistantStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    HomeAssistantStateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.HomeAssistantStateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.entity_id = reader.string();
                    break;
                }
            case 2: {
                    message.state = reader.string();
                    break;
                }
            case 3: {
                    message.attribute = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a HomeAssistantStateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof HomeAssistantStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {HomeAssistantStateResponse} HomeAssistantStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    HomeAssistantStateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a HomeAssistantStateResponse message.
     * @function verify
     * @memberof HomeAssistantStateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    HomeAssistantStateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.entity_id != null && message.hasOwnProperty("entity_id"))
            if (!$util.isString(message.entity_id))
                return "entity_id: string expected";
        if (message.state != null && message.hasOwnProperty("state"))
            if (!$util.isString(message.state))
                return "state: string expected";
        if (message.attribute != null && message.hasOwnProperty("attribute"))
            if (!$util.isString(message.attribute))
                return "attribute: string expected";
        return null;
    };

    /**
     * Creates a HomeAssistantStateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof HomeAssistantStateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {HomeAssistantStateResponse} HomeAssistantStateResponse
     */
    HomeAssistantStateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.HomeAssistantStateResponse)
            return object;
        var message = new $root.HomeAssistantStateResponse();
        if (object.entity_id != null)
            message.entity_id = String(object.entity_id);
        if (object.state != null)
            message.state = String(object.state);
        if (object.attribute != null)
            message.attribute = String(object.attribute);
        return message;
    };

    /**
     * Creates a plain object from a HomeAssistantStateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof HomeAssistantStateResponse
     * @static
     * @param {HomeAssistantStateResponse} message HomeAssistantStateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    HomeAssistantStateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.entity_id = "";
            object.state = "";
            object.attribute = "";
        }
        if (message.entity_id != null && message.hasOwnProperty("entity_id"))
            object.entity_id = message.entity_id;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = message.state;
        if (message.attribute != null && message.hasOwnProperty("attribute"))
            object.attribute = message.attribute;
        return object;
    };

    /**
     * Converts this HomeAssistantStateResponse to JSON.
     * @function toJSON
     * @memberof HomeAssistantStateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    HomeAssistantStateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for HomeAssistantStateResponse
     * @function getTypeUrl
     * @memberof HomeAssistantStateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    HomeAssistantStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/HomeAssistantStateResponse";
    };

    return HomeAssistantStateResponse;
})();

$root.GetTimeRequest = (function() {

    /**
     * Properties of a GetTimeRequest.
     * @exports IGetTimeRequest
     * @interface IGetTimeRequest
     */

    /**
     * Constructs a new GetTimeRequest.
     * @exports GetTimeRequest
     * @classdesc Represents a GetTimeRequest.
     * @implements IGetTimeRequest
     * @constructor
     * @param {IGetTimeRequest=} [properties] Properties to set
     */
    function GetTimeRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new GetTimeRequest instance using the specified properties.
     * @function create
     * @memberof GetTimeRequest
     * @static
     * @param {IGetTimeRequest=} [properties] Properties to set
     * @returns {GetTimeRequest} GetTimeRequest instance
     */
    GetTimeRequest.create = function create(properties) {
        return new GetTimeRequest(properties);
    };

    /**
     * Encodes the specified GetTimeRequest message. Does not implicitly {@link GetTimeRequest.verify|verify} messages.
     * @function encode
     * @memberof GetTimeRequest
     * @static
     * @param {IGetTimeRequest} message GetTimeRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    GetTimeRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified GetTimeRequest message, length delimited. Does not implicitly {@link GetTimeRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GetTimeRequest
     * @static
     * @param {IGetTimeRequest} message GetTimeRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    GetTimeRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a GetTimeRequest message from the specified reader or buffer.
     * @function decode
     * @memberof GetTimeRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GetTimeRequest} GetTimeRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    GetTimeRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetTimeRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a GetTimeRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GetTimeRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GetTimeRequest} GetTimeRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    GetTimeRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a GetTimeRequest message.
     * @function verify
     * @memberof GetTimeRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    GetTimeRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a GetTimeRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GetTimeRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GetTimeRequest} GetTimeRequest
     */
    GetTimeRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.GetTimeRequest)
            return object;
        return new $root.GetTimeRequest();
    };

    /**
     * Creates a plain object from a GetTimeRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GetTimeRequest
     * @static
     * @param {GetTimeRequest} message GetTimeRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    GetTimeRequest.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this GetTimeRequest to JSON.
     * @function toJSON
     * @memberof GetTimeRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    GetTimeRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for GetTimeRequest
     * @function getTypeUrl
     * @memberof GetTimeRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    GetTimeRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/GetTimeRequest";
    };

    return GetTimeRequest;
})();

$root.GetTimeResponse = (function() {

    /**
     * Properties of a GetTimeResponse.
     * @exports IGetTimeResponse
     * @interface IGetTimeResponse
     * @property {number|null} [epoch_seconds] GetTimeResponse epoch_seconds
     * @property {string|null} [timezone] GetTimeResponse timezone
     */

    /**
     * Constructs a new GetTimeResponse.
     * @exports GetTimeResponse
     * @classdesc Represents a GetTimeResponse.
     * @implements IGetTimeResponse
     * @constructor
     * @param {IGetTimeResponse=} [properties] Properties to set
     */
    function GetTimeResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * GetTimeResponse epoch_seconds.
     * @member {number} epoch_seconds
     * @memberof GetTimeResponse
     * @instance
     */
    GetTimeResponse.prototype.epoch_seconds = 0;

    /**
     * GetTimeResponse timezone.
     * @member {string} timezone
     * @memberof GetTimeResponse
     * @instance
     */
    GetTimeResponse.prototype.timezone = "";

    /**
     * Creates a new GetTimeResponse instance using the specified properties.
     * @function create
     * @memberof GetTimeResponse
     * @static
     * @param {IGetTimeResponse=} [properties] Properties to set
     * @returns {GetTimeResponse} GetTimeResponse instance
     */
    GetTimeResponse.create = function create(properties) {
        return new GetTimeResponse(properties);
    };

    /**
     * Encodes the specified GetTimeResponse message. Does not implicitly {@link GetTimeResponse.verify|verify} messages.
     * @function encode
     * @memberof GetTimeResponse
     * @static
     * @param {IGetTimeResponse} message GetTimeResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    GetTimeResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.epoch_seconds != null && Object.hasOwnProperty.call(message, "epoch_seconds"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.epoch_seconds);
        if (message.timezone != null && Object.hasOwnProperty.call(message, "timezone"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.timezone);
        return writer;
    };

    /**
     * Encodes the specified GetTimeResponse message, length delimited. Does not implicitly {@link GetTimeResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof GetTimeResponse
     * @static
     * @param {IGetTimeResponse} message GetTimeResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    GetTimeResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a GetTimeResponse message from the specified reader or buffer.
     * @function decode
     * @memberof GetTimeResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {GetTimeResponse} GetTimeResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    GetTimeResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GetTimeResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.epoch_seconds = reader.fixed32();
                    break;
                }
            case 2: {
                    message.timezone = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a GetTimeResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof GetTimeResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {GetTimeResponse} GetTimeResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    GetTimeResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a GetTimeResponse message.
     * @function verify
     * @memberof GetTimeResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    GetTimeResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.epoch_seconds != null && message.hasOwnProperty("epoch_seconds"))
            if (!$util.isInteger(message.epoch_seconds))
                return "epoch_seconds: integer expected";
        if (message.timezone != null && message.hasOwnProperty("timezone"))
            if (!$util.isString(message.timezone))
                return "timezone: string expected";
        return null;
    };

    /**
     * Creates a GetTimeResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof GetTimeResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {GetTimeResponse} GetTimeResponse
     */
    GetTimeResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.GetTimeResponse)
            return object;
        var message = new $root.GetTimeResponse();
        if (object.epoch_seconds != null)
            message.epoch_seconds = object.epoch_seconds >>> 0;
        if (object.timezone != null)
            message.timezone = String(object.timezone);
        return message;
    };

    /**
     * Creates a plain object from a GetTimeResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof GetTimeResponse
     * @static
     * @param {GetTimeResponse} message GetTimeResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    GetTimeResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.epoch_seconds = 0;
            object.timezone = "";
        }
        if (message.epoch_seconds != null && message.hasOwnProperty("epoch_seconds"))
            object.epoch_seconds = message.epoch_seconds;
        if (message.timezone != null && message.hasOwnProperty("timezone"))
            object.timezone = message.timezone;
        return object;
    };

    /**
     * Converts this GetTimeResponse to JSON.
     * @function toJSON
     * @memberof GetTimeResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    GetTimeResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for GetTimeResponse
     * @function getTypeUrl
     * @memberof GetTimeResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    GetTimeResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/GetTimeResponse";
    };

    return GetTimeResponse;
})();

/**
 * ServiceArgType enum.
 * @exports ServiceArgType
 * @enum {number}
 * @property {number} SERVICE_ARG_TYPE_BOOL=0 SERVICE_ARG_TYPE_BOOL value
 * @property {number} SERVICE_ARG_TYPE_INT=1 SERVICE_ARG_TYPE_INT value
 * @property {number} SERVICE_ARG_TYPE_FLOAT=2 SERVICE_ARG_TYPE_FLOAT value
 * @property {number} SERVICE_ARG_TYPE_STRING=3 SERVICE_ARG_TYPE_STRING value
 * @property {number} SERVICE_ARG_TYPE_BOOL_ARRAY=4 SERVICE_ARG_TYPE_BOOL_ARRAY value
 * @property {number} SERVICE_ARG_TYPE_INT_ARRAY=5 SERVICE_ARG_TYPE_INT_ARRAY value
 * @property {number} SERVICE_ARG_TYPE_FLOAT_ARRAY=6 SERVICE_ARG_TYPE_FLOAT_ARRAY value
 * @property {number} SERVICE_ARG_TYPE_STRING_ARRAY=7 SERVICE_ARG_TYPE_STRING_ARRAY value
 */
$root.ServiceArgType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "SERVICE_ARG_TYPE_BOOL"] = 0;
    values[valuesById[1] = "SERVICE_ARG_TYPE_INT"] = 1;
    values[valuesById[2] = "SERVICE_ARG_TYPE_FLOAT"] = 2;
    values[valuesById[3] = "SERVICE_ARG_TYPE_STRING"] = 3;
    values[valuesById[4] = "SERVICE_ARG_TYPE_BOOL_ARRAY"] = 4;
    values[valuesById[5] = "SERVICE_ARG_TYPE_INT_ARRAY"] = 5;
    values[valuesById[6] = "SERVICE_ARG_TYPE_FLOAT_ARRAY"] = 6;
    values[valuesById[7] = "SERVICE_ARG_TYPE_STRING_ARRAY"] = 7;
    return values;
})();

$root.ListEntitiesServicesArgument = (function() {

    /**
     * Properties of a ListEntitiesServicesArgument.
     * @exports IListEntitiesServicesArgument
     * @interface IListEntitiesServicesArgument
     * @property {string|null} [name] ListEntitiesServicesArgument name
     * @property {ServiceArgType|null} [type] ListEntitiesServicesArgument type
     */

    /**
     * Constructs a new ListEntitiesServicesArgument.
     * @exports ListEntitiesServicesArgument
     * @classdesc Represents a ListEntitiesServicesArgument.
     * @implements IListEntitiesServicesArgument
     * @constructor
     * @param {IListEntitiesServicesArgument=} [properties] Properties to set
     */
    function ListEntitiesServicesArgument(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesServicesArgument name.
     * @member {string} name
     * @memberof ListEntitiesServicesArgument
     * @instance
     */
    ListEntitiesServicesArgument.prototype.name = "";

    /**
     * ListEntitiesServicesArgument type.
     * @member {ServiceArgType} type
     * @memberof ListEntitiesServicesArgument
     * @instance
     */
    ListEntitiesServicesArgument.prototype.type = 0;

    /**
     * Creates a new ListEntitiesServicesArgument instance using the specified properties.
     * @function create
     * @memberof ListEntitiesServicesArgument
     * @static
     * @param {IListEntitiesServicesArgument=} [properties] Properties to set
     * @returns {ListEntitiesServicesArgument} ListEntitiesServicesArgument instance
     */
    ListEntitiesServicesArgument.create = function create(properties) {
        return new ListEntitiesServicesArgument(properties);
    };

    /**
     * Encodes the specified ListEntitiesServicesArgument message. Does not implicitly {@link ListEntitiesServicesArgument.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesServicesArgument
     * @static
     * @param {IListEntitiesServicesArgument} message ListEntitiesServicesArgument message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesServicesArgument.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesServicesArgument message, length delimited. Does not implicitly {@link ListEntitiesServicesArgument.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesServicesArgument
     * @static
     * @param {IListEntitiesServicesArgument} message ListEntitiesServicesArgument message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesServicesArgument.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesServicesArgument message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesServicesArgument
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesServicesArgument} ListEntitiesServicesArgument
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesServicesArgument.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesServicesArgument();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.name = reader.string();
                    break;
                }
            case 2: {
                    message.type = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesServicesArgument message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesServicesArgument
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesServicesArgument} ListEntitiesServicesArgument
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesServicesArgument.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesServicesArgument message.
     * @function verify
     * @memberof ListEntitiesServicesArgument
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesServicesArgument.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                break;
            }
        return null;
    };

    /**
     * Creates a ListEntitiesServicesArgument message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesServicesArgument
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesServicesArgument} ListEntitiesServicesArgument
     */
    ListEntitiesServicesArgument.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesServicesArgument)
            return object;
        var message = new $root.ListEntitiesServicesArgument();
        if (object.name != null)
            message.name = String(object.name);
        switch (object.type) {
        default:
            if (typeof object.type === "number") {
                message.type = object.type;
                break;
            }
            break;
        case "SERVICE_ARG_TYPE_BOOL":
        case 0:
            message.type = 0;
            break;
        case "SERVICE_ARG_TYPE_INT":
        case 1:
            message.type = 1;
            break;
        case "SERVICE_ARG_TYPE_FLOAT":
        case 2:
            message.type = 2;
            break;
        case "SERVICE_ARG_TYPE_STRING":
        case 3:
            message.type = 3;
            break;
        case "SERVICE_ARG_TYPE_BOOL_ARRAY":
        case 4:
            message.type = 4;
            break;
        case "SERVICE_ARG_TYPE_INT_ARRAY":
        case 5:
            message.type = 5;
            break;
        case "SERVICE_ARG_TYPE_FLOAT_ARRAY":
        case 6:
            message.type = 6;
            break;
        case "SERVICE_ARG_TYPE_STRING_ARRAY":
        case 7:
            message.type = 7;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesServicesArgument message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesServicesArgument
     * @static
     * @param {ListEntitiesServicesArgument} message ListEntitiesServicesArgument
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesServicesArgument.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.name = "";
            object.type = options.enums === String ? "SERVICE_ARG_TYPE_BOOL" : 0;
        }
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.ServiceArgType[message.type] === undefined ? message.type : $root.ServiceArgType[message.type] : message.type;
        return object;
    };

    /**
     * Converts this ListEntitiesServicesArgument to JSON.
     * @function toJSON
     * @memberof ListEntitiesServicesArgument
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesServicesArgument.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesServicesArgument
     * @function getTypeUrl
     * @memberof ListEntitiesServicesArgument
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesServicesArgument.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesServicesArgument";
    };

    return ListEntitiesServicesArgument;
})();

$root.ListEntitiesServicesResponse = (function() {

    /**
     * Properties of a ListEntitiesServicesResponse.
     * @exports IListEntitiesServicesResponse
     * @interface IListEntitiesServicesResponse
     * @property {string|null} [name] ListEntitiesServicesResponse name
     * @property {number|null} [key] ListEntitiesServicesResponse key
     * @property {Array.<IListEntitiesServicesArgument>|null} [args] ListEntitiesServicesResponse args
     */

    /**
     * Constructs a new ListEntitiesServicesResponse.
     * @exports ListEntitiesServicesResponse
     * @classdesc Represents a ListEntitiesServicesResponse.
     * @implements IListEntitiesServicesResponse
     * @constructor
     * @param {IListEntitiesServicesResponse=} [properties] Properties to set
     */
    function ListEntitiesServicesResponse(properties) {
        this.args = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesServicesResponse name.
     * @member {string} name
     * @memberof ListEntitiesServicesResponse
     * @instance
     */
    ListEntitiesServicesResponse.prototype.name = "";

    /**
     * ListEntitiesServicesResponse key.
     * @member {number} key
     * @memberof ListEntitiesServicesResponse
     * @instance
     */
    ListEntitiesServicesResponse.prototype.key = 0;

    /**
     * ListEntitiesServicesResponse args.
     * @member {Array.<IListEntitiesServicesArgument>} args
     * @memberof ListEntitiesServicesResponse
     * @instance
     */
    ListEntitiesServicesResponse.prototype.args = $util.emptyArray;

    /**
     * Creates a new ListEntitiesServicesResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesServicesResponse
     * @static
     * @param {IListEntitiesServicesResponse=} [properties] Properties to set
     * @returns {ListEntitiesServicesResponse} ListEntitiesServicesResponse instance
     */
    ListEntitiesServicesResponse.create = function create(properties) {
        return new ListEntitiesServicesResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesServicesResponse message. Does not implicitly {@link ListEntitiesServicesResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesServicesResponse
     * @static
     * @param {IListEntitiesServicesResponse} message ListEntitiesServicesResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesServicesResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.args != null && message.args.length)
            for (var i = 0; i < message.args.length; ++i)
                $root.ListEntitiesServicesArgument.encode(message.args[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesServicesResponse message, length delimited. Does not implicitly {@link ListEntitiesServicesResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesServicesResponse
     * @static
     * @param {IListEntitiesServicesResponse} message ListEntitiesServicesResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesServicesResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesServicesResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesServicesResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesServicesResponse} ListEntitiesServicesResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesServicesResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesServicesResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.name = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    if (!(message.args && message.args.length))
                        message.args = [];
                    message.args.push($root.ListEntitiesServicesArgument.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesServicesResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesServicesResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesServicesResponse} ListEntitiesServicesResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesServicesResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesServicesResponse message.
     * @function verify
     * @memberof ListEntitiesServicesResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesServicesResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.args != null && message.hasOwnProperty("args")) {
            if (!Array.isArray(message.args))
                return "args: array expected";
            for (var i = 0; i < message.args.length; ++i) {
                var error = $root.ListEntitiesServicesArgument.verify(message.args[i]);
                if (error)
                    return "args." + error;
            }
        }
        return null;
    };

    /**
     * Creates a ListEntitiesServicesResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesServicesResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesServicesResponse} ListEntitiesServicesResponse
     */
    ListEntitiesServicesResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesServicesResponse)
            return object;
        var message = new $root.ListEntitiesServicesResponse();
        if (object.name != null)
            message.name = String(object.name);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.args) {
            if (!Array.isArray(object.args))
                throw TypeError(".ListEntitiesServicesResponse.args: array expected");
            message.args = [];
            for (var i = 0; i < object.args.length; ++i) {
                if (typeof object.args[i] !== "object")
                    throw TypeError(".ListEntitiesServicesResponse.args: object expected");
                message.args[i] = $root.ListEntitiesServicesArgument.fromObject(object.args[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesServicesResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesServicesResponse
     * @static
     * @param {ListEntitiesServicesResponse} message ListEntitiesServicesResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesServicesResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.args = [];
        if (options.defaults) {
            object.name = "";
            object.key = 0;
        }
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.args && message.args.length) {
            object.args = [];
            for (var j = 0; j < message.args.length; ++j)
                object.args[j] = $root.ListEntitiesServicesArgument.toObject(message.args[j], options);
        }
        return object;
    };

    /**
     * Converts this ListEntitiesServicesResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesServicesResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesServicesResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesServicesResponse
     * @function getTypeUrl
     * @memberof ListEntitiesServicesResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesServicesResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesServicesResponse";
    };

    return ListEntitiesServicesResponse;
})();

$root.ExecuteServiceArgument = (function() {

    /**
     * Properties of an ExecuteServiceArgument.
     * @exports IExecuteServiceArgument
     * @interface IExecuteServiceArgument
     * @property {boolean|null} [bool_] ExecuteServiceArgument bool_
     * @property {number|null} [legacy_int] ExecuteServiceArgument legacy_int
     * @property {number|null} [float_] ExecuteServiceArgument float_
     * @property {string|null} [string_] ExecuteServiceArgument string_
     * @property {number|null} [int_] ExecuteServiceArgument int_
     * @property {Array.<boolean>|null} [bool_array] ExecuteServiceArgument bool_array
     * @property {Array.<number>|null} [int_array] ExecuteServiceArgument int_array
     * @property {Array.<number>|null} [float_array] ExecuteServiceArgument float_array
     * @property {Array.<string>|null} [string_array] ExecuteServiceArgument string_array
     */

    /**
     * Constructs a new ExecuteServiceArgument.
     * @exports ExecuteServiceArgument
     * @classdesc Represents an ExecuteServiceArgument.
     * @implements IExecuteServiceArgument
     * @constructor
     * @param {IExecuteServiceArgument=} [properties] Properties to set
     */
    function ExecuteServiceArgument(properties) {
        this.bool_array = [];
        this.int_array = [];
        this.float_array = [];
        this.string_array = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ExecuteServiceArgument bool_.
     * @member {boolean} bool_
     * @memberof ExecuteServiceArgument
     * @instance
     */
    ExecuteServiceArgument.prototype.bool_ = false;

    /**
     * ExecuteServiceArgument legacy_int.
     * @member {number} legacy_int
     * @memberof ExecuteServiceArgument
     * @instance
     */
    ExecuteServiceArgument.prototype.legacy_int = 0;

    /**
     * ExecuteServiceArgument float_.
     * @member {number} float_
     * @memberof ExecuteServiceArgument
     * @instance
     */
    ExecuteServiceArgument.prototype.float_ = 0;

    /**
     * ExecuteServiceArgument string_.
     * @member {string} string_
     * @memberof ExecuteServiceArgument
     * @instance
     */
    ExecuteServiceArgument.prototype.string_ = "";

    /**
     * ExecuteServiceArgument int_.
     * @member {number} int_
     * @memberof ExecuteServiceArgument
     * @instance
     */
    ExecuteServiceArgument.prototype.int_ = 0;

    /**
     * ExecuteServiceArgument bool_array.
     * @member {Array.<boolean>} bool_array
     * @memberof ExecuteServiceArgument
     * @instance
     */
    ExecuteServiceArgument.prototype.bool_array = $util.emptyArray;

    /**
     * ExecuteServiceArgument int_array.
     * @member {Array.<number>} int_array
     * @memberof ExecuteServiceArgument
     * @instance
     */
    ExecuteServiceArgument.prototype.int_array = $util.emptyArray;

    /**
     * ExecuteServiceArgument float_array.
     * @member {Array.<number>} float_array
     * @memberof ExecuteServiceArgument
     * @instance
     */
    ExecuteServiceArgument.prototype.float_array = $util.emptyArray;

    /**
     * ExecuteServiceArgument string_array.
     * @member {Array.<string>} string_array
     * @memberof ExecuteServiceArgument
     * @instance
     */
    ExecuteServiceArgument.prototype.string_array = $util.emptyArray;

    /**
     * Creates a new ExecuteServiceArgument instance using the specified properties.
     * @function create
     * @memberof ExecuteServiceArgument
     * @static
     * @param {IExecuteServiceArgument=} [properties] Properties to set
     * @returns {ExecuteServiceArgument} ExecuteServiceArgument instance
     */
    ExecuteServiceArgument.create = function create(properties) {
        return new ExecuteServiceArgument(properties);
    };

    /**
     * Encodes the specified ExecuteServiceArgument message. Does not implicitly {@link ExecuteServiceArgument.verify|verify} messages.
     * @function encode
     * @memberof ExecuteServiceArgument
     * @static
     * @param {IExecuteServiceArgument} message ExecuteServiceArgument message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ExecuteServiceArgument.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.bool_ != null && Object.hasOwnProperty.call(message, "bool_"))
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.bool_);
        if (message.legacy_int != null && Object.hasOwnProperty.call(message, "legacy_int"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.legacy_int);
        if (message.float_ != null && Object.hasOwnProperty.call(message, "float_"))
            writer.uint32(/* id 3, wireType 5 =*/29).float(message.float_);
        if (message.string_ != null && Object.hasOwnProperty.call(message, "string_"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.string_);
        if (message.int_ != null && Object.hasOwnProperty.call(message, "int_"))
            writer.uint32(/* id 5, wireType 0 =*/40).sint32(message.int_);
        if (message.bool_array != null && message.bool_array.length)
            for (var i = 0; i < message.bool_array.length; ++i)
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.bool_array[i]);
        if (message.int_array != null && message.int_array.length)
            for (var i = 0; i < message.int_array.length; ++i)
                writer.uint32(/* id 7, wireType 0 =*/56).sint32(message.int_array[i]);
        if (message.float_array != null && message.float_array.length)
            for (var i = 0; i < message.float_array.length; ++i)
                writer.uint32(/* id 8, wireType 5 =*/69).float(message.float_array[i]);
        if (message.string_array != null && message.string_array.length)
            for (var i = 0; i < message.string_array.length; ++i)
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.string_array[i]);
        return writer;
    };

    /**
     * Encodes the specified ExecuteServiceArgument message, length delimited. Does not implicitly {@link ExecuteServiceArgument.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ExecuteServiceArgument
     * @static
     * @param {IExecuteServiceArgument} message ExecuteServiceArgument message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ExecuteServiceArgument.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an ExecuteServiceArgument message from the specified reader or buffer.
     * @function decode
     * @memberof ExecuteServiceArgument
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ExecuteServiceArgument} ExecuteServiceArgument
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ExecuteServiceArgument.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ExecuteServiceArgument();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.bool_ = reader.bool();
                    break;
                }
            case 2: {
                    message.legacy_int = reader.int32();
                    break;
                }
            case 3: {
                    message.float_ = reader.float();
                    break;
                }
            case 4: {
                    message.string_ = reader.string();
                    break;
                }
            case 5: {
                    message.int_ = reader.sint32();
                    break;
                }
            case 6: {
                    if (!(message.bool_array && message.bool_array.length))
                        message.bool_array = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.bool_array.push(reader.bool());
                    } else
                        message.bool_array.push(reader.bool());
                    break;
                }
            case 7: {
                    if (!(message.int_array && message.int_array.length))
                        message.int_array = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.int_array.push(reader.sint32());
                    } else
                        message.int_array.push(reader.sint32());
                    break;
                }
            case 8: {
                    if (!(message.float_array && message.float_array.length))
                        message.float_array = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.float_array.push(reader.float());
                    } else
                        message.float_array.push(reader.float());
                    break;
                }
            case 9: {
                    if (!(message.string_array && message.string_array.length))
                        message.string_array = [];
                    message.string_array.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an ExecuteServiceArgument message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ExecuteServiceArgument
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ExecuteServiceArgument} ExecuteServiceArgument
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ExecuteServiceArgument.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an ExecuteServiceArgument message.
     * @function verify
     * @memberof ExecuteServiceArgument
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ExecuteServiceArgument.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.bool_ != null && message.hasOwnProperty("bool_"))
            if (typeof message.bool_ !== "boolean")
                return "bool_: boolean expected";
        if (message.legacy_int != null && message.hasOwnProperty("legacy_int"))
            if (!$util.isInteger(message.legacy_int))
                return "legacy_int: integer expected";
        if (message.float_ != null && message.hasOwnProperty("float_"))
            if (typeof message.float_ !== "number")
                return "float_: number expected";
        if (message.string_ != null && message.hasOwnProperty("string_"))
            if (!$util.isString(message.string_))
                return "string_: string expected";
        if (message.int_ != null && message.hasOwnProperty("int_"))
            if (!$util.isInteger(message.int_))
                return "int_: integer expected";
        if (message.bool_array != null && message.hasOwnProperty("bool_array")) {
            if (!Array.isArray(message.bool_array))
                return "bool_array: array expected";
            for (var i = 0; i < message.bool_array.length; ++i)
                if (typeof message.bool_array[i] !== "boolean")
                    return "bool_array: boolean[] expected";
        }
        if (message.int_array != null && message.hasOwnProperty("int_array")) {
            if (!Array.isArray(message.int_array))
                return "int_array: array expected";
            for (var i = 0; i < message.int_array.length; ++i)
                if (!$util.isInteger(message.int_array[i]))
                    return "int_array: integer[] expected";
        }
        if (message.float_array != null && message.hasOwnProperty("float_array")) {
            if (!Array.isArray(message.float_array))
                return "float_array: array expected";
            for (var i = 0; i < message.float_array.length; ++i)
                if (typeof message.float_array[i] !== "number")
                    return "float_array: number[] expected";
        }
        if (message.string_array != null && message.hasOwnProperty("string_array")) {
            if (!Array.isArray(message.string_array))
                return "string_array: array expected";
            for (var i = 0; i < message.string_array.length; ++i)
                if (!$util.isString(message.string_array[i]))
                    return "string_array: string[] expected";
        }
        return null;
    };

    /**
     * Creates an ExecuteServiceArgument message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ExecuteServiceArgument
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ExecuteServiceArgument} ExecuteServiceArgument
     */
    ExecuteServiceArgument.fromObject = function fromObject(object) {
        if (object instanceof $root.ExecuteServiceArgument)
            return object;
        var message = new $root.ExecuteServiceArgument();
        if (object.bool_ != null)
            message.bool_ = Boolean(object.bool_);
        if (object.legacy_int != null)
            message.legacy_int = object.legacy_int | 0;
        if (object.float_ != null)
            message.float_ = Number(object.float_);
        if (object.string_ != null)
            message.string_ = String(object.string_);
        if (object.int_ != null)
            message.int_ = object.int_ | 0;
        if (object.bool_array) {
            if (!Array.isArray(object.bool_array))
                throw TypeError(".ExecuteServiceArgument.bool_array: array expected");
            message.bool_array = [];
            for (var i = 0; i < object.bool_array.length; ++i)
                message.bool_array[i] = Boolean(object.bool_array[i]);
        }
        if (object.int_array) {
            if (!Array.isArray(object.int_array))
                throw TypeError(".ExecuteServiceArgument.int_array: array expected");
            message.int_array = [];
            for (var i = 0; i < object.int_array.length; ++i)
                message.int_array[i] = object.int_array[i] | 0;
        }
        if (object.float_array) {
            if (!Array.isArray(object.float_array))
                throw TypeError(".ExecuteServiceArgument.float_array: array expected");
            message.float_array = [];
            for (var i = 0; i < object.float_array.length; ++i)
                message.float_array[i] = Number(object.float_array[i]);
        }
        if (object.string_array) {
            if (!Array.isArray(object.string_array))
                throw TypeError(".ExecuteServiceArgument.string_array: array expected");
            message.string_array = [];
            for (var i = 0; i < object.string_array.length; ++i)
                message.string_array[i] = String(object.string_array[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from an ExecuteServiceArgument message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ExecuteServiceArgument
     * @static
     * @param {ExecuteServiceArgument} message ExecuteServiceArgument
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ExecuteServiceArgument.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.bool_array = [];
            object.int_array = [];
            object.float_array = [];
            object.string_array = [];
        }
        if (options.defaults) {
            object.bool_ = false;
            object.legacy_int = 0;
            object.float_ = 0;
            object.string_ = "";
            object.int_ = 0;
        }
        if (message.bool_ != null && message.hasOwnProperty("bool_"))
            object.bool_ = message.bool_;
        if (message.legacy_int != null && message.hasOwnProperty("legacy_int"))
            object.legacy_int = message.legacy_int;
        if (message.float_ != null && message.hasOwnProperty("float_"))
            object.float_ = options.json && !isFinite(message.float_) ? String(message.float_) : message.float_;
        if (message.string_ != null && message.hasOwnProperty("string_"))
            object.string_ = message.string_;
        if (message.int_ != null && message.hasOwnProperty("int_"))
            object.int_ = message.int_;
        if (message.bool_array && message.bool_array.length) {
            object.bool_array = [];
            for (var j = 0; j < message.bool_array.length; ++j)
                object.bool_array[j] = message.bool_array[j];
        }
        if (message.int_array && message.int_array.length) {
            object.int_array = [];
            for (var j = 0; j < message.int_array.length; ++j)
                object.int_array[j] = message.int_array[j];
        }
        if (message.float_array && message.float_array.length) {
            object.float_array = [];
            for (var j = 0; j < message.float_array.length; ++j)
                object.float_array[j] = options.json && !isFinite(message.float_array[j]) ? String(message.float_array[j]) : message.float_array[j];
        }
        if (message.string_array && message.string_array.length) {
            object.string_array = [];
            for (var j = 0; j < message.string_array.length; ++j)
                object.string_array[j] = message.string_array[j];
        }
        return object;
    };

    /**
     * Converts this ExecuteServiceArgument to JSON.
     * @function toJSON
     * @memberof ExecuteServiceArgument
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ExecuteServiceArgument.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ExecuteServiceArgument
     * @function getTypeUrl
     * @memberof ExecuteServiceArgument
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ExecuteServiceArgument.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ExecuteServiceArgument";
    };

    return ExecuteServiceArgument;
})();

$root.ExecuteServiceRequest = (function() {

    /**
     * Properties of an ExecuteServiceRequest.
     * @exports IExecuteServiceRequest
     * @interface IExecuteServiceRequest
     * @property {number|null} [key] ExecuteServiceRequest key
     * @property {Array.<IExecuteServiceArgument>|null} [args] ExecuteServiceRequest args
     */

    /**
     * Constructs a new ExecuteServiceRequest.
     * @exports ExecuteServiceRequest
     * @classdesc Represents an ExecuteServiceRequest.
     * @implements IExecuteServiceRequest
     * @constructor
     * @param {IExecuteServiceRequest=} [properties] Properties to set
     */
    function ExecuteServiceRequest(properties) {
        this.args = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ExecuteServiceRequest key.
     * @member {number} key
     * @memberof ExecuteServiceRequest
     * @instance
     */
    ExecuteServiceRequest.prototype.key = 0;

    /**
     * ExecuteServiceRequest args.
     * @member {Array.<IExecuteServiceArgument>} args
     * @memberof ExecuteServiceRequest
     * @instance
     */
    ExecuteServiceRequest.prototype.args = $util.emptyArray;

    /**
     * Creates a new ExecuteServiceRequest instance using the specified properties.
     * @function create
     * @memberof ExecuteServiceRequest
     * @static
     * @param {IExecuteServiceRequest=} [properties] Properties to set
     * @returns {ExecuteServiceRequest} ExecuteServiceRequest instance
     */
    ExecuteServiceRequest.create = function create(properties) {
        return new ExecuteServiceRequest(properties);
    };

    /**
     * Encodes the specified ExecuteServiceRequest message. Does not implicitly {@link ExecuteServiceRequest.verify|verify} messages.
     * @function encode
     * @memberof ExecuteServiceRequest
     * @static
     * @param {IExecuteServiceRequest} message ExecuteServiceRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ExecuteServiceRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.args != null && message.args.length)
            for (var i = 0; i < message.args.length; ++i)
                $root.ExecuteServiceArgument.encode(message.args[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ExecuteServiceRequest message, length delimited. Does not implicitly {@link ExecuteServiceRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ExecuteServiceRequest
     * @static
     * @param {IExecuteServiceRequest} message ExecuteServiceRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ExecuteServiceRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an ExecuteServiceRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ExecuteServiceRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ExecuteServiceRequest} ExecuteServiceRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ExecuteServiceRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ExecuteServiceRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    if (!(message.args && message.args.length))
                        message.args = [];
                    message.args.push($root.ExecuteServiceArgument.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an ExecuteServiceRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ExecuteServiceRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ExecuteServiceRequest} ExecuteServiceRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ExecuteServiceRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an ExecuteServiceRequest message.
     * @function verify
     * @memberof ExecuteServiceRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ExecuteServiceRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.args != null && message.hasOwnProperty("args")) {
            if (!Array.isArray(message.args))
                return "args: array expected";
            for (var i = 0; i < message.args.length; ++i) {
                var error = $root.ExecuteServiceArgument.verify(message.args[i]);
                if (error)
                    return "args." + error;
            }
        }
        return null;
    };

    /**
     * Creates an ExecuteServiceRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ExecuteServiceRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ExecuteServiceRequest} ExecuteServiceRequest
     */
    ExecuteServiceRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ExecuteServiceRequest)
            return object;
        var message = new $root.ExecuteServiceRequest();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.args) {
            if (!Array.isArray(object.args))
                throw TypeError(".ExecuteServiceRequest.args: array expected");
            message.args = [];
            for (var i = 0; i < object.args.length; ++i) {
                if (typeof object.args[i] !== "object")
                    throw TypeError(".ExecuteServiceRequest.args: object expected");
                message.args[i] = $root.ExecuteServiceArgument.fromObject(object.args[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from an ExecuteServiceRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ExecuteServiceRequest
     * @static
     * @param {ExecuteServiceRequest} message ExecuteServiceRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ExecuteServiceRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.args = [];
        if (options.defaults)
            object.key = 0;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.args && message.args.length) {
            object.args = [];
            for (var j = 0; j < message.args.length; ++j)
                object.args[j] = $root.ExecuteServiceArgument.toObject(message.args[j], options);
        }
        return object;
    };

    /**
     * Converts this ExecuteServiceRequest to JSON.
     * @function toJSON
     * @memberof ExecuteServiceRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ExecuteServiceRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ExecuteServiceRequest
     * @function getTypeUrl
     * @memberof ExecuteServiceRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ExecuteServiceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ExecuteServiceRequest";
    };

    return ExecuteServiceRequest;
})();

$root.ListEntitiesCameraResponse = (function() {

    /**
     * Properties of a ListEntitiesCameraResponse.
     * @exports IListEntitiesCameraResponse
     * @interface IListEntitiesCameraResponse
     * @property {string|null} [object_id] ListEntitiesCameraResponse object_id
     * @property {number|null} [key] ListEntitiesCameraResponse key
     * @property {string|null} [name] ListEntitiesCameraResponse name
     * @property {boolean|null} [disabled_by_default] ListEntitiesCameraResponse disabled_by_default
     * @property {string|null} [icon] ListEntitiesCameraResponse icon
     * @property {EntityCategory|null} [entity_category] ListEntitiesCameraResponse entity_category
     * @property {number|null} [device_id] ListEntitiesCameraResponse device_id
     */

    /**
     * Constructs a new ListEntitiesCameraResponse.
     * @exports ListEntitiesCameraResponse
     * @classdesc Represents a ListEntitiesCameraResponse.
     * @implements IListEntitiesCameraResponse
     * @constructor
     * @param {IListEntitiesCameraResponse=} [properties] Properties to set
     */
    function ListEntitiesCameraResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesCameraResponse object_id.
     * @member {string} object_id
     * @memberof ListEntitiesCameraResponse
     * @instance
     */
    ListEntitiesCameraResponse.prototype.object_id = "";

    /**
     * ListEntitiesCameraResponse key.
     * @member {number} key
     * @memberof ListEntitiesCameraResponse
     * @instance
     */
    ListEntitiesCameraResponse.prototype.key = 0;

    /**
     * ListEntitiesCameraResponse name.
     * @member {string} name
     * @memberof ListEntitiesCameraResponse
     * @instance
     */
    ListEntitiesCameraResponse.prototype.name = "";

    /**
     * ListEntitiesCameraResponse disabled_by_default.
     * @member {boolean} disabled_by_default
     * @memberof ListEntitiesCameraResponse
     * @instance
     */
    ListEntitiesCameraResponse.prototype.disabled_by_default = false;

    /**
     * ListEntitiesCameraResponse icon.
     * @member {string} icon
     * @memberof ListEntitiesCameraResponse
     * @instance
     */
    ListEntitiesCameraResponse.prototype.icon = "";

    /**
     * ListEntitiesCameraResponse entity_category.
     * @member {EntityCategory} entity_category
     * @memberof ListEntitiesCameraResponse
     * @instance
     */
    ListEntitiesCameraResponse.prototype.entity_category = 0;

    /**
     * ListEntitiesCameraResponse device_id.
     * @member {number} device_id
     * @memberof ListEntitiesCameraResponse
     * @instance
     */
    ListEntitiesCameraResponse.prototype.device_id = 0;

    /**
     * Creates a new ListEntitiesCameraResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesCameraResponse
     * @static
     * @param {IListEntitiesCameraResponse=} [properties] Properties to set
     * @returns {ListEntitiesCameraResponse} ListEntitiesCameraResponse instance
     */
    ListEntitiesCameraResponse.create = function create(properties) {
        return new ListEntitiesCameraResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesCameraResponse message. Does not implicitly {@link ListEntitiesCameraResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesCameraResponse
     * @static
     * @param {IListEntitiesCameraResponse} message ListEntitiesCameraResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesCameraResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.object_id != null && Object.hasOwnProperty.call(message, "object_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.object_id);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.disabled_by_default != null && Object.hasOwnProperty.call(message, "disabled_by_default"))
            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.disabled_by_default);
        if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.icon);
        if (message.entity_category != null && Object.hasOwnProperty.call(message, "entity_category"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.entity_category);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesCameraResponse message, length delimited. Does not implicitly {@link ListEntitiesCameraResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesCameraResponse
     * @static
     * @param {IListEntitiesCameraResponse} message ListEntitiesCameraResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesCameraResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesCameraResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesCameraResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesCameraResponse} ListEntitiesCameraResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesCameraResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesCameraResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.object_id = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 5: {
                    message.disabled_by_default = reader.bool();
                    break;
                }
            case 6: {
                    message.icon = reader.string();
                    break;
                }
            case 7: {
                    message.entity_category = reader.int32();
                    break;
                }
            case 8: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesCameraResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesCameraResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesCameraResponse} ListEntitiesCameraResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesCameraResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesCameraResponse message.
     * @function verify
     * @memberof ListEntitiesCameraResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesCameraResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            if (!$util.isString(message.object_id))
                return "object_id: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            if (typeof message.disabled_by_default !== "boolean")
                return "disabled_by_default: boolean expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isString(message.icon))
                return "icon: string expected";
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            switch (message.entity_category) {
            default:
                return "entity_category: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ListEntitiesCameraResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesCameraResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesCameraResponse} ListEntitiesCameraResponse
     */
    ListEntitiesCameraResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesCameraResponse)
            return object;
        var message = new $root.ListEntitiesCameraResponse();
        if (object.object_id != null)
            message.object_id = String(object.object_id);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.disabled_by_default != null)
            message.disabled_by_default = Boolean(object.disabled_by_default);
        if (object.icon != null)
            message.icon = String(object.icon);
        switch (object.entity_category) {
        default:
            if (typeof object.entity_category === "number") {
                message.entity_category = object.entity_category;
                break;
            }
            break;
        case "ENTITY_CATEGORY_NONE":
        case 0:
            message.entity_category = 0;
            break;
        case "ENTITY_CATEGORY_CONFIG":
        case 1:
            message.entity_category = 1;
            break;
        case "ENTITY_CATEGORY_DIAGNOSTIC":
        case 2:
            message.entity_category = 2;
            break;
        }
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesCameraResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesCameraResponse
     * @static
     * @param {ListEntitiesCameraResponse} message ListEntitiesCameraResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesCameraResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.object_id = "";
            object.key = 0;
            object.name = "";
            object.disabled_by_default = false;
            object.icon = "";
            object.entity_category = options.enums === String ? "ENTITY_CATEGORY_NONE" : 0;
            object.device_id = 0;
        }
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            object.object_id = message.object_id;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            object.disabled_by_default = message.disabled_by_default;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            object.entity_category = options.enums === String ? $root.EntityCategory[message.entity_category] === undefined ? message.entity_category : $root.EntityCategory[message.entity_category] : message.entity_category;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ListEntitiesCameraResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesCameraResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesCameraResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesCameraResponse
     * @function getTypeUrl
     * @memberof ListEntitiesCameraResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesCameraResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesCameraResponse";
    };

    return ListEntitiesCameraResponse;
})();

$root.CameraImageResponse = (function() {

    /**
     * Properties of a CameraImageResponse.
     * @exports ICameraImageResponse
     * @interface ICameraImageResponse
     * @property {number|null} [key] CameraImageResponse key
     * @property {Uint8Array|null} [data] CameraImageResponse data
     * @property {boolean|null} [done] CameraImageResponse done
     * @property {number|null} [device_id] CameraImageResponse device_id
     */

    /**
     * Constructs a new CameraImageResponse.
     * @exports CameraImageResponse
     * @classdesc Represents a CameraImageResponse.
     * @implements ICameraImageResponse
     * @constructor
     * @param {ICameraImageResponse=} [properties] Properties to set
     */
    function CameraImageResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CameraImageResponse key.
     * @member {number} key
     * @memberof CameraImageResponse
     * @instance
     */
    CameraImageResponse.prototype.key = 0;

    /**
     * CameraImageResponse data.
     * @member {Uint8Array} data
     * @memberof CameraImageResponse
     * @instance
     */
    CameraImageResponse.prototype.data = $util.newBuffer([]);

    /**
     * CameraImageResponse done.
     * @member {boolean} done
     * @memberof CameraImageResponse
     * @instance
     */
    CameraImageResponse.prototype.done = false;

    /**
     * CameraImageResponse device_id.
     * @member {number} device_id
     * @memberof CameraImageResponse
     * @instance
     */
    CameraImageResponse.prototype.device_id = 0;

    /**
     * Creates a new CameraImageResponse instance using the specified properties.
     * @function create
     * @memberof CameraImageResponse
     * @static
     * @param {ICameraImageResponse=} [properties] Properties to set
     * @returns {CameraImageResponse} CameraImageResponse instance
     */
    CameraImageResponse.create = function create(properties) {
        return new CameraImageResponse(properties);
    };

    /**
     * Encodes the specified CameraImageResponse message. Does not implicitly {@link CameraImageResponse.verify|verify} messages.
     * @function encode
     * @memberof CameraImageResponse
     * @static
     * @param {ICameraImageResponse} message CameraImageResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CameraImageResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);
        if (message.done != null && Object.hasOwnProperty.call(message, "done"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.done);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified CameraImageResponse message, length delimited. Does not implicitly {@link CameraImageResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CameraImageResponse
     * @static
     * @param {ICameraImageResponse} message CameraImageResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CameraImageResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CameraImageResponse message from the specified reader or buffer.
     * @function decode
     * @memberof CameraImageResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CameraImageResponse} CameraImageResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CameraImageResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CameraImageResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.data = reader.bytes();
                    break;
                }
            case 3: {
                    message.done = reader.bool();
                    break;
                }
            case 4: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CameraImageResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CameraImageResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CameraImageResponse} CameraImageResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CameraImageResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CameraImageResponse message.
     * @function verify
     * @memberof CameraImageResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CameraImageResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.data != null && message.hasOwnProperty("data"))
            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                return "data: buffer expected";
        if (message.done != null && message.hasOwnProperty("done"))
            if (typeof message.done !== "boolean")
                return "done: boolean expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a CameraImageResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CameraImageResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CameraImageResponse} CameraImageResponse
     */
    CameraImageResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.CameraImageResponse)
            return object;
        var message = new $root.CameraImageResponse();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.data != null)
            if (typeof object.data === "string")
                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
            else if (object.data.length >= 0)
                message.data = object.data;
        if (object.done != null)
            message.done = Boolean(object.done);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a CameraImageResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CameraImageResponse
     * @static
     * @param {CameraImageResponse} message CameraImageResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CameraImageResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            if (options.bytes === String)
                object.data = "";
            else {
                object.data = [];
                if (options.bytes !== Array)
                    object.data = $util.newBuffer(object.data);
            }
            object.done = false;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.data != null && message.hasOwnProperty("data"))
            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
        if (message.done != null && message.hasOwnProperty("done"))
            object.done = message.done;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this CameraImageResponse to JSON.
     * @function toJSON
     * @memberof CameraImageResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CameraImageResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for CameraImageResponse
     * @function getTypeUrl
     * @memberof CameraImageResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    CameraImageResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/CameraImageResponse";
    };

    return CameraImageResponse;
})();

$root.CameraImageRequest = (function() {

    /**
     * Properties of a CameraImageRequest.
     * @exports ICameraImageRequest
     * @interface ICameraImageRequest
     * @property {boolean|null} [single] CameraImageRequest single
     * @property {boolean|null} [stream] CameraImageRequest stream
     */

    /**
     * Constructs a new CameraImageRequest.
     * @exports CameraImageRequest
     * @classdesc Represents a CameraImageRequest.
     * @implements ICameraImageRequest
     * @constructor
     * @param {ICameraImageRequest=} [properties] Properties to set
     */
    function CameraImageRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * CameraImageRequest single.
     * @member {boolean} single
     * @memberof CameraImageRequest
     * @instance
     */
    CameraImageRequest.prototype.single = false;

    /**
     * CameraImageRequest stream.
     * @member {boolean} stream
     * @memberof CameraImageRequest
     * @instance
     */
    CameraImageRequest.prototype.stream = false;

    /**
     * Creates a new CameraImageRequest instance using the specified properties.
     * @function create
     * @memberof CameraImageRequest
     * @static
     * @param {ICameraImageRequest=} [properties] Properties to set
     * @returns {CameraImageRequest} CameraImageRequest instance
     */
    CameraImageRequest.create = function create(properties) {
        return new CameraImageRequest(properties);
    };

    /**
     * Encodes the specified CameraImageRequest message. Does not implicitly {@link CameraImageRequest.verify|verify} messages.
     * @function encode
     * @memberof CameraImageRequest
     * @static
     * @param {ICameraImageRequest} message CameraImageRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CameraImageRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.single != null && Object.hasOwnProperty.call(message, "single"))
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.single);
        if (message.stream != null && Object.hasOwnProperty.call(message, "stream"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.stream);
        return writer;
    };

    /**
     * Encodes the specified CameraImageRequest message, length delimited. Does not implicitly {@link CameraImageRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof CameraImageRequest
     * @static
     * @param {ICameraImageRequest} message CameraImageRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    CameraImageRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a CameraImageRequest message from the specified reader or buffer.
     * @function decode
     * @memberof CameraImageRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {CameraImageRequest} CameraImageRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CameraImageRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.CameraImageRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.single = reader.bool();
                    break;
                }
            case 2: {
                    message.stream = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a CameraImageRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof CameraImageRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {CameraImageRequest} CameraImageRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    CameraImageRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a CameraImageRequest message.
     * @function verify
     * @memberof CameraImageRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    CameraImageRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.single != null && message.hasOwnProperty("single"))
            if (typeof message.single !== "boolean")
                return "single: boolean expected";
        if (message.stream != null && message.hasOwnProperty("stream"))
            if (typeof message.stream !== "boolean")
                return "stream: boolean expected";
        return null;
    };

    /**
     * Creates a CameraImageRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof CameraImageRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {CameraImageRequest} CameraImageRequest
     */
    CameraImageRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.CameraImageRequest)
            return object;
        var message = new $root.CameraImageRequest();
        if (object.single != null)
            message.single = Boolean(object.single);
        if (object.stream != null)
            message.stream = Boolean(object.stream);
        return message;
    };

    /**
     * Creates a plain object from a CameraImageRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof CameraImageRequest
     * @static
     * @param {CameraImageRequest} message CameraImageRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    CameraImageRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.single = false;
            object.stream = false;
        }
        if (message.single != null && message.hasOwnProperty("single"))
            object.single = message.single;
        if (message.stream != null && message.hasOwnProperty("stream"))
            object.stream = message.stream;
        return object;
    };

    /**
     * Converts this CameraImageRequest to JSON.
     * @function toJSON
     * @memberof CameraImageRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    CameraImageRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for CameraImageRequest
     * @function getTypeUrl
     * @memberof CameraImageRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    CameraImageRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/CameraImageRequest";
    };

    return CameraImageRequest;
})();

/**
 * ClimateMode enum.
 * @exports ClimateMode
 * @enum {number}
 * @property {number} CLIMATE_MODE_OFF=0 CLIMATE_MODE_OFF value
 * @property {number} CLIMATE_MODE_HEAT_COOL=1 CLIMATE_MODE_HEAT_COOL value
 * @property {number} CLIMATE_MODE_COOL=2 CLIMATE_MODE_COOL value
 * @property {number} CLIMATE_MODE_HEAT=3 CLIMATE_MODE_HEAT value
 * @property {number} CLIMATE_MODE_FAN_ONLY=4 CLIMATE_MODE_FAN_ONLY value
 * @property {number} CLIMATE_MODE_DRY=5 CLIMATE_MODE_DRY value
 * @property {number} CLIMATE_MODE_AUTO=6 CLIMATE_MODE_AUTO value
 */
$root.ClimateMode = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "CLIMATE_MODE_OFF"] = 0;
    values[valuesById[1] = "CLIMATE_MODE_HEAT_COOL"] = 1;
    values[valuesById[2] = "CLIMATE_MODE_COOL"] = 2;
    values[valuesById[3] = "CLIMATE_MODE_HEAT"] = 3;
    values[valuesById[4] = "CLIMATE_MODE_FAN_ONLY"] = 4;
    values[valuesById[5] = "CLIMATE_MODE_DRY"] = 5;
    values[valuesById[6] = "CLIMATE_MODE_AUTO"] = 6;
    return values;
})();

/**
 * ClimateFanMode enum.
 * @exports ClimateFanMode
 * @enum {number}
 * @property {number} CLIMATE_FAN_ON=0 CLIMATE_FAN_ON value
 * @property {number} CLIMATE_FAN_OFF=1 CLIMATE_FAN_OFF value
 * @property {number} CLIMATE_FAN_AUTO=2 CLIMATE_FAN_AUTO value
 * @property {number} CLIMATE_FAN_LOW=3 CLIMATE_FAN_LOW value
 * @property {number} CLIMATE_FAN_MEDIUM=4 CLIMATE_FAN_MEDIUM value
 * @property {number} CLIMATE_FAN_HIGH=5 CLIMATE_FAN_HIGH value
 * @property {number} CLIMATE_FAN_MIDDLE=6 CLIMATE_FAN_MIDDLE value
 * @property {number} CLIMATE_FAN_FOCUS=7 CLIMATE_FAN_FOCUS value
 * @property {number} CLIMATE_FAN_DIFFUSE=8 CLIMATE_FAN_DIFFUSE value
 * @property {number} CLIMATE_FAN_QUIET=9 CLIMATE_FAN_QUIET value
 */
$root.ClimateFanMode = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "CLIMATE_FAN_ON"] = 0;
    values[valuesById[1] = "CLIMATE_FAN_OFF"] = 1;
    values[valuesById[2] = "CLIMATE_FAN_AUTO"] = 2;
    values[valuesById[3] = "CLIMATE_FAN_LOW"] = 3;
    values[valuesById[4] = "CLIMATE_FAN_MEDIUM"] = 4;
    values[valuesById[5] = "CLIMATE_FAN_HIGH"] = 5;
    values[valuesById[6] = "CLIMATE_FAN_MIDDLE"] = 6;
    values[valuesById[7] = "CLIMATE_FAN_FOCUS"] = 7;
    values[valuesById[8] = "CLIMATE_FAN_DIFFUSE"] = 8;
    values[valuesById[9] = "CLIMATE_FAN_QUIET"] = 9;
    return values;
})();

/**
 * ClimateSwingMode enum.
 * @exports ClimateSwingMode
 * @enum {number}
 * @property {number} CLIMATE_SWING_OFF=0 CLIMATE_SWING_OFF value
 * @property {number} CLIMATE_SWING_BOTH=1 CLIMATE_SWING_BOTH value
 * @property {number} CLIMATE_SWING_VERTICAL=2 CLIMATE_SWING_VERTICAL value
 * @property {number} CLIMATE_SWING_HORIZONTAL=3 CLIMATE_SWING_HORIZONTAL value
 */
$root.ClimateSwingMode = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "CLIMATE_SWING_OFF"] = 0;
    values[valuesById[1] = "CLIMATE_SWING_BOTH"] = 1;
    values[valuesById[2] = "CLIMATE_SWING_VERTICAL"] = 2;
    values[valuesById[3] = "CLIMATE_SWING_HORIZONTAL"] = 3;
    return values;
})();

/**
 * ClimateAction enum.
 * @exports ClimateAction
 * @enum {number}
 * @property {number} CLIMATE_ACTION_OFF=0 CLIMATE_ACTION_OFF value
 * @property {number} CLIMATE_ACTION_COOLING=2 CLIMATE_ACTION_COOLING value
 * @property {number} CLIMATE_ACTION_HEATING=3 CLIMATE_ACTION_HEATING value
 * @property {number} CLIMATE_ACTION_IDLE=4 CLIMATE_ACTION_IDLE value
 * @property {number} CLIMATE_ACTION_DRYING=5 CLIMATE_ACTION_DRYING value
 * @property {number} CLIMATE_ACTION_FAN=6 CLIMATE_ACTION_FAN value
 */
$root.ClimateAction = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "CLIMATE_ACTION_OFF"] = 0;
    values[valuesById[2] = "CLIMATE_ACTION_COOLING"] = 2;
    values[valuesById[3] = "CLIMATE_ACTION_HEATING"] = 3;
    values[valuesById[4] = "CLIMATE_ACTION_IDLE"] = 4;
    values[valuesById[5] = "CLIMATE_ACTION_DRYING"] = 5;
    values[valuesById[6] = "CLIMATE_ACTION_FAN"] = 6;
    return values;
})();

/**
 * ClimatePreset enum.
 * @exports ClimatePreset
 * @enum {number}
 * @property {number} CLIMATE_PRESET_NONE=0 CLIMATE_PRESET_NONE value
 * @property {number} CLIMATE_PRESET_HOME=1 CLIMATE_PRESET_HOME value
 * @property {number} CLIMATE_PRESET_AWAY=2 CLIMATE_PRESET_AWAY value
 * @property {number} CLIMATE_PRESET_BOOST=3 CLIMATE_PRESET_BOOST value
 * @property {number} CLIMATE_PRESET_COMFORT=4 CLIMATE_PRESET_COMFORT value
 * @property {number} CLIMATE_PRESET_ECO=5 CLIMATE_PRESET_ECO value
 * @property {number} CLIMATE_PRESET_SLEEP=6 CLIMATE_PRESET_SLEEP value
 * @property {number} CLIMATE_PRESET_ACTIVITY=7 CLIMATE_PRESET_ACTIVITY value
 */
$root.ClimatePreset = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "CLIMATE_PRESET_NONE"] = 0;
    values[valuesById[1] = "CLIMATE_PRESET_HOME"] = 1;
    values[valuesById[2] = "CLIMATE_PRESET_AWAY"] = 2;
    values[valuesById[3] = "CLIMATE_PRESET_BOOST"] = 3;
    values[valuesById[4] = "CLIMATE_PRESET_COMFORT"] = 4;
    values[valuesById[5] = "CLIMATE_PRESET_ECO"] = 5;
    values[valuesById[6] = "CLIMATE_PRESET_SLEEP"] = 6;
    values[valuesById[7] = "CLIMATE_PRESET_ACTIVITY"] = 7;
    return values;
})();

$root.ListEntitiesClimateResponse = (function() {

    /**
     * Properties of a ListEntitiesClimateResponse.
     * @exports IListEntitiesClimateResponse
     * @interface IListEntitiesClimateResponse
     * @property {string|null} [object_id] ListEntitiesClimateResponse object_id
     * @property {number|null} [key] ListEntitiesClimateResponse key
     * @property {string|null} [name] ListEntitiesClimateResponse name
     * @property {boolean|null} [supports_current_temperature] ListEntitiesClimateResponse supports_current_temperature
     * @property {boolean|null} [supports_two_point_target_temperature] ListEntitiesClimateResponse supports_two_point_target_temperature
     * @property {Array.<ClimateMode>|null} [supported_modes] ListEntitiesClimateResponse supported_modes
     * @property {number|null} [visual_min_temperature] ListEntitiesClimateResponse visual_min_temperature
     * @property {number|null} [visual_max_temperature] ListEntitiesClimateResponse visual_max_temperature
     * @property {number|null} [visual_target_temperature_step] ListEntitiesClimateResponse visual_target_temperature_step
     * @property {boolean|null} [legacy_supports_away] ListEntitiesClimateResponse legacy_supports_away
     * @property {boolean|null} [supports_action] ListEntitiesClimateResponse supports_action
     * @property {Array.<ClimateFanMode>|null} [supported_fan_modes] ListEntitiesClimateResponse supported_fan_modes
     * @property {Array.<ClimateSwingMode>|null} [supported_swing_modes] ListEntitiesClimateResponse supported_swing_modes
     * @property {Array.<string>|null} [supported_custom_fan_modes] ListEntitiesClimateResponse supported_custom_fan_modes
     * @property {Array.<ClimatePreset>|null} [supported_presets] ListEntitiesClimateResponse supported_presets
     * @property {Array.<string>|null} [supported_custom_presets] ListEntitiesClimateResponse supported_custom_presets
     * @property {boolean|null} [disabled_by_default] ListEntitiesClimateResponse disabled_by_default
     * @property {string|null} [icon] ListEntitiesClimateResponse icon
     * @property {EntityCategory|null} [entity_category] ListEntitiesClimateResponse entity_category
     * @property {number|null} [visual_current_temperature_step] ListEntitiesClimateResponse visual_current_temperature_step
     * @property {boolean|null} [supports_current_humidity] ListEntitiesClimateResponse supports_current_humidity
     * @property {boolean|null} [supports_target_humidity] ListEntitiesClimateResponse supports_target_humidity
     * @property {number|null} [visual_min_humidity] ListEntitiesClimateResponse visual_min_humidity
     * @property {number|null} [visual_max_humidity] ListEntitiesClimateResponse visual_max_humidity
     * @property {number|null} [device_id] ListEntitiesClimateResponse device_id
     */

    /**
     * Constructs a new ListEntitiesClimateResponse.
     * @exports ListEntitiesClimateResponse
     * @classdesc Represents a ListEntitiesClimateResponse.
     * @implements IListEntitiesClimateResponse
     * @constructor
     * @param {IListEntitiesClimateResponse=} [properties] Properties to set
     */
    function ListEntitiesClimateResponse(properties) {
        this.supported_modes = [];
        this.supported_fan_modes = [];
        this.supported_swing_modes = [];
        this.supported_custom_fan_modes = [];
        this.supported_presets = [];
        this.supported_custom_presets = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesClimateResponse object_id.
     * @member {string} object_id
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.object_id = "";

    /**
     * ListEntitiesClimateResponse key.
     * @member {number} key
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.key = 0;

    /**
     * ListEntitiesClimateResponse name.
     * @member {string} name
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.name = "";

    /**
     * ListEntitiesClimateResponse supports_current_temperature.
     * @member {boolean} supports_current_temperature
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.supports_current_temperature = false;

    /**
     * ListEntitiesClimateResponse supports_two_point_target_temperature.
     * @member {boolean} supports_two_point_target_temperature
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.supports_two_point_target_temperature = false;

    /**
     * ListEntitiesClimateResponse supported_modes.
     * @member {Array.<ClimateMode>} supported_modes
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.supported_modes = $util.emptyArray;

    /**
     * ListEntitiesClimateResponse visual_min_temperature.
     * @member {number} visual_min_temperature
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.visual_min_temperature = 0;

    /**
     * ListEntitiesClimateResponse visual_max_temperature.
     * @member {number} visual_max_temperature
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.visual_max_temperature = 0;

    /**
     * ListEntitiesClimateResponse visual_target_temperature_step.
     * @member {number} visual_target_temperature_step
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.visual_target_temperature_step = 0;

    /**
     * ListEntitiesClimateResponse legacy_supports_away.
     * @member {boolean} legacy_supports_away
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.legacy_supports_away = false;

    /**
     * ListEntitiesClimateResponse supports_action.
     * @member {boolean} supports_action
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.supports_action = false;

    /**
     * ListEntitiesClimateResponse supported_fan_modes.
     * @member {Array.<ClimateFanMode>} supported_fan_modes
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.supported_fan_modes = $util.emptyArray;

    /**
     * ListEntitiesClimateResponse supported_swing_modes.
     * @member {Array.<ClimateSwingMode>} supported_swing_modes
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.supported_swing_modes = $util.emptyArray;

    /**
     * ListEntitiesClimateResponse supported_custom_fan_modes.
     * @member {Array.<string>} supported_custom_fan_modes
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.supported_custom_fan_modes = $util.emptyArray;

    /**
     * ListEntitiesClimateResponse supported_presets.
     * @member {Array.<ClimatePreset>} supported_presets
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.supported_presets = $util.emptyArray;

    /**
     * ListEntitiesClimateResponse supported_custom_presets.
     * @member {Array.<string>} supported_custom_presets
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.supported_custom_presets = $util.emptyArray;

    /**
     * ListEntitiesClimateResponse disabled_by_default.
     * @member {boolean} disabled_by_default
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.disabled_by_default = false;

    /**
     * ListEntitiesClimateResponse icon.
     * @member {string} icon
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.icon = "";

    /**
     * ListEntitiesClimateResponse entity_category.
     * @member {EntityCategory} entity_category
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.entity_category = 0;

    /**
     * ListEntitiesClimateResponse visual_current_temperature_step.
     * @member {number} visual_current_temperature_step
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.visual_current_temperature_step = 0;

    /**
     * ListEntitiesClimateResponse supports_current_humidity.
     * @member {boolean} supports_current_humidity
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.supports_current_humidity = false;

    /**
     * ListEntitiesClimateResponse supports_target_humidity.
     * @member {boolean} supports_target_humidity
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.supports_target_humidity = false;

    /**
     * ListEntitiesClimateResponse visual_min_humidity.
     * @member {number} visual_min_humidity
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.visual_min_humidity = 0;

    /**
     * ListEntitiesClimateResponse visual_max_humidity.
     * @member {number} visual_max_humidity
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.visual_max_humidity = 0;

    /**
     * ListEntitiesClimateResponse device_id.
     * @member {number} device_id
     * @memberof ListEntitiesClimateResponse
     * @instance
     */
    ListEntitiesClimateResponse.prototype.device_id = 0;

    /**
     * Creates a new ListEntitiesClimateResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesClimateResponse
     * @static
     * @param {IListEntitiesClimateResponse=} [properties] Properties to set
     * @returns {ListEntitiesClimateResponse} ListEntitiesClimateResponse instance
     */
    ListEntitiesClimateResponse.create = function create(properties) {
        return new ListEntitiesClimateResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesClimateResponse message. Does not implicitly {@link ListEntitiesClimateResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesClimateResponse
     * @static
     * @param {IListEntitiesClimateResponse} message ListEntitiesClimateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesClimateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.object_id != null && Object.hasOwnProperty.call(message, "object_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.object_id);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.supports_current_temperature != null && Object.hasOwnProperty.call(message, "supports_current_temperature"))
            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.supports_current_temperature);
        if (message.supports_two_point_target_temperature != null && Object.hasOwnProperty.call(message, "supports_two_point_target_temperature"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.supports_two_point_target_temperature);
        if (message.supported_modes != null && message.supported_modes.length) {
            writer.uint32(/* id 7, wireType 2 =*/58).fork();
            for (var i = 0; i < message.supported_modes.length; ++i)
                writer.int32(message.supported_modes[i]);
            writer.ldelim();
        }
        if (message.visual_min_temperature != null && Object.hasOwnProperty.call(message, "visual_min_temperature"))
            writer.uint32(/* id 8, wireType 5 =*/69).float(message.visual_min_temperature);
        if (message.visual_max_temperature != null && Object.hasOwnProperty.call(message, "visual_max_temperature"))
            writer.uint32(/* id 9, wireType 5 =*/77).float(message.visual_max_temperature);
        if (message.visual_target_temperature_step != null && Object.hasOwnProperty.call(message, "visual_target_temperature_step"))
            writer.uint32(/* id 10, wireType 5 =*/85).float(message.visual_target_temperature_step);
        if (message.legacy_supports_away != null && Object.hasOwnProperty.call(message, "legacy_supports_away"))
            writer.uint32(/* id 11, wireType 0 =*/88).bool(message.legacy_supports_away);
        if (message.supports_action != null && Object.hasOwnProperty.call(message, "supports_action"))
            writer.uint32(/* id 12, wireType 0 =*/96).bool(message.supports_action);
        if (message.supported_fan_modes != null && message.supported_fan_modes.length) {
            writer.uint32(/* id 13, wireType 2 =*/106).fork();
            for (var i = 0; i < message.supported_fan_modes.length; ++i)
                writer.int32(message.supported_fan_modes[i]);
            writer.ldelim();
        }
        if (message.supported_swing_modes != null && message.supported_swing_modes.length) {
            writer.uint32(/* id 14, wireType 2 =*/114).fork();
            for (var i = 0; i < message.supported_swing_modes.length; ++i)
                writer.int32(message.supported_swing_modes[i]);
            writer.ldelim();
        }
        if (message.supported_custom_fan_modes != null && message.supported_custom_fan_modes.length)
            for (var i = 0; i < message.supported_custom_fan_modes.length; ++i)
                writer.uint32(/* id 15, wireType 2 =*/122).string(message.supported_custom_fan_modes[i]);
        if (message.supported_presets != null && message.supported_presets.length) {
            writer.uint32(/* id 16, wireType 2 =*/130).fork();
            for (var i = 0; i < message.supported_presets.length; ++i)
                writer.int32(message.supported_presets[i]);
            writer.ldelim();
        }
        if (message.supported_custom_presets != null && message.supported_custom_presets.length)
            for (var i = 0; i < message.supported_custom_presets.length; ++i)
                writer.uint32(/* id 17, wireType 2 =*/138).string(message.supported_custom_presets[i]);
        if (message.disabled_by_default != null && Object.hasOwnProperty.call(message, "disabled_by_default"))
            writer.uint32(/* id 18, wireType 0 =*/144).bool(message.disabled_by_default);
        if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
            writer.uint32(/* id 19, wireType 2 =*/154).string(message.icon);
        if (message.entity_category != null && Object.hasOwnProperty.call(message, "entity_category"))
            writer.uint32(/* id 20, wireType 0 =*/160).int32(message.entity_category);
        if (message.visual_current_temperature_step != null && Object.hasOwnProperty.call(message, "visual_current_temperature_step"))
            writer.uint32(/* id 21, wireType 5 =*/173).float(message.visual_current_temperature_step);
        if (message.supports_current_humidity != null && Object.hasOwnProperty.call(message, "supports_current_humidity"))
            writer.uint32(/* id 22, wireType 0 =*/176).bool(message.supports_current_humidity);
        if (message.supports_target_humidity != null && Object.hasOwnProperty.call(message, "supports_target_humidity"))
            writer.uint32(/* id 23, wireType 0 =*/184).bool(message.supports_target_humidity);
        if (message.visual_min_humidity != null && Object.hasOwnProperty.call(message, "visual_min_humidity"))
            writer.uint32(/* id 24, wireType 5 =*/197).float(message.visual_min_humidity);
        if (message.visual_max_humidity != null && Object.hasOwnProperty.call(message, "visual_max_humidity"))
            writer.uint32(/* id 25, wireType 5 =*/205).float(message.visual_max_humidity);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 26, wireType 0 =*/208).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesClimateResponse message, length delimited. Does not implicitly {@link ListEntitiesClimateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesClimateResponse
     * @static
     * @param {IListEntitiesClimateResponse} message ListEntitiesClimateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesClimateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesClimateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesClimateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesClimateResponse} ListEntitiesClimateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesClimateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesClimateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.object_id = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 5: {
                    message.supports_current_temperature = reader.bool();
                    break;
                }
            case 6: {
                    message.supports_two_point_target_temperature = reader.bool();
                    break;
                }
            case 7: {
                    if (!(message.supported_modes && message.supported_modes.length))
                        message.supported_modes = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.supported_modes.push(reader.int32());
                    } else
                        message.supported_modes.push(reader.int32());
                    break;
                }
            case 8: {
                    message.visual_min_temperature = reader.float();
                    break;
                }
            case 9: {
                    message.visual_max_temperature = reader.float();
                    break;
                }
            case 10: {
                    message.visual_target_temperature_step = reader.float();
                    break;
                }
            case 11: {
                    message.legacy_supports_away = reader.bool();
                    break;
                }
            case 12: {
                    message.supports_action = reader.bool();
                    break;
                }
            case 13: {
                    if (!(message.supported_fan_modes && message.supported_fan_modes.length))
                        message.supported_fan_modes = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.supported_fan_modes.push(reader.int32());
                    } else
                        message.supported_fan_modes.push(reader.int32());
                    break;
                }
            case 14: {
                    if (!(message.supported_swing_modes && message.supported_swing_modes.length))
                        message.supported_swing_modes = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.supported_swing_modes.push(reader.int32());
                    } else
                        message.supported_swing_modes.push(reader.int32());
                    break;
                }
            case 15: {
                    if (!(message.supported_custom_fan_modes && message.supported_custom_fan_modes.length))
                        message.supported_custom_fan_modes = [];
                    message.supported_custom_fan_modes.push(reader.string());
                    break;
                }
            case 16: {
                    if (!(message.supported_presets && message.supported_presets.length))
                        message.supported_presets = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.supported_presets.push(reader.int32());
                    } else
                        message.supported_presets.push(reader.int32());
                    break;
                }
            case 17: {
                    if (!(message.supported_custom_presets && message.supported_custom_presets.length))
                        message.supported_custom_presets = [];
                    message.supported_custom_presets.push(reader.string());
                    break;
                }
            case 18: {
                    message.disabled_by_default = reader.bool();
                    break;
                }
            case 19: {
                    message.icon = reader.string();
                    break;
                }
            case 20: {
                    message.entity_category = reader.int32();
                    break;
                }
            case 21: {
                    message.visual_current_temperature_step = reader.float();
                    break;
                }
            case 22: {
                    message.supports_current_humidity = reader.bool();
                    break;
                }
            case 23: {
                    message.supports_target_humidity = reader.bool();
                    break;
                }
            case 24: {
                    message.visual_min_humidity = reader.float();
                    break;
                }
            case 25: {
                    message.visual_max_humidity = reader.float();
                    break;
                }
            case 26: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesClimateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesClimateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesClimateResponse} ListEntitiesClimateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesClimateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesClimateResponse message.
     * @function verify
     * @memberof ListEntitiesClimateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesClimateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            if (!$util.isString(message.object_id))
                return "object_id: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.supports_current_temperature != null && message.hasOwnProperty("supports_current_temperature"))
            if (typeof message.supports_current_temperature !== "boolean")
                return "supports_current_temperature: boolean expected";
        if (message.supports_two_point_target_temperature != null && message.hasOwnProperty("supports_two_point_target_temperature"))
            if (typeof message.supports_two_point_target_temperature !== "boolean")
                return "supports_two_point_target_temperature: boolean expected";
        if (message.supported_modes != null && message.hasOwnProperty("supported_modes")) {
            if (!Array.isArray(message.supported_modes))
                return "supported_modes: array expected";
            for (var i = 0; i < message.supported_modes.length; ++i)
                switch (message.supported_modes[i]) {
                default:
                    return "supported_modes: enum value[] expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                }
        }
        if (message.visual_min_temperature != null && message.hasOwnProperty("visual_min_temperature"))
            if (typeof message.visual_min_temperature !== "number")
                return "visual_min_temperature: number expected";
        if (message.visual_max_temperature != null && message.hasOwnProperty("visual_max_temperature"))
            if (typeof message.visual_max_temperature !== "number")
                return "visual_max_temperature: number expected";
        if (message.visual_target_temperature_step != null && message.hasOwnProperty("visual_target_temperature_step"))
            if (typeof message.visual_target_temperature_step !== "number")
                return "visual_target_temperature_step: number expected";
        if (message.legacy_supports_away != null && message.hasOwnProperty("legacy_supports_away"))
            if (typeof message.legacy_supports_away !== "boolean")
                return "legacy_supports_away: boolean expected";
        if (message.supports_action != null && message.hasOwnProperty("supports_action"))
            if (typeof message.supports_action !== "boolean")
                return "supports_action: boolean expected";
        if (message.supported_fan_modes != null && message.hasOwnProperty("supported_fan_modes")) {
            if (!Array.isArray(message.supported_fan_modes))
                return "supported_fan_modes: array expected";
            for (var i = 0; i < message.supported_fan_modes.length; ++i)
                switch (message.supported_fan_modes[i]) {
                default:
                    return "supported_fan_modes: enum value[] expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    break;
                }
        }
        if (message.supported_swing_modes != null && message.hasOwnProperty("supported_swing_modes")) {
            if (!Array.isArray(message.supported_swing_modes))
                return "supported_swing_modes: array expected";
            for (var i = 0; i < message.supported_swing_modes.length; ++i)
                switch (message.supported_swing_modes[i]) {
                default:
                    return "supported_swing_modes: enum value[] expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
        }
        if (message.supported_custom_fan_modes != null && message.hasOwnProperty("supported_custom_fan_modes")) {
            if (!Array.isArray(message.supported_custom_fan_modes))
                return "supported_custom_fan_modes: array expected";
            for (var i = 0; i < message.supported_custom_fan_modes.length; ++i)
                if (!$util.isString(message.supported_custom_fan_modes[i]))
                    return "supported_custom_fan_modes: string[] expected";
        }
        if (message.supported_presets != null && message.hasOwnProperty("supported_presets")) {
            if (!Array.isArray(message.supported_presets))
                return "supported_presets: array expected";
            for (var i = 0; i < message.supported_presets.length; ++i)
                switch (message.supported_presets[i]) {
                default:
                    return "supported_presets: enum value[] expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                    break;
                }
        }
        if (message.supported_custom_presets != null && message.hasOwnProperty("supported_custom_presets")) {
            if (!Array.isArray(message.supported_custom_presets))
                return "supported_custom_presets: array expected";
            for (var i = 0; i < message.supported_custom_presets.length; ++i)
                if (!$util.isString(message.supported_custom_presets[i]))
                    return "supported_custom_presets: string[] expected";
        }
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            if (typeof message.disabled_by_default !== "boolean")
                return "disabled_by_default: boolean expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isString(message.icon))
                return "icon: string expected";
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            switch (message.entity_category) {
            default:
                return "entity_category: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.visual_current_temperature_step != null && message.hasOwnProperty("visual_current_temperature_step"))
            if (typeof message.visual_current_temperature_step !== "number")
                return "visual_current_temperature_step: number expected";
        if (message.supports_current_humidity != null && message.hasOwnProperty("supports_current_humidity"))
            if (typeof message.supports_current_humidity !== "boolean")
                return "supports_current_humidity: boolean expected";
        if (message.supports_target_humidity != null && message.hasOwnProperty("supports_target_humidity"))
            if (typeof message.supports_target_humidity !== "boolean")
                return "supports_target_humidity: boolean expected";
        if (message.visual_min_humidity != null && message.hasOwnProperty("visual_min_humidity"))
            if (typeof message.visual_min_humidity !== "number")
                return "visual_min_humidity: number expected";
        if (message.visual_max_humidity != null && message.hasOwnProperty("visual_max_humidity"))
            if (typeof message.visual_max_humidity !== "number")
                return "visual_max_humidity: number expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ListEntitiesClimateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesClimateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesClimateResponse} ListEntitiesClimateResponse
     */
    ListEntitiesClimateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesClimateResponse)
            return object;
        var message = new $root.ListEntitiesClimateResponse();
        if (object.object_id != null)
            message.object_id = String(object.object_id);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.supports_current_temperature != null)
            message.supports_current_temperature = Boolean(object.supports_current_temperature);
        if (object.supports_two_point_target_temperature != null)
            message.supports_two_point_target_temperature = Boolean(object.supports_two_point_target_temperature);
        if (object.supported_modes) {
            if (!Array.isArray(object.supported_modes))
                throw TypeError(".ListEntitiesClimateResponse.supported_modes: array expected");
            message.supported_modes = [];
            for (var i = 0; i < object.supported_modes.length; ++i)
                switch (object.supported_modes[i]) {
                default:
                    if (typeof object.supported_modes[i] === "number") {
                        message.supported_modes[i] = object.supported_modes[i];
                        break;
                    }
                case "CLIMATE_MODE_OFF":
                case 0:
                    message.supported_modes[i] = 0;
                    break;
                case "CLIMATE_MODE_HEAT_COOL":
                case 1:
                    message.supported_modes[i] = 1;
                    break;
                case "CLIMATE_MODE_COOL":
                case 2:
                    message.supported_modes[i] = 2;
                    break;
                case "CLIMATE_MODE_HEAT":
                case 3:
                    message.supported_modes[i] = 3;
                    break;
                case "CLIMATE_MODE_FAN_ONLY":
                case 4:
                    message.supported_modes[i] = 4;
                    break;
                case "CLIMATE_MODE_DRY":
                case 5:
                    message.supported_modes[i] = 5;
                    break;
                case "CLIMATE_MODE_AUTO":
                case 6:
                    message.supported_modes[i] = 6;
                    break;
                }
        }
        if (object.visual_min_temperature != null)
            message.visual_min_temperature = Number(object.visual_min_temperature);
        if (object.visual_max_temperature != null)
            message.visual_max_temperature = Number(object.visual_max_temperature);
        if (object.visual_target_temperature_step != null)
            message.visual_target_temperature_step = Number(object.visual_target_temperature_step);
        if (object.legacy_supports_away != null)
            message.legacy_supports_away = Boolean(object.legacy_supports_away);
        if (object.supports_action != null)
            message.supports_action = Boolean(object.supports_action);
        if (object.supported_fan_modes) {
            if (!Array.isArray(object.supported_fan_modes))
                throw TypeError(".ListEntitiesClimateResponse.supported_fan_modes: array expected");
            message.supported_fan_modes = [];
            for (var i = 0; i < object.supported_fan_modes.length; ++i)
                switch (object.supported_fan_modes[i]) {
                default:
                    if (typeof object.supported_fan_modes[i] === "number") {
                        message.supported_fan_modes[i] = object.supported_fan_modes[i];
                        break;
                    }
                case "CLIMATE_FAN_ON":
                case 0:
                    message.supported_fan_modes[i] = 0;
                    break;
                case "CLIMATE_FAN_OFF":
                case 1:
                    message.supported_fan_modes[i] = 1;
                    break;
                case "CLIMATE_FAN_AUTO":
                case 2:
                    message.supported_fan_modes[i] = 2;
                    break;
                case "CLIMATE_FAN_LOW":
                case 3:
                    message.supported_fan_modes[i] = 3;
                    break;
                case "CLIMATE_FAN_MEDIUM":
                case 4:
                    message.supported_fan_modes[i] = 4;
                    break;
                case "CLIMATE_FAN_HIGH":
                case 5:
                    message.supported_fan_modes[i] = 5;
                    break;
                case "CLIMATE_FAN_MIDDLE":
                case 6:
                    message.supported_fan_modes[i] = 6;
                    break;
                case "CLIMATE_FAN_FOCUS":
                case 7:
                    message.supported_fan_modes[i] = 7;
                    break;
                case "CLIMATE_FAN_DIFFUSE":
                case 8:
                    message.supported_fan_modes[i] = 8;
                    break;
                case "CLIMATE_FAN_QUIET":
                case 9:
                    message.supported_fan_modes[i] = 9;
                    break;
                }
        }
        if (object.supported_swing_modes) {
            if (!Array.isArray(object.supported_swing_modes))
                throw TypeError(".ListEntitiesClimateResponse.supported_swing_modes: array expected");
            message.supported_swing_modes = [];
            for (var i = 0; i < object.supported_swing_modes.length; ++i)
                switch (object.supported_swing_modes[i]) {
                default:
                    if (typeof object.supported_swing_modes[i] === "number") {
                        message.supported_swing_modes[i] = object.supported_swing_modes[i];
                        break;
                    }
                case "CLIMATE_SWING_OFF":
                case 0:
                    message.supported_swing_modes[i] = 0;
                    break;
                case "CLIMATE_SWING_BOTH":
                case 1:
                    message.supported_swing_modes[i] = 1;
                    break;
                case "CLIMATE_SWING_VERTICAL":
                case 2:
                    message.supported_swing_modes[i] = 2;
                    break;
                case "CLIMATE_SWING_HORIZONTAL":
                case 3:
                    message.supported_swing_modes[i] = 3;
                    break;
                }
        }
        if (object.supported_custom_fan_modes) {
            if (!Array.isArray(object.supported_custom_fan_modes))
                throw TypeError(".ListEntitiesClimateResponse.supported_custom_fan_modes: array expected");
            message.supported_custom_fan_modes = [];
            for (var i = 0; i < object.supported_custom_fan_modes.length; ++i)
                message.supported_custom_fan_modes[i] = String(object.supported_custom_fan_modes[i]);
        }
        if (object.supported_presets) {
            if (!Array.isArray(object.supported_presets))
                throw TypeError(".ListEntitiesClimateResponse.supported_presets: array expected");
            message.supported_presets = [];
            for (var i = 0; i < object.supported_presets.length; ++i)
                switch (object.supported_presets[i]) {
                default:
                    if (typeof object.supported_presets[i] === "number") {
                        message.supported_presets[i] = object.supported_presets[i];
                        break;
                    }
                case "CLIMATE_PRESET_NONE":
                case 0:
                    message.supported_presets[i] = 0;
                    break;
                case "CLIMATE_PRESET_HOME":
                case 1:
                    message.supported_presets[i] = 1;
                    break;
                case "CLIMATE_PRESET_AWAY":
                case 2:
                    message.supported_presets[i] = 2;
                    break;
                case "CLIMATE_PRESET_BOOST":
                case 3:
                    message.supported_presets[i] = 3;
                    break;
                case "CLIMATE_PRESET_COMFORT":
                case 4:
                    message.supported_presets[i] = 4;
                    break;
                case "CLIMATE_PRESET_ECO":
                case 5:
                    message.supported_presets[i] = 5;
                    break;
                case "CLIMATE_PRESET_SLEEP":
                case 6:
                    message.supported_presets[i] = 6;
                    break;
                case "CLIMATE_PRESET_ACTIVITY":
                case 7:
                    message.supported_presets[i] = 7;
                    break;
                }
        }
        if (object.supported_custom_presets) {
            if (!Array.isArray(object.supported_custom_presets))
                throw TypeError(".ListEntitiesClimateResponse.supported_custom_presets: array expected");
            message.supported_custom_presets = [];
            for (var i = 0; i < object.supported_custom_presets.length; ++i)
                message.supported_custom_presets[i] = String(object.supported_custom_presets[i]);
        }
        if (object.disabled_by_default != null)
            message.disabled_by_default = Boolean(object.disabled_by_default);
        if (object.icon != null)
            message.icon = String(object.icon);
        switch (object.entity_category) {
        default:
            if (typeof object.entity_category === "number") {
                message.entity_category = object.entity_category;
                break;
            }
            break;
        case "ENTITY_CATEGORY_NONE":
        case 0:
            message.entity_category = 0;
            break;
        case "ENTITY_CATEGORY_CONFIG":
        case 1:
            message.entity_category = 1;
            break;
        case "ENTITY_CATEGORY_DIAGNOSTIC":
        case 2:
            message.entity_category = 2;
            break;
        }
        if (object.visual_current_temperature_step != null)
            message.visual_current_temperature_step = Number(object.visual_current_temperature_step);
        if (object.supports_current_humidity != null)
            message.supports_current_humidity = Boolean(object.supports_current_humidity);
        if (object.supports_target_humidity != null)
            message.supports_target_humidity = Boolean(object.supports_target_humidity);
        if (object.visual_min_humidity != null)
            message.visual_min_humidity = Number(object.visual_min_humidity);
        if (object.visual_max_humidity != null)
            message.visual_max_humidity = Number(object.visual_max_humidity);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesClimateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesClimateResponse
     * @static
     * @param {ListEntitiesClimateResponse} message ListEntitiesClimateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesClimateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.supported_modes = [];
            object.supported_fan_modes = [];
            object.supported_swing_modes = [];
            object.supported_custom_fan_modes = [];
            object.supported_presets = [];
            object.supported_custom_presets = [];
        }
        if (options.defaults) {
            object.object_id = "";
            object.key = 0;
            object.name = "";
            object.supports_current_temperature = false;
            object.supports_two_point_target_temperature = false;
            object.visual_min_temperature = 0;
            object.visual_max_temperature = 0;
            object.visual_target_temperature_step = 0;
            object.legacy_supports_away = false;
            object.supports_action = false;
            object.disabled_by_default = false;
            object.icon = "";
            object.entity_category = options.enums === String ? "ENTITY_CATEGORY_NONE" : 0;
            object.visual_current_temperature_step = 0;
            object.supports_current_humidity = false;
            object.supports_target_humidity = false;
            object.visual_min_humidity = 0;
            object.visual_max_humidity = 0;
            object.device_id = 0;
        }
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            object.object_id = message.object_id;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.supports_current_temperature != null && message.hasOwnProperty("supports_current_temperature"))
            object.supports_current_temperature = message.supports_current_temperature;
        if (message.supports_two_point_target_temperature != null && message.hasOwnProperty("supports_two_point_target_temperature"))
            object.supports_two_point_target_temperature = message.supports_two_point_target_temperature;
        if (message.supported_modes && message.supported_modes.length) {
            object.supported_modes = [];
            for (var j = 0; j < message.supported_modes.length; ++j)
                object.supported_modes[j] = options.enums === String ? $root.ClimateMode[message.supported_modes[j]] === undefined ? message.supported_modes[j] : $root.ClimateMode[message.supported_modes[j]] : message.supported_modes[j];
        }
        if (message.visual_min_temperature != null && message.hasOwnProperty("visual_min_temperature"))
            object.visual_min_temperature = options.json && !isFinite(message.visual_min_temperature) ? String(message.visual_min_temperature) : message.visual_min_temperature;
        if (message.visual_max_temperature != null && message.hasOwnProperty("visual_max_temperature"))
            object.visual_max_temperature = options.json && !isFinite(message.visual_max_temperature) ? String(message.visual_max_temperature) : message.visual_max_temperature;
        if (message.visual_target_temperature_step != null && message.hasOwnProperty("visual_target_temperature_step"))
            object.visual_target_temperature_step = options.json && !isFinite(message.visual_target_temperature_step) ? String(message.visual_target_temperature_step) : message.visual_target_temperature_step;
        if (message.legacy_supports_away != null && message.hasOwnProperty("legacy_supports_away"))
            object.legacy_supports_away = message.legacy_supports_away;
        if (message.supports_action != null && message.hasOwnProperty("supports_action"))
            object.supports_action = message.supports_action;
        if (message.supported_fan_modes && message.supported_fan_modes.length) {
            object.supported_fan_modes = [];
            for (var j = 0; j < message.supported_fan_modes.length; ++j)
                object.supported_fan_modes[j] = options.enums === String ? $root.ClimateFanMode[message.supported_fan_modes[j]] === undefined ? message.supported_fan_modes[j] : $root.ClimateFanMode[message.supported_fan_modes[j]] : message.supported_fan_modes[j];
        }
        if (message.supported_swing_modes && message.supported_swing_modes.length) {
            object.supported_swing_modes = [];
            for (var j = 0; j < message.supported_swing_modes.length; ++j)
                object.supported_swing_modes[j] = options.enums === String ? $root.ClimateSwingMode[message.supported_swing_modes[j]] === undefined ? message.supported_swing_modes[j] : $root.ClimateSwingMode[message.supported_swing_modes[j]] : message.supported_swing_modes[j];
        }
        if (message.supported_custom_fan_modes && message.supported_custom_fan_modes.length) {
            object.supported_custom_fan_modes = [];
            for (var j = 0; j < message.supported_custom_fan_modes.length; ++j)
                object.supported_custom_fan_modes[j] = message.supported_custom_fan_modes[j];
        }
        if (message.supported_presets && message.supported_presets.length) {
            object.supported_presets = [];
            for (var j = 0; j < message.supported_presets.length; ++j)
                object.supported_presets[j] = options.enums === String ? $root.ClimatePreset[message.supported_presets[j]] === undefined ? message.supported_presets[j] : $root.ClimatePreset[message.supported_presets[j]] : message.supported_presets[j];
        }
        if (message.supported_custom_presets && message.supported_custom_presets.length) {
            object.supported_custom_presets = [];
            for (var j = 0; j < message.supported_custom_presets.length; ++j)
                object.supported_custom_presets[j] = message.supported_custom_presets[j];
        }
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            object.disabled_by_default = message.disabled_by_default;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            object.entity_category = options.enums === String ? $root.EntityCategory[message.entity_category] === undefined ? message.entity_category : $root.EntityCategory[message.entity_category] : message.entity_category;
        if (message.visual_current_temperature_step != null && message.hasOwnProperty("visual_current_temperature_step"))
            object.visual_current_temperature_step = options.json && !isFinite(message.visual_current_temperature_step) ? String(message.visual_current_temperature_step) : message.visual_current_temperature_step;
        if (message.supports_current_humidity != null && message.hasOwnProperty("supports_current_humidity"))
            object.supports_current_humidity = message.supports_current_humidity;
        if (message.supports_target_humidity != null && message.hasOwnProperty("supports_target_humidity"))
            object.supports_target_humidity = message.supports_target_humidity;
        if (message.visual_min_humidity != null && message.hasOwnProperty("visual_min_humidity"))
            object.visual_min_humidity = options.json && !isFinite(message.visual_min_humidity) ? String(message.visual_min_humidity) : message.visual_min_humidity;
        if (message.visual_max_humidity != null && message.hasOwnProperty("visual_max_humidity"))
            object.visual_max_humidity = options.json && !isFinite(message.visual_max_humidity) ? String(message.visual_max_humidity) : message.visual_max_humidity;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ListEntitiesClimateResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesClimateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesClimateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesClimateResponse
     * @function getTypeUrl
     * @memberof ListEntitiesClimateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesClimateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesClimateResponse";
    };

    return ListEntitiesClimateResponse;
})();

$root.ClimateStateResponse = (function() {

    /**
     * Properties of a ClimateStateResponse.
     * @exports IClimateStateResponse
     * @interface IClimateStateResponse
     * @property {number|null} [key] ClimateStateResponse key
     * @property {ClimateMode|null} [mode] ClimateStateResponse mode
     * @property {number|null} [current_temperature] ClimateStateResponse current_temperature
     * @property {number|null} [target_temperature] ClimateStateResponse target_temperature
     * @property {number|null} [target_temperature_low] ClimateStateResponse target_temperature_low
     * @property {number|null} [target_temperature_high] ClimateStateResponse target_temperature_high
     * @property {boolean|null} [unused_legacy_away] ClimateStateResponse unused_legacy_away
     * @property {ClimateAction|null} [action] ClimateStateResponse action
     * @property {ClimateFanMode|null} [fan_mode] ClimateStateResponse fan_mode
     * @property {ClimateSwingMode|null} [swing_mode] ClimateStateResponse swing_mode
     * @property {string|null} [custom_fan_mode] ClimateStateResponse custom_fan_mode
     * @property {ClimatePreset|null} [preset] ClimateStateResponse preset
     * @property {string|null} [custom_preset] ClimateStateResponse custom_preset
     * @property {number|null} [current_humidity] ClimateStateResponse current_humidity
     * @property {number|null} [target_humidity] ClimateStateResponse target_humidity
     * @property {number|null} [device_id] ClimateStateResponse device_id
     */

    /**
     * Constructs a new ClimateStateResponse.
     * @exports ClimateStateResponse
     * @classdesc Represents a ClimateStateResponse.
     * @implements IClimateStateResponse
     * @constructor
     * @param {IClimateStateResponse=} [properties] Properties to set
     */
    function ClimateStateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ClimateStateResponse key.
     * @member {number} key
     * @memberof ClimateStateResponse
     * @instance
     */
    ClimateStateResponse.prototype.key = 0;

    /**
     * ClimateStateResponse mode.
     * @member {ClimateMode} mode
     * @memberof ClimateStateResponse
     * @instance
     */
    ClimateStateResponse.prototype.mode = 0;

    /**
     * ClimateStateResponse current_temperature.
     * @member {number} current_temperature
     * @memberof ClimateStateResponse
     * @instance
     */
    ClimateStateResponse.prototype.current_temperature = 0;

    /**
     * ClimateStateResponse target_temperature.
     * @member {number} target_temperature
     * @memberof ClimateStateResponse
     * @instance
     */
    ClimateStateResponse.prototype.target_temperature = 0;

    /**
     * ClimateStateResponse target_temperature_low.
     * @member {number} target_temperature_low
     * @memberof ClimateStateResponse
     * @instance
     */
    ClimateStateResponse.prototype.target_temperature_low = 0;

    /**
     * ClimateStateResponse target_temperature_high.
     * @member {number} target_temperature_high
     * @memberof ClimateStateResponse
     * @instance
     */
    ClimateStateResponse.prototype.target_temperature_high = 0;

    /**
     * ClimateStateResponse unused_legacy_away.
     * @member {boolean} unused_legacy_away
     * @memberof ClimateStateResponse
     * @instance
     */
    ClimateStateResponse.prototype.unused_legacy_away = false;

    /**
     * ClimateStateResponse action.
     * @member {ClimateAction} action
     * @memberof ClimateStateResponse
     * @instance
     */
    ClimateStateResponse.prototype.action = 0;

    /**
     * ClimateStateResponse fan_mode.
     * @member {ClimateFanMode} fan_mode
     * @memberof ClimateStateResponse
     * @instance
     */
    ClimateStateResponse.prototype.fan_mode = 0;

    /**
     * ClimateStateResponse swing_mode.
     * @member {ClimateSwingMode} swing_mode
     * @memberof ClimateStateResponse
     * @instance
     */
    ClimateStateResponse.prototype.swing_mode = 0;

    /**
     * ClimateStateResponse custom_fan_mode.
     * @member {string} custom_fan_mode
     * @memberof ClimateStateResponse
     * @instance
     */
    ClimateStateResponse.prototype.custom_fan_mode = "";

    /**
     * ClimateStateResponse preset.
     * @member {ClimatePreset} preset
     * @memberof ClimateStateResponse
     * @instance
     */
    ClimateStateResponse.prototype.preset = 0;

    /**
     * ClimateStateResponse custom_preset.
     * @member {string} custom_preset
     * @memberof ClimateStateResponse
     * @instance
     */
    ClimateStateResponse.prototype.custom_preset = "";

    /**
     * ClimateStateResponse current_humidity.
     * @member {number} current_humidity
     * @memberof ClimateStateResponse
     * @instance
     */
    ClimateStateResponse.prototype.current_humidity = 0;

    /**
     * ClimateStateResponse target_humidity.
     * @member {number} target_humidity
     * @memberof ClimateStateResponse
     * @instance
     */
    ClimateStateResponse.prototype.target_humidity = 0;

    /**
     * ClimateStateResponse device_id.
     * @member {number} device_id
     * @memberof ClimateStateResponse
     * @instance
     */
    ClimateStateResponse.prototype.device_id = 0;

    /**
     * Creates a new ClimateStateResponse instance using the specified properties.
     * @function create
     * @memberof ClimateStateResponse
     * @static
     * @param {IClimateStateResponse=} [properties] Properties to set
     * @returns {ClimateStateResponse} ClimateStateResponse instance
     */
    ClimateStateResponse.create = function create(properties) {
        return new ClimateStateResponse(properties);
    };

    /**
     * Encodes the specified ClimateStateResponse message. Does not implicitly {@link ClimateStateResponse.verify|verify} messages.
     * @function encode
     * @memberof ClimateStateResponse
     * @static
     * @param {IClimateStateResponse} message ClimateStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ClimateStateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.mode != null && Object.hasOwnProperty.call(message, "mode"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.mode);
        if (message.current_temperature != null && Object.hasOwnProperty.call(message, "current_temperature"))
            writer.uint32(/* id 3, wireType 5 =*/29).float(message.current_temperature);
        if (message.target_temperature != null && Object.hasOwnProperty.call(message, "target_temperature"))
            writer.uint32(/* id 4, wireType 5 =*/37).float(message.target_temperature);
        if (message.target_temperature_low != null && Object.hasOwnProperty.call(message, "target_temperature_low"))
            writer.uint32(/* id 5, wireType 5 =*/45).float(message.target_temperature_low);
        if (message.target_temperature_high != null && Object.hasOwnProperty.call(message, "target_temperature_high"))
            writer.uint32(/* id 6, wireType 5 =*/53).float(message.target_temperature_high);
        if (message.unused_legacy_away != null && Object.hasOwnProperty.call(message, "unused_legacy_away"))
            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.unused_legacy_away);
        if (message.action != null && Object.hasOwnProperty.call(message, "action"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.action);
        if (message.fan_mode != null && Object.hasOwnProperty.call(message, "fan_mode"))
            writer.uint32(/* id 9, wireType 0 =*/72).int32(message.fan_mode);
        if (message.swing_mode != null && Object.hasOwnProperty.call(message, "swing_mode"))
            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.swing_mode);
        if (message.custom_fan_mode != null && Object.hasOwnProperty.call(message, "custom_fan_mode"))
            writer.uint32(/* id 11, wireType 2 =*/90).string(message.custom_fan_mode);
        if (message.preset != null && Object.hasOwnProperty.call(message, "preset"))
            writer.uint32(/* id 12, wireType 0 =*/96).int32(message.preset);
        if (message.custom_preset != null && Object.hasOwnProperty.call(message, "custom_preset"))
            writer.uint32(/* id 13, wireType 2 =*/106).string(message.custom_preset);
        if (message.current_humidity != null && Object.hasOwnProperty.call(message, "current_humidity"))
            writer.uint32(/* id 14, wireType 5 =*/117).float(message.current_humidity);
        if (message.target_humidity != null && Object.hasOwnProperty.call(message, "target_humidity"))
            writer.uint32(/* id 15, wireType 5 =*/125).float(message.target_humidity);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 16, wireType 0 =*/128).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ClimateStateResponse message, length delimited. Does not implicitly {@link ClimateStateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ClimateStateResponse
     * @static
     * @param {IClimateStateResponse} message ClimateStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ClimateStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ClimateStateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ClimateStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ClimateStateResponse} ClimateStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ClimateStateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ClimateStateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.mode = reader.int32();
                    break;
                }
            case 3: {
                    message.current_temperature = reader.float();
                    break;
                }
            case 4: {
                    message.target_temperature = reader.float();
                    break;
                }
            case 5: {
                    message.target_temperature_low = reader.float();
                    break;
                }
            case 6: {
                    message.target_temperature_high = reader.float();
                    break;
                }
            case 7: {
                    message.unused_legacy_away = reader.bool();
                    break;
                }
            case 8: {
                    message.action = reader.int32();
                    break;
                }
            case 9: {
                    message.fan_mode = reader.int32();
                    break;
                }
            case 10: {
                    message.swing_mode = reader.int32();
                    break;
                }
            case 11: {
                    message.custom_fan_mode = reader.string();
                    break;
                }
            case 12: {
                    message.preset = reader.int32();
                    break;
                }
            case 13: {
                    message.custom_preset = reader.string();
                    break;
                }
            case 14: {
                    message.current_humidity = reader.float();
                    break;
                }
            case 15: {
                    message.target_humidity = reader.float();
                    break;
                }
            case 16: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ClimateStateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ClimateStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ClimateStateResponse} ClimateStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ClimateStateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ClimateStateResponse message.
     * @function verify
     * @memberof ClimateStateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ClimateStateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.mode != null && message.hasOwnProperty("mode"))
            switch (message.mode) {
            default:
                return "mode: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            }
        if (message.current_temperature != null && message.hasOwnProperty("current_temperature"))
            if (typeof message.current_temperature !== "number")
                return "current_temperature: number expected";
        if (message.target_temperature != null && message.hasOwnProperty("target_temperature"))
            if (typeof message.target_temperature !== "number")
                return "target_temperature: number expected";
        if (message.target_temperature_low != null && message.hasOwnProperty("target_temperature_low"))
            if (typeof message.target_temperature_low !== "number")
                return "target_temperature_low: number expected";
        if (message.target_temperature_high != null && message.hasOwnProperty("target_temperature_high"))
            if (typeof message.target_temperature_high !== "number")
                return "target_temperature_high: number expected";
        if (message.unused_legacy_away != null && message.hasOwnProperty("unused_legacy_away"))
            if (typeof message.unused_legacy_away !== "boolean")
                return "unused_legacy_away: boolean expected";
        if (message.action != null && message.hasOwnProperty("action"))
            switch (message.action) {
            default:
                return "action: enum value expected";
            case 0:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            }
        if (message.fan_mode != null && message.hasOwnProperty("fan_mode"))
            switch (message.fan_mode) {
            default:
                return "fan_mode: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
                break;
            }
        if (message.swing_mode != null && message.hasOwnProperty("swing_mode"))
            switch (message.swing_mode) {
            default:
                return "swing_mode: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        if (message.custom_fan_mode != null && message.hasOwnProperty("custom_fan_mode"))
            if (!$util.isString(message.custom_fan_mode))
                return "custom_fan_mode: string expected";
        if (message.preset != null && message.hasOwnProperty("preset"))
            switch (message.preset) {
            default:
                return "preset: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                break;
            }
        if (message.custom_preset != null && message.hasOwnProperty("custom_preset"))
            if (!$util.isString(message.custom_preset))
                return "custom_preset: string expected";
        if (message.current_humidity != null && message.hasOwnProperty("current_humidity"))
            if (typeof message.current_humidity !== "number")
                return "current_humidity: number expected";
        if (message.target_humidity != null && message.hasOwnProperty("target_humidity"))
            if (typeof message.target_humidity !== "number")
                return "target_humidity: number expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ClimateStateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ClimateStateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ClimateStateResponse} ClimateStateResponse
     */
    ClimateStateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ClimateStateResponse)
            return object;
        var message = new $root.ClimateStateResponse();
        if (object.key != null)
            message.key = object.key >>> 0;
        switch (object.mode) {
        default:
            if (typeof object.mode === "number") {
                message.mode = object.mode;
                break;
            }
            break;
        case "CLIMATE_MODE_OFF":
        case 0:
            message.mode = 0;
            break;
        case "CLIMATE_MODE_HEAT_COOL":
        case 1:
            message.mode = 1;
            break;
        case "CLIMATE_MODE_COOL":
        case 2:
            message.mode = 2;
            break;
        case "CLIMATE_MODE_HEAT":
        case 3:
            message.mode = 3;
            break;
        case "CLIMATE_MODE_FAN_ONLY":
        case 4:
            message.mode = 4;
            break;
        case "CLIMATE_MODE_DRY":
        case 5:
            message.mode = 5;
            break;
        case "CLIMATE_MODE_AUTO":
        case 6:
            message.mode = 6;
            break;
        }
        if (object.current_temperature != null)
            message.current_temperature = Number(object.current_temperature);
        if (object.target_temperature != null)
            message.target_temperature = Number(object.target_temperature);
        if (object.target_temperature_low != null)
            message.target_temperature_low = Number(object.target_temperature_low);
        if (object.target_temperature_high != null)
            message.target_temperature_high = Number(object.target_temperature_high);
        if (object.unused_legacy_away != null)
            message.unused_legacy_away = Boolean(object.unused_legacy_away);
        switch (object.action) {
        default:
            if (typeof object.action === "number") {
                message.action = object.action;
                break;
            }
            break;
        case "CLIMATE_ACTION_OFF":
        case 0:
            message.action = 0;
            break;
        case "CLIMATE_ACTION_COOLING":
        case 2:
            message.action = 2;
            break;
        case "CLIMATE_ACTION_HEATING":
        case 3:
            message.action = 3;
            break;
        case "CLIMATE_ACTION_IDLE":
        case 4:
            message.action = 4;
            break;
        case "CLIMATE_ACTION_DRYING":
        case 5:
            message.action = 5;
            break;
        case "CLIMATE_ACTION_FAN":
        case 6:
            message.action = 6;
            break;
        }
        switch (object.fan_mode) {
        default:
            if (typeof object.fan_mode === "number") {
                message.fan_mode = object.fan_mode;
                break;
            }
            break;
        case "CLIMATE_FAN_ON":
        case 0:
            message.fan_mode = 0;
            break;
        case "CLIMATE_FAN_OFF":
        case 1:
            message.fan_mode = 1;
            break;
        case "CLIMATE_FAN_AUTO":
        case 2:
            message.fan_mode = 2;
            break;
        case "CLIMATE_FAN_LOW":
        case 3:
            message.fan_mode = 3;
            break;
        case "CLIMATE_FAN_MEDIUM":
        case 4:
            message.fan_mode = 4;
            break;
        case "CLIMATE_FAN_HIGH":
        case 5:
            message.fan_mode = 5;
            break;
        case "CLIMATE_FAN_MIDDLE":
        case 6:
            message.fan_mode = 6;
            break;
        case "CLIMATE_FAN_FOCUS":
        case 7:
            message.fan_mode = 7;
            break;
        case "CLIMATE_FAN_DIFFUSE":
        case 8:
            message.fan_mode = 8;
            break;
        case "CLIMATE_FAN_QUIET":
        case 9:
            message.fan_mode = 9;
            break;
        }
        switch (object.swing_mode) {
        default:
            if (typeof object.swing_mode === "number") {
                message.swing_mode = object.swing_mode;
                break;
            }
            break;
        case "CLIMATE_SWING_OFF":
        case 0:
            message.swing_mode = 0;
            break;
        case "CLIMATE_SWING_BOTH":
        case 1:
            message.swing_mode = 1;
            break;
        case "CLIMATE_SWING_VERTICAL":
        case 2:
            message.swing_mode = 2;
            break;
        case "CLIMATE_SWING_HORIZONTAL":
        case 3:
            message.swing_mode = 3;
            break;
        }
        if (object.custom_fan_mode != null)
            message.custom_fan_mode = String(object.custom_fan_mode);
        switch (object.preset) {
        default:
            if (typeof object.preset === "number") {
                message.preset = object.preset;
                break;
            }
            break;
        case "CLIMATE_PRESET_NONE":
        case 0:
            message.preset = 0;
            break;
        case "CLIMATE_PRESET_HOME":
        case 1:
            message.preset = 1;
            break;
        case "CLIMATE_PRESET_AWAY":
        case 2:
            message.preset = 2;
            break;
        case "CLIMATE_PRESET_BOOST":
        case 3:
            message.preset = 3;
            break;
        case "CLIMATE_PRESET_COMFORT":
        case 4:
            message.preset = 4;
            break;
        case "CLIMATE_PRESET_ECO":
        case 5:
            message.preset = 5;
            break;
        case "CLIMATE_PRESET_SLEEP":
        case 6:
            message.preset = 6;
            break;
        case "CLIMATE_PRESET_ACTIVITY":
        case 7:
            message.preset = 7;
            break;
        }
        if (object.custom_preset != null)
            message.custom_preset = String(object.custom_preset);
        if (object.current_humidity != null)
            message.current_humidity = Number(object.current_humidity);
        if (object.target_humidity != null)
            message.target_humidity = Number(object.target_humidity);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ClimateStateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ClimateStateResponse
     * @static
     * @param {ClimateStateResponse} message ClimateStateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ClimateStateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.mode = options.enums === String ? "CLIMATE_MODE_OFF" : 0;
            object.current_temperature = 0;
            object.target_temperature = 0;
            object.target_temperature_low = 0;
            object.target_temperature_high = 0;
            object.unused_legacy_away = false;
            object.action = options.enums === String ? "CLIMATE_ACTION_OFF" : 0;
            object.fan_mode = options.enums === String ? "CLIMATE_FAN_ON" : 0;
            object.swing_mode = options.enums === String ? "CLIMATE_SWING_OFF" : 0;
            object.custom_fan_mode = "";
            object.preset = options.enums === String ? "CLIMATE_PRESET_NONE" : 0;
            object.custom_preset = "";
            object.current_humidity = 0;
            object.target_humidity = 0;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.mode != null && message.hasOwnProperty("mode"))
            object.mode = options.enums === String ? $root.ClimateMode[message.mode] === undefined ? message.mode : $root.ClimateMode[message.mode] : message.mode;
        if (message.current_temperature != null && message.hasOwnProperty("current_temperature"))
            object.current_temperature = options.json && !isFinite(message.current_temperature) ? String(message.current_temperature) : message.current_temperature;
        if (message.target_temperature != null && message.hasOwnProperty("target_temperature"))
            object.target_temperature = options.json && !isFinite(message.target_temperature) ? String(message.target_temperature) : message.target_temperature;
        if (message.target_temperature_low != null && message.hasOwnProperty("target_temperature_low"))
            object.target_temperature_low = options.json && !isFinite(message.target_temperature_low) ? String(message.target_temperature_low) : message.target_temperature_low;
        if (message.target_temperature_high != null && message.hasOwnProperty("target_temperature_high"))
            object.target_temperature_high = options.json && !isFinite(message.target_temperature_high) ? String(message.target_temperature_high) : message.target_temperature_high;
        if (message.unused_legacy_away != null && message.hasOwnProperty("unused_legacy_away"))
            object.unused_legacy_away = message.unused_legacy_away;
        if (message.action != null && message.hasOwnProperty("action"))
            object.action = options.enums === String ? $root.ClimateAction[message.action] === undefined ? message.action : $root.ClimateAction[message.action] : message.action;
        if (message.fan_mode != null && message.hasOwnProperty("fan_mode"))
            object.fan_mode = options.enums === String ? $root.ClimateFanMode[message.fan_mode] === undefined ? message.fan_mode : $root.ClimateFanMode[message.fan_mode] : message.fan_mode;
        if (message.swing_mode != null && message.hasOwnProperty("swing_mode"))
            object.swing_mode = options.enums === String ? $root.ClimateSwingMode[message.swing_mode] === undefined ? message.swing_mode : $root.ClimateSwingMode[message.swing_mode] : message.swing_mode;
        if (message.custom_fan_mode != null && message.hasOwnProperty("custom_fan_mode"))
            object.custom_fan_mode = message.custom_fan_mode;
        if (message.preset != null && message.hasOwnProperty("preset"))
            object.preset = options.enums === String ? $root.ClimatePreset[message.preset] === undefined ? message.preset : $root.ClimatePreset[message.preset] : message.preset;
        if (message.custom_preset != null && message.hasOwnProperty("custom_preset"))
            object.custom_preset = message.custom_preset;
        if (message.current_humidity != null && message.hasOwnProperty("current_humidity"))
            object.current_humidity = options.json && !isFinite(message.current_humidity) ? String(message.current_humidity) : message.current_humidity;
        if (message.target_humidity != null && message.hasOwnProperty("target_humidity"))
            object.target_humidity = options.json && !isFinite(message.target_humidity) ? String(message.target_humidity) : message.target_humidity;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ClimateStateResponse to JSON.
     * @function toJSON
     * @memberof ClimateStateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ClimateStateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ClimateStateResponse
     * @function getTypeUrl
     * @memberof ClimateStateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ClimateStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ClimateStateResponse";
    };

    return ClimateStateResponse;
})();

$root.ClimateCommandRequest = (function() {

    /**
     * Properties of a ClimateCommandRequest.
     * @exports IClimateCommandRequest
     * @interface IClimateCommandRequest
     * @property {number|null} [key] ClimateCommandRequest key
     * @property {boolean|null} [has_mode] ClimateCommandRequest has_mode
     * @property {ClimateMode|null} [mode] ClimateCommandRequest mode
     * @property {boolean|null} [has_target_temperature] ClimateCommandRequest has_target_temperature
     * @property {number|null} [target_temperature] ClimateCommandRequest target_temperature
     * @property {boolean|null} [has_target_temperature_low] ClimateCommandRequest has_target_temperature_low
     * @property {number|null} [target_temperature_low] ClimateCommandRequest target_temperature_low
     * @property {boolean|null} [has_target_temperature_high] ClimateCommandRequest has_target_temperature_high
     * @property {number|null} [target_temperature_high] ClimateCommandRequest target_temperature_high
     * @property {boolean|null} [unused_has_legacy_away] ClimateCommandRequest unused_has_legacy_away
     * @property {boolean|null} [unused_legacy_away] ClimateCommandRequest unused_legacy_away
     * @property {boolean|null} [has_fan_mode] ClimateCommandRequest has_fan_mode
     * @property {ClimateFanMode|null} [fan_mode] ClimateCommandRequest fan_mode
     * @property {boolean|null} [has_swing_mode] ClimateCommandRequest has_swing_mode
     * @property {ClimateSwingMode|null} [swing_mode] ClimateCommandRequest swing_mode
     * @property {boolean|null} [has_custom_fan_mode] ClimateCommandRequest has_custom_fan_mode
     * @property {string|null} [custom_fan_mode] ClimateCommandRequest custom_fan_mode
     * @property {boolean|null} [has_preset] ClimateCommandRequest has_preset
     * @property {ClimatePreset|null} [preset] ClimateCommandRequest preset
     * @property {boolean|null} [has_custom_preset] ClimateCommandRequest has_custom_preset
     * @property {string|null} [custom_preset] ClimateCommandRequest custom_preset
     * @property {boolean|null} [has_target_humidity] ClimateCommandRequest has_target_humidity
     * @property {number|null} [target_humidity] ClimateCommandRequest target_humidity
     * @property {number|null} [device_id] ClimateCommandRequest device_id
     */

    /**
     * Constructs a new ClimateCommandRequest.
     * @exports ClimateCommandRequest
     * @classdesc Represents a ClimateCommandRequest.
     * @implements IClimateCommandRequest
     * @constructor
     * @param {IClimateCommandRequest=} [properties] Properties to set
     */
    function ClimateCommandRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ClimateCommandRequest key.
     * @member {number} key
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.key = 0;

    /**
     * ClimateCommandRequest has_mode.
     * @member {boolean} has_mode
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.has_mode = false;

    /**
     * ClimateCommandRequest mode.
     * @member {ClimateMode} mode
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.mode = 0;

    /**
     * ClimateCommandRequest has_target_temperature.
     * @member {boolean} has_target_temperature
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.has_target_temperature = false;

    /**
     * ClimateCommandRequest target_temperature.
     * @member {number} target_temperature
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.target_temperature = 0;

    /**
     * ClimateCommandRequest has_target_temperature_low.
     * @member {boolean} has_target_temperature_low
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.has_target_temperature_low = false;

    /**
     * ClimateCommandRequest target_temperature_low.
     * @member {number} target_temperature_low
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.target_temperature_low = 0;

    /**
     * ClimateCommandRequest has_target_temperature_high.
     * @member {boolean} has_target_temperature_high
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.has_target_temperature_high = false;

    /**
     * ClimateCommandRequest target_temperature_high.
     * @member {number} target_temperature_high
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.target_temperature_high = 0;

    /**
     * ClimateCommandRequest unused_has_legacy_away.
     * @member {boolean} unused_has_legacy_away
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.unused_has_legacy_away = false;

    /**
     * ClimateCommandRequest unused_legacy_away.
     * @member {boolean} unused_legacy_away
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.unused_legacy_away = false;

    /**
     * ClimateCommandRequest has_fan_mode.
     * @member {boolean} has_fan_mode
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.has_fan_mode = false;

    /**
     * ClimateCommandRequest fan_mode.
     * @member {ClimateFanMode} fan_mode
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.fan_mode = 0;

    /**
     * ClimateCommandRequest has_swing_mode.
     * @member {boolean} has_swing_mode
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.has_swing_mode = false;

    /**
     * ClimateCommandRequest swing_mode.
     * @member {ClimateSwingMode} swing_mode
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.swing_mode = 0;

    /**
     * ClimateCommandRequest has_custom_fan_mode.
     * @member {boolean} has_custom_fan_mode
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.has_custom_fan_mode = false;

    /**
     * ClimateCommandRequest custom_fan_mode.
     * @member {string} custom_fan_mode
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.custom_fan_mode = "";

    /**
     * ClimateCommandRequest has_preset.
     * @member {boolean} has_preset
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.has_preset = false;

    /**
     * ClimateCommandRequest preset.
     * @member {ClimatePreset} preset
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.preset = 0;

    /**
     * ClimateCommandRequest has_custom_preset.
     * @member {boolean} has_custom_preset
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.has_custom_preset = false;

    /**
     * ClimateCommandRequest custom_preset.
     * @member {string} custom_preset
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.custom_preset = "";

    /**
     * ClimateCommandRequest has_target_humidity.
     * @member {boolean} has_target_humidity
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.has_target_humidity = false;

    /**
     * ClimateCommandRequest target_humidity.
     * @member {number} target_humidity
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.target_humidity = 0;

    /**
     * ClimateCommandRequest device_id.
     * @member {number} device_id
     * @memberof ClimateCommandRequest
     * @instance
     */
    ClimateCommandRequest.prototype.device_id = 0;

    /**
     * Creates a new ClimateCommandRequest instance using the specified properties.
     * @function create
     * @memberof ClimateCommandRequest
     * @static
     * @param {IClimateCommandRequest=} [properties] Properties to set
     * @returns {ClimateCommandRequest} ClimateCommandRequest instance
     */
    ClimateCommandRequest.create = function create(properties) {
        return new ClimateCommandRequest(properties);
    };

    /**
     * Encodes the specified ClimateCommandRequest message. Does not implicitly {@link ClimateCommandRequest.verify|verify} messages.
     * @function encode
     * @memberof ClimateCommandRequest
     * @static
     * @param {IClimateCommandRequest} message ClimateCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ClimateCommandRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.has_mode != null && Object.hasOwnProperty.call(message, "has_mode"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.has_mode);
        if (message.mode != null && Object.hasOwnProperty.call(message, "mode"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.mode);
        if (message.has_target_temperature != null && Object.hasOwnProperty.call(message, "has_target_temperature"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.has_target_temperature);
        if (message.target_temperature != null && Object.hasOwnProperty.call(message, "target_temperature"))
            writer.uint32(/* id 5, wireType 5 =*/45).float(message.target_temperature);
        if (message.has_target_temperature_low != null && Object.hasOwnProperty.call(message, "has_target_temperature_low"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.has_target_temperature_low);
        if (message.target_temperature_low != null && Object.hasOwnProperty.call(message, "target_temperature_low"))
            writer.uint32(/* id 7, wireType 5 =*/61).float(message.target_temperature_low);
        if (message.has_target_temperature_high != null && Object.hasOwnProperty.call(message, "has_target_temperature_high"))
            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.has_target_temperature_high);
        if (message.target_temperature_high != null && Object.hasOwnProperty.call(message, "target_temperature_high"))
            writer.uint32(/* id 9, wireType 5 =*/77).float(message.target_temperature_high);
        if (message.unused_has_legacy_away != null && Object.hasOwnProperty.call(message, "unused_has_legacy_away"))
            writer.uint32(/* id 10, wireType 0 =*/80).bool(message.unused_has_legacy_away);
        if (message.unused_legacy_away != null && Object.hasOwnProperty.call(message, "unused_legacy_away"))
            writer.uint32(/* id 11, wireType 0 =*/88).bool(message.unused_legacy_away);
        if (message.has_fan_mode != null && Object.hasOwnProperty.call(message, "has_fan_mode"))
            writer.uint32(/* id 12, wireType 0 =*/96).bool(message.has_fan_mode);
        if (message.fan_mode != null && Object.hasOwnProperty.call(message, "fan_mode"))
            writer.uint32(/* id 13, wireType 0 =*/104).int32(message.fan_mode);
        if (message.has_swing_mode != null && Object.hasOwnProperty.call(message, "has_swing_mode"))
            writer.uint32(/* id 14, wireType 0 =*/112).bool(message.has_swing_mode);
        if (message.swing_mode != null && Object.hasOwnProperty.call(message, "swing_mode"))
            writer.uint32(/* id 15, wireType 0 =*/120).int32(message.swing_mode);
        if (message.has_custom_fan_mode != null && Object.hasOwnProperty.call(message, "has_custom_fan_mode"))
            writer.uint32(/* id 16, wireType 0 =*/128).bool(message.has_custom_fan_mode);
        if (message.custom_fan_mode != null && Object.hasOwnProperty.call(message, "custom_fan_mode"))
            writer.uint32(/* id 17, wireType 2 =*/138).string(message.custom_fan_mode);
        if (message.has_preset != null && Object.hasOwnProperty.call(message, "has_preset"))
            writer.uint32(/* id 18, wireType 0 =*/144).bool(message.has_preset);
        if (message.preset != null && Object.hasOwnProperty.call(message, "preset"))
            writer.uint32(/* id 19, wireType 0 =*/152).int32(message.preset);
        if (message.has_custom_preset != null && Object.hasOwnProperty.call(message, "has_custom_preset"))
            writer.uint32(/* id 20, wireType 0 =*/160).bool(message.has_custom_preset);
        if (message.custom_preset != null && Object.hasOwnProperty.call(message, "custom_preset"))
            writer.uint32(/* id 21, wireType 2 =*/170).string(message.custom_preset);
        if (message.has_target_humidity != null && Object.hasOwnProperty.call(message, "has_target_humidity"))
            writer.uint32(/* id 22, wireType 0 =*/176).bool(message.has_target_humidity);
        if (message.target_humidity != null && Object.hasOwnProperty.call(message, "target_humidity"))
            writer.uint32(/* id 23, wireType 5 =*/189).float(message.target_humidity);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 24, wireType 0 =*/192).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ClimateCommandRequest message, length delimited. Does not implicitly {@link ClimateCommandRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ClimateCommandRequest
     * @static
     * @param {IClimateCommandRequest} message ClimateCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ClimateCommandRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ClimateCommandRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ClimateCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ClimateCommandRequest} ClimateCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ClimateCommandRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ClimateCommandRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.has_mode = reader.bool();
                    break;
                }
            case 3: {
                    message.mode = reader.int32();
                    break;
                }
            case 4: {
                    message.has_target_temperature = reader.bool();
                    break;
                }
            case 5: {
                    message.target_temperature = reader.float();
                    break;
                }
            case 6: {
                    message.has_target_temperature_low = reader.bool();
                    break;
                }
            case 7: {
                    message.target_temperature_low = reader.float();
                    break;
                }
            case 8: {
                    message.has_target_temperature_high = reader.bool();
                    break;
                }
            case 9: {
                    message.target_temperature_high = reader.float();
                    break;
                }
            case 10: {
                    message.unused_has_legacy_away = reader.bool();
                    break;
                }
            case 11: {
                    message.unused_legacy_away = reader.bool();
                    break;
                }
            case 12: {
                    message.has_fan_mode = reader.bool();
                    break;
                }
            case 13: {
                    message.fan_mode = reader.int32();
                    break;
                }
            case 14: {
                    message.has_swing_mode = reader.bool();
                    break;
                }
            case 15: {
                    message.swing_mode = reader.int32();
                    break;
                }
            case 16: {
                    message.has_custom_fan_mode = reader.bool();
                    break;
                }
            case 17: {
                    message.custom_fan_mode = reader.string();
                    break;
                }
            case 18: {
                    message.has_preset = reader.bool();
                    break;
                }
            case 19: {
                    message.preset = reader.int32();
                    break;
                }
            case 20: {
                    message.has_custom_preset = reader.bool();
                    break;
                }
            case 21: {
                    message.custom_preset = reader.string();
                    break;
                }
            case 22: {
                    message.has_target_humidity = reader.bool();
                    break;
                }
            case 23: {
                    message.target_humidity = reader.float();
                    break;
                }
            case 24: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ClimateCommandRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ClimateCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ClimateCommandRequest} ClimateCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ClimateCommandRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ClimateCommandRequest message.
     * @function verify
     * @memberof ClimateCommandRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ClimateCommandRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.has_mode != null && message.hasOwnProperty("has_mode"))
            if (typeof message.has_mode !== "boolean")
                return "has_mode: boolean expected";
        if (message.mode != null && message.hasOwnProperty("mode"))
            switch (message.mode) {
            default:
                return "mode: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            }
        if (message.has_target_temperature != null && message.hasOwnProperty("has_target_temperature"))
            if (typeof message.has_target_temperature !== "boolean")
                return "has_target_temperature: boolean expected";
        if (message.target_temperature != null && message.hasOwnProperty("target_temperature"))
            if (typeof message.target_temperature !== "number")
                return "target_temperature: number expected";
        if (message.has_target_temperature_low != null && message.hasOwnProperty("has_target_temperature_low"))
            if (typeof message.has_target_temperature_low !== "boolean")
                return "has_target_temperature_low: boolean expected";
        if (message.target_temperature_low != null && message.hasOwnProperty("target_temperature_low"))
            if (typeof message.target_temperature_low !== "number")
                return "target_temperature_low: number expected";
        if (message.has_target_temperature_high != null && message.hasOwnProperty("has_target_temperature_high"))
            if (typeof message.has_target_temperature_high !== "boolean")
                return "has_target_temperature_high: boolean expected";
        if (message.target_temperature_high != null && message.hasOwnProperty("target_temperature_high"))
            if (typeof message.target_temperature_high !== "number")
                return "target_temperature_high: number expected";
        if (message.unused_has_legacy_away != null && message.hasOwnProperty("unused_has_legacy_away"))
            if (typeof message.unused_has_legacy_away !== "boolean")
                return "unused_has_legacy_away: boolean expected";
        if (message.unused_legacy_away != null && message.hasOwnProperty("unused_legacy_away"))
            if (typeof message.unused_legacy_away !== "boolean")
                return "unused_legacy_away: boolean expected";
        if (message.has_fan_mode != null && message.hasOwnProperty("has_fan_mode"))
            if (typeof message.has_fan_mode !== "boolean")
                return "has_fan_mode: boolean expected";
        if (message.fan_mode != null && message.hasOwnProperty("fan_mode"))
            switch (message.fan_mode) {
            default:
                return "fan_mode: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
                break;
            }
        if (message.has_swing_mode != null && message.hasOwnProperty("has_swing_mode"))
            if (typeof message.has_swing_mode !== "boolean")
                return "has_swing_mode: boolean expected";
        if (message.swing_mode != null && message.hasOwnProperty("swing_mode"))
            switch (message.swing_mode) {
            default:
                return "swing_mode: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        if (message.has_custom_fan_mode != null && message.hasOwnProperty("has_custom_fan_mode"))
            if (typeof message.has_custom_fan_mode !== "boolean")
                return "has_custom_fan_mode: boolean expected";
        if (message.custom_fan_mode != null && message.hasOwnProperty("custom_fan_mode"))
            if (!$util.isString(message.custom_fan_mode))
                return "custom_fan_mode: string expected";
        if (message.has_preset != null && message.hasOwnProperty("has_preset"))
            if (typeof message.has_preset !== "boolean")
                return "has_preset: boolean expected";
        if (message.preset != null && message.hasOwnProperty("preset"))
            switch (message.preset) {
            default:
                return "preset: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                break;
            }
        if (message.has_custom_preset != null && message.hasOwnProperty("has_custom_preset"))
            if (typeof message.has_custom_preset !== "boolean")
                return "has_custom_preset: boolean expected";
        if (message.custom_preset != null && message.hasOwnProperty("custom_preset"))
            if (!$util.isString(message.custom_preset))
                return "custom_preset: string expected";
        if (message.has_target_humidity != null && message.hasOwnProperty("has_target_humidity"))
            if (typeof message.has_target_humidity !== "boolean")
                return "has_target_humidity: boolean expected";
        if (message.target_humidity != null && message.hasOwnProperty("target_humidity"))
            if (typeof message.target_humidity !== "number")
                return "target_humidity: number expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ClimateCommandRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ClimateCommandRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ClimateCommandRequest} ClimateCommandRequest
     */
    ClimateCommandRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ClimateCommandRequest)
            return object;
        var message = new $root.ClimateCommandRequest();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.has_mode != null)
            message.has_mode = Boolean(object.has_mode);
        switch (object.mode) {
        default:
            if (typeof object.mode === "number") {
                message.mode = object.mode;
                break;
            }
            break;
        case "CLIMATE_MODE_OFF":
        case 0:
            message.mode = 0;
            break;
        case "CLIMATE_MODE_HEAT_COOL":
        case 1:
            message.mode = 1;
            break;
        case "CLIMATE_MODE_COOL":
        case 2:
            message.mode = 2;
            break;
        case "CLIMATE_MODE_HEAT":
        case 3:
            message.mode = 3;
            break;
        case "CLIMATE_MODE_FAN_ONLY":
        case 4:
            message.mode = 4;
            break;
        case "CLIMATE_MODE_DRY":
        case 5:
            message.mode = 5;
            break;
        case "CLIMATE_MODE_AUTO":
        case 6:
            message.mode = 6;
            break;
        }
        if (object.has_target_temperature != null)
            message.has_target_temperature = Boolean(object.has_target_temperature);
        if (object.target_temperature != null)
            message.target_temperature = Number(object.target_temperature);
        if (object.has_target_temperature_low != null)
            message.has_target_temperature_low = Boolean(object.has_target_temperature_low);
        if (object.target_temperature_low != null)
            message.target_temperature_low = Number(object.target_temperature_low);
        if (object.has_target_temperature_high != null)
            message.has_target_temperature_high = Boolean(object.has_target_temperature_high);
        if (object.target_temperature_high != null)
            message.target_temperature_high = Number(object.target_temperature_high);
        if (object.unused_has_legacy_away != null)
            message.unused_has_legacy_away = Boolean(object.unused_has_legacy_away);
        if (object.unused_legacy_away != null)
            message.unused_legacy_away = Boolean(object.unused_legacy_away);
        if (object.has_fan_mode != null)
            message.has_fan_mode = Boolean(object.has_fan_mode);
        switch (object.fan_mode) {
        default:
            if (typeof object.fan_mode === "number") {
                message.fan_mode = object.fan_mode;
                break;
            }
            break;
        case "CLIMATE_FAN_ON":
        case 0:
            message.fan_mode = 0;
            break;
        case "CLIMATE_FAN_OFF":
        case 1:
            message.fan_mode = 1;
            break;
        case "CLIMATE_FAN_AUTO":
        case 2:
            message.fan_mode = 2;
            break;
        case "CLIMATE_FAN_LOW":
        case 3:
            message.fan_mode = 3;
            break;
        case "CLIMATE_FAN_MEDIUM":
        case 4:
            message.fan_mode = 4;
            break;
        case "CLIMATE_FAN_HIGH":
        case 5:
            message.fan_mode = 5;
            break;
        case "CLIMATE_FAN_MIDDLE":
        case 6:
            message.fan_mode = 6;
            break;
        case "CLIMATE_FAN_FOCUS":
        case 7:
            message.fan_mode = 7;
            break;
        case "CLIMATE_FAN_DIFFUSE":
        case 8:
            message.fan_mode = 8;
            break;
        case "CLIMATE_FAN_QUIET":
        case 9:
            message.fan_mode = 9;
            break;
        }
        if (object.has_swing_mode != null)
            message.has_swing_mode = Boolean(object.has_swing_mode);
        switch (object.swing_mode) {
        default:
            if (typeof object.swing_mode === "number") {
                message.swing_mode = object.swing_mode;
                break;
            }
            break;
        case "CLIMATE_SWING_OFF":
        case 0:
            message.swing_mode = 0;
            break;
        case "CLIMATE_SWING_BOTH":
        case 1:
            message.swing_mode = 1;
            break;
        case "CLIMATE_SWING_VERTICAL":
        case 2:
            message.swing_mode = 2;
            break;
        case "CLIMATE_SWING_HORIZONTAL":
        case 3:
            message.swing_mode = 3;
            break;
        }
        if (object.has_custom_fan_mode != null)
            message.has_custom_fan_mode = Boolean(object.has_custom_fan_mode);
        if (object.custom_fan_mode != null)
            message.custom_fan_mode = String(object.custom_fan_mode);
        if (object.has_preset != null)
            message.has_preset = Boolean(object.has_preset);
        switch (object.preset) {
        default:
            if (typeof object.preset === "number") {
                message.preset = object.preset;
                break;
            }
            break;
        case "CLIMATE_PRESET_NONE":
        case 0:
            message.preset = 0;
            break;
        case "CLIMATE_PRESET_HOME":
        case 1:
            message.preset = 1;
            break;
        case "CLIMATE_PRESET_AWAY":
        case 2:
            message.preset = 2;
            break;
        case "CLIMATE_PRESET_BOOST":
        case 3:
            message.preset = 3;
            break;
        case "CLIMATE_PRESET_COMFORT":
        case 4:
            message.preset = 4;
            break;
        case "CLIMATE_PRESET_ECO":
        case 5:
            message.preset = 5;
            break;
        case "CLIMATE_PRESET_SLEEP":
        case 6:
            message.preset = 6;
            break;
        case "CLIMATE_PRESET_ACTIVITY":
        case 7:
            message.preset = 7;
            break;
        }
        if (object.has_custom_preset != null)
            message.has_custom_preset = Boolean(object.has_custom_preset);
        if (object.custom_preset != null)
            message.custom_preset = String(object.custom_preset);
        if (object.has_target_humidity != null)
            message.has_target_humidity = Boolean(object.has_target_humidity);
        if (object.target_humidity != null)
            message.target_humidity = Number(object.target_humidity);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ClimateCommandRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ClimateCommandRequest
     * @static
     * @param {ClimateCommandRequest} message ClimateCommandRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ClimateCommandRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.has_mode = false;
            object.mode = options.enums === String ? "CLIMATE_MODE_OFF" : 0;
            object.has_target_temperature = false;
            object.target_temperature = 0;
            object.has_target_temperature_low = false;
            object.target_temperature_low = 0;
            object.has_target_temperature_high = false;
            object.target_temperature_high = 0;
            object.unused_has_legacy_away = false;
            object.unused_legacy_away = false;
            object.has_fan_mode = false;
            object.fan_mode = options.enums === String ? "CLIMATE_FAN_ON" : 0;
            object.has_swing_mode = false;
            object.swing_mode = options.enums === String ? "CLIMATE_SWING_OFF" : 0;
            object.has_custom_fan_mode = false;
            object.custom_fan_mode = "";
            object.has_preset = false;
            object.preset = options.enums === String ? "CLIMATE_PRESET_NONE" : 0;
            object.has_custom_preset = false;
            object.custom_preset = "";
            object.has_target_humidity = false;
            object.target_humidity = 0;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.has_mode != null && message.hasOwnProperty("has_mode"))
            object.has_mode = message.has_mode;
        if (message.mode != null && message.hasOwnProperty("mode"))
            object.mode = options.enums === String ? $root.ClimateMode[message.mode] === undefined ? message.mode : $root.ClimateMode[message.mode] : message.mode;
        if (message.has_target_temperature != null && message.hasOwnProperty("has_target_temperature"))
            object.has_target_temperature = message.has_target_temperature;
        if (message.target_temperature != null && message.hasOwnProperty("target_temperature"))
            object.target_temperature = options.json && !isFinite(message.target_temperature) ? String(message.target_temperature) : message.target_temperature;
        if (message.has_target_temperature_low != null && message.hasOwnProperty("has_target_temperature_low"))
            object.has_target_temperature_low = message.has_target_temperature_low;
        if (message.target_temperature_low != null && message.hasOwnProperty("target_temperature_low"))
            object.target_temperature_low = options.json && !isFinite(message.target_temperature_low) ? String(message.target_temperature_low) : message.target_temperature_low;
        if (message.has_target_temperature_high != null && message.hasOwnProperty("has_target_temperature_high"))
            object.has_target_temperature_high = message.has_target_temperature_high;
        if (message.target_temperature_high != null && message.hasOwnProperty("target_temperature_high"))
            object.target_temperature_high = options.json && !isFinite(message.target_temperature_high) ? String(message.target_temperature_high) : message.target_temperature_high;
        if (message.unused_has_legacy_away != null && message.hasOwnProperty("unused_has_legacy_away"))
            object.unused_has_legacy_away = message.unused_has_legacy_away;
        if (message.unused_legacy_away != null && message.hasOwnProperty("unused_legacy_away"))
            object.unused_legacy_away = message.unused_legacy_away;
        if (message.has_fan_mode != null && message.hasOwnProperty("has_fan_mode"))
            object.has_fan_mode = message.has_fan_mode;
        if (message.fan_mode != null && message.hasOwnProperty("fan_mode"))
            object.fan_mode = options.enums === String ? $root.ClimateFanMode[message.fan_mode] === undefined ? message.fan_mode : $root.ClimateFanMode[message.fan_mode] : message.fan_mode;
        if (message.has_swing_mode != null && message.hasOwnProperty("has_swing_mode"))
            object.has_swing_mode = message.has_swing_mode;
        if (message.swing_mode != null && message.hasOwnProperty("swing_mode"))
            object.swing_mode = options.enums === String ? $root.ClimateSwingMode[message.swing_mode] === undefined ? message.swing_mode : $root.ClimateSwingMode[message.swing_mode] : message.swing_mode;
        if (message.has_custom_fan_mode != null && message.hasOwnProperty("has_custom_fan_mode"))
            object.has_custom_fan_mode = message.has_custom_fan_mode;
        if (message.custom_fan_mode != null && message.hasOwnProperty("custom_fan_mode"))
            object.custom_fan_mode = message.custom_fan_mode;
        if (message.has_preset != null && message.hasOwnProperty("has_preset"))
            object.has_preset = message.has_preset;
        if (message.preset != null && message.hasOwnProperty("preset"))
            object.preset = options.enums === String ? $root.ClimatePreset[message.preset] === undefined ? message.preset : $root.ClimatePreset[message.preset] : message.preset;
        if (message.has_custom_preset != null && message.hasOwnProperty("has_custom_preset"))
            object.has_custom_preset = message.has_custom_preset;
        if (message.custom_preset != null && message.hasOwnProperty("custom_preset"))
            object.custom_preset = message.custom_preset;
        if (message.has_target_humidity != null && message.hasOwnProperty("has_target_humidity"))
            object.has_target_humidity = message.has_target_humidity;
        if (message.target_humidity != null && message.hasOwnProperty("target_humidity"))
            object.target_humidity = options.json && !isFinite(message.target_humidity) ? String(message.target_humidity) : message.target_humidity;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ClimateCommandRequest to JSON.
     * @function toJSON
     * @memberof ClimateCommandRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ClimateCommandRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ClimateCommandRequest
     * @function getTypeUrl
     * @memberof ClimateCommandRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ClimateCommandRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ClimateCommandRequest";
    };

    return ClimateCommandRequest;
})();

/**
 * NumberMode enum.
 * @exports NumberMode
 * @enum {number}
 * @property {number} NUMBER_MODE_AUTO=0 NUMBER_MODE_AUTO value
 * @property {number} NUMBER_MODE_BOX=1 NUMBER_MODE_BOX value
 * @property {number} NUMBER_MODE_SLIDER=2 NUMBER_MODE_SLIDER value
 */
$root.NumberMode = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "NUMBER_MODE_AUTO"] = 0;
    values[valuesById[1] = "NUMBER_MODE_BOX"] = 1;
    values[valuesById[2] = "NUMBER_MODE_SLIDER"] = 2;
    return values;
})();

$root.ListEntitiesNumberResponse = (function() {

    /**
     * Properties of a ListEntitiesNumberResponse.
     * @exports IListEntitiesNumberResponse
     * @interface IListEntitiesNumberResponse
     * @property {string|null} [object_id] ListEntitiesNumberResponse object_id
     * @property {number|null} [key] ListEntitiesNumberResponse key
     * @property {string|null} [name] ListEntitiesNumberResponse name
     * @property {string|null} [icon] ListEntitiesNumberResponse icon
     * @property {number|null} [min_value] ListEntitiesNumberResponse min_value
     * @property {number|null} [max_value] ListEntitiesNumberResponse max_value
     * @property {number|null} [step] ListEntitiesNumberResponse step
     * @property {boolean|null} [disabled_by_default] ListEntitiesNumberResponse disabled_by_default
     * @property {EntityCategory|null} [entity_category] ListEntitiesNumberResponse entity_category
     * @property {string|null} [unit_of_measurement] ListEntitiesNumberResponse unit_of_measurement
     * @property {NumberMode|null} [mode] ListEntitiesNumberResponse mode
     * @property {string|null} [device_class] ListEntitiesNumberResponse device_class
     * @property {number|null} [device_id] ListEntitiesNumberResponse device_id
     */

    /**
     * Constructs a new ListEntitiesNumberResponse.
     * @exports ListEntitiesNumberResponse
     * @classdesc Represents a ListEntitiesNumberResponse.
     * @implements IListEntitiesNumberResponse
     * @constructor
     * @param {IListEntitiesNumberResponse=} [properties] Properties to set
     */
    function ListEntitiesNumberResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesNumberResponse object_id.
     * @member {string} object_id
     * @memberof ListEntitiesNumberResponse
     * @instance
     */
    ListEntitiesNumberResponse.prototype.object_id = "";

    /**
     * ListEntitiesNumberResponse key.
     * @member {number} key
     * @memberof ListEntitiesNumberResponse
     * @instance
     */
    ListEntitiesNumberResponse.prototype.key = 0;

    /**
     * ListEntitiesNumberResponse name.
     * @member {string} name
     * @memberof ListEntitiesNumberResponse
     * @instance
     */
    ListEntitiesNumberResponse.prototype.name = "";

    /**
     * ListEntitiesNumberResponse icon.
     * @member {string} icon
     * @memberof ListEntitiesNumberResponse
     * @instance
     */
    ListEntitiesNumberResponse.prototype.icon = "";

    /**
     * ListEntitiesNumberResponse min_value.
     * @member {number} min_value
     * @memberof ListEntitiesNumberResponse
     * @instance
     */
    ListEntitiesNumberResponse.prototype.min_value = 0;

    /**
     * ListEntitiesNumberResponse max_value.
     * @member {number} max_value
     * @memberof ListEntitiesNumberResponse
     * @instance
     */
    ListEntitiesNumberResponse.prototype.max_value = 0;

    /**
     * ListEntitiesNumberResponse step.
     * @member {number} step
     * @memberof ListEntitiesNumberResponse
     * @instance
     */
    ListEntitiesNumberResponse.prototype.step = 0;

    /**
     * ListEntitiesNumberResponse disabled_by_default.
     * @member {boolean} disabled_by_default
     * @memberof ListEntitiesNumberResponse
     * @instance
     */
    ListEntitiesNumberResponse.prototype.disabled_by_default = false;

    /**
     * ListEntitiesNumberResponse entity_category.
     * @member {EntityCategory} entity_category
     * @memberof ListEntitiesNumberResponse
     * @instance
     */
    ListEntitiesNumberResponse.prototype.entity_category = 0;

    /**
     * ListEntitiesNumberResponse unit_of_measurement.
     * @member {string} unit_of_measurement
     * @memberof ListEntitiesNumberResponse
     * @instance
     */
    ListEntitiesNumberResponse.prototype.unit_of_measurement = "";

    /**
     * ListEntitiesNumberResponse mode.
     * @member {NumberMode} mode
     * @memberof ListEntitiesNumberResponse
     * @instance
     */
    ListEntitiesNumberResponse.prototype.mode = 0;

    /**
     * ListEntitiesNumberResponse device_class.
     * @member {string} device_class
     * @memberof ListEntitiesNumberResponse
     * @instance
     */
    ListEntitiesNumberResponse.prototype.device_class = "";

    /**
     * ListEntitiesNumberResponse device_id.
     * @member {number} device_id
     * @memberof ListEntitiesNumberResponse
     * @instance
     */
    ListEntitiesNumberResponse.prototype.device_id = 0;

    /**
     * Creates a new ListEntitiesNumberResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesNumberResponse
     * @static
     * @param {IListEntitiesNumberResponse=} [properties] Properties to set
     * @returns {ListEntitiesNumberResponse} ListEntitiesNumberResponse instance
     */
    ListEntitiesNumberResponse.create = function create(properties) {
        return new ListEntitiesNumberResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesNumberResponse message. Does not implicitly {@link ListEntitiesNumberResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesNumberResponse
     * @static
     * @param {IListEntitiesNumberResponse} message ListEntitiesNumberResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesNumberResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.object_id != null && Object.hasOwnProperty.call(message, "object_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.object_id);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.icon);
        if (message.min_value != null && Object.hasOwnProperty.call(message, "min_value"))
            writer.uint32(/* id 6, wireType 5 =*/53).float(message.min_value);
        if (message.max_value != null && Object.hasOwnProperty.call(message, "max_value"))
            writer.uint32(/* id 7, wireType 5 =*/61).float(message.max_value);
        if (message.step != null && Object.hasOwnProperty.call(message, "step"))
            writer.uint32(/* id 8, wireType 5 =*/69).float(message.step);
        if (message.disabled_by_default != null && Object.hasOwnProperty.call(message, "disabled_by_default"))
            writer.uint32(/* id 9, wireType 0 =*/72).bool(message.disabled_by_default);
        if (message.entity_category != null && Object.hasOwnProperty.call(message, "entity_category"))
            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.entity_category);
        if (message.unit_of_measurement != null && Object.hasOwnProperty.call(message, "unit_of_measurement"))
            writer.uint32(/* id 11, wireType 2 =*/90).string(message.unit_of_measurement);
        if (message.mode != null && Object.hasOwnProperty.call(message, "mode"))
            writer.uint32(/* id 12, wireType 0 =*/96).int32(message.mode);
        if (message.device_class != null && Object.hasOwnProperty.call(message, "device_class"))
            writer.uint32(/* id 13, wireType 2 =*/106).string(message.device_class);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesNumberResponse message, length delimited. Does not implicitly {@link ListEntitiesNumberResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesNumberResponse
     * @static
     * @param {IListEntitiesNumberResponse} message ListEntitiesNumberResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesNumberResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesNumberResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesNumberResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesNumberResponse} ListEntitiesNumberResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesNumberResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesNumberResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.object_id = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 5: {
                    message.icon = reader.string();
                    break;
                }
            case 6: {
                    message.min_value = reader.float();
                    break;
                }
            case 7: {
                    message.max_value = reader.float();
                    break;
                }
            case 8: {
                    message.step = reader.float();
                    break;
                }
            case 9: {
                    message.disabled_by_default = reader.bool();
                    break;
                }
            case 10: {
                    message.entity_category = reader.int32();
                    break;
                }
            case 11: {
                    message.unit_of_measurement = reader.string();
                    break;
                }
            case 12: {
                    message.mode = reader.int32();
                    break;
                }
            case 13: {
                    message.device_class = reader.string();
                    break;
                }
            case 14: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesNumberResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesNumberResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesNumberResponse} ListEntitiesNumberResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesNumberResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesNumberResponse message.
     * @function verify
     * @memberof ListEntitiesNumberResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesNumberResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            if (!$util.isString(message.object_id))
                return "object_id: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isString(message.icon))
                return "icon: string expected";
        if (message.min_value != null && message.hasOwnProperty("min_value"))
            if (typeof message.min_value !== "number")
                return "min_value: number expected";
        if (message.max_value != null && message.hasOwnProperty("max_value"))
            if (typeof message.max_value !== "number")
                return "max_value: number expected";
        if (message.step != null && message.hasOwnProperty("step"))
            if (typeof message.step !== "number")
                return "step: number expected";
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            if (typeof message.disabled_by_default !== "boolean")
                return "disabled_by_default: boolean expected";
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            switch (message.entity_category) {
            default:
                return "entity_category: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.unit_of_measurement != null && message.hasOwnProperty("unit_of_measurement"))
            if (!$util.isString(message.unit_of_measurement))
                return "unit_of_measurement: string expected";
        if (message.mode != null && message.hasOwnProperty("mode"))
            switch (message.mode) {
            default:
                return "mode: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.device_class != null && message.hasOwnProperty("device_class"))
            if (!$util.isString(message.device_class))
                return "device_class: string expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ListEntitiesNumberResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesNumberResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesNumberResponse} ListEntitiesNumberResponse
     */
    ListEntitiesNumberResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesNumberResponse)
            return object;
        var message = new $root.ListEntitiesNumberResponse();
        if (object.object_id != null)
            message.object_id = String(object.object_id);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.icon != null)
            message.icon = String(object.icon);
        if (object.min_value != null)
            message.min_value = Number(object.min_value);
        if (object.max_value != null)
            message.max_value = Number(object.max_value);
        if (object.step != null)
            message.step = Number(object.step);
        if (object.disabled_by_default != null)
            message.disabled_by_default = Boolean(object.disabled_by_default);
        switch (object.entity_category) {
        default:
            if (typeof object.entity_category === "number") {
                message.entity_category = object.entity_category;
                break;
            }
            break;
        case "ENTITY_CATEGORY_NONE":
        case 0:
            message.entity_category = 0;
            break;
        case "ENTITY_CATEGORY_CONFIG":
        case 1:
            message.entity_category = 1;
            break;
        case "ENTITY_CATEGORY_DIAGNOSTIC":
        case 2:
            message.entity_category = 2;
            break;
        }
        if (object.unit_of_measurement != null)
            message.unit_of_measurement = String(object.unit_of_measurement);
        switch (object.mode) {
        default:
            if (typeof object.mode === "number") {
                message.mode = object.mode;
                break;
            }
            break;
        case "NUMBER_MODE_AUTO":
        case 0:
            message.mode = 0;
            break;
        case "NUMBER_MODE_BOX":
        case 1:
            message.mode = 1;
            break;
        case "NUMBER_MODE_SLIDER":
        case 2:
            message.mode = 2;
            break;
        }
        if (object.device_class != null)
            message.device_class = String(object.device_class);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesNumberResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesNumberResponse
     * @static
     * @param {ListEntitiesNumberResponse} message ListEntitiesNumberResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesNumberResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.object_id = "";
            object.key = 0;
            object.name = "";
            object.icon = "";
            object.min_value = 0;
            object.max_value = 0;
            object.step = 0;
            object.disabled_by_default = false;
            object.entity_category = options.enums === String ? "ENTITY_CATEGORY_NONE" : 0;
            object.unit_of_measurement = "";
            object.mode = options.enums === String ? "NUMBER_MODE_AUTO" : 0;
            object.device_class = "";
            object.device_id = 0;
        }
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            object.object_id = message.object_id;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.min_value != null && message.hasOwnProperty("min_value"))
            object.min_value = options.json && !isFinite(message.min_value) ? String(message.min_value) : message.min_value;
        if (message.max_value != null && message.hasOwnProperty("max_value"))
            object.max_value = options.json && !isFinite(message.max_value) ? String(message.max_value) : message.max_value;
        if (message.step != null && message.hasOwnProperty("step"))
            object.step = options.json && !isFinite(message.step) ? String(message.step) : message.step;
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            object.disabled_by_default = message.disabled_by_default;
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            object.entity_category = options.enums === String ? $root.EntityCategory[message.entity_category] === undefined ? message.entity_category : $root.EntityCategory[message.entity_category] : message.entity_category;
        if (message.unit_of_measurement != null && message.hasOwnProperty("unit_of_measurement"))
            object.unit_of_measurement = message.unit_of_measurement;
        if (message.mode != null && message.hasOwnProperty("mode"))
            object.mode = options.enums === String ? $root.NumberMode[message.mode] === undefined ? message.mode : $root.NumberMode[message.mode] : message.mode;
        if (message.device_class != null && message.hasOwnProperty("device_class"))
            object.device_class = message.device_class;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ListEntitiesNumberResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesNumberResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesNumberResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesNumberResponse
     * @function getTypeUrl
     * @memberof ListEntitiesNumberResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesNumberResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesNumberResponse";
    };

    return ListEntitiesNumberResponse;
})();

$root.NumberStateResponse = (function() {

    /**
     * Properties of a NumberStateResponse.
     * @exports INumberStateResponse
     * @interface INumberStateResponse
     * @property {number|null} [key] NumberStateResponse key
     * @property {number|null} [state] NumberStateResponse state
     * @property {boolean|null} [missing_state] NumberStateResponse missing_state
     * @property {number|null} [device_id] NumberStateResponse device_id
     */

    /**
     * Constructs a new NumberStateResponse.
     * @exports NumberStateResponse
     * @classdesc Represents a NumberStateResponse.
     * @implements INumberStateResponse
     * @constructor
     * @param {INumberStateResponse=} [properties] Properties to set
     */
    function NumberStateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * NumberStateResponse key.
     * @member {number} key
     * @memberof NumberStateResponse
     * @instance
     */
    NumberStateResponse.prototype.key = 0;

    /**
     * NumberStateResponse state.
     * @member {number} state
     * @memberof NumberStateResponse
     * @instance
     */
    NumberStateResponse.prototype.state = 0;

    /**
     * NumberStateResponse missing_state.
     * @member {boolean} missing_state
     * @memberof NumberStateResponse
     * @instance
     */
    NumberStateResponse.prototype.missing_state = false;

    /**
     * NumberStateResponse device_id.
     * @member {number} device_id
     * @memberof NumberStateResponse
     * @instance
     */
    NumberStateResponse.prototype.device_id = 0;

    /**
     * Creates a new NumberStateResponse instance using the specified properties.
     * @function create
     * @memberof NumberStateResponse
     * @static
     * @param {INumberStateResponse=} [properties] Properties to set
     * @returns {NumberStateResponse} NumberStateResponse instance
     */
    NumberStateResponse.create = function create(properties) {
        return new NumberStateResponse(properties);
    };

    /**
     * Encodes the specified NumberStateResponse message. Does not implicitly {@link NumberStateResponse.verify|verify} messages.
     * @function encode
     * @memberof NumberStateResponse
     * @static
     * @param {INumberStateResponse} message NumberStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    NumberStateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
            writer.uint32(/* id 2, wireType 5 =*/21).float(message.state);
        if (message.missing_state != null && Object.hasOwnProperty.call(message, "missing_state"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.missing_state);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified NumberStateResponse message, length delimited. Does not implicitly {@link NumberStateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof NumberStateResponse
     * @static
     * @param {INumberStateResponse} message NumberStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    NumberStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a NumberStateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof NumberStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {NumberStateResponse} NumberStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    NumberStateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.NumberStateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.state = reader.float();
                    break;
                }
            case 3: {
                    message.missing_state = reader.bool();
                    break;
                }
            case 4: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a NumberStateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof NumberStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {NumberStateResponse} NumberStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    NumberStateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a NumberStateResponse message.
     * @function verify
     * @memberof NumberStateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    NumberStateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            if (typeof message.state !== "number")
                return "state: number expected";
        if (message.missing_state != null && message.hasOwnProperty("missing_state"))
            if (typeof message.missing_state !== "boolean")
                return "missing_state: boolean expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a NumberStateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof NumberStateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {NumberStateResponse} NumberStateResponse
     */
    NumberStateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.NumberStateResponse)
            return object;
        var message = new $root.NumberStateResponse();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.state != null)
            message.state = Number(object.state);
        if (object.missing_state != null)
            message.missing_state = Boolean(object.missing_state);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a NumberStateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof NumberStateResponse
     * @static
     * @param {NumberStateResponse} message NumberStateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    NumberStateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.state = 0;
            object.missing_state = false;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = options.json && !isFinite(message.state) ? String(message.state) : message.state;
        if (message.missing_state != null && message.hasOwnProperty("missing_state"))
            object.missing_state = message.missing_state;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this NumberStateResponse to JSON.
     * @function toJSON
     * @memberof NumberStateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    NumberStateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for NumberStateResponse
     * @function getTypeUrl
     * @memberof NumberStateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    NumberStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/NumberStateResponse";
    };

    return NumberStateResponse;
})();

$root.NumberCommandRequest = (function() {

    /**
     * Properties of a NumberCommandRequest.
     * @exports INumberCommandRequest
     * @interface INumberCommandRequest
     * @property {number|null} [key] NumberCommandRequest key
     * @property {number|null} [state] NumberCommandRequest state
     * @property {number|null} [device_id] NumberCommandRequest device_id
     */

    /**
     * Constructs a new NumberCommandRequest.
     * @exports NumberCommandRequest
     * @classdesc Represents a NumberCommandRequest.
     * @implements INumberCommandRequest
     * @constructor
     * @param {INumberCommandRequest=} [properties] Properties to set
     */
    function NumberCommandRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * NumberCommandRequest key.
     * @member {number} key
     * @memberof NumberCommandRequest
     * @instance
     */
    NumberCommandRequest.prototype.key = 0;

    /**
     * NumberCommandRequest state.
     * @member {number} state
     * @memberof NumberCommandRequest
     * @instance
     */
    NumberCommandRequest.prototype.state = 0;

    /**
     * NumberCommandRequest device_id.
     * @member {number} device_id
     * @memberof NumberCommandRequest
     * @instance
     */
    NumberCommandRequest.prototype.device_id = 0;

    /**
     * Creates a new NumberCommandRequest instance using the specified properties.
     * @function create
     * @memberof NumberCommandRequest
     * @static
     * @param {INumberCommandRequest=} [properties] Properties to set
     * @returns {NumberCommandRequest} NumberCommandRequest instance
     */
    NumberCommandRequest.create = function create(properties) {
        return new NumberCommandRequest(properties);
    };

    /**
     * Encodes the specified NumberCommandRequest message. Does not implicitly {@link NumberCommandRequest.verify|verify} messages.
     * @function encode
     * @memberof NumberCommandRequest
     * @static
     * @param {INumberCommandRequest} message NumberCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    NumberCommandRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
            writer.uint32(/* id 2, wireType 5 =*/21).float(message.state);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified NumberCommandRequest message, length delimited. Does not implicitly {@link NumberCommandRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof NumberCommandRequest
     * @static
     * @param {INumberCommandRequest} message NumberCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    NumberCommandRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a NumberCommandRequest message from the specified reader or buffer.
     * @function decode
     * @memberof NumberCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {NumberCommandRequest} NumberCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    NumberCommandRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.NumberCommandRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.state = reader.float();
                    break;
                }
            case 3: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a NumberCommandRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof NumberCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {NumberCommandRequest} NumberCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    NumberCommandRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a NumberCommandRequest message.
     * @function verify
     * @memberof NumberCommandRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    NumberCommandRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            if (typeof message.state !== "number")
                return "state: number expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a NumberCommandRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof NumberCommandRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {NumberCommandRequest} NumberCommandRequest
     */
    NumberCommandRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.NumberCommandRequest)
            return object;
        var message = new $root.NumberCommandRequest();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.state != null)
            message.state = Number(object.state);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a NumberCommandRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof NumberCommandRequest
     * @static
     * @param {NumberCommandRequest} message NumberCommandRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    NumberCommandRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.state = 0;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = options.json && !isFinite(message.state) ? String(message.state) : message.state;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this NumberCommandRequest to JSON.
     * @function toJSON
     * @memberof NumberCommandRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    NumberCommandRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for NumberCommandRequest
     * @function getTypeUrl
     * @memberof NumberCommandRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    NumberCommandRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/NumberCommandRequest";
    };

    return NumberCommandRequest;
})();

$root.ListEntitiesSelectResponse = (function() {

    /**
     * Properties of a ListEntitiesSelectResponse.
     * @exports IListEntitiesSelectResponse
     * @interface IListEntitiesSelectResponse
     * @property {string|null} [object_id] ListEntitiesSelectResponse object_id
     * @property {number|null} [key] ListEntitiesSelectResponse key
     * @property {string|null} [name] ListEntitiesSelectResponse name
     * @property {string|null} [icon] ListEntitiesSelectResponse icon
     * @property {Array.<string>|null} [options] ListEntitiesSelectResponse options
     * @property {boolean|null} [disabled_by_default] ListEntitiesSelectResponse disabled_by_default
     * @property {EntityCategory|null} [entity_category] ListEntitiesSelectResponse entity_category
     * @property {number|null} [device_id] ListEntitiesSelectResponse device_id
     */

    /**
     * Constructs a new ListEntitiesSelectResponse.
     * @exports ListEntitiesSelectResponse
     * @classdesc Represents a ListEntitiesSelectResponse.
     * @implements IListEntitiesSelectResponse
     * @constructor
     * @param {IListEntitiesSelectResponse=} [properties] Properties to set
     */
    function ListEntitiesSelectResponse(properties) {
        this.options = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesSelectResponse object_id.
     * @member {string} object_id
     * @memberof ListEntitiesSelectResponse
     * @instance
     */
    ListEntitiesSelectResponse.prototype.object_id = "";

    /**
     * ListEntitiesSelectResponse key.
     * @member {number} key
     * @memberof ListEntitiesSelectResponse
     * @instance
     */
    ListEntitiesSelectResponse.prototype.key = 0;

    /**
     * ListEntitiesSelectResponse name.
     * @member {string} name
     * @memberof ListEntitiesSelectResponse
     * @instance
     */
    ListEntitiesSelectResponse.prototype.name = "";

    /**
     * ListEntitiesSelectResponse icon.
     * @member {string} icon
     * @memberof ListEntitiesSelectResponse
     * @instance
     */
    ListEntitiesSelectResponse.prototype.icon = "";

    /**
     * ListEntitiesSelectResponse options.
     * @member {Array.<string>} options
     * @memberof ListEntitiesSelectResponse
     * @instance
     */
    ListEntitiesSelectResponse.prototype.options = $util.emptyArray;

    /**
     * ListEntitiesSelectResponse disabled_by_default.
     * @member {boolean} disabled_by_default
     * @memberof ListEntitiesSelectResponse
     * @instance
     */
    ListEntitiesSelectResponse.prototype.disabled_by_default = false;

    /**
     * ListEntitiesSelectResponse entity_category.
     * @member {EntityCategory} entity_category
     * @memberof ListEntitiesSelectResponse
     * @instance
     */
    ListEntitiesSelectResponse.prototype.entity_category = 0;

    /**
     * ListEntitiesSelectResponse device_id.
     * @member {number} device_id
     * @memberof ListEntitiesSelectResponse
     * @instance
     */
    ListEntitiesSelectResponse.prototype.device_id = 0;

    /**
     * Creates a new ListEntitiesSelectResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesSelectResponse
     * @static
     * @param {IListEntitiesSelectResponse=} [properties] Properties to set
     * @returns {ListEntitiesSelectResponse} ListEntitiesSelectResponse instance
     */
    ListEntitiesSelectResponse.create = function create(properties) {
        return new ListEntitiesSelectResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesSelectResponse message. Does not implicitly {@link ListEntitiesSelectResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesSelectResponse
     * @static
     * @param {IListEntitiesSelectResponse} message ListEntitiesSelectResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesSelectResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.object_id != null && Object.hasOwnProperty.call(message, "object_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.object_id);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.icon);
        if (message.options != null && message.options.length)
            for (var i = 0; i < message.options.length; ++i)
                writer.uint32(/* id 6, wireType 2 =*/50).string(message.options[i]);
        if (message.disabled_by_default != null && Object.hasOwnProperty.call(message, "disabled_by_default"))
            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.disabled_by_default);
        if (message.entity_category != null && Object.hasOwnProperty.call(message, "entity_category"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.entity_category);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesSelectResponse message, length delimited. Does not implicitly {@link ListEntitiesSelectResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesSelectResponse
     * @static
     * @param {IListEntitiesSelectResponse} message ListEntitiesSelectResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesSelectResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesSelectResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesSelectResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesSelectResponse} ListEntitiesSelectResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesSelectResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesSelectResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.object_id = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 5: {
                    message.icon = reader.string();
                    break;
                }
            case 6: {
                    if (!(message.options && message.options.length))
                        message.options = [];
                    message.options.push(reader.string());
                    break;
                }
            case 7: {
                    message.disabled_by_default = reader.bool();
                    break;
                }
            case 8: {
                    message.entity_category = reader.int32();
                    break;
                }
            case 9: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesSelectResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesSelectResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesSelectResponse} ListEntitiesSelectResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesSelectResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesSelectResponse message.
     * @function verify
     * @memberof ListEntitiesSelectResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesSelectResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            if (!$util.isString(message.object_id))
                return "object_id: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isString(message.icon))
                return "icon: string expected";
        if (message.options != null && message.hasOwnProperty("options")) {
            if (!Array.isArray(message.options))
                return "options: array expected";
            for (var i = 0; i < message.options.length; ++i)
                if (!$util.isString(message.options[i]))
                    return "options: string[] expected";
        }
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            if (typeof message.disabled_by_default !== "boolean")
                return "disabled_by_default: boolean expected";
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            switch (message.entity_category) {
            default:
                return "entity_category: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ListEntitiesSelectResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesSelectResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesSelectResponse} ListEntitiesSelectResponse
     */
    ListEntitiesSelectResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesSelectResponse)
            return object;
        var message = new $root.ListEntitiesSelectResponse();
        if (object.object_id != null)
            message.object_id = String(object.object_id);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.icon != null)
            message.icon = String(object.icon);
        if (object.options) {
            if (!Array.isArray(object.options))
                throw TypeError(".ListEntitiesSelectResponse.options: array expected");
            message.options = [];
            for (var i = 0; i < object.options.length; ++i)
                message.options[i] = String(object.options[i]);
        }
        if (object.disabled_by_default != null)
            message.disabled_by_default = Boolean(object.disabled_by_default);
        switch (object.entity_category) {
        default:
            if (typeof object.entity_category === "number") {
                message.entity_category = object.entity_category;
                break;
            }
            break;
        case "ENTITY_CATEGORY_NONE":
        case 0:
            message.entity_category = 0;
            break;
        case "ENTITY_CATEGORY_CONFIG":
        case 1:
            message.entity_category = 1;
            break;
        case "ENTITY_CATEGORY_DIAGNOSTIC":
        case 2:
            message.entity_category = 2;
            break;
        }
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesSelectResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesSelectResponse
     * @static
     * @param {ListEntitiesSelectResponse} message ListEntitiesSelectResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesSelectResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.options = [];
        if (options.defaults) {
            object.object_id = "";
            object.key = 0;
            object.name = "";
            object.icon = "";
            object.disabled_by_default = false;
            object.entity_category = options.enums === String ? "ENTITY_CATEGORY_NONE" : 0;
            object.device_id = 0;
        }
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            object.object_id = message.object_id;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.options && message.options.length) {
            object.options = [];
            for (var j = 0; j < message.options.length; ++j)
                object.options[j] = message.options[j];
        }
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            object.disabled_by_default = message.disabled_by_default;
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            object.entity_category = options.enums === String ? $root.EntityCategory[message.entity_category] === undefined ? message.entity_category : $root.EntityCategory[message.entity_category] : message.entity_category;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ListEntitiesSelectResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesSelectResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesSelectResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesSelectResponse
     * @function getTypeUrl
     * @memberof ListEntitiesSelectResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesSelectResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesSelectResponse";
    };

    return ListEntitiesSelectResponse;
})();

$root.SelectStateResponse = (function() {

    /**
     * Properties of a SelectStateResponse.
     * @exports ISelectStateResponse
     * @interface ISelectStateResponse
     * @property {number|null} [key] SelectStateResponse key
     * @property {string|null} [state] SelectStateResponse state
     * @property {boolean|null} [missing_state] SelectStateResponse missing_state
     * @property {number|null} [device_id] SelectStateResponse device_id
     */

    /**
     * Constructs a new SelectStateResponse.
     * @exports SelectStateResponse
     * @classdesc Represents a SelectStateResponse.
     * @implements ISelectStateResponse
     * @constructor
     * @param {ISelectStateResponse=} [properties] Properties to set
     */
    function SelectStateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SelectStateResponse key.
     * @member {number} key
     * @memberof SelectStateResponse
     * @instance
     */
    SelectStateResponse.prototype.key = 0;

    /**
     * SelectStateResponse state.
     * @member {string} state
     * @memberof SelectStateResponse
     * @instance
     */
    SelectStateResponse.prototype.state = "";

    /**
     * SelectStateResponse missing_state.
     * @member {boolean} missing_state
     * @memberof SelectStateResponse
     * @instance
     */
    SelectStateResponse.prototype.missing_state = false;

    /**
     * SelectStateResponse device_id.
     * @member {number} device_id
     * @memberof SelectStateResponse
     * @instance
     */
    SelectStateResponse.prototype.device_id = 0;

    /**
     * Creates a new SelectStateResponse instance using the specified properties.
     * @function create
     * @memberof SelectStateResponse
     * @static
     * @param {ISelectStateResponse=} [properties] Properties to set
     * @returns {SelectStateResponse} SelectStateResponse instance
     */
    SelectStateResponse.create = function create(properties) {
        return new SelectStateResponse(properties);
    };

    /**
     * Encodes the specified SelectStateResponse message. Does not implicitly {@link SelectStateResponse.verify|verify} messages.
     * @function encode
     * @memberof SelectStateResponse
     * @static
     * @param {ISelectStateResponse} message SelectStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SelectStateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.state);
        if (message.missing_state != null && Object.hasOwnProperty.call(message, "missing_state"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.missing_state);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified SelectStateResponse message, length delimited. Does not implicitly {@link SelectStateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SelectStateResponse
     * @static
     * @param {ISelectStateResponse} message SelectStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SelectStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SelectStateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof SelectStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SelectStateResponse} SelectStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SelectStateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SelectStateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.state = reader.string();
                    break;
                }
            case 3: {
                    message.missing_state = reader.bool();
                    break;
                }
            case 4: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SelectStateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SelectStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SelectStateResponse} SelectStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SelectStateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SelectStateResponse message.
     * @function verify
     * @memberof SelectStateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SelectStateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            if (!$util.isString(message.state))
                return "state: string expected";
        if (message.missing_state != null && message.hasOwnProperty("missing_state"))
            if (typeof message.missing_state !== "boolean")
                return "missing_state: boolean expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a SelectStateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SelectStateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SelectStateResponse} SelectStateResponse
     */
    SelectStateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.SelectStateResponse)
            return object;
        var message = new $root.SelectStateResponse();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.state != null)
            message.state = String(object.state);
        if (object.missing_state != null)
            message.missing_state = Boolean(object.missing_state);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a SelectStateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SelectStateResponse
     * @static
     * @param {SelectStateResponse} message SelectStateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SelectStateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.state = "";
            object.missing_state = false;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = message.state;
        if (message.missing_state != null && message.hasOwnProperty("missing_state"))
            object.missing_state = message.missing_state;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this SelectStateResponse to JSON.
     * @function toJSON
     * @memberof SelectStateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SelectStateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SelectStateResponse
     * @function getTypeUrl
     * @memberof SelectStateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SelectStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SelectStateResponse";
    };

    return SelectStateResponse;
})();

$root.SelectCommandRequest = (function() {

    /**
     * Properties of a SelectCommandRequest.
     * @exports ISelectCommandRequest
     * @interface ISelectCommandRequest
     * @property {number|null} [key] SelectCommandRequest key
     * @property {string|null} [state] SelectCommandRequest state
     * @property {number|null} [device_id] SelectCommandRequest device_id
     */

    /**
     * Constructs a new SelectCommandRequest.
     * @exports SelectCommandRequest
     * @classdesc Represents a SelectCommandRequest.
     * @implements ISelectCommandRequest
     * @constructor
     * @param {ISelectCommandRequest=} [properties] Properties to set
     */
    function SelectCommandRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SelectCommandRequest key.
     * @member {number} key
     * @memberof SelectCommandRequest
     * @instance
     */
    SelectCommandRequest.prototype.key = 0;

    /**
     * SelectCommandRequest state.
     * @member {string} state
     * @memberof SelectCommandRequest
     * @instance
     */
    SelectCommandRequest.prototype.state = "";

    /**
     * SelectCommandRequest device_id.
     * @member {number} device_id
     * @memberof SelectCommandRequest
     * @instance
     */
    SelectCommandRequest.prototype.device_id = 0;

    /**
     * Creates a new SelectCommandRequest instance using the specified properties.
     * @function create
     * @memberof SelectCommandRequest
     * @static
     * @param {ISelectCommandRequest=} [properties] Properties to set
     * @returns {SelectCommandRequest} SelectCommandRequest instance
     */
    SelectCommandRequest.create = function create(properties) {
        return new SelectCommandRequest(properties);
    };

    /**
     * Encodes the specified SelectCommandRequest message. Does not implicitly {@link SelectCommandRequest.verify|verify} messages.
     * @function encode
     * @memberof SelectCommandRequest
     * @static
     * @param {ISelectCommandRequest} message SelectCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SelectCommandRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.state);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified SelectCommandRequest message, length delimited. Does not implicitly {@link SelectCommandRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SelectCommandRequest
     * @static
     * @param {ISelectCommandRequest} message SelectCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SelectCommandRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SelectCommandRequest message from the specified reader or buffer.
     * @function decode
     * @memberof SelectCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SelectCommandRequest} SelectCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SelectCommandRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SelectCommandRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.state = reader.string();
                    break;
                }
            case 3: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SelectCommandRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SelectCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SelectCommandRequest} SelectCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SelectCommandRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SelectCommandRequest message.
     * @function verify
     * @memberof SelectCommandRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SelectCommandRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            if (!$util.isString(message.state))
                return "state: string expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a SelectCommandRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SelectCommandRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SelectCommandRequest} SelectCommandRequest
     */
    SelectCommandRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.SelectCommandRequest)
            return object;
        var message = new $root.SelectCommandRequest();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.state != null)
            message.state = String(object.state);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a SelectCommandRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SelectCommandRequest
     * @static
     * @param {SelectCommandRequest} message SelectCommandRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SelectCommandRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.state = "";
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = message.state;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this SelectCommandRequest to JSON.
     * @function toJSON
     * @memberof SelectCommandRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SelectCommandRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SelectCommandRequest
     * @function getTypeUrl
     * @memberof SelectCommandRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SelectCommandRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SelectCommandRequest";
    };

    return SelectCommandRequest;
})();

$root.ListEntitiesSirenResponse = (function() {

    /**
     * Properties of a ListEntitiesSirenResponse.
     * @exports IListEntitiesSirenResponse
     * @interface IListEntitiesSirenResponse
     * @property {string|null} [object_id] ListEntitiesSirenResponse object_id
     * @property {number|null} [key] ListEntitiesSirenResponse key
     * @property {string|null} [name] ListEntitiesSirenResponse name
     * @property {string|null} [icon] ListEntitiesSirenResponse icon
     * @property {boolean|null} [disabled_by_default] ListEntitiesSirenResponse disabled_by_default
     * @property {Array.<string>|null} [tones] ListEntitiesSirenResponse tones
     * @property {boolean|null} [supports_duration] ListEntitiesSirenResponse supports_duration
     * @property {boolean|null} [supports_volume] ListEntitiesSirenResponse supports_volume
     * @property {EntityCategory|null} [entity_category] ListEntitiesSirenResponse entity_category
     * @property {number|null} [device_id] ListEntitiesSirenResponse device_id
     */

    /**
     * Constructs a new ListEntitiesSirenResponse.
     * @exports ListEntitiesSirenResponse
     * @classdesc Represents a ListEntitiesSirenResponse.
     * @implements IListEntitiesSirenResponse
     * @constructor
     * @param {IListEntitiesSirenResponse=} [properties] Properties to set
     */
    function ListEntitiesSirenResponse(properties) {
        this.tones = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesSirenResponse object_id.
     * @member {string} object_id
     * @memberof ListEntitiesSirenResponse
     * @instance
     */
    ListEntitiesSirenResponse.prototype.object_id = "";

    /**
     * ListEntitiesSirenResponse key.
     * @member {number} key
     * @memberof ListEntitiesSirenResponse
     * @instance
     */
    ListEntitiesSirenResponse.prototype.key = 0;

    /**
     * ListEntitiesSirenResponse name.
     * @member {string} name
     * @memberof ListEntitiesSirenResponse
     * @instance
     */
    ListEntitiesSirenResponse.prototype.name = "";

    /**
     * ListEntitiesSirenResponse icon.
     * @member {string} icon
     * @memberof ListEntitiesSirenResponse
     * @instance
     */
    ListEntitiesSirenResponse.prototype.icon = "";

    /**
     * ListEntitiesSirenResponse disabled_by_default.
     * @member {boolean} disabled_by_default
     * @memberof ListEntitiesSirenResponse
     * @instance
     */
    ListEntitiesSirenResponse.prototype.disabled_by_default = false;

    /**
     * ListEntitiesSirenResponse tones.
     * @member {Array.<string>} tones
     * @memberof ListEntitiesSirenResponse
     * @instance
     */
    ListEntitiesSirenResponse.prototype.tones = $util.emptyArray;

    /**
     * ListEntitiesSirenResponse supports_duration.
     * @member {boolean} supports_duration
     * @memberof ListEntitiesSirenResponse
     * @instance
     */
    ListEntitiesSirenResponse.prototype.supports_duration = false;

    /**
     * ListEntitiesSirenResponse supports_volume.
     * @member {boolean} supports_volume
     * @memberof ListEntitiesSirenResponse
     * @instance
     */
    ListEntitiesSirenResponse.prototype.supports_volume = false;

    /**
     * ListEntitiesSirenResponse entity_category.
     * @member {EntityCategory} entity_category
     * @memberof ListEntitiesSirenResponse
     * @instance
     */
    ListEntitiesSirenResponse.prototype.entity_category = 0;

    /**
     * ListEntitiesSirenResponse device_id.
     * @member {number} device_id
     * @memberof ListEntitiesSirenResponse
     * @instance
     */
    ListEntitiesSirenResponse.prototype.device_id = 0;

    /**
     * Creates a new ListEntitiesSirenResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesSirenResponse
     * @static
     * @param {IListEntitiesSirenResponse=} [properties] Properties to set
     * @returns {ListEntitiesSirenResponse} ListEntitiesSirenResponse instance
     */
    ListEntitiesSirenResponse.create = function create(properties) {
        return new ListEntitiesSirenResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesSirenResponse message. Does not implicitly {@link ListEntitiesSirenResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesSirenResponse
     * @static
     * @param {IListEntitiesSirenResponse} message ListEntitiesSirenResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesSirenResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.object_id != null && Object.hasOwnProperty.call(message, "object_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.object_id);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.icon);
        if (message.disabled_by_default != null && Object.hasOwnProperty.call(message, "disabled_by_default"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.disabled_by_default);
        if (message.tones != null && message.tones.length)
            for (var i = 0; i < message.tones.length; ++i)
                writer.uint32(/* id 7, wireType 2 =*/58).string(message.tones[i]);
        if (message.supports_duration != null && Object.hasOwnProperty.call(message, "supports_duration"))
            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.supports_duration);
        if (message.supports_volume != null && Object.hasOwnProperty.call(message, "supports_volume"))
            writer.uint32(/* id 9, wireType 0 =*/72).bool(message.supports_volume);
        if (message.entity_category != null && Object.hasOwnProperty.call(message, "entity_category"))
            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.entity_category);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesSirenResponse message, length delimited. Does not implicitly {@link ListEntitiesSirenResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesSirenResponse
     * @static
     * @param {IListEntitiesSirenResponse} message ListEntitiesSirenResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesSirenResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesSirenResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesSirenResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesSirenResponse} ListEntitiesSirenResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesSirenResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesSirenResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.object_id = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 5: {
                    message.icon = reader.string();
                    break;
                }
            case 6: {
                    message.disabled_by_default = reader.bool();
                    break;
                }
            case 7: {
                    if (!(message.tones && message.tones.length))
                        message.tones = [];
                    message.tones.push(reader.string());
                    break;
                }
            case 8: {
                    message.supports_duration = reader.bool();
                    break;
                }
            case 9: {
                    message.supports_volume = reader.bool();
                    break;
                }
            case 10: {
                    message.entity_category = reader.int32();
                    break;
                }
            case 11: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesSirenResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesSirenResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesSirenResponse} ListEntitiesSirenResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesSirenResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesSirenResponse message.
     * @function verify
     * @memberof ListEntitiesSirenResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesSirenResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            if (!$util.isString(message.object_id))
                return "object_id: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isString(message.icon))
                return "icon: string expected";
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            if (typeof message.disabled_by_default !== "boolean")
                return "disabled_by_default: boolean expected";
        if (message.tones != null && message.hasOwnProperty("tones")) {
            if (!Array.isArray(message.tones))
                return "tones: array expected";
            for (var i = 0; i < message.tones.length; ++i)
                if (!$util.isString(message.tones[i]))
                    return "tones: string[] expected";
        }
        if (message.supports_duration != null && message.hasOwnProperty("supports_duration"))
            if (typeof message.supports_duration !== "boolean")
                return "supports_duration: boolean expected";
        if (message.supports_volume != null && message.hasOwnProperty("supports_volume"))
            if (typeof message.supports_volume !== "boolean")
                return "supports_volume: boolean expected";
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            switch (message.entity_category) {
            default:
                return "entity_category: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ListEntitiesSirenResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesSirenResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesSirenResponse} ListEntitiesSirenResponse
     */
    ListEntitiesSirenResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesSirenResponse)
            return object;
        var message = new $root.ListEntitiesSirenResponse();
        if (object.object_id != null)
            message.object_id = String(object.object_id);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.icon != null)
            message.icon = String(object.icon);
        if (object.disabled_by_default != null)
            message.disabled_by_default = Boolean(object.disabled_by_default);
        if (object.tones) {
            if (!Array.isArray(object.tones))
                throw TypeError(".ListEntitiesSirenResponse.tones: array expected");
            message.tones = [];
            for (var i = 0; i < object.tones.length; ++i)
                message.tones[i] = String(object.tones[i]);
        }
        if (object.supports_duration != null)
            message.supports_duration = Boolean(object.supports_duration);
        if (object.supports_volume != null)
            message.supports_volume = Boolean(object.supports_volume);
        switch (object.entity_category) {
        default:
            if (typeof object.entity_category === "number") {
                message.entity_category = object.entity_category;
                break;
            }
            break;
        case "ENTITY_CATEGORY_NONE":
        case 0:
            message.entity_category = 0;
            break;
        case "ENTITY_CATEGORY_CONFIG":
        case 1:
            message.entity_category = 1;
            break;
        case "ENTITY_CATEGORY_DIAGNOSTIC":
        case 2:
            message.entity_category = 2;
            break;
        }
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesSirenResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesSirenResponse
     * @static
     * @param {ListEntitiesSirenResponse} message ListEntitiesSirenResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesSirenResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.tones = [];
        if (options.defaults) {
            object.object_id = "";
            object.key = 0;
            object.name = "";
            object.icon = "";
            object.disabled_by_default = false;
            object.supports_duration = false;
            object.supports_volume = false;
            object.entity_category = options.enums === String ? "ENTITY_CATEGORY_NONE" : 0;
            object.device_id = 0;
        }
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            object.object_id = message.object_id;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            object.disabled_by_default = message.disabled_by_default;
        if (message.tones && message.tones.length) {
            object.tones = [];
            for (var j = 0; j < message.tones.length; ++j)
                object.tones[j] = message.tones[j];
        }
        if (message.supports_duration != null && message.hasOwnProperty("supports_duration"))
            object.supports_duration = message.supports_duration;
        if (message.supports_volume != null && message.hasOwnProperty("supports_volume"))
            object.supports_volume = message.supports_volume;
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            object.entity_category = options.enums === String ? $root.EntityCategory[message.entity_category] === undefined ? message.entity_category : $root.EntityCategory[message.entity_category] : message.entity_category;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ListEntitiesSirenResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesSirenResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesSirenResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesSirenResponse
     * @function getTypeUrl
     * @memberof ListEntitiesSirenResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesSirenResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesSirenResponse";
    };

    return ListEntitiesSirenResponse;
})();

$root.SirenStateResponse = (function() {

    /**
     * Properties of a SirenStateResponse.
     * @exports ISirenStateResponse
     * @interface ISirenStateResponse
     * @property {number|null} [key] SirenStateResponse key
     * @property {boolean|null} [state] SirenStateResponse state
     * @property {number|null} [device_id] SirenStateResponse device_id
     */

    /**
     * Constructs a new SirenStateResponse.
     * @exports SirenStateResponse
     * @classdesc Represents a SirenStateResponse.
     * @implements ISirenStateResponse
     * @constructor
     * @param {ISirenStateResponse=} [properties] Properties to set
     */
    function SirenStateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SirenStateResponse key.
     * @member {number} key
     * @memberof SirenStateResponse
     * @instance
     */
    SirenStateResponse.prototype.key = 0;

    /**
     * SirenStateResponse state.
     * @member {boolean} state
     * @memberof SirenStateResponse
     * @instance
     */
    SirenStateResponse.prototype.state = false;

    /**
     * SirenStateResponse device_id.
     * @member {number} device_id
     * @memberof SirenStateResponse
     * @instance
     */
    SirenStateResponse.prototype.device_id = 0;

    /**
     * Creates a new SirenStateResponse instance using the specified properties.
     * @function create
     * @memberof SirenStateResponse
     * @static
     * @param {ISirenStateResponse=} [properties] Properties to set
     * @returns {SirenStateResponse} SirenStateResponse instance
     */
    SirenStateResponse.create = function create(properties) {
        return new SirenStateResponse(properties);
    };

    /**
     * Encodes the specified SirenStateResponse message. Does not implicitly {@link SirenStateResponse.verify|verify} messages.
     * @function encode
     * @memberof SirenStateResponse
     * @static
     * @param {ISirenStateResponse} message SirenStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SirenStateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.state);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified SirenStateResponse message, length delimited. Does not implicitly {@link SirenStateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SirenStateResponse
     * @static
     * @param {ISirenStateResponse} message SirenStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SirenStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SirenStateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof SirenStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SirenStateResponse} SirenStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SirenStateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SirenStateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.state = reader.bool();
                    break;
                }
            case 3: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SirenStateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SirenStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SirenStateResponse} SirenStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SirenStateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SirenStateResponse message.
     * @function verify
     * @memberof SirenStateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SirenStateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            if (typeof message.state !== "boolean")
                return "state: boolean expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a SirenStateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SirenStateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SirenStateResponse} SirenStateResponse
     */
    SirenStateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.SirenStateResponse)
            return object;
        var message = new $root.SirenStateResponse();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.state != null)
            message.state = Boolean(object.state);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a SirenStateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SirenStateResponse
     * @static
     * @param {SirenStateResponse} message SirenStateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SirenStateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.state = false;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = message.state;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this SirenStateResponse to JSON.
     * @function toJSON
     * @memberof SirenStateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SirenStateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SirenStateResponse
     * @function getTypeUrl
     * @memberof SirenStateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SirenStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SirenStateResponse";
    };

    return SirenStateResponse;
})();

$root.SirenCommandRequest = (function() {

    /**
     * Properties of a SirenCommandRequest.
     * @exports ISirenCommandRequest
     * @interface ISirenCommandRequest
     * @property {number|null} [key] SirenCommandRequest key
     * @property {boolean|null} [has_state] SirenCommandRequest has_state
     * @property {boolean|null} [state] SirenCommandRequest state
     * @property {boolean|null} [has_tone] SirenCommandRequest has_tone
     * @property {string|null} [tone] SirenCommandRequest tone
     * @property {boolean|null} [has_duration] SirenCommandRequest has_duration
     * @property {number|null} [duration] SirenCommandRequest duration
     * @property {boolean|null} [has_volume] SirenCommandRequest has_volume
     * @property {number|null} [volume] SirenCommandRequest volume
     * @property {number|null} [device_id] SirenCommandRequest device_id
     */

    /**
     * Constructs a new SirenCommandRequest.
     * @exports SirenCommandRequest
     * @classdesc Represents a SirenCommandRequest.
     * @implements ISirenCommandRequest
     * @constructor
     * @param {ISirenCommandRequest=} [properties] Properties to set
     */
    function SirenCommandRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SirenCommandRequest key.
     * @member {number} key
     * @memberof SirenCommandRequest
     * @instance
     */
    SirenCommandRequest.prototype.key = 0;

    /**
     * SirenCommandRequest has_state.
     * @member {boolean} has_state
     * @memberof SirenCommandRequest
     * @instance
     */
    SirenCommandRequest.prototype.has_state = false;

    /**
     * SirenCommandRequest state.
     * @member {boolean} state
     * @memberof SirenCommandRequest
     * @instance
     */
    SirenCommandRequest.prototype.state = false;

    /**
     * SirenCommandRequest has_tone.
     * @member {boolean} has_tone
     * @memberof SirenCommandRequest
     * @instance
     */
    SirenCommandRequest.prototype.has_tone = false;

    /**
     * SirenCommandRequest tone.
     * @member {string} tone
     * @memberof SirenCommandRequest
     * @instance
     */
    SirenCommandRequest.prototype.tone = "";

    /**
     * SirenCommandRequest has_duration.
     * @member {boolean} has_duration
     * @memberof SirenCommandRequest
     * @instance
     */
    SirenCommandRequest.prototype.has_duration = false;

    /**
     * SirenCommandRequest duration.
     * @member {number} duration
     * @memberof SirenCommandRequest
     * @instance
     */
    SirenCommandRequest.prototype.duration = 0;

    /**
     * SirenCommandRequest has_volume.
     * @member {boolean} has_volume
     * @memberof SirenCommandRequest
     * @instance
     */
    SirenCommandRequest.prototype.has_volume = false;

    /**
     * SirenCommandRequest volume.
     * @member {number} volume
     * @memberof SirenCommandRequest
     * @instance
     */
    SirenCommandRequest.prototype.volume = 0;

    /**
     * SirenCommandRequest device_id.
     * @member {number} device_id
     * @memberof SirenCommandRequest
     * @instance
     */
    SirenCommandRequest.prototype.device_id = 0;

    /**
     * Creates a new SirenCommandRequest instance using the specified properties.
     * @function create
     * @memberof SirenCommandRequest
     * @static
     * @param {ISirenCommandRequest=} [properties] Properties to set
     * @returns {SirenCommandRequest} SirenCommandRequest instance
     */
    SirenCommandRequest.create = function create(properties) {
        return new SirenCommandRequest(properties);
    };

    /**
     * Encodes the specified SirenCommandRequest message. Does not implicitly {@link SirenCommandRequest.verify|verify} messages.
     * @function encode
     * @memberof SirenCommandRequest
     * @static
     * @param {ISirenCommandRequest} message SirenCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SirenCommandRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.has_state != null && Object.hasOwnProperty.call(message, "has_state"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.has_state);
        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.state);
        if (message.has_tone != null && Object.hasOwnProperty.call(message, "has_tone"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.has_tone);
        if (message.tone != null && Object.hasOwnProperty.call(message, "tone"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.tone);
        if (message.has_duration != null && Object.hasOwnProperty.call(message, "has_duration"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.has_duration);
        if (message.duration != null && Object.hasOwnProperty.call(message, "duration"))
            writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.duration);
        if (message.has_volume != null && Object.hasOwnProperty.call(message, "has_volume"))
            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.has_volume);
        if (message.volume != null && Object.hasOwnProperty.call(message, "volume"))
            writer.uint32(/* id 9, wireType 5 =*/77).float(message.volume);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified SirenCommandRequest message, length delimited. Does not implicitly {@link SirenCommandRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SirenCommandRequest
     * @static
     * @param {ISirenCommandRequest} message SirenCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SirenCommandRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SirenCommandRequest message from the specified reader or buffer.
     * @function decode
     * @memberof SirenCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SirenCommandRequest} SirenCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SirenCommandRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SirenCommandRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.has_state = reader.bool();
                    break;
                }
            case 3: {
                    message.state = reader.bool();
                    break;
                }
            case 4: {
                    message.has_tone = reader.bool();
                    break;
                }
            case 5: {
                    message.tone = reader.string();
                    break;
                }
            case 6: {
                    message.has_duration = reader.bool();
                    break;
                }
            case 7: {
                    message.duration = reader.uint32();
                    break;
                }
            case 8: {
                    message.has_volume = reader.bool();
                    break;
                }
            case 9: {
                    message.volume = reader.float();
                    break;
                }
            case 10: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SirenCommandRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SirenCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SirenCommandRequest} SirenCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SirenCommandRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SirenCommandRequest message.
     * @function verify
     * @memberof SirenCommandRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SirenCommandRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.has_state != null && message.hasOwnProperty("has_state"))
            if (typeof message.has_state !== "boolean")
                return "has_state: boolean expected";
        if (message.state != null && message.hasOwnProperty("state"))
            if (typeof message.state !== "boolean")
                return "state: boolean expected";
        if (message.has_tone != null && message.hasOwnProperty("has_tone"))
            if (typeof message.has_tone !== "boolean")
                return "has_tone: boolean expected";
        if (message.tone != null && message.hasOwnProperty("tone"))
            if (!$util.isString(message.tone))
                return "tone: string expected";
        if (message.has_duration != null && message.hasOwnProperty("has_duration"))
            if (typeof message.has_duration !== "boolean")
                return "has_duration: boolean expected";
        if (message.duration != null && message.hasOwnProperty("duration"))
            if (!$util.isInteger(message.duration))
                return "duration: integer expected";
        if (message.has_volume != null && message.hasOwnProperty("has_volume"))
            if (typeof message.has_volume !== "boolean")
                return "has_volume: boolean expected";
        if (message.volume != null && message.hasOwnProperty("volume"))
            if (typeof message.volume !== "number")
                return "volume: number expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a SirenCommandRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SirenCommandRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SirenCommandRequest} SirenCommandRequest
     */
    SirenCommandRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.SirenCommandRequest)
            return object;
        var message = new $root.SirenCommandRequest();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.has_state != null)
            message.has_state = Boolean(object.has_state);
        if (object.state != null)
            message.state = Boolean(object.state);
        if (object.has_tone != null)
            message.has_tone = Boolean(object.has_tone);
        if (object.tone != null)
            message.tone = String(object.tone);
        if (object.has_duration != null)
            message.has_duration = Boolean(object.has_duration);
        if (object.duration != null)
            message.duration = object.duration >>> 0;
        if (object.has_volume != null)
            message.has_volume = Boolean(object.has_volume);
        if (object.volume != null)
            message.volume = Number(object.volume);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a SirenCommandRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SirenCommandRequest
     * @static
     * @param {SirenCommandRequest} message SirenCommandRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SirenCommandRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.has_state = false;
            object.state = false;
            object.has_tone = false;
            object.tone = "";
            object.has_duration = false;
            object.duration = 0;
            object.has_volume = false;
            object.volume = 0;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.has_state != null && message.hasOwnProperty("has_state"))
            object.has_state = message.has_state;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = message.state;
        if (message.has_tone != null && message.hasOwnProperty("has_tone"))
            object.has_tone = message.has_tone;
        if (message.tone != null && message.hasOwnProperty("tone"))
            object.tone = message.tone;
        if (message.has_duration != null && message.hasOwnProperty("has_duration"))
            object.has_duration = message.has_duration;
        if (message.duration != null && message.hasOwnProperty("duration"))
            object.duration = message.duration;
        if (message.has_volume != null && message.hasOwnProperty("has_volume"))
            object.has_volume = message.has_volume;
        if (message.volume != null && message.hasOwnProperty("volume"))
            object.volume = options.json && !isFinite(message.volume) ? String(message.volume) : message.volume;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this SirenCommandRequest to JSON.
     * @function toJSON
     * @memberof SirenCommandRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SirenCommandRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SirenCommandRequest
     * @function getTypeUrl
     * @memberof SirenCommandRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SirenCommandRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SirenCommandRequest";
    };

    return SirenCommandRequest;
})();

/**
 * LockState enum.
 * @exports LockState
 * @enum {number}
 * @property {number} LOCK_STATE_NONE=0 LOCK_STATE_NONE value
 * @property {number} LOCK_STATE_LOCKED=1 LOCK_STATE_LOCKED value
 * @property {number} LOCK_STATE_UNLOCKED=2 LOCK_STATE_UNLOCKED value
 * @property {number} LOCK_STATE_JAMMED=3 LOCK_STATE_JAMMED value
 * @property {number} LOCK_STATE_LOCKING=4 LOCK_STATE_LOCKING value
 * @property {number} LOCK_STATE_UNLOCKING=5 LOCK_STATE_UNLOCKING value
 */
$root.LockState = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "LOCK_STATE_NONE"] = 0;
    values[valuesById[1] = "LOCK_STATE_LOCKED"] = 1;
    values[valuesById[2] = "LOCK_STATE_UNLOCKED"] = 2;
    values[valuesById[3] = "LOCK_STATE_JAMMED"] = 3;
    values[valuesById[4] = "LOCK_STATE_LOCKING"] = 4;
    values[valuesById[5] = "LOCK_STATE_UNLOCKING"] = 5;
    return values;
})();

/**
 * LockCommand enum.
 * @exports LockCommand
 * @enum {number}
 * @property {number} LOCK_UNLOCK=0 LOCK_UNLOCK value
 * @property {number} LOCK_LOCK=1 LOCK_LOCK value
 * @property {number} LOCK_OPEN=2 LOCK_OPEN value
 */
$root.LockCommand = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "LOCK_UNLOCK"] = 0;
    values[valuesById[1] = "LOCK_LOCK"] = 1;
    values[valuesById[2] = "LOCK_OPEN"] = 2;
    return values;
})();

$root.ListEntitiesLockResponse = (function() {

    /**
     * Properties of a ListEntitiesLockResponse.
     * @exports IListEntitiesLockResponse
     * @interface IListEntitiesLockResponse
     * @property {string|null} [object_id] ListEntitiesLockResponse object_id
     * @property {number|null} [key] ListEntitiesLockResponse key
     * @property {string|null} [name] ListEntitiesLockResponse name
     * @property {string|null} [icon] ListEntitiesLockResponse icon
     * @property {boolean|null} [disabled_by_default] ListEntitiesLockResponse disabled_by_default
     * @property {EntityCategory|null} [entity_category] ListEntitiesLockResponse entity_category
     * @property {boolean|null} [assumed_state] ListEntitiesLockResponse assumed_state
     * @property {boolean|null} [supports_open] ListEntitiesLockResponse supports_open
     * @property {boolean|null} [requires_code] ListEntitiesLockResponse requires_code
     * @property {string|null} [code_format] ListEntitiesLockResponse code_format
     * @property {number|null} [device_id] ListEntitiesLockResponse device_id
     */

    /**
     * Constructs a new ListEntitiesLockResponse.
     * @exports ListEntitiesLockResponse
     * @classdesc Represents a ListEntitiesLockResponse.
     * @implements IListEntitiesLockResponse
     * @constructor
     * @param {IListEntitiesLockResponse=} [properties] Properties to set
     */
    function ListEntitiesLockResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesLockResponse object_id.
     * @member {string} object_id
     * @memberof ListEntitiesLockResponse
     * @instance
     */
    ListEntitiesLockResponse.prototype.object_id = "";

    /**
     * ListEntitiesLockResponse key.
     * @member {number} key
     * @memberof ListEntitiesLockResponse
     * @instance
     */
    ListEntitiesLockResponse.prototype.key = 0;

    /**
     * ListEntitiesLockResponse name.
     * @member {string} name
     * @memberof ListEntitiesLockResponse
     * @instance
     */
    ListEntitiesLockResponse.prototype.name = "";

    /**
     * ListEntitiesLockResponse icon.
     * @member {string} icon
     * @memberof ListEntitiesLockResponse
     * @instance
     */
    ListEntitiesLockResponse.prototype.icon = "";

    /**
     * ListEntitiesLockResponse disabled_by_default.
     * @member {boolean} disabled_by_default
     * @memberof ListEntitiesLockResponse
     * @instance
     */
    ListEntitiesLockResponse.prototype.disabled_by_default = false;

    /**
     * ListEntitiesLockResponse entity_category.
     * @member {EntityCategory} entity_category
     * @memberof ListEntitiesLockResponse
     * @instance
     */
    ListEntitiesLockResponse.prototype.entity_category = 0;

    /**
     * ListEntitiesLockResponse assumed_state.
     * @member {boolean} assumed_state
     * @memberof ListEntitiesLockResponse
     * @instance
     */
    ListEntitiesLockResponse.prototype.assumed_state = false;

    /**
     * ListEntitiesLockResponse supports_open.
     * @member {boolean} supports_open
     * @memberof ListEntitiesLockResponse
     * @instance
     */
    ListEntitiesLockResponse.prototype.supports_open = false;

    /**
     * ListEntitiesLockResponse requires_code.
     * @member {boolean} requires_code
     * @memberof ListEntitiesLockResponse
     * @instance
     */
    ListEntitiesLockResponse.prototype.requires_code = false;

    /**
     * ListEntitiesLockResponse code_format.
     * @member {string} code_format
     * @memberof ListEntitiesLockResponse
     * @instance
     */
    ListEntitiesLockResponse.prototype.code_format = "";

    /**
     * ListEntitiesLockResponse device_id.
     * @member {number} device_id
     * @memberof ListEntitiesLockResponse
     * @instance
     */
    ListEntitiesLockResponse.prototype.device_id = 0;

    /**
     * Creates a new ListEntitiesLockResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesLockResponse
     * @static
     * @param {IListEntitiesLockResponse=} [properties] Properties to set
     * @returns {ListEntitiesLockResponse} ListEntitiesLockResponse instance
     */
    ListEntitiesLockResponse.create = function create(properties) {
        return new ListEntitiesLockResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesLockResponse message. Does not implicitly {@link ListEntitiesLockResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesLockResponse
     * @static
     * @param {IListEntitiesLockResponse} message ListEntitiesLockResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesLockResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.object_id != null && Object.hasOwnProperty.call(message, "object_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.object_id);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.icon);
        if (message.disabled_by_default != null && Object.hasOwnProperty.call(message, "disabled_by_default"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.disabled_by_default);
        if (message.entity_category != null && Object.hasOwnProperty.call(message, "entity_category"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.entity_category);
        if (message.assumed_state != null && Object.hasOwnProperty.call(message, "assumed_state"))
            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.assumed_state);
        if (message.supports_open != null && Object.hasOwnProperty.call(message, "supports_open"))
            writer.uint32(/* id 9, wireType 0 =*/72).bool(message.supports_open);
        if (message.requires_code != null && Object.hasOwnProperty.call(message, "requires_code"))
            writer.uint32(/* id 10, wireType 0 =*/80).bool(message.requires_code);
        if (message.code_format != null && Object.hasOwnProperty.call(message, "code_format"))
            writer.uint32(/* id 11, wireType 2 =*/90).string(message.code_format);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesLockResponse message, length delimited. Does not implicitly {@link ListEntitiesLockResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesLockResponse
     * @static
     * @param {IListEntitiesLockResponse} message ListEntitiesLockResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesLockResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesLockResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesLockResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesLockResponse} ListEntitiesLockResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesLockResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesLockResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.object_id = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 5: {
                    message.icon = reader.string();
                    break;
                }
            case 6: {
                    message.disabled_by_default = reader.bool();
                    break;
                }
            case 7: {
                    message.entity_category = reader.int32();
                    break;
                }
            case 8: {
                    message.assumed_state = reader.bool();
                    break;
                }
            case 9: {
                    message.supports_open = reader.bool();
                    break;
                }
            case 10: {
                    message.requires_code = reader.bool();
                    break;
                }
            case 11: {
                    message.code_format = reader.string();
                    break;
                }
            case 12: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesLockResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesLockResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesLockResponse} ListEntitiesLockResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesLockResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesLockResponse message.
     * @function verify
     * @memberof ListEntitiesLockResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesLockResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            if (!$util.isString(message.object_id))
                return "object_id: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isString(message.icon))
                return "icon: string expected";
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            if (typeof message.disabled_by_default !== "boolean")
                return "disabled_by_default: boolean expected";
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            switch (message.entity_category) {
            default:
                return "entity_category: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.assumed_state != null && message.hasOwnProperty("assumed_state"))
            if (typeof message.assumed_state !== "boolean")
                return "assumed_state: boolean expected";
        if (message.supports_open != null && message.hasOwnProperty("supports_open"))
            if (typeof message.supports_open !== "boolean")
                return "supports_open: boolean expected";
        if (message.requires_code != null && message.hasOwnProperty("requires_code"))
            if (typeof message.requires_code !== "boolean")
                return "requires_code: boolean expected";
        if (message.code_format != null && message.hasOwnProperty("code_format"))
            if (!$util.isString(message.code_format))
                return "code_format: string expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ListEntitiesLockResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesLockResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesLockResponse} ListEntitiesLockResponse
     */
    ListEntitiesLockResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesLockResponse)
            return object;
        var message = new $root.ListEntitiesLockResponse();
        if (object.object_id != null)
            message.object_id = String(object.object_id);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.icon != null)
            message.icon = String(object.icon);
        if (object.disabled_by_default != null)
            message.disabled_by_default = Boolean(object.disabled_by_default);
        switch (object.entity_category) {
        default:
            if (typeof object.entity_category === "number") {
                message.entity_category = object.entity_category;
                break;
            }
            break;
        case "ENTITY_CATEGORY_NONE":
        case 0:
            message.entity_category = 0;
            break;
        case "ENTITY_CATEGORY_CONFIG":
        case 1:
            message.entity_category = 1;
            break;
        case "ENTITY_CATEGORY_DIAGNOSTIC":
        case 2:
            message.entity_category = 2;
            break;
        }
        if (object.assumed_state != null)
            message.assumed_state = Boolean(object.assumed_state);
        if (object.supports_open != null)
            message.supports_open = Boolean(object.supports_open);
        if (object.requires_code != null)
            message.requires_code = Boolean(object.requires_code);
        if (object.code_format != null)
            message.code_format = String(object.code_format);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesLockResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesLockResponse
     * @static
     * @param {ListEntitiesLockResponse} message ListEntitiesLockResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesLockResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.object_id = "";
            object.key = 0;
            object.name = "";
            object.icon = "";
            object.disabled_by_default = false;
            object.entity_category = options.enums === String ? "ENTITY_CATEGORY_NONE" : 0;
            object.assumed_state = false;
            object.supports_open = false;
            object.requires_code = false;
            object.code_format = "";
            object.device_id = 0;
        }
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            object.object_id = message.object_id;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            object.disabled_by_default = message.disabled_by_default;
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            object.entity_category = options.enums === String ? $root.EntityCategory[message.entity_category] === undefined ? message.entity_category : $root.EntityCategory[message.entity_category] : message.entity_category;
        if (message.assumed_state != null && message.hasOwnProperty("assumed_state"))
            object.assumed_state = message.assumed_state;
        if (message.supports_open != null && message.hasOwnProperty("supports_open"))
            object.supports_open = message.supports_open;
        if (message.requires_code != null && message.hasOwnProperty("requires_code"))
            object.requires_code = message.requires_code;
        if (message.code_format != null && message.hasOwnProperty("code_format"))
            object.code_format = message.code_format;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ListEntitiesLockResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesLockResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesLockResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesLockResponse
     * @function getTypeUrl
     * @memberof ListEntitiesLockResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesLockResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesLockResponse";
    };

    return ListEntitiesLockResponse;
})();

$root.LockStateResponse = (function() {

    /**
     * Properties of a LockStateResponse.
     * @exports ILockStateResponse
     * @interface ILockStateResponse
     * @property {number|null} [key] LockStateResponse key
     * @property {LockState|null} [state] LockStateResponse state
     * @property {number|null} [device_id] LockStateResponse device_id
     */

    /**
     * Constructs a new LockStateResponse.
     * @exports LockStateResponse
     * @classdesc Represents a LockStateResponse.
     * @implements ILockStateResponse
     * @constructor
     * @param {ILockStateResponse=} [properties] Properties to set
     */
    function LockStateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * LockStateResponse key.
     * @member {number} key
     * @memberof LockStateResponse
     * @instance
     */
    LockStateResponse.prototype.key = 0;

    /**
     * LockStateResponse state.
     * @member {LockState} state
     * @memberof LockStateResponse
     * @instance
     */
    LockStateResponse.prototype.state = 0;

    /**
     * LockStateResponse device_id.
     * @member {number} device_id
     * @memberof LockStateResponse
     * @instance
     */
    LockStateResponse.prototype.device_id = 0;

    /**
     * Creates a new LockStateResponse instance using the specified properties.
     * @function create
     * @memberof LockStateResponse
     * @static
     * @param {ILockStateResponse=} [properties] Properties to set
     * @returns {LockStateResponse} LockStateResponse instance
     */
    LockStateResponse.create = function create(properties) {
        return new LockStateResponse(properties);
    };

    /**
     * Encodes the specified LockStateResponse message. Does not implicitly {@link LockStateResponse.verify|verify} messages.
     * @function encode
     * @memberof LockStateResponse
     * @static
     * @param {ILockStateResponse} message LockStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    LockStateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.state);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified LockStateResponse message, length delimited. Does not implicitly {@link LockStateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof LockStateResponse
     * @static
     * @param {ILockStateResponse} message LockStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    LockStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a LockStateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof LockStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {LockStateResponse} LockStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    LockStateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LockStateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.state = reader.int32();
                    break;
                }
            case 3: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a LockStateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof LockStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {LockStateResponse} LockStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    LockStateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a LockStateResponse message.
     * @function verify
     * @memberof LockStateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    LockStateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            switch (message.state) {
            default:
                return "state: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            }
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a LockStateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof LockStateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {LockStateResponse} LockStateResponse
     */
    LockStateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.LockStateResponse)
            return object;
        var message = new $root.LockStateResponse();
        if (object.key != null)
            message.key = object.key >>> 0;
        switch (object.state) {
        default:
            if (typeof object.state === "number") {
                message.state = object.state;
                break;
            }
            break;
        case "LOCK_STATE_NONE":
        case 0:
            message.state = 0;
            break;
        case "LOCK_STATE_LOCKED":
        case 1:
            message.state = 1;
            break;
        case "LOCK_STATE_UNLOCKED":
        case 2:
            message.state = 2;
            break;
        case "LOCK_STATE_JAMMED":
        case 3:
            message.state = 3;
            break;
        case "LOCK_STATE_LOCKING":
        case 4:
            message.state = 4;
            break;
        case "LOCK_STATE_UNLOCKING":
        case 5:
            message.state = 5;
            break;
        }
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a LockStateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof LockStateResponse
     * @static
     * @param {LockStateResponse} message LockStateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    LockStateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.state = options.enums === String ? "LOCK_STATE_NONE" : 0;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = options.enums === String ? $root.LockState[message.state] === undefined ? message.state : $root.LockState[message.state] : message.state;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this LockStateResponse to JSON.
     * @function toJSON
     * @memberof LockStateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    LockStateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for LockStateResponse
     * @function getTypeUrl
     * @memberof LockStateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    LockStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/LockStateResponse";
    };

    return LockStateResponse;
})();

$root.LockCommandRequest = (function() {

    /**
     * Properties of a LockCommandRequest.
     * @exports ILockCommandRequest
     * @interface ILockCommandRequest
     * @property {number|null} [key] LockCommandRequest key
     * @property {LockCommand|null} [command] LockCommandRequest command
     * @property {boolean|null} [has_code] LockCommandRequest has_code
     * @property {string|null} [code] LockCommandRequest code
     * @property {number|null} [device_id] LockCommandRequest device_id
     */

    /**
     * Constructs a new LockCommandRequest.
     * @exports LockCommandRequest
     * @classdesc Represents a LockCommandRequest.
     * @implements ILockCommandRequest
     * @constructor
     * @param {ILockCommandRequest=} [properties] Properties to set
     */
    function LockCommandRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * LockCommandRequest key.
     * @member {number} key
     * @memberof LockCommandRequest
     * @instance
     */
    LockCommandRequest.prototype.key = 0;

    /**
     * LockCommandRequest command.
     * @member {LockCommand} command
     * @memberof LockCommandRequest
     * @instance
     */
    LockCommandRequest.prototype.command = 0;

    /**
     * LockCommandRequest has_code.
     * @member {boolean} has_code
     * @memberof LockCommandRequest
     * @instance
     */
    LockCommandRequest.prototype.has_code = false;

    /**
     * LockCommandRequest code.
     * @member {string} code
     * @memberof LockCommandRequest
     * @instance
     */
    LockCommandRequest.prototype.code = "";

    /**
     * LockCommandRequest device_id.
     * @member {number} device_id
     * @memberof LockCommandRequest
     * @instance
     */
    LockCommandRequest.prototype.device_id = 0;

    /**
     * Creates a new LockCommandRequest instance using the specified properties.
     * @function create
     * @memberof LockCommandRequest
     * @static
     * @param {ILockCommandRequest=} [properties] Properties to set
     * @returns {LockCommandRequest} LockCommandRequest instance
     */
    LockCommandRequest.create = function create(properties) {
        return new LockCommandRequest(properties);
    };

    /**
     * Encodes the specified LockCommandRequest message. Does not implicitly {@link LockCommandRequest.verify|verify} messages.
     * @function encode
     * @memberof LockCommandRequest
     * @static
     * @param {ILockCommandRequest} message LockCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    LockCommandRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.command != null && Object.hasOwnProperty.call(message, "command"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.command);
        if (message.has_code != null && Object.hasOwnProperty.call(message, "has_code"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.has_code);
        if (message.code != null && Object.hasOwnProperty.call(message, "code"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.code);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified LockCommandRequest message, length delimited. Does not implicitly {@link LockCommandRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof LockCommandRequest
     * @static
     * @param {ILockCommandRequest} message LockCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    LockCommandRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a LockCommandRequest message from the specified reader or buffer.
     * @function decode
     * @memberof LockCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {LockCommandRequest} LockCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    LockCommandRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LockCommandRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.command = reader.int32();
                    break;
                }
            case 3: {
                    message.has_code = reader.bool();
                    break;
                }
            case 4: {
                    message.code = reader.string();
                    break;
                }
            case 5: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a LockCommandRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof LockCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {LockCommandRequest} LockCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    LockCommandRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a LockCommandRequest message.
     * @function verify
     * @memberof LockCommandRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    LockCommandRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.command != null && message.hasOwnProperty("command"))
            switch (message.command) {
            default:
                return "command: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.has_code != null && message.hasOwnProperty("has_code"))
            if (typeof message.has_code !== "boolean")
                return "has_code: boolean expected";
        if (message.code != null && message.hasOwnProperty("code"))
            if (!$util.isString(message.code))
                return "code: string expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a LockCommandRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof LockCommandRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {LockCommandRequest} LockCommandRequest
     */
    LockCommandRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.LockCommandRequest)
            return object;
        var message = new $root.LockCommandRequest();
        if (object.key != null)
            message.key = object.key >>> 0;
        switch (object.command) {
        default:
            if (typeof object.command === "number") {
                message.command = object.command;
                break;
            }
            break;
        case "LOCK_UNLOCK":
        case 0:
            message.command = 0;
            break;
        case "LOCK_LOCK":
        case 1:
            message.command = 1;
            break;
        case "LOCK_OPEN":
        case 2:
            message.command = 2;
            break;
        }
        if (object.has_code != null)
            message.has_code = Boolean(object.has_code);
        if (object.code != null)
            message.code = String(object.code);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a LockCommandRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof LockCommandRequest
     * @static
     * @param {LockCommandRequest} message LockCommandRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    LockCommandRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.command = options.enums === String ? "LOCK_UNLOCK" : 0;
            object.has_code = false;
            object.code = "";
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.command != null && message.hasOwnProperty("command"))
            object.command = options.enums === String ? $root.LockCommand[message.command] === undefined ? message.command : $root.LockCommand[message.command] : message.command;
        if (message.has_code != null && message.hasOwnProperty("has_code"))
            object.has_code = message.has_code;
        if (message.code != null && message.hasOwnProperty("code"))
            object.code = message.code;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this LockCommandRequest to JSON.
     * @function toJSON
     * @memberof LockCommandRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    LockCommandRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for LockCommandRequest
     * @function getTypeUrl
     * @memberof LockCommandRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    LockCommandRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/LockCommandRequest";
    };

    return LockCommandRequest;
})();

$root.ListEntitiesButtonResponse = (function() {

    /**
     * Properties of a ListEntitiesButtonResponse.
     * @exports IListEntitiesButtonResponse
     * @interface IListEntitiesButtonResponse
     * @property {string|null} [object_id] ListEntitiesButtonResponse object_id
     * @property {number|null} [key] ListEntitiesButtonResponse key
     * @property {string|null} [name] ListEntitiesButtonResponse name
     * @property {string|null} [icon] ListEntitiesButtonResponse icon
     * @property {boolean|null} [disabled_by_default] ListEntitiesButtonResponse disabled_by_default
     * @property {EntityCategory|null} [entity_category] ListEntitiesButtonResponse entity_category
     * @property {string|null} [device_class] ListEntitiesButtonResponse device_class
     * @property {number|null} [device_id] ListEntitiesButtonResponse device_id
     */

    /**
     * Constructs a new ListEntitiesButtonResponse.
     * @exports ListEntitiesButtonResponse
     * @classdesc Represents a ListEntitiesButtonResponse.
     * @implements IListEntitiesButtonResponse
     * @constructor
     * @param {IListEntitiesButtonResponse=} [properties] Properties to set
     */
    function ListEntitiesButtonResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesButtonResponse object_id.
     * @member {string} object_id
     * @memberof ListEntitiesButtonResponse
     * @instance
     */
    ListEntitiesButtonResponse.prototype.object_id = "";

    /**
     * ListEntitiesButtonResponse key.
     * @member {number} key
     * @memberof ListEntitiesButtonResponse
     * @instance
     */
    ListEntitiesButtonResponse.prototype.key = 0;

    /**
     * ListEntitiesButtonResponse name.
     * @member {string} name
     * @memberof ListEntitiesButtonResponse
     * @instance
     */
    ListEntitiesButtonResponse.prototype.name = "";

    /**
     * ListEntitiesButtonResponse icon.
     * @member {string} icon
     * @memberof ListEntitiesButtonResponse
     * @instance
     */
    ListEntitiesButtonResponse.prototype.icon = "";

    /**
     * ListEntitiesButtonResponse disabled_by_default.
     * @member {boolean} disabled_by_default
     * @memberof ListEntitiesButtonResponse
     * @instance
     */
    ListEntitiesButtonResponse.prototype.disabled_by_default = false;

    /**
     * ListEntitiesButtonResponse entity_category.
     * @member {EntityCategory} entity_category
     * @memberof ListEntitiesButtonResponse
     * @instance
     */
    ListEntitiesButtonResponse.prototype.entity_category = 0;

    /**
     * ListEntitiesButtonResponse device_class.
     * @member {string} device_class
     * @memberof ListEntitiesButtonResponse
     * @instance
     */
    ListEntitiesButtonResponse.prototype.device_class = "";

    /**
     * ListEntitiesButtonResponse device_id.
     * @member {number} device_id
     * @memberof ListEntitiesButtonResponse
     * @instance
     */
    ListEntitiesButtonResponse.prototype.device_id = 0;

    /**
     * Creates a new ListEntitiesButtonResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesButtonResponse
     * @static
     * @param {IListEntitiesButtonResponse=} [properties] Properties to set
     * @returns {ListEntitiesButtonResponse} ListEntitiesButtonResponse instance
     */
    ListEntitiesButtonResponse.create = function create(properties) {
        return new ListEntitiesButtonResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesButtonResponse message. Does not implicitly {@link ListEntitiesButtonResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesButtonResponse
     * @static
     * @param {IListEntitiesButtonResponse} message ListEntitiesButtonResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesButtonResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.object_id != null && Object.hasOwnProperty.call(message, "object_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.object_id);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.icon);
        if (message.disabled_by_default != null && Object.hasOwnProperty.call(message, "disabled_by_default"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.disabled_by_default);
        if (message.entity_category != null && Object.hasOwnProperty.call(message, "entity_category"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.entity_category);
        if (message.device_class != null && Object.hasOwnProperty.call(message, "device_class"))
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.device_class);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesButtonResponse message, length delimited. Does not implicitly {@link ListEntitiesButtonResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesButtonResponse
     * @static
     * @param {IListEntitiesButtonResponse} message ListEntitiesButtonResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesButtonResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesButtonResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesButtonResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesButtonResponse} ListEntitiesButtonResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesButtonResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesButtonResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.object_id = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 5: {
                    message.icon = reader.string();
                    break;
                }
            case 6: {
                    message.disabled_by_default = reader.bool();
                    break;
                }
            case 7: {
                    message.entity_category = reader.int32();
                    break;
                }
            case 8: {
                    message.device_class = reader.string();
                    break;
                }
            case 9: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesButtonResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesButtonResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesButtonResponse} ListEntitiesButtonResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesButtonResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesButtonResponse message.
     * @function verify
     * @memberof ListEntitiesButtonResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesButtonResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            if (!$util.isString(message.object_id))
                return "object_id: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isString(message.icon))
                return "icon: string expected";
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            if (typeof message.disabled_by_default !== "boolean")
                return "disabled_by_default: boolean expected";
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            switch (message.entity_category) {
            default:
                return "entity_category: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.device_class != null && message.hasOwnProperty("device_class"))
            if (!$util.isString(message.device_class))
                return "device_class: string expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ListEntitiesButtonResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesButtonResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesButtonResponse} ListEntitiesButtonResponse
     */
    ListEntitiesButtonResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesButtonResponse)
            return object;
        var message = new $root.ListEntitiesButtonResponse();
        if (object.object_id != null)
            message.object_id = String(object.object_id);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.icon != null)
            message.icon = String(object.icon);
        if (object.disabled_by_default != null)
            message.disabled_by_default = Boolean(object.disabled_by_default);
        switch (object.entity_category) {
        default:
            if (typeof object.entity_category === "number") {
                message.entity_category = object.entity_category;
                break;
            }
            break;
        case "ENTITY_CATEGORY_NONE":
        case 0:
            message.entity_category = 0;
            break;
        case "ENTITY_CATEGORY_CONFIG":
        case 1:
            message.entity_category = 1;
            break;
        case "ENTITY_CATEGORY_DIAGNOSTIC":
        case 2:
            message.entity_category = 2;
            break;
        }
        if (object.device_class != null)
            message.device_class = String(object.device_class);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesButtonResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesButtonResponse
     * @static
     * @param {ListEntitiesButtonResponse} message ListEntitiesButtonResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesButtonResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.object_id = "";
            object.key = 0;
            object.name = "";
            object.icon = "";
            object.disabled_by_default = false;
            object.entity_category = options.enums === String ? "ENTITY_CATEGORY_NONE" : 0;
            object.device_class = "";
            object.device_id = 0;
        }
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            object.object_id = message.object_id;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            object.disabled_by_default = message.disabled_by_default;
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            object.entity_category = options.enums === String ? $root.EntityCategory[message.entity_category] === undefined ? message.entity_category : $root.EntityCategory[message.entity_category] : message.entity_category;
        if (message.device_class != null && message.hasOwnProperty("device_class"))
            object.device_class = message.device_class;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ListEntitiesButtonResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesButtonResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesButtonResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesButtonResponse
     * @function getTypeUrl
     * @memberof ListEntitiesButtonResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesButtonResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesButtonResponse";
    };

    return ListEntitiesButtonResponse;
})();

$root.ButtonCommandRequest = (function() {

    /**
     * Properties of a ButtonCommandRequest.
     * @exports IButtonCommandRequest
     * @interface IButtonCommandRequest
     * @property {number|null} [key] ButtonCommandRequest key
     * @property {number|null} [device_id] ButtonCommandRequest device_id
     */

    /**
     * Constructs a new ButtonCommandRequest.
     * @exports ButtonCommandRequest
     * @classdesc Represents a ButtonCommandRequest.
     * @implements IButtonCommandRequest
     * @constructor
     * @param {IButtonCommandRequest=} [properties] Properties to set
     */
    function ButtonCommandRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ButtonCommandRequest key.
     * @member {number} key
     * @memberof ButtonCommandRequest
     * @instance
     */
    ButtonCommandRequest.prototype.key = 0;

    /**
     * ButtonCommandRequest device_id.
     * @member {number} device_id
     * @memberof ButtonCommandRequest
     * @instance
     */
    ButtonCommandRequest.prototype.device_id = 0;

    /**
     * Creates a new ButtonCommandRequest instance using the specified properties.
     * @function create
     * @memberof ButtonCommandRequest
     * @static
     * @param {IButtonCommandRequest=} [properties] Properties to set
     * @returns {ButtonCommandRequest} ButtonCommandRequest instance
     */
    ButtonCommandRequest.create = function create(properties) {
        return new ButtonCommandRequest(properties);
    };

    /**
     * Encodes the specified ButtonCommandRequest message. Does not implicitly {@link ButtonCommandRequest.verify|verify} messages.
     * @function encode
     * @memberof ButtonCommandRequest
     * @static
     * @param {IButtonCommandRequest} message ButtonCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ButtonCommandRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ButtonCommandRequest message, length delimited. Does not implicitly {@link ButtonCommandRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ButtonCommandRequest
     * @static
     * @param {IButtonCommandRequest} message ButtonCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ButtonCommandRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ButtonCommandRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ButtonCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ButtonCommandRequest} ButtonCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ButtonCommandRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ButtonCommandRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ButtonCommandRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ButtonCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ButtonCommandRequest} ButtonCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ButtonCommandRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ButtonCommandRequest message.
     * @function verify
     * @memberof ButtonCommandRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ButtonCommandRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ButtonCommandRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ButtonCommandRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ButtonCommandRequest} ButtonCommandRequest
     */
    ButtonCommandRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ButtonCommandRequest)
            return object;
        var message = new $root.ButtonCommandRequest();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ButtonCommandRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ButtonCommandRequest
     * @static
     * @param {ButtonCommandRequest} message ButtonCommandRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ButtonCommandRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ButtonCommandRequest to JSON.
     * @function toJSON
     * @memberof ButtonCommandRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ButtonCommandRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ButtonCommandRequest
     * @function getTypeUrl
     * @memberof ButtonCommandRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ButtonCommandRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ButtonCommandRequest";
    };

    return ButtonCommandRequest;
})();

/**
 * MediaPlayerState enum.
 * @exports MediaPlayerState
 * @enum {number}
 * @property {number} MEDIA_PLAYER_STATE_NONE=0 MEDIA_PLAYER_STATE_NONE value
 * @property {number} MEDIA_PLAYER_STATE_IDLE=1 MEDIA_PLAYER_STATE_IDLE value
 * @property {number} MEDIA_PLAYER_STATE_PLAYING=2 MEDIA_PLAYER_STATE_PLAYING value
 * @property {number} MEDIA_PLAYER_STATE_PAUSED=3 MEDIA_PLAYER_STATE_PAUSED value
 * @property {number} MEDIA_PLAYER_STATE_ANNOUNCING=4 MEDIA_PLAYER_STATE_ANNOUNCING value
 * @property {number} MEDIA_PLAYER_STATE_OFF=5 MEDIA_PLAYER_STATE_OFF value
 * @property {number} MEDIA_PLAYER_STATE_ON=6 MEDIA_PLAYER_STATE_ON value
 */
$root.MediaPlayerState = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "MEDIA_PLAYER_STATE_NONE"] = 0;
    values[valuesById[1] = "MEDIA_PLAYER_STATE_IDLE"] = 1;
    values[valuesById[2] = "MEDIA_PLAYER_STATE_PLAYING"] = 2;
    values[valuesById[3] = "MEDIA_PLAYER_STATE_PAUSED"] = 3;
    values[valuesById[4] = "MEDIA_PLAYER_STATE_ANNOUNCING"] = 4;
    values[valuesById[5] = "MEDIA_PLAYER_STATE_OFF"] = 5;
    values[valuesById[6] = "MEDIA_PLAYER_STATE_ON"] = 6;
    return values;
})();

/**
 * MediaPlayerCommand enum.
 * @exports MediaPlayerCommand
 * @enum {number}
 * @property {number} MEDIA_PLAYER_COMMAND_PLAY=0 MEDIA_PLAYER_COMMAND_PLAY value
 * @property {number} MEDIA_PLAYER_COMMAND_PAUSE=1 MEDIA_PLAYER_COMMAND_PAUSE value
 * @property {number} MEDIA_PLAYER_COMMAND_STOP=2 MEDIA_PLAYER_COMMAND_STOP value
 * @property {number} MEDIA_PLAYER_COMMAND_MUTE=3 MEDIA_PLAYER_COMMAND_MUTE value
 * @property {number} MEDIA_PLAYER_COMMAND_UNMUTE=4 MEDIA_PLAYER_COMMAND_UNMUTE value
 * @property {number} MEDIA_PLAYER_COMMAND_TOGGLE=5 MEDIA_PLAYER_COMMAND_TOGGLE value
 * @property {number} MEDIA_PLAYER_COMMAND_VOLUME_UP=6 MEDIA_PLAYER_COMMAND_VOLUME_UP value
 * @property {number} MEDIA_PLAYER_COMMAND_VOLUME_DOWN=7 MEDIA_PLAYER_COMMAND_VOLUME_DOWN value
 * @property {number} MEDIA_PLAYER_COMMAND_ENQUEUE=8 MEDIA_PLAYER_COMMAND_ENQUEUE value
 * @property {number} MEDIA_PLAYER_COMMAND_REPEAT_ONE=9 MEDIA_PLAYER_COMMAND_REPEAT_ONE value
 * @property {number} MEDIA_PLAYER_COMMAND_REPEAT_OFF=10 MEDIA_PLAYER_COMMAND_REPEAT_OFF value
 * @property {number} MEDIA_PLAYER_COMMAND_CLEAR_PLAYLIST=11 MEDIA_PLAYER_COMMAND_CLEAR_PLAYLIST value
 * @property {number} MEDIA_PLAYER_COMMAND_TURN_ON=12 MEDIA_PLAYER_COMMAND_TURN_ON value
 * @property {number} MEDIA_PLAYER_COMMAND_TURN_OFF=13 MEDIA_PLAYER_COMMAND_TURN_OFF value
 */
$root.MediaPlayerCommand = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "MEDIA_PLAYER_COMMAND_PLAY"] = 0;
    values[valuesById[1] = "MEDIA_PLAYER_COMMAND_PAUSE"] = 1;
    values[valuesById[2] = "MEDIA_PLAYER_COMMAND_STOP"] = 2;
    values[valuesById[3] = "MEDIA_PLAYER_COMMAND_MUTE"] = 3;
    values[valuesById[4] = "MEDIA_PLAYER_COMMAND_UNMUTE"] = 4;
    values[valuesById[5] = "MEDIA_PLAYER_COMMAND_TOGGLE"] = 5;
    values[valuesById[6] = "MEDIA_PLAYER_COMMAND_VOLUME_UP"] = 6;
    values[valuesById[7] = "MEDIA_PLAYER_COMMAND_VOLUME_DOWN"] = 7;
    values[valuesById[8] = "MEDIA_PLAYER_COMMAND_ENQUEUE"] = 8;
    values[valuesById[9] = "MEDIA_PLAYER_COMMAND_REPEAT_ONE"] = 9;
    values[valuesById[10] = "MEDIA_PLAYER_COMMAND_REPEAT_OFF"] = 10;
    values[valuesById[11] = "MEDIA_PLAYER_COMMAND_CLEAR_PLAYLIST"] = 11;
    values[valuesById[12] = "MEDIA_PLAYER_COMMAND_TURN_ON"] = 12;
    values[valuesById[13] = "MEDIA_PLAYER_COMMAND_TURN_OFF"] = 13;
    return values;
})();

/**
 * MediaPlayerFormatPurpose enum.
 * @exports MediaPlayerFormatPurpose
 * @enum {number}
 * @property {number} MEDIA_PLAYER_FORMAT_PURPOSE_DEFAULT=0 MEDIA_PLAYER_FORMAT_PURPOSE_DEFAULT value
 * @property {number} MEDIA_PLAYER_FORMAT_PURPOSE_ANNOUNCEMENT=1 MEDIA_PLAYER_FORMAT_PURPOSE_ANNOUNCEMENT value
 */
$root.MediaPlayerFormatPurpose = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "MEDIA_PLAYER_FORMAT_PURPOSE_DEFAULT"] = 0;
    values[valuesById[1] = "MEDIA_PLAYER_FORMAT_PURPOSE_ANNOUNCEMENT"] = 1;
    return values;
})();

$root.MediaPlayerSupportedFormat = (function() {

    /**
     * Properties of a MediaPlayerSupportedFormat.
     * @exports IMediaPlayerSupportedFormat
     * @interface IMediaPlayerSupportedFormat
     * @property {string|null} [format] MediaPlayerSupportedFormat format
     * @property {number|null} [sample_rate] MediaPlayerSupportedFormat sample_rate
     * @property {number|null} [num_channels] MediaPlayerSupportedFormat num_channels
     * @property {MediaPlayerFormatPurpose|null} [purpose] MediaPlayerSupportedFormat purpose
     * @property {number|null} [sample_bytes] MediaPlayerSupportedFormat sample_bytes
     */

    /**
     * Constructs a new MediaPlayerSupportedFormat.
     * @exports MediaPlayerSupportedFormat
     * @classdesc Represents a MediaPlayerSupportedFormat.
     * @implements IMediaPlayerSupportedFormat
     * @constructor
     * @param {IMediaPlayerSupportedFormat=} [properties] Properties to set
     */
    function MediaPlayerSupportedFormat(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * MediaPlayerSupportedFormat format.
     * @member {string} format
     * @memberof MediaPlayerSupportedFormat
     * @instance
     */
    MediaPlayerSupportedFormat.prototype.format = "";

    /**
     * MediaPlayerSupportedFormat sample_rate.
     * @member {number} sample_rate
     * @memberof MediaPlayerSupportedFormat
     * @instance
     */
    MediaPlayerSupportedFormat.prototype.sample_rate = 0;

    /**
     * MediaPlayerSupportedFormat num_channels.
     * @member {number} num_channels
     * @memberof MediaPlayerSupportedFormat
     * @instance
     */
    MediaPlayerSupportedFormat.prototype.num_channels = 0;

    /**
     * MediaPlayerSupportedFormat purpose.
     * @member {MediaPlayerFormatPurpose} purpose
     * @memberof MediaPlayerSupportedFormat
     * @instance
     */
    MediaPlayerSupportedFormat.prototype.purpose = 0;

    /**
     * MediaPlayerSupportedFormat sample_bytes.
     * @member {number} sample_bytes
     * @memberof MediaPlayerSupportedFormat
     * @instance
     */
    MediaPlayerSupportedFormat.prototype.sample_bytes = 0;

    /**
     * Creates a new MediaPlayerSupportedFormat instance using the specified properties.
     * @function create
     * @memberof MediaPlayerSupportedFormat
     * @static
     * @param {IMediaPlayerSupportedFormat=} [properties] Properties to set
     * @returns {MediaPlayerSupportedFormat} MediaPlayerSupportedFormat instance
     */
    MediaPlayerSupportedFormat.create = function create(properties) {
        return new MediaPlayerSupportedFormat(properties);
    };

    /**
     * Encodes the specified MediaPlayerSupportedFormat message. Does not implicitly {@link MediaPlayerSupportedFormat.verify|verify} messages.
     * @function encode
     * @memberof MediaPlayerSupportedFormat
     * @static
     * @param {IMediaPlayerSupportedFormat} message MediaPlayerSupportedFormat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    MediaPlayerSupportedFormat.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.format != null && Object.hasOwnProperty.call(message, "format"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.format);
        if (message.sample_rate != null && Object.hasOwnProperty.call(message, "sample_rate"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.sample_rate);
        if (message.num_channels != null && Object.hasOwnProperty.call(message, "num_channels"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.num_channels);
        if (message.purpose != null && Object.hasOwnProperty.call(message, "purpose"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.purpose);
        if (message.sample_bytes != null && Object.hasOwnProperty.call(message, "sample_bytes"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.sample_bytes);
        return writer;
    };

    /**
     * Encodes the specified MediaPlayerSupportedFormat message, length delimited. Does not implicitly {@link MediaPlayerSupportedFormat.verify|verify} messages.
     * @function encodeDelimited
     * @memberof MediaPlayerSupportedFormat
     * @static
     * @param {IMediaPlayerSupportedFormat} message MediaPlayerSupportedFormat message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    MediaPlayerSupportedFormat.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a MediaPlayerSupportedFormat message from the specified reader or buffer.
     * @function decode
     * @memberof MediaPlayerSupportedFormat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {MediaPlayerSupportedFormat} MediaPlayerSupportedFormat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    MediaPlayerSupportedFormat.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.MediaPlayerSupportedFormat();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.format = reader.string();
                    break;
                }
            case 2: {
                    message.sample_rate = reader.uint32();
                    break;
                }
            case 3: {
                    message.num_channels = reader.uint32();
                    break;
                }
            case 4: {
                    message.purpose = reader.int32();
                    break;
                }
            case 5: {
                    message.sample_bytes = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a MediaPlayerSupportedFormat message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof MediaPlayerSupportedFormat
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {MediaPlayerSupportedFormat} MediaPlayerSupportedFormat
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    MediaPlayerSupportedFormat.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a MediaPlayerSupportedFormat message.
     * @function verify
     * @memberof MediaPlayerSupportedFormat
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    MediaPlayerSupportedFormat.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.format != null && message.hasOwnProperty("format"))
            if (!$util.isString(message.format))
                return "format: string expected";
        if (message.sample_rate != null && message.hasOwnProperty("sample_rate"))
            if (!$util.isInteger(message.sample_rate))
                return "sample_rate: integer expected";
        if (message.num_channels != null && message.hasOwnProperty("num_channels"))
            if (!$util.isInteger(message.num_channels))
                return "num_channels: integer expected";
        if (message.purpose != null && message.hasOwnProperty("purpose"))
            switch (message.purpose) {
            default:
                return "purpose: enum value expected";
            case 0:
            case 1:
                break;
            }
        if (message.sample_bytes != null && message.hasOwnProperty("sample_bytes"))
            if (!$util.isInteger(message.sample_bytes))
                return "sample_bytes: integer expected";
        return null;
    };

    /**
     * Creates a MediaPlayerSupportedFormat message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof MediaPlayerSupportedFormat
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {MediaPlayerSupportedFormat} MediaPlayerSupportedFormat
     */
    MediaPlayerSupportedFormat.fromObject = function fromObject(object) {
        if (object instanceof $root.MediaPlayerSupportedFormat)
            return object;
        var message = new $root.MediaPlayerSupportedFormat();
        if (object.format != null)
            message.format = String(object.format);
        if (object.sample_rate != null)
            message.sample_rate = object.sample_rate >>> 0;
        if (object.num_channels != null)
            message.num_channels = object.num_channels >>> 0;
        switch (object.purpose) {
        default:
            if (typeof object.purpose === "number") {
                message.purpose = object.purpose;
                break;
            }
            break;
        case "MEDIA_PLAYER_FORMAT_PURPOSE_DEFAULT":
        case 0:
            message.purpose = 0;
            break;
        case "MEDIA_PLAYER_FORMAT_PURPOSE_ANNOUNCEMENT":
        case 1:
            message.purpose = 1;
            break;
        }
        if (object.sample_bytes != null)
            message.sample_bytes = object.sample_bytes >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a MediaPlayerSupportedFormat message. Also converts values to other types if specified.
     * @function toObject
     * @memberof MediaPlayerSupportedFormat
     * @static
     * @param {MediaPlayerSupportedFormat} message MediaPlayerSupportedFormat
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    MediaPlayerSupportedFormat.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.format = "";
            object.sample_rate = 0;
            object.num_channels = 0;
            object.purpose = options.enums === String ? "MEDIA_PLAYER_FORMAT_PURPOSE_DEFAULT" : 0;
            object.sample_bytes = 0;
        }
        if (message.format != null && message.hasOwnProperty("format"))
            object.format = message.format;
        if (message.sample_rate != null && message.hasOwnProperty("sample_rate"))
            object.sample_rate = message.sample_rate;
        if (message.num_channels != null && message.hasOwnProperty("num_channels"))
            object.num_channels = message.num_channels;
        if (message.purpose != null && message.hasOwnProperty("purpose"))
            object.purpose = options.enums === String ? $root.MediaPlayerFormatPurpose[message.purpose] === undefined ? message.purpose : $root.MediaPlayerFormatPurpose[message.purpose] : message.purpose;
        if (message.sample_bytes != null && message.hasOwnProperty("sample_bytes"))
            object.sample_bytes = message.sample_bytes;
        return object;
    };

    /**
     * Converts this MediaPlayerSupportedFormat to JSON.
     * @function toJSON
     * @memberof MediaPlayerSupportedFormat
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    MediaPlayerSupportedFormat.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for MediaPlayerSupportedFormat
     * @function getTypeUrl
     * @memberof MediaPlayerSupportedFormat
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    MediaPlayerSupportedFormat.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/MediaPlayerSupportedFormat";
    };

    return MediaPlayerSupportedFormat;
})();

$root.ListEntitiesMediaPlayerResponse = (function() {

    /**
     * Properties of a ListEntitiesMediaPlayerResponse.
     * @exports IListEntitiesMediaPlayerResponse
     * @interface IListEntitiesMediaPlayerResponse
     * @property {string|null} [object_id] ListEntitiesMediaPlayerResponse object_id
     * @property {number|null} [key] ListEntitiesMediaPlayerResponse key
     * @property {string|null} [name] ListEntitiesMediaPlayerResponse name
     * @property {string|null} [icon] ListEntitiesMediaPlayerResponse icon
     * @property {boolean|null} [disabled_by_default] ListEntitiesMediaPlayerResponse disabled_by_default
     * @property {EntityCategory|null} [entity_category] ListEntitiesMediaPlayerResponse entity_category
     * @property {boolean|null} [supports_pause] ListEntitiesMediaPlayerResponse supports_pause
     * @property {Array.<IMediaPlayerSupportedFormat>|null} [supported_formats] ListEntitiesMediaPlayerResponse supported_formats
     * @property {number|null} [device_id] ListEntitiesMediaPlayerResponse device_id
     * @property {number|null} [feature_flags] ListEntitiesMediaPlayerResponse feature_flags
     */

    /**
     * Constructs a new ListEntitiesMediaPlayerResponse.
     * @exports ListEntitiesMediaPlayerResponse
     * @classdesc Represents a ListEntitiesMediaPlayerResponse.
     * @implements IListEntitiesMediaPlayerResponse
     * @constructor
     * @param {IListEntitiesMediaPlayerResponse=} [properties] Properties to set
     */
    function ListEntitiesMediaPlayerResponse(properties) {
        this.supported_formats = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesMediaPlayerResponse object_id.
     * @member {string} object_id
     * @memberof ListEntitiesMediaPlayerResponse
     * @instance
     */
    ListEntitiesMediaPlayerResponse.prototype.object_id = "";

    /**
     * ListEntitiesMediaPlayerResponse key.
     * @member {number} key
     * @memberof ListEntitiesMediaPlayerResponse
     * @instance
     */
    ListEntitiesMediaPlayerResponse.prototype.key = 0;

    /**
     * ListEntitiesMediaPlayerResponse name.
     * @member {string} name
     * @memberof ListEntitiesMediaPlayerResponse
     * @instance
     */
    ListEntitiesMediaPlayerResponse.prototype.name = "";

    /**
     * ListEntitiesMediaPlayerResponse icon.
     * @member {string} icon
     * @memberof ListEntitiesMediaPlayerResponse
     * @instance
     */
    ListEntitiesMediaPlayerResponse.prototype.icon = "";

    /**
     * ListEntitiesMediaPlayerResponse disabled_by_default.
     * @member {boolean} disabled_by_default
     * @memberof ListEntitiesMediaPlayerResponse
     * @instance
     */
    ListEntitiesMediaPlayerResponse.prototype.disabled_by_default = false;

    /**
     * ListEntitiesMediaPlayerResponse entity_category.
     * @member {EntityCategory} entity_category
     * @memberof ListEntitiesMediaPlayerResponse
     * @instance
     */
    ListEntitiesMediaPlayerResponse.prototype.entity_category = 0;

    /**
     * ListEntitiesMediaPlayerResponse supports_pause.
     * @member {boolean} supports_pause
     * @memberof ListEntitiesMediaPlayerResponse
     * @instance
     */
    ListEntitiesMediaPlayerResponse.prototype.supports_pause = false;

    /**
     * ListEntitiesMediaPlayerResponse supported_formats.
     * @member {Array.<IMediaPlayerSupportedFormat>} supported_formats
     * @memberof ListEntitiesMediaPlayerResponse
     * @instance
     */
    ListEntitiesMediaPlayerResponse.prototype.supported_formats = $util.emptyArray;

    /**
     * ListEntitiesMediaPlayerResponse device_id.
     * @member {number} device_id
     * @memberof ListEntitiesMediaPlayerResponse
     * @instance
     */
    ListEntitiesMediaPlayerResponse.prototype.device_id = 0;

    /**
     * ListEntitiesMediaPlayerResponse feature_flags.
     * @member {number} feature_flags
     * @memberof ListEntitiesMediaPlayerResponse
     * @instance
     */
    ListEntitiesMediaPlayerResponse.prototype.feature_flags = 0;

    /**
     * Creates a new ListEntitiesMediaPlayerResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesMediaPlayerResponse
     * @static
     * @param {IListEntitiesMediaPlayerResponse=} [properties] Properties to set
     * @returns {ListEntitiesMediaPlayerResponse} ListEntitiesMediaPlayerResponse instance
     */
    ListEntitiesMediaPlayerResponse.create = function create(properties) {
        return new ListEntitiesMediaPlayerResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesMediaPlayerResponse message. Does not implicitly {@link ListEntitiesMediaPlayerResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesMediaPlayerResponse
     * @static
     * @param {IListEntitiesMediaPlayerResponse} message ListEntitiesMediaPlayerResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesMediaPlayerResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.object_id != null && Object.hasOwnProperty.call(message, "object_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.object_id);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.icon);
        if (message.disabled_by_default != null && Object.hasOwnProperty.call(message, "disabled_by_default"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.disabled_by_default);
        if (message.entity_category != null && Object.hasOwnProperty.call(message, "entity_category"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.entity_category);
        if (message.supports_pause != null && Object.hasOwnProperty.call(message, "supports_pause"))
            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.supports_pause);
        if (message.supported_formats != null && message.supported_formats.length)
            for (var i = 0; i < message.supported_formats.length; ++i)
                $root.MediaPlayerSupportedFormat.encode(message.supported_formats[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.device_id);
        if (message.feature_flags != null && Object.hasOwnProperty.call(message, "feature_flags"))
            writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.feature_flags);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesMediaPlayerResponse message, length delimited. Does not implicitly {@link ListEntitiesMediaPlayerResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesMediaPlayerResponse
     * @static
     * @param {IListEntitiesMediaPlayerResponse} message ListEntitiesMediaPlayerResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesMediaPlayerResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesMediaPlayerResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesMediaPlayerResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesMediaPlayerResponse} ListEntitiesMediaPlayerResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesMediaPlayerResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesMediaPlayerResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.object_id = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 5: {
                    message.icon = reader.string();
                    break;
                }
            case 6: {
                    message.disabled_by_default = reader.bool();
                    break;
                }
            case 7: {
                    message.entity_category = reader.int32();
                    break;
                }
            case 8: {
                    message.supports_pause = reader.bool();
                    break;
                }
            case 9: {
                    if (!(message.supported_formats && message.supported_formats.length))
                        message.supported_formats = [];
                    message.supported_formats.push($root.MediaPlayerSupportedFormat.decode(reader, reader.uint32()));
                    break;
                }
            case 10: {
                    message.device_id = reader.uint32();
                    break;
                }
            case 11: {
                    message.feature_flags = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesMediaPlayerResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesMediaPlayerResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesMediaPlayerResponse} ListEntitiesMediaPlayerResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesMediaPlayerResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesMediaPlayerResponse message.
     * @function verify
     * @memberof ListEntitiesMediaPlayerResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesMediaPlayerResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            if (!$util.isString(message.object_id))
                return "object_id: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isString(message.icon))
                return "icon: string expected";
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            if (typeof message.disabled_by_default !== "boolean")
                return "disabled_by_default: boolean expected";
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            switch (message.entity_category) {
            default:
                return "entity_category: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.supports_pause != null && message.hasOwnProperty("supports_pause"))
            if (typeof message.supports_pause !== "boolean")
                return "supports_pause: boolean expected";
        if (message.supported_formats != null && message.hasOwnProperty("supported_formats")) {
            if (!Array.isArray(message.supported_formats))
                return "supported_formats: array expected";
            for (var i = 0; i < message.supported_formats.length; ++i) {
                var error = $root.MediaPlayerSupportedFormat.verify(message.supported_formats[i]);
                if (error)
                    return "supported_formats." + error;
            }
        }
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        if (message.feature_flags != null && message.hasOwnProperty("feature_flags"))
            if (!$util.isInteger(message.feature_flags))
                return "feature_flags: integer expected";
        return null;
    };

    /**
     * Creates a ListEntitiesMediaPlayerResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesMediaPlayerResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesMediaPlayerResponse} ListEntitiesMediaPlayerResponse
     */
    ListEntitiesMediaPlayerResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesMediaPlayerResponse)
            return object;
        var message = new $root.ListEntitiesMediaPlayerResponse();
        if (object.object_id != null)
            message.object_id = String(object.object_id);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.icon != null)
            message.icon = String(object.icon);
        if (object.disabled_by_default != null)
            message.disabled_by_default = Boolean(object.disabled_by_default);
        switch (object.entity_category) {
        default:
            if (typeof object.entity_category === "number") {
                message.entity_category = object.entity_category;
                break;
            }
            break;
        case "ENTITY_CATEGORY_NONE":
        case 0:
            message.entity_category = 0;
            break;
        case "ENTITY_CATEGORY_CONFIG":
        case 1:
            message.entity_category = 1;
            break;
        case "ENTITY_CATEGORY_DIAGNOSTIC":
        case 2:
            message.entity_category = 2;
            break;
        }
        if (object.supports_pause != null)
            message.supports_pause = Boolean(object.supports_pause);
        if (object.supported_formats) {
            if (!Array.isArray(object.supported_formats))
                throw TypeError(".ListEntitiesMediaPlayerResponse.supported_formats: array expected");
            message.supported_formats = [];
            for (var i = 0; i < object.supported_formats.length; ++i) {
                if (typeof object.supported_formats[i] !== "object")
                    throw TypeError(".ListEntitiesMediaPlayerResponse.supported_formats: object expected");
                message.supported_formats[i] = $root.MediaPlayerSupportedFormat.fromObject(object.supported_formats[i]);
            }
        }
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        if (object.feature_flags != null)
            message.feature_flags = object.feature_flags >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesMediaPlayerResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesMediaPlayerResponse
     * @static
     * @param {ListEntitiesMediaPlayerResponse} message ListEntitiesMediaPlayerResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesMediaPlayerResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.supported_formats = [];
        if (options.defaults) {
            object.object_id = "";
            object.key = 0;
            object.name = "";
            object.icon = "";
            object.disabled_by_default = false;
            object.entity_category = options.enums === String ? "ENTITY_CATEGORY_NONE" : 0;
            object.supports_pause = false;
            object.device_id = 0;
            object.feature_flags = 0;
        }
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            object.object_id = message.object_id;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            object.disabled_by_default = message.disabled_by_default;
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            object.entity_category = options.enums === String ? $root.EntityCategory[message.entity_category] === undefined ? message.entity_category : $root.EntityCategory[message.entity_category] : message.entity_category;
        if (message.supports_pause != null && message.hasOwnProperty("supports_pause"))
            object.supports_pause = message.supports_pause;
        if (message.supported_formats && message.supported_formats.length) {
            object.supported_formats = [];
            for (var j = 0; j < message.supported_formats.length; ++j)
                object.supported_formats[j] = $root.MediaPlayerSupportedFormat.toObject(message.supported_formats[j], options);
        }
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        if (message.feature_flags != null && message.hasOwnProperty("feature_flags"))
            object.feature_flags = message.feature_flags;
        return object;
    };

    /**
     * Converts this ListEntitiesMediaPlayerResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesMediaPlayerResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesMediaPlayerResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesMediaPlayerResponse
     * @function getTypeUrl
     * @memberof ListEntitiesMediaPlayerResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesMediaPlayerResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesMediaPlayerResponse";
    };

    return ListEntitiesMediaPlayerResponse;
})();

$root.MediaPlayerStateResponse = (function() {

    /**
     * Properties of a MediaPlayerStateResponse.
     * @exports IMediaPlayerStateResponse
     * @interface IMediaPlayerStateResponse
     * @property {number|null} [key] MediaPlayerStateResponse key
     * @property {MediaPlayerState|null} [state] MediaPlayerStateResponse state
     * @property {number|null} [volume] MediaPlayerStateResponse volume
     * @property {boolean|null} [muted] MediaPlayerStateResponse muted
     * @property {number|null} [device_id] MediaPlayerStateResponse device_id
     */

    /**
     * Constructs a new MediaPlayerStateResponse.
     * @exports MediaPlayerStateResponse
     * @classdesc Represents a MediaPlayerStateResponse.
     * @implements IMediaPlayerStateResponse
     * @constructor
     * @param {IMediaPlayerStateResponse=} [properties] Properties to set
     */
    function MediaPlayerStateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * MediaPlayerStateResponse key.
     * @member {number} key
     * @memberof MediaPlayerStateResponse
     * @instance
     */
    MediaPlayerStateResponse.prototype.key = 0;

    /**
     * MediaPlayerStateResponse state.
     * @member {MediaPlayerState} state
     * @memberof MediaPlayerStateResponse
     * @instance
     */
    MediaPlayerStateResponse.prototype.state = 0;

    /**
     * MediaPlayerStateResponse volume.
     * @member {number} volume
     * @memberof MediaPlayerStateResponse
     * @instance
     */
    MediaPlayerStateResponse.prototype.volume = 0;

    /**
     * MediaPlayerStateResponse muted.
     * @member {boolean} muted
     * @memberof MediaPlayerStateResponse
     * @instance
     */
    MediaPlayerStateResponse.prototype.muted = false;

    /**
     * MediaPlayerStateResponse device_id.
     * @member {number} device_id
     * @memberof MediaPlayerStateResponse
     * @instance
     */
    MediaPlayerStateResponse.prototype.device_id = 0;

    /**
     * Creates a new MediaPlayerStateResponse instance using the specified properties.
     * @function create
     * @memberof MediaPlayerStateResponse
     * @static
     * @param {IMediaPlayerStateResponse=} [properties] Properties to set
     * @returns {MediaPlayerStateResponse} MediaPlayerStateResponse instance
     */
    MediaPlayerStateResponse.create = function create(properties) {
        return new MediaPlayerStateResponse(properties);
    };

    /**
     * Encodes the specified MediaPlayerStateResponse message. Does not implicitly {@link MediaPlayerStateResponse.verify|verify} messages.
     * @function encode
     * @memberof MediaPlayerStateResponse
     * @static
     * @param {IMediaPlayerStateResponse} message MediaPlayerStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    MediaPlayerStateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.state);
        if (message.volume != null && Object.hasOwnProperty.call(message, "volume"))
            writer.uint32(/* id 3, wireType 5 =*/29).float(message.volume);
        if (message.muted != null && Object.hasOwnProperty.call(message, "muted"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.muted);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified MediaPlayerStateResponse message, length delimited. Does not implicitly {@link MediaPlayerStateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof MediaPlayerStateResponse
     * @static
     * @param {IMediaPlayerStateResponse} message MediaPlayerStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    MediaPlayerStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a MediaPlayerStateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof MediaPlayerStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {MediaPlayerStateResponse} MediaPlayerStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    MediaPlayerStateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.MediaPlayerStateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.state = reader.int32();
                    break;
                }
            case 3: {
                    message.volume = reader.float();
                    break;
                }
            case 4: {
                    message.muted = reader.bool();
                    break;
                }
            case 5: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a MediaPlayerStateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof MediaPlayerStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {MediaPlayerStateResponse} MediaPlayerStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    MediaPlayerStateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a MediaPlayerStateResponse message.
     * @function verify
     * @memberof MediaPlayerStateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    MediaPlayerStateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            switch (message.state) {
            default:
                return "state: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            }
        if (message.volume != null && message.hasOwnProperty("volume"))
            if (typeof message.volume !== "number")
                return "volume: number expected";
        if (message.muted != null && message.hasOwnProperty("muted"))
            if (typeof message.muted !== "boolean")
                return "muted: boolean expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a MediaPlayerStateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof MediaPlayerStateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {MediaPlayerStateResponse} MediaPlayerStateResponse
     */
    MediaPlayerStateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.MediaPlayerStateResponse)
            return object;
        var message = new $root.MediaPlayerStateResponse();
        if (object.key != null)
            message.key = object.key >>> 0;
        switch (object.state) {
        default:
            if (typeof object.state === "number") {
                message.state = object.state;
                break;
            }
            break;
        case "MEDIA_PLAYER_STATE_NONE":
        case 0:
            message.state = 0;
            break;
        case "MEDIA_PLAYER_STATE_IDLE":
        case 1:
            message.state = 1;
            break;
        case "MEDIA_PLAYER_STATE_PLAYING":
        case 2:
            message.state = 2;
            break;
        case "MEDIA_PLAYER_STATE_PAUSED":
        case 3:
            message.state = 3;
            break;
        case "MEDIA_PLAYER_STATE_ANNOUNCING":
        case 4:
            message.state = 4;
            break;
        case "MEDIA_PLAYER_STATE_OFF":
        case 5:
            message.state = 5;
            break;
        case "MEDIA_PLAYER_STATE_ON":
        case 6:
            message.state = 6;
            break;
        }
        if (object.volume != null)
            message.volume = Number(object.volume);
        if (object.muted != null)
            message.muted = Boolean(object.muted);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a MediaPlayerStateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof MediaPlayerStateResponse
     * @static
     * @param {MediaPlayerStateResponse} message MediaPlayerStateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    MediaPlayerStateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.state = options.enums === String ? "MEDIA_PLAYER_STATE_NONE" : 0;
            object.volume = 0;
            object.muted = false;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = options.enums === String ? $root.MediaPlayerState[message.state] === undefined ? message.state : $root.MediaPlayerState[message.state] : message.state;
        if (message.volume != null && message.hasOwnProperty("volume"))
            object.volume = options.json && !isFinite(message.volume) ? String(message.volume) : message.volume;
        if (message.muted != null && message.hasOwnProperty("muted"))
            object.muted = message.muted;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this MediaPlayerStateResponse to JSON.
     * @function toJSON
     * @memberof MediaPlayerStateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    MediaPlayerStateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for MediaPlayerStateResponse
     * @function getTypeUrl
     * @memberof MediaPlayerStateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    MediaPlayerStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/MediaPlayerStateResponse";
    };

    return MediaPlayerStateResponse;
})();

$root.MediaPlayerCommandRequest = (function() {

    /**
     * Properties of a MediaPlayerCommandRequest.
     * @exports IMediaPlayerCommandRequest
     * @interface IMediaPlayerCommandRequest
     * @property {number|null} [key] MediaPlayerCommandRequest key
     * @property {boolean|null} [has_command] MediaPlayerCommandRequest has_command
     * @property {MediaPlayerCommand|null} [command] MediaPlayerCommandRequest command
     * @property {boolean|null} [has_volume] MediaPlayerCommandRequest has_volume
     * @property {number|null} [volume] MediaPlayerCommandRequest volume
     * @property {boolean|null} [has_media_url] MediaPlayerCommandRequest has_media_url
     * @property {string|null} [media_url] MediaPlayerCommandRequest media_url
     * @property {boolean|null} [has_announcement] MediaPlayerCommandRequest has_announcement
     * @property {boolean|null} [announcement] MediaPlayerCommandRequest announcement
     * @property {number|null} [device_id] MediaPlayerCommandRequest device_id
     */

    /**
     * Constructs a new MediaPlayerCommandRequest.
     * @exports MediaPlayerCommandRequest
     * @classdesc Represents a MediaPlayerCommandRequest.
     * @implements IMediaPlayerCommandRequest
     * @constructor
     * @param {IMediaPlayerCommandRequest=} [properties] Properties to set
     */
    function MediaPlayerCommandRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * MediaPlayerCommandRequest key.
     * @member {number} key
     * @memberof MediaPlayerCommandRequest
     * @instance
     */
    MediaPlayerCommandRequest.prototype.key = 0;

    /**
     * MediaPlayerCommandRequest has_command.
     * @member {boolean} has_command
     * @memberof MediaPlayerCommandRequest
     * @instance
     */
    MediaPlayerCommandRequest.prototype.has_command = false;

    /**
     * MediaPlayerCommandRequest command.
     * @member {MediaPlayerCommand} command
     * @memberof MediaPlayerCommandRequest
     * @instance
     */
    MediaPlayerCommandRequest.prototype.command = 0;

    /**
     * MediaPlayerCommandRequest has_volume.
     * @member {boolean} has_volume
     * @memberof MediaPlayerCommandRequest
     * @instance
     */
    MediaPlayerCommandRequest.prototype.has_volume = false;

    /**
     * MediaPlayerCommandRequest volume.
     * @member {number} volume
     * @memberof MediaPlayerCommandRequest
     * @instance
     */
    MediaPlayerCommandRequest.prototype.volume = 0;

    /**
     * MediaPlayerCommandRequest has_media_url.
     * @member {boolean} has_media_url
     * @memberof MediaPlayerCommandRequest
     * @instance
     */
    MediaPlayerCommandRequest.prototype.has_media_url = false;

    /**
     * MediaPlayerCommandRequest media_url.
     * @member {string} media_url
     * @memberof MediaPlayerCommandRequest
     * @instance
     */
    MediaPlayerCommandRequest.prototype.media_url = "";

    /**
     * MediaPlayerCommandRequest has_announcement.
     * @member {boolean} has_announcement
     * @memberof MediaPlayerCommandRequest
     * @instance
     */
    MediaPlayerCommandRequest.prototype.has_announcement = false;

    /**
     * MediaPlayerCommandRequest announcement.
     * @member {boolean} announcement
     * @memberof MediaPlayerCommandRequest
     * @instance
     */
    MediaPlayerCommandRequest.prototype.announcement = false;

    /**
     * MediaPlayerCommandRequest device_id.
     * @member {number} device_id
     * @memberof MediaPlayerCommandRequest
     * @instance
     */
    MediaPlayerCommandRequest.prototype.device_id = 0;

    /**
     * Creates a new MediaPlayerCommandRequest instance using the specified properties.
     * @function create
     * @memberof MediaPlayerCommandRequest
     * @static
     * @param {IMediaPlayerCommandRequest=} [properties] Properties to set
     * @returns {MediaPlayerCommandRequest} MediaPlayerCommandRequest instance
     */
    MediaPlayerCommandRequest.create = function create(properties) {
        return new MediaPlayerCommandRequest(properties);
    };

    /**
     * Encodes the specified MediaPlayerCommandRequest message. Does not implicitly {@link MediaPlayerCommandRequest.verify|verify} messages.
     * @function encode
     * @memberof MediaPlayerCommandRequest
     * @static
     * @param {IMediaPlayerCommandRequest} message MediaPlayerCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    MediaPlayerCommandRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.has_command != null && Object.hasOwnProperty.call(message, "has_command"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.has_command);
        if (message.command != null && Object.hasOwnProperty.call(message, "command"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.command);
        if (message.has_volume != null && Object.hasOwnProperty.call(message, "has_volume"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.has_volume);
        if (message.volume != null && Object.hasOwnProperty.call(message, "volume"))
            writer.uint32(/* id 5, wireType 5 =*/45).float(message.volume);
        if (message.has_media_url != null && Object.hasOwnProperty.call(message, "has_media_url"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.has_media_url);
        if (message.media_url != null && Object.hasOwnProperty.call(message, "media_url"))
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.media_url);
        if (message.has_announcement != null && Object.hasOwnProperty.call(message, "has_announcement"))
            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.has_announcement);
        if (message.announcement != null && Object.hasOwnProperty.call(message, "announcement"))
            writer.uint32(/* id 9, wireType 0 =*/72).bool(message.announcement);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified MediaPlayerCommandRequest message, length delimited. Does not implicitly {@link MediaPlayerCommandRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof MediaPlayerCommandRequest
     * @static
     * @param {IMediaPlayerCommandRequest} message MediaPlayerCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    MediaPlayerCommandRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a MediaPlayerCommandRequest message from the specified reader or buffer.
     * @function decode
     * @memberof MediaPlayerCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {MediaPlayerCommandRequest} MediaPlayerCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    MediaPlayerCommandRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.MediaPlayerCommandRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.has_command = reader.bool();
                    break;
                }
            case 3: {
                    message.command = reader.int32();
                    break;
                }
            case 4: {
                    message.has_volume = reader.bool();
                    break;
                }
            case 5: {
                    message.volume = reader.float();
                    break;
                }
            case 6: {
                    message.has_media_url = reader.bool();
                    break;
                }
            case 7: {
                    message.media_url = reader.string();
                    break;
                }
            case 8: {
                    message.has_announcement = reader.bool();
                    break;
                }
            case 9: {
                    message.announcement = reader.bool();
                    break;
                }
            case 10: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a MediaPlayerCommandRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof MediaPlayerCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {MediaPlayerCommandRequest} MediaPlayerCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    MediaPlayerCommandRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a MediaPlayerCommandRequest message.
     * @function verify
     * @memberof MediaPlayerCommandRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    MediaPlayerCommandRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.has_command != null && message.hasOwnProperty("has_command"))
            if (typeof message.has_command !== "boolean")
                return "has_command: boolean expected";
        if (message.command != null && message.hasOwnProperty("command"))
            switch (message.command) {
            default:
                return "command: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
                break;
            }
        if (message.has_volume != null && message.hasOwnProperty("has_volume"))
            if (typeof message.has_volume !== "boolean")
                return "has_volume: boolean expected";
        if (message.volume != null && message.hasOwnProperty("volume"))
            if (typeof message.volume !== "number")
                return "volume: number expected";
        if (message.has_media_url != null && message.hasOwnProperty("has_media_url"))
            if (typeof message.has_media_url !== "boolean")
                return "has_media_url: boolean expected";
        if (message.media_url != null && message.hasOwnProperty("media_url"))
            if (!$util.isString(message.media_url))
                return "media_url: string expected";
        if (message.has_announcement != null && message.hasOwnProperty("has_announcement"))
            if (typeof message.has_announcement !== "boolean")
                return "has_announcement: boolean expected";
        if (message.announcement != null && message.hasOwnProperty("announcement"))
            if (typeof message.announcement !== "boolean")
                return "announcement: boolean expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a MediaPlayerCommandRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof MediaPlayerCommandRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {MediaPlayerCommandRequest} MediaPlayerCommandRequest
     */
    MediaPlayerCommandRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.MediaPlayerCommandRequest)
            return object;
        var message = new $root.MediaPlayerCommandRequest();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.has_command != null)
            message.has_command = Boolean(object.has_command);
        switch (object.command) {
        default:
            if (typeof object.command === "number") {
                message.command = object.command;
                break;
            }
            break;
        case "MEDIA_PLAYER_COMMAND_PLAY":
        case 0:
            message.command = 0;
            break;
        case "MEDIA_PLAYER_COMMAND_PAUSE":
        case 1:
            message.command = 1;
            break;
        case "MEDIA_PLAYER_COMMAND_STOP":
        case 2:
            message.command = 2;
            break;
        case "MEDIA_PLAYER_COMMAND_MUTE":
        case 3:
            message.command = 3;
            break;
        case "MEDIA_PLAYER_COMMAND_UNMUTE":
        case 4:
            message.command = 4;
            break;
        case "MEDIA_PLAYER_COMMAND_TOGGLE":
        case 5:
            message.command = 5;
            break;
        case "MEDIA_PLAYER_COMMAND_VOLUME_UP":
        case 6:
            message.command = 6;
            break;
        case "MEDIA_PLAYER_COMMAND_VOLUME_DOWN":
        case 7:
            message.command = 7;
            break;
        case "MEDIA_PLAYER_COMMAND_ENQUEUE":
        case 8:
            message.command = 8;
            break;
        case "MEDIA_PLAYER_COMMAND_REPEAT_ONE":
        case 9:
            message.command = 9;
            break;
        case "MEDIA_PLAYER_COMMAND_REPEAT_OFF":
        case 10:
            message.command = 10;
            break;
        case "MEDIA_PLAYER_COMMAND_CLEAR_PLAYLIST":
        case 11:
            message.command = 11;
            break;
        case "MEDIA_PLAYER_COMMAND_TURN_ON":
        case 12:
            message.command = 12;
            break;
        case "MEDIA_PLAYER_COMMAND_TURN_OFF":
        case 13:
            message.command = 13;
            break;
        }
        if (object.has_volume != null)
            message.has_volume = Boolean(object.has_volume);
        if (object.volume != null)
            message.volume = Number(object.volume);
        if (object.has_media_url != null)
            message.has_media_url = Boolean(object.has_media_url);
        if (object.media_url != null)
            message.media_url = String(object.media_url);
        if (object.has_announcement != null)
            message.has_announcement = Boolean(object.has_announcement);
        if (object.announcement != null)
            message.announcement = Boolean(object.announcement);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a MediaPlayerCommandRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof MediaPlayerCommandRequest
     * @static
     * @param {MediaPlayerCommandRequest} message MediaPlayerCommandRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    MediaPlayerCommandRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.has_command = false;
            object.command = options.enums === String ? "MEDIA_PLAYER_COMMAND_PLAY" : 0;
            object.has_volume = false;
            object.volume = 0;
            object.has_media_url = false;
            object.media_url = "";
            object.has_announcement = false;
            object.announcement = false;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.has_command != null && message.hasOwnProperty("has_command"))
            object.has_command = message.has_command;
        if (message.command != null && message.hasOwnProperty("command"))
            object.command = options.enums === String ? $root.MediaPlayerCommand[message.command] === undefined ? message.command : $root.MediaPlayerCommand[message.command] : message.command;
        if (message.has_volume != null && message.hasOwnProperty("has_volume"))
            object.has_volume = message.has_volume;
        if (message.volume != null && message.hasOwnProperty("volume"))
            object.volume = options.json && !isFinite(message.volume) ? String(message.volume) : message.volume;
        if (message.has_media_url != null && message.hasOwnProperty("has_media_url"))
            object.has_media_url = message.has_media_url;
        if (message.media_url != null && message.hasOwnProperty("media_url"))
            object.media_url = message.media_url;
        if (message.has_announcement != null && message.hasOwnProperty("has_announcement"))
            object.has_announcement = message.has_announcement;
        if (message.announcement != null && message.hasOwnProperty("announcement"))
            object.announcement = message.announcement;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this MediaPlayerCommandRequest to JSON.
     * @function toJSON
     * @memberof MediaPlayerCommandRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    MediaPlayerCommandRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for MediaPlayerCommandRequest
     * @function getTypeUrl
     * @memberof MediaPlayerCommandRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    MediaPlayerCommandRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/MediaPlayerCommandRequest";
    };

    return MediaPlayerCommandRequest;
})();

$root.SubscribeBluetoothLEAdvertisementsRequest = (function() {

    /**
     * Properties of a SubscribeBluetoothLEAdvertisementsRequest.
     * @exports ISubscribeBluetoothLEAdvertisementsRequest
     * @interface ISubscribeBluetoothLEAdvertisementsRequest
     * @property {number|null} [flags] SubscribeBluetoothLEAdvertisementsRequest flags
     */

    /**
     * Constructs a new SubscribeBluetoothLEAdvertisementsRequest.
     * @exports SubscribeBluetoothLEAdvertisementsRequest
     * @classdesc Represents a SubscribeBluetoothLEAdvertisementsRequest.
     * @implements ISubscribeBluetoothLEAdvertisementsRequest
     * @constructor
     * @param {ISubscribeBluetoothLEAdvertisementsRequest=} [properties] Properties to set
     */
    function SubscribeBluetoothLEAdvertisementsRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SubscribeBluetoothLEAdvertisementsRequest flags.
     * @member {number} flags
     * @memberof SubscribeBluetoothLEAdvertisementsRequest
     * @instance
     */
    SubscribeBluetoothLEAdvertisementsRequest.prototype.flags = 0;

    /**
     * Creates a new SubscribeBluetoothLEAdvertisementsRequest instance using the specified properties.
     * @function create
     * @memberof SubscribeBluetoothLEAdvertisementsRequest
     * @static
     * @param {ISubscribeBluetoothLEAdvertisementsRequest=} [properties] Properties to set
     * @returns {SubscribeBluetoothLEAdvertisementsRequest} SubscribeBluetoothLEAdvertisementsRequest instance
     */
    SubscribeBluetoothLEAdvertisementsRequest.create = function create(properties) {
        return new SubscribeBluetoothLEAdvertisementsRequest(properties);
    };

    /**
     * Encodes the specified SubscribeBluetoothLEAdvertisementsRequest message. Does not implicitly {@link SubscribeBluetoothLEAdvertisementsRequest.verify|verify} messages.
     * @function encode
     * @memberof SubscribeBluetoothLEAdvertisementsRequest
     * @static
     * @param {ISubscribeBluetoothLEAdvertisementsRequest} message SubscribeBluetoothLEAdvertisementsRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SubscribeBluetoothLEAdvertisementsRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.flags != null && Object.hasOwnProperty.call(message, "flags"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.flags);
        return writer;
    };

    /**
     * Encodes the specified SubscribeBluetoothLEAdvertisementsRequest message, length delimited. Does not implicitly {@link SubscribeBluetoothLEAdvertisementsRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SubscribeBluetoothLEAdvertisementsRequest
     * @static
     * @param {ISubscribeBluetoothLEAdvertisementsRequest} message SubscribeBluetoothLEAdvertisementsRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SubscribeBluetoothLEAdvertisementsRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SubscribeBluetoothLEAdvertisementsRequest message from the specified reader or buffer.
     * @function decode
     * @memberof SubscribeBluetoothLEAdvertisementsRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SubscribeBluetoothLEAdvertisementsRequest} SubscribeBluetoothLEAdvertisementsRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SubscribeBluetoothLEAdvertisementsRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SubscribeBluetoothLEAdvertisementsRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.flags = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SubscribeBluetoothLEAdvertisementsRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SubscribeBluetoothLEAdvertisementsRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SubscribeBluetoothLEAdvertisementsRequest} SubscribeBluetoothLEAdvertisementsRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SubscribeBluetoothLEAdvertisementsRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SubscribeBluetoothLEAdvertisementsRequest message.
     * @function verify
     * @memberof SubscribeBluetoothLEAdvertisementsRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SubscribeBluetoothLEAdvertisementsRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.flags != null && message.hasOwnProperty("flags"))
            if (!$util.isInteger(message.flags))
                return "flags: integer expected";
        return null;
    };

    /**
     * Creates a SubscribeBluetoothLEAdvertisementsRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SubscribeBluetoothLEAdvertisementsRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SubscribeBluetoothLEAdvertisementsRequest} SubscribeBluetoothLEAdvertisementsRequest
     */
    SubscribeBluetoothLEAdvertisementsRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.SubscribeBluetoothLEAdvertisementsRequest)
            return object;
        var message = new $root.SubscribeBluetoothLEAdvertisementsRequest();
        if (object.flags != null)
            message.flags = object.flags >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a SubscribeBluetoothLEAdvertisementsRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SubscribeBluetoothLEAdvertisementsRequest
     * @static
     * @param {SubscribeBluetoothLEAdvertisementsRequest} message SubscribeBluetoothLEAdvertisementsRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SubscribeBluetoothLEAdvertisementsRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.flags = 0;
        if (message.flags != null && message.hasOwnProperty("flags"))
            object.flags = message.flags;
        return object;
    };

    /**
     * Converts this SubscribeBluetoothLEAdvertisementsRequest to JSON.
     * @function toJSON
     * @memberof SubscribeBluetoothLEAdvertisementsRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SubscribeBluetoothLEAdvertisementsRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SubscribeBluetoothLEAdvertisementsRequest
     * @function getTypeUrl
     * @memberof SubscribeBluetoothLEAdvertisementsRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SubscribeBluetoothLEAdvertisementsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SubscribeBluetoothLEAdvertisementsRequest";
    };

    return SubscribeBluetoothLEAdvertisementsRequest;
})();

$root.BluetoothServiceData = (function() {

    /**
     * Properties of a BluetoothServiceData.
     * @exports IBluetoothServiceData
     * @interface IBluetoothServiceData
     * @property {string|null} [uuid] BluetoothServiceData uuid
     * @property {Array.<number>|null} [legacy_data] BluetoothServiceData legacy_data
     * @property {Uint8Array|null} [data] BluetoothServiceData data
     */

    /**
     * Constructs a new BluetoothServiceData.
     * @exports BluetoothServiceData
     * @classdesc Represents a BluetoothServiceData.
     * @implements IBluetoothServiceData
     * @constructor
     * @param {IBluetoothServiceData=} [properties] Properties to set
     */
    function BluetoothServiceData(properties) {
        this.legacy_data = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothServiceData uuid.
     * @member {string} uuid
     * @memberof BluetoothServiceData
     * @instance
     */
    BluetoothServiceData.prototype.uuid = "";

    /**
     * BluetoothServiceData legacy_data.
     * @member {Array.<number>} legacy_data
     * @memberof BluetoothServiceData
     * @instance
     */
    BluetoothServiceData.prototype.legacy_data = $util.emptyArray;

    /**
     * BluetoothServiceData data.
     * @member {Uint8Array} data
     * @memberof BluetoothServiceData
     * @instance
     */
    BluetoothServiceData.prototype.data = $util.newBuffer([]);

    /**
     * Creates a new BluetoothServiceData instance using the specified properties.
     * @function create
     * @memberof BluetoothServiceData
     * @static
     * @param {IBluetoothServiceData=} [properties] Properties to set
     * @returns {BluetoothServiceData} BluetoothServiceData instance
     */
    BluetoothServiceData.create = function create(properties) {
        return new BluetoothServiceData(properties);
    };

    /**
     * Encodes the specified BluetoothServiceData message. Does not implicitly {@link BluetoothServiceData.verify|verify} messages.
     * @function encode
     * @memberof BluetoothServiceData
     * @static
     * @param {IBluetoothServiceData} message BluetoothServiceData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothServiceData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.uuid);
        if (message.legacy_data != null && message.legacy_data.length) {
            writer.uint32(/* id 2, wireType 2 =*/18).fork();
            for (var i = 0; i < message.legacy_data.length; ++i)
                writer.uint32(message.legacy_data[i]);
            writer.ldelim();
        }
        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);
        return writer;
    };

    /**
     * Encodes the specified BluetoothServiceData message, length delimited. Does not implicitly {@link BluetoothServiceData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothServiceData
     * @static
     * @param {IBluetoothServiceData} message BluetoothServiceData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothServiceData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothServiceData message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothServiceData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothServiceData} BluetoothServiceData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothServiceData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothServiceData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.uuid = reader.string();
                    break;
                }
            case 2: {
                    if (!(message.legacy_data && message.legacy_data.length))
                        message.legacy_data = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.legacy_data.push(reader.uint32());
                    } else
                        message.legacy_data.push(reader.uint32());
                    break;
                }
            case 3: {
                    message.data = reader.bytes();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothServiceData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothServiceData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothServiceData} BluetoothServiceData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothServiceData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothServiceData message.
     * @function verify
     * @memberof BluetoothServiceData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothServiceData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            if (!$util.isString(message.uuid))
                return "uuid: string expected";
        if (message.legacy_data != null && message.hasOwnProperty("legacy_data")) {
            if (!Array.isArray(message.legacy_data))
                return "legacy_data: array expected";
            for (var i = 0; i < message.legacy_data.length; ++i)
                if (!$util.isInteger(message.legacy_data[i]))
                    return "legacy_data: integer[] expected";
        }
        if (message.data != null && message.hasOwnProperty("data"))
            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                return "data: buffer expected";
        return null;
    };

    /**
     * Creates a BluetoothServiceData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothServiceData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothServiceData} BluetoothServiceData
     */
    BluetoothServiceData.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothServiceData)
            return object;
        var message = new $root.BluetoothServiceData();
        if (object.uuid != null)
            message.uuid = String(object.uuid);
        if (object.legacy_data) {
            if (!Array.isArray(object.legacy_data))
                throw TypeError(".BluetoothServiceData.legacy_data: array expected");
            message.legacy_data = [];
            for (var i = 0; i < object.legacy_data.length; ++i)
                message.legacy_data[i] = object.legacy_data[i] >>> 0;
        }
        if (object.data != null)
            if (typeof object.data === "string")
                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
            else if (object.data.length >= 0)
                message.data = object.data;
        return message;
    };

    /**
     * Creates a plain object from a BluetoothServiceData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothServiceData
     * @static
     * @param {BluetoothServiceData} message BluetoothServiceData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothServiceData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.legacy_data = [];
        if (options.defaults) {
            object.uuid = "";
            if (options.bytes === String)
                object.data = "";
            else {
                object.data = [];
                if (options.bytes !== Array)
                    object.data = $util.newBuffer(object.data);
            }
        }
        if (message.uuid != null && message.hasOwnProperty("uuid"))
            object.uuid = message.uuid;
        if (message.legacy_data && message.legacy_data.length) {
            object.legacy_data = [];
            for (var j = 0; j < message.legacy_data.length; ++j)
                object.legacy_data[j] = message.legacy_data[j];
        }
        if (message.data != null && message.hasOwnProperty("data"))
            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
        return object;
    };

    /**
     * Converts this BluetoothServiceData to JSON.
     * @function toJSON
     * @memberof BluetoothServiceData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothServiceData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothServiceData
     * @function getTypeUrl
     * @memberof BluetoothServiceData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothServiceData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothServiceData";
    };

    return BluetoothServiceData;
})();

$root.BluetoothLEAdvertisementResponse = (function() {

    /**
     * Properties of a BluetoothLEAdvertisementResponse.
     * @exports IBluetoothLEAdvertisementResponse
     * @interface IBluetoothLEAdvertisementResponse
     * @property {number|Long|null} [address] BluetoothLEAdvertisementResponse address
     * @property {Uint8Array|null} [name] BluetoothLEAdvertisementResponse name
     * @property {number|null} [rssi] BluetoothLEAdvertisementResponse rssi
     * @property {Array.<string>|null} [service_uuids] BluetoothLEAdvertisementResponse service_uuids
     * @property {Array.<IBluetoothServiceData>|null} [service_data] BluetoothLEAdvertisementResponse service_data
     * @property {Array.<IBluetoothServiceData>|null} [manufacturer_data] BluetoothLEAdvertisementResponse manufacturer_data
     * @property {number|null} [address_type] BluetoothLEAdvertisementResponse address_type
     */

    /**
     * Constructs a new BluetoothLEAdvertisementResponse.
     * @exports BluetoothLEAdvertisementResponse
     * @classdesc Represents a BluetoothLEAdvertisementResponse.
     * @implements IBluetoothLEAdvertisementResponse
     * @constructor
     * @param {IBluetoothLEAdvertisementResponse=} [properties] Properties to set
     */
    function BluetoothLEAdvertisementResponse(properties) {
        this.service_uuids = [];
        this.service_data = [];
        this.manufacturer_data = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothLEAdvertisementResponse address.
     * @member {number|Long} address
     * @memberof BluetoothLEAdvertisementResponse
     * @instance
     */
    BluetoothLEAdvertisementResponse.prototype.address = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * BluetoothLEAdvertisementResponse name.
     * @member {Uint8Array} name
     * @memberof BluetoothLEAdvertisementResponse
     * @instance
     */
    BluetoothLEAdvertisementResponse.prototype.name = $util.newBuffer([]);

    /**
     * BluetoothLEAdvertisementResponse rssi.
     * @member {number} rssi
     * @memberof BluetoothLEAdvertisementResponse
     * @instance
     */
    BluetoothLEAdvertisementResponse.prototype.rssi = 0;

    /**
     * BluetoothLEAdvertisementResponse service_uuids.
     * @member {Array.<string>} service_uuids
     * @memberof BluetoothLEAdvertisementResponse
     * @instance
     */
    BluetoothLEAdvertisementResponse.prototype.service_uuids = $util.emptyArray;

    /**
     * BluetoothLEAdvertisementResponse service_data.
     * @member {Array.<IBluetoothServiceData>} service_data
     * @memberof BluetoothLEAdvertisementResponse
     * @instance
     */
    BluetoothLEAdvertisementResponse.prototype.service_data = $util.emptyArray;

    /**
     * BluetoothLEAdvertisementResponse manufacturer_data.
     * @member {Array.<IBluetoothServiceData>} manufacturer_data
     * @memberof BluetoothLEAdvertisementResponse
     * @instance
     */
    BluetoothLEAdvertisementResponse.prototype.manufacturer_data = $util.emptyArray;

    /**
     * BluetoothLEAdvertisementResponse address_type.
     * @member {number} address_type
     * @memberof BluetoothLEAdvertisementResponse
     * @instance
     */
    BluetoothLEAdvertisementResponse.prototype.address_type = 0;

    /**
     * Creates a new BluetoothLEAdvertisementResponse instance using the specified properties.
     * @function create
     * @memberof BluetoothLEAdvertisementResponse
     * @static
     * @param {IBluetoothLEAdvertisementResponse=} [properties] Properties to set
     * @returns {BluetoothLEAdvertisementResponse} BluetoothLEAdvertisementResponse instance
     */
    BluetoothLEAdvertisementResponse.create = function create(properties) {
        return new BluetoothLEAdvertisementResponse(properties);
    };

    /**
     * Encodes the specified BluetoothLEAdvertisementResponse message. Does not implicitly {@link BluetoothLEAdvertisementResponse.verify|verify} messages.
     * @function encode
     * @memberof BluetoothLEAdvertisementResponse
     * @static
     * @param {IBluetoothLEAdvertisementResponse} message BluetoothLEAdvertisementResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothLEAdvertisementResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.address);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.name);
        if (message.rssi != null && Object.hasOwnProperty.call(message, "rssi"))
            writer.uint32(/* id 3, wireType 0 =*/24).sint32(message.rssi);
        if (message.service_uuids != null && message.service_uuids.length)
            for (var i = 0; i < message.service_uuids.length; ++i)
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.service_uuids[i]);
        if (message.service_data != null && message.service_data.length)
            for (var i = 0; i < message.service_data.length; ++i)
                $root.BluetoothServiceData.encode(message.service_data[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.manufacturer_data != null && message.manufacturer_data.length)
            for (var i = 0; i < message.manufacturer_data.length; ++i)
                $root.BluetoothServiceData.encode(message.manufacturer_data[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
        if (message.address_type != null && Object.hasOwnProperty.call(message, "address_type"))
            writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.address_type);
        return writer;
    };

    /**
     * Encodes the specified BluetoothLEAdvertisementResponse message, length delimited. Does not implicitly {@link BluetoothLEAdvertisementResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothLEAdvertisementResponse
     * @static
     * @param {IBluetoothLEAdvertisementResponse} message BluetoothLEAdvertisementResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothLEAdvertisementResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothLEAdvertisementResponse message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothLEAdvertisementResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothLEAdvertisementResponse} BluetoothLEAdvertisementResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothLEAdvertisementResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothLEAdvertisementResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.address = reader.uint64();
                    break;
                }
            case 2: {
                    message.name = reader.bytes();
                    break;
                }
            case 3: {
                    message.rssi = reader.sint32();
                    break;
                }
            case 4: {
                    if (!(message.service_uuids && message.service_uuids.length))
                        message.service_uuids = [];
                    message.service_uuids.push(reader.string());
                    break;
                }
            case 5: {
                    if (!(message.service_data && message.service_data.length))
                        message.service_data = [];
                    message.service_data.push($root.BluetoothServiceData.decode(reader, reader.uint32()));
                    break;
                }
            case 6: {
                    if (!(message.manufacturer_data && message.manufacturer_data.length))
                        message.manufacturer_data = [];
                    message.manufacturer_data.push($root.BluetoothServiceData.decode(reader, reader.uint32()));
                    break;
                }
            case 7: {
                    message.address_type = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothLEAdvertisementResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothLEAdvertisementResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothLEAdvertisementResponse} BluetoothLEAdvertisementResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothLEAdvertisementResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothLEAdvertisementResponse message.
     * @function verify
     * @memberof BluetoothLEAdvertisementResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothLEAdvertisementResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.address != null && message.hasOwnProperty("address"))
            if (!$util.isInteger(message.address) && !(message.address && $util.isInteger(message.address.low) && $util.isInteger(message.address.high)))
                return "address: integer|Long expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!(message.name && typeof message.name.length === "number" || $util.isString(message.name)))
                return "name: buffer expected";
        if (message.rssi != null && message.hasOwnProperty("rssi"))
            if (!$util.isInteger(message.rssi))
                return "rssi: integer expected";
        if (message.service_uuids != null && message.hasOwnProperty("service_uuids")) {
            if (!Array.isArray(message.service_uuids))
                return "service_uuids: array expected";
            for (var i = 0; i < message.service_uuids.length; ++i)
                if (!$util.isString(message.service_uuids[i]))
                    return "service_uuids: string[] expected";
        }
        if (message.service_data != null && message.hasOwnProperty("service_data")) {
            if (!Array.isArray(message.service_data))
                return "service_data: array expected";
            for (var i = 0; i < message.service_data.length; ++i) {
                var error = $root.BluetoothServiceData.verify(message.service_data[i]);
                if (error)
                    return "service_data." + error;
            }
        }
        if (message.manufacturer_data != null && message.hasOwnProperty("manufacturer_data")) {
            if (!Array.isArray(message.manufacturer_data))
                return "manufacturer_data: array expected";
            for (var i = 0; i < message.manufacturer_data.length; ++i) {
                var error = $root.BluetoothServiceData.verify(message.manufacturer_data[i]);
                if (error)
                    return "manufacturer_data." + error;
            }
        }
        if (message.address_type != null && message.hasOwnProperty("address_type"))
            if (!$util.isInteger(message.address_type))
                return "address_type: integer expected";
        return null;
    };

    /**
     * Creates a BluetoothLEAdvertisementResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothLEAdvertisementResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothLEAdvertisementResponse} BluetoothLEAdvertisementResponse
     */
    BluetoothLEAdvertisementResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothLEAdvertisementResponse)
            return object;
        var message = new $root.BluetoothLEAdvertisementResponse();
        if (object.address != null)
            if ($util.Long)
                (message.address = $util.Long.fromValue(object.address)).unsigned = true;
            else if (typeof object.address === "string")
                message.address = parseInt(object.address, 10);
            else if (typeof object.address === "number")
                message.address = object.address;
            else if (typeof object.address === "object")
                message.address = new $util.LongBits(object.address.low >>> 0, object.address.high >>> 0).toNumber(true);
        if (object.name != null)
            if (typeof object.name === "string")
                $util.base64.decode(object.name, message.name = $util.newBuffer($util.base64.length(object.name)), 0);
            else if (object.name.length >= 0)
                message.name = object.name;
        if (object.rssi != null)
            message.rssi = object.rssi | 0;
        if (object.service_uuids) {
            if (!Array.isArray(object.service_uuids))
                throw TypeError(".BluetoothLEAdvertisementResponse.service_uuids: array expected");
            message.service_uuids = [];
            for (var i = 0; i < object.service_uuids.length; ++i)
                message.service_uuids[i] = String(object.service_uuids[i]);
        }
        if (object.service_data) {
            if (!Array.isArray(object.service_data))
                throw TypeError(".BluetoothLEAdvertisementResponse.service_data: array expected");
            message.service_data = [];
            for (var i = 0; i < object.service_data.length; ++i) {
                if (typeof object.service_data[i] !== "object")
                    throw TypeError(".BluetoothLEAdvertisementResponse.service_data: object expected");
                message.service_data[i] = $root.BluetoothServiceData.fromObject(object.service_data[i]);
            }
        }
        if (object.manufacturer_data) {
            if (!Array.isArray(object.manufacturer_data))
                throw TypeError(".BluetoothLEAdvertisementResponse.manufacturer_data: array expected");
            message.manufacturer_data = [];
            for (var i = 0; i < object.manufacturer_data.length; ++i) {
                if (typeof object.manufacturer_data[i] !== "object")
                    throw TypeError(".BluetoothLEAdvertisementResponse.manufacturer_data: object expected");
                message.manufacturer_data[i] = $root.BluetoothServiceData.fromObject(object.manufacturer_data[i]);
            }
        }
        if (object.address_type != null)
            message.address_type = object.address_type >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a BluetoothLEAdvertisementResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothLEAdvertisementResponse
     * @static
     * @param {BluetoothLEAdvertisementResponse} message BluetoothLEAdvertisementResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothLEAdvertisementResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.service_uuids = [];
            object.service_data = [];
            object.manufacturer_data = [];
        }
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.address = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.address = options.longs === String ? "0" : 0;
            if (options.bytes === String)
                object.name = "";
            else {
                object.name = [];
                if (options.bytes !== Array)
                    object.name = $util.newBuffer(object.name);
            }
            object.rssi = 0;
            object.address_type = 0;
        }
        if (message.address != null && message.hasOwnProperty("address"))
            if (typeof message.address === "number")
                object.address = options.longs === String ? String(message.address) : message.address;
            else
                object.address = options.longs === String ? $util.Long.prototype.toString.call(message.address) : options.longs === Number ? new $util.LongBits(message.address.low >>> 0, message.address.high >>> 0).toNumber(true) : message.address;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = options.bytes === String ? $util.base64.encode(message.name, 0, message.name.length) : options.bytes === Array ? Array.prototype.slice.call(message.name) : message.name;
        if (message.rssi != null && message.hasOwnProperty("rssi"))
            object.rssi = message.rssi;
        if (message.service_uuids && message.service_uuids.length) {
            object.service_uuids = [];
            for (var j = 0; j < message.service_uuids.length; ++j)
                object.service_uuids[j] = message.service_uuids[j];
        }
        if (message.service_data && message.service_data.length) {
            object.service_data = [];
            for (var j = 0; j < message.service_data.length; ++j)
                object.service_data[j] = $root.BluetoothServiceData.toObject(message.service_data[j], options);
        }
        if (message.manufacturer_data && message.manufacturer_data.length) {
            object.manufacturer_data = [];
            for (var j = 0; j < message.manufacturer_data.length; ++j)
                object.manufacturer_data[j] = $root.BluetoothServiceData.toObject(message.manufacturer_data[j], options);
        }
        if (message.address_type != null && message.hasOwnProperty("address_type"))
            object.address_type = message.address_type;
        return object;
    };

    /**
     * Converts this BluetoothLEAdvertisementResponse to JSON.
     * @function toJSON
     * @memberof BluetoothLEAdvertisementResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothLEAdvertisementResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothLEAdvertisementResponse
     * @function getTypeUrl
     * @memberof BluetoothLEAdvertisementResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothLEAdvertisementResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothLEAdvertisementResponse";
    };

    return BluetoothLEAdvertisementResponse;
})();

$root.BluetoothLERawAdvertisement = (function() {

    /**
     * Properties of a BluetoothLERawAdvertisement.
     * @exports IBluetoothLERawAdvertisement
     * @interface IBluetoothLERawAdvertisement
     * @property {number|Long|null} [address] BluetoothLERawAdvertisement address
     * @property {number|null} [rssi] BluetoothLERawAdvertisement rssi
     * @property {number|null} [address_type] BluetoothLERawAdvertisement address_type
     * @property {Uint8Array|null} [data] BluetoothLERawAdvertisement data
     */

    /**
     * Constructs a new BluetoothLERawAdvertisement.
     * @exports BluetoothLERawAdvertisement
     * @classdesc Represents a BluetoothLERawAdvertisement.
     * @implements IBluetoothLERawAdvertisement
     * @constructor
     * @param {IBluetoothLERawAdvertisement=} [properties] Properties to set
     */
    function BluetoothLERawAdvertisement(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothLERawAdvertisement address.
     * @member {number|Long} address
     * @memberof BluetoothLERawAdvertisement
     * @instance
     */
    BluetoothLERawAdvertisement.prototype.address = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * BluetoothLERawAdvertisement rssi.
     * @member {number} rssi
     * @memberof BluetoothLERawAdvertisement
     * @instance
     */
    BluetoothLERawAdvertisement.prototype.rssi = 0;

    /**
     * BluetoothLERawAdvertisement address_type.
     * @member {number} address_type
     * @memberof BluetoothLERawAdvertisement
     * @instance
     */
    BluetoothLERawAdvertisement.prototype.address_type = 0;

    /**
     * BluetoothLERawAdvertisement data.
     * @member {Uint8Array} data
     * @memberof BluetoothLERawAdvertisement
     * @instance
     */
    BluetoothLERawAdvertisement.prototype.data = $util.newBuffer([]);

    /**
     * Creates a new BluetoothLERawAdvertisement instance using the specified properties.
     * @function create
     * @memberof BluetoothLERawAdvertisement
     * @static
     * @param {IBluetoothLERawAdvertisement=} [properties] Properties to set
     * @returns {BluetoothLERawAdvertisement} BluetoothLERawAdvertisement instance
     */
    BluetoothLERawAdvertisement.create = function create(properties) {
        return new BluetoothLERawAdvertisement(properties);
    };

    /**
     * Encodes the specified BluetoothLERawAdvertisement message. Does not implicitly {@link BluetoothLERawAdvertisement.verify|verify} messages.
     * @function encode
     * @memberof BluetoothLERawAdvertisement
     * @static
     * @param {IBluetoothLERawAdvertisement} message BluetoothLERawAdvertisement message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothLERawAdvertisement.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.address);
        if (message.rssi != null && Object.hasOwnProperty.call(message, "rssi"))
            writer.uint32(/* id 2, wireType 0 =*/16).sint32(message.rssi);
        if (message.address_type != null && Object.hasOwnProperty.call(message, "address_type"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.address_type);
        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.data);
        return writer;
    };

    /**
     * Encodes the specified BluetoothLERawAdvertisement message, length delimited. Does not implicitly {@link BluetoothLERawAdvertisement.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothLERawAdvertisement
     * @static
     * @param {IBluetoothLERawAdvertisement} message BluetoothLERawAdvertisement message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothLERawAdvertisement.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothLERawAdvertisement message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothLERawAdvertisement
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothLERawAdvertisement} BluetoothLERawAdvertisement
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothLERawAdvertisement.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothLERawAdvertisement();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.address = reader.uint64();
                    break;
                }
            case 2: {
                    message.rssi = reader.sint32();
                    break;
                }
            case 3: {
                    message.address_type = reader.uint32();
                    break;
                }
            case 4: {
                    message.data = reader.bytes();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothLERawAdvertisement message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothLERawAdvertisement
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothLERawAdvertisement} BluetoothLERawAdvertisement
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothLERawAdvertisement.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothLERawAdvertisement message.
     * @function verify
     * @memberof BluetoothLERawAdvertisement
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothLERawAdvertisement.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.address != null && message.hasOwnProperty("address"))
            if (!$util.isInteger(message.address) && !(message.address && $util.isInteger(message.address.low) && $util.isInteger(message.address.high)))
                return "address: integer|Long expected";
        if (message.rssi != null && message.hasOwnProperty("rssi"))
            if (!$util.isInteger(message.rssi))
                return "rssi: integer expected";
        if (message.address_type != null && message.hasOwnProperty("address_type"))
            if (!$util.isInteger(message.address_type))
                return "address_type: integer expected";
        if (message.data != null && message.hasOwnProperty("data"))
            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                return "data: buffer expected";
        return null;
    };

    /**
     * Creates a BluetoothLERawAdvertisement message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothLERawAdvertisement
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothLERawAdvertisement} BluetoothLERawAdvertisement
     */
    BluetoothLERawAdvertisement.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothLERawAdvertisement)
            return object;
        var message = new $root.BluetoothLERawAdvertisement();
        if (object.address != null)
            if ($util.Long)
                (message.address = $util.Long.fromValue(object.address)).unsigned = true;
            else if (typeof object.address === "string")
                message.address = parseInt(object.address, 10);
            else if (typeof object.address === "number")
                message.address = object.address;
            else if (typeof object.address === "object")
                message.address = new $util.LongBits(object.address.low >>> 0, object.address.high >>> 0).toNumber(true);
        if (object.rssi != null)
            message.rssi = object.rssi | 0;
        if (object.address_type != null)
            message.address_type = object.address_type >>> 0;
        if (object.data != null)
            if (typeof object.data === "string")
                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
            else if (object.data.length >= 0)
                message.data = object.data;
        return message;
    };

    /**
     * Creates a plain object from a BluetoothLERawAdvertisement message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothLERawAdvertisement
     * @static
     * @param {BluetoothLERawAdvertisement} message BluetoothLERawAdvertisement
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothLERawAdvertisement.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.address = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.address = options.longs === String ? "0" : 0;
            object.rssi = 0;
            object.address_type = 0;
            if (options.bytes === String)
                object.data = "";
            else {
                object.data = [];
                if (options.bytes !== Array)
                    object.data = $util.newBuffer(object.data);
            }
        }
        if (message.address != null && message.hasOwnProperty("address"))
            if (typeof message.address === "number")
                object.address = options.longs === String ? String(message.address) : message.address;
            else
                object.address = options.longs === String ? $util.Long.prototype.toString.call(message.address) : options.longs === Number ? new $util.LongBits(message.address.low >>> 0, message.address.high >>> 0).toNumber(true) : message.address;
        if (message.rssi != null && message.hasOwnProperty("rssi"))
            object.rssi = message.rssi;
        if (message.address_type != null && message.hasOwnProperty("address_type"))
            object.address_type = message.address_type;
        if (message.data != null && message.hasOwnProperty("data"))
            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
        return object;
    };

    /**
     * Converts this BluetoothLERawAdvertisement to JSON.
     * @function toJSON
     * @memberof BluetoothLERawAdvertisement
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothLERawAdvertisement.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothLERawAdvertisement
     * @function getTypeUrl
     * @memberof BluetoothLERawAdvertisement
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothLERawAdvertisement.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothLERawAdvertisement";
    };

    return BluetoothLERawAdvertisement;
})();

$root.BluetoothLERawAdvertisementsResponse = (function() {

    /**
     * Properties of a BluetoothLERawAdvertisementsResponse.
     * @exports IBluetoothLERawAdvertisementsResponse
     * @interface IBluetoothLERawAdvertisementsResponse
     * @property {Array.<IBluetoothLERawAdvertisement>|null} [advertisements] BluetoothLERawAdvertisementsResponse advertisements
     */

    /**
     * Constructs a new BluetoothLERawAdvertisementsResponse.
     * @exports BluetoothLERawAdvertisementsResponse
     * @classdesc Represents a BluetoothLERawAdvertisementsResponse.
     * @implements IBluetoothLERawAdvertisementsResponse
     * @constructor
     * @param {IBluetoothLERawAdvertisementsResponse=} [properties] Properties to set
     */
    function BluetoothLERawAdvertisementsResponse(properties) {
        this.advertisements = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothLERawAdvertisementsResponse advertisements.
     * @member {Array.<IBluetoothLERawAdvertisement>} advertisements
     * @memberof BluetoothLERawAdvertisementsResponse
     * @instance
     */
    BluetoothLERawAdvertisementsResponse.prototype.advertisements = $util.emptyArray;

    /**
     * Creates a new BluetoothLERawAdvertisementsResponse instance using the specified properties.
     * @function create
     * @memberof BluetoothLERawAdvertisementsResponse
     * @static
     * @param {IBluetoothLERawAdvertisementsResponse=} [properties] Properties to set
     * @returns {BluetoothLERawAdvertisementsResponse} BluetoothLERawAdvertisementsResponse instance
     */
    BluetoothLERawAdvertisementsResponse.create = function create(properties) {
        return new BluetoothLERawAdvertisementsResponse(properties);
    };

    /**
     * Encodes the specified BluetoothLERawAdvertisementsResponse message. Does not implicitly {@link BluetoothLERawAdvertisementsResponse.verify|verify} messages.
     * @function encode
     * @memberof BluetoothLERawAdvertisementsResponse
     * @static
     * @param {IBluetoothLERawAdvertisementsResponse} message BluetoothLERawAdvertisementsResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothLERawAdvertisementsResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.advertisements != null && message.advertisements.length)
            for (var i = 0; i < message.advertisements.length; ++i)
                $root.BluetoothLERawAdvertisement.encode(message.advertisements[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified BluetoothLERawAdvertisementsResponse message, length delimited. Does not implicitly {@link BluetoothLERawAdvertisementsResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothLERawAdvertisementsResponse
     * @static
     * @param {IBluetoothLERawAdvertisementsResponse} message BluetoothLERawAdvertisementsResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothLERawAdvertisementsResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothLERawAdvertisementsResponse message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothLERawAdvertisementsResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothLERawAdvertisementsResponse} BluetoothLERawAdvertisementsResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothLERawAdvertisementsResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothLERawAdvertisementsResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    if (!(message.advertisements && message.advertisements.length))
                        message.advertisements = [];
                    message.advertisements.push($root.BluetoothLERawAdvertisement.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothLERawAdvertisementsResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothLERawAdvertisementsResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothLERawAdvertisementsResponse} BluetoothLERawAdvertisementsResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothLERawAdvertisementsResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothLERawAdvertisementsResponse message.
     * @function verify
     * @memberof BluetoothLERawAdvertisementsResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothLERawAdvertisementsResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.advertisements != null && message.hasOwnProperty("advertisements")) {
            if (!Array.isArray(message.advertisements))
                return "advertisements: array expected";
            for (var i = 0; i < message.advertisements.length; ++i) {
                var error = $root.BluetoothLERawAdvertisement.verify(message.advertisements[i]);
                if (error)
                    return "advertisements." + error;
            }
        }
        return null;
    };

    /**
     * Creates a BluetoothLERawAdvertisementsResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothLERawAdvertisementsResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothLERawAdvertisementsResponse} BluetoothLERawAdvertisementsResponse
     */
    BluetoothLERawAdvertisementsResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothLERawAdvertisementsResponse)
            return object;
        var message = new $root.BluetoothLERawAdvertisementsResponse();
        if (object.advertisements) {
            if (!Array.isArray(object.advertisements))
                throw TypeError(".BluetoothLERawAdvertisementsResponse.advertisements: array expected");
            message.advertisements = [];
            for (var i = 0; i < object.advertisements.length; ++i) {
                if (typeof object.advertisements[i] !== "object")
                    throw TypeError(".BluetoothLERawAdvertisementsResponse.advertisements: object expected");
                message.advertisements[i] = $root.BluetoothLERawAdvertisement.fromObject(object.advertisements[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a BluetoothLERawAdvertisementsResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothLERawAdvertisementsResponse
     * @static
     * @param {BluetoothLERawAdvertisementsResponse} message BluetoothLERawAdvertisementsResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothLERawAdvertisementsResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.advertisements = [];
        if (message.advertisements && message.advertisements.length) {
            object.advertisements = [];
            for (var j = 0; j < message.advertisements.length; ++j)
                object.advertisements[j] = $root.BluetoothLERawAdvertisement.toObject(message.advertisements[j], options);
        }
        return object;
    };

    /**
     * Converts this BluetoothLERawAdvertisementsResponse to JSON.
     * @function toJSON
     * @memberof BluetoothLERawAdvertisementsResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothLERawAdvertisementsResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothLERawAdvertisementsResponse
     * @function getTypeUrl
     * @memberof BluetoothLERawAdvertisementsResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothLERawAdvertisementsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothLERawAdvertisementsResponse";
    };

    return BluetoothLERawAdvertisementsResponse;
})();

/**
 * BluetoothDeviceRequestType enum.
 * @exports BluetoothDeviceRequestType
 * @enum {number}
 * @property {number} BLUETOOTH_DEVICE_REQUEST_TYPE_CONNECT=0 BLUETOOTH_DEVICE_REQUEST_TYPE_CONNECT value
 * @property {number} BLUETOOTH_DEVICE_REQUEST_TYPE_DISCONNECT=1 BLUETOOTH_DEVICE_REQUEST_TYPE_DISCONNECT value
 * @property {number} BLUETOOTH_DEVICE_REQUEST_TYPE_PAIR=2 BLUETOOTH_DEVICE_REQUEST_TYPE_PAIR value
 * @property {number} BLUETOOTH_DEVICE_REQUEST_TYPE_UNPAIR=3 BLUETOOTH_DEVICE_REQUEST_TYPE_UNPAIR value
 * @property {number} BLUETOOTH_DEVICE_REQUEST_TYPE_CONNECT_V3_WITH_CACHE=4 BLUETOOTH_DEVICE_REQUEST_TYPE_CONNECT_V3_WITH_CACHE value
 * @property {number} BLUETOOTH_DEVICE_REQUEST_TYPE_CONNECT_V3_WITHOUT_CACHE=5 BLUETOOTH_DEVICE_REQUEST_TYPE_CONNECT_V3_WITHOUT_CACHE value
 * @property {number} BLUETOOTH_DEVICE_REQUEST_TYPE_CLEAR_CACHE=6 BLUETOOTH_DEVICE_REQUEST_TYPE_CLEAR_CACHE value
 */
$root.BluetoothDeviceRequestType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "BLUETOOTH_DEVICE_REQUEST_TYPE_CONNECT"] = 0;
    values[valuesById[1] = "BLUETOOTH_DEVICE_REQUEST_TYPE_DISCONNECT"] = 1;
    values[valuesById[2] = "BLUETOOTH_DEVICE_REQUEST_TYPE_PAIR"] = 2;
    values[valuesById[3] = "BLUETOOTH_DEVICE_REQUEST_TYPE_UNPAIR"] = 3;
    values[valuesById[4] = "BLUETOOTH_DEVICE_REQUEST_TYPE_CONNECT_V3_WITH_CACHE"] = 4;
    values[valuesById[5] = "BLUETOOTH_DEVICE_REQUEST_TYPE_CONNECT_V3_WITHOUT_CACHE"] = 5;
    values[valuesById[6] = "BLUETOOTH_DEVICE_REQUEST_TYPE_CLEAR_CACHE"] = 6;
    return values;
})();

$root.BluetoothDeviceRequest = (function() {

    /**
     * Properties of a BluetoothDeviceRequest.
     * @exports IBluetoothDeviceRequest
     * @interface IBluetoothDeviceRequest
     * @property {number|Long|null} [address] BluetoothDeviceRequest address
     * @property {BluetoothDeviceRequestType|null} [request_type] BluetoothDeviceRequest request_type
     * @property {boolean|null} [has_address_type] BluetoothDeviceRequest has_address_type
     * @property {number|null} [address_type] BluetoothDeviceRequest address_type
     */

    /**
     * Constructs a new BluetoothDeviceRequest.
     * @exports BluetoothDeviceRequest
     * @classdesc Represents a BluetoothDeviceRequest.
     * @implements IBluetoothDeviceRequest
     * @constructor
     * @param {IBluetoothDeviceRequest=} [properties] Properties to set
     */
    function BluetoothDeviceRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothDeviceRequest address.
     * @member {number|Long} address
     * @memberof BluetoothDeviceRequest
     * @instance
     */
    BluetoothDeviceRequest.prototype.address = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * BluetoothDeviceRequest request_type.
     * @member {BluetoothDeviceRequestType} request_type
     * @memberof BluetoothDeviceRequest
     * @instance
     */
    BluetoothDeviceRequest.prototype.request_type = 0;

    /**
     * BluetoothDeviceRequest has_address_type.
     * @member {boolean} has_address_type
     * @memberof BluetoothDeviceRequest
     * @instance
     */
    BluetoothDeviceRequest.prototype.has_address_type = false;

    /**
     * BluetoothDeviceRequest address_type.
     * @member {number} address_type
     * @memberof BluetoothDeviceRequest
     * @instance
     */
    BluetoothDeviceRequest.prototype.address_type = 0;

    /**
     * Creates a new BluetoothDeviceRequest instance using the specified properties.
     * @function create
     * @memberof BluetoothDeviceRequest
     * @static
     * @param {IBluetoothDeviceRequest=} [properties] Properties to set
     * @returns {BluetoothDeviceRequest} BluetoothDeviceRequest instance
     */
    BluetoothDeviceRequest.create = function create(properties) {
        return new BluetoothDeviceRequest(properties);
    };

    /**
     * Encodes the specified BluetoothDeviceRequest message. Does not implicitly {@link BluetoothDeviceRequest.verify|verify} messages.
     * @function encode
     * @memberof BluetoothDeviceRequest
     * @static
     * @param {IBluetoothDeviceRequest} message BluetoothDeviceRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothDeviceRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.address);
        if (message.request_type != null && Object.hasOwnProperty.call(message, "request_type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.request_type);
        if (message.has_address_type != null && Object.hasOwnProperty.call(message, "has_address_type"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.has_address_type);
        if (message.address_type != null && Object.hasOwnProperty.call(message, "address_type"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.address_type);
        return writer;
    };

    /**
     * Encodes the specified BluetoothDeviceRequest message, length delimited. Does not implicitly {@link BluetoothDeviceRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothDeviceRequest
     * @static
     * @param {IBluetoothDeviceRequest} message BluetoothDeviceRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothDeviceRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothDeviceRequest message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothDeviceRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothDeviceRequest} BluetoothDeviceRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothDeviceRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothDeviceRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.address = reader.uint64();
                    break;
                }
            case 2: {
                    message.request_type = reader.int32();
                    break;
                }
            case 3: {
                    message.has_address_type = reader.bool();
                    break;
                }
            case 4: {
                    message.address_type = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothDeviceRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothDeviceRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothDeviceRequest} BluetoothDeviceRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothDeviceRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothDeviceRequest message.
     * @function verify
     * @memberof BluetoothDeviceRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothDeviceRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.address != null && message.hasOwnProperty("address"))
            if (!$util.isInteger(message.address) && !(message.address && $util.isInteger(message.address.low) && $util.isInteger(message.address.high)))
                return "address: integer|Long expected";
        if (message.request_type != null && message.hasOwnProperty("request_type"))
            switch (message.request_type) {
            default:
                return "request_type: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            }
        if (message.has_address_type != null && message.hasOwnProperty("has_address_type"))
            if (typeof message.has_address_type !== "boolean")
                return "has_address_type: boolean expected";
        if (message.address_type != null && message.hasOwnProperty("address_type"))
            if (!$util.isInteger(message.address_type))
                return "address_type: integer expected";
        return null;
    };

    /**
     * Creates a BluetoothDeviceRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothDeviceRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothDeviceRequest} BluetoothDeviceRequest
     */
    BluetoothDeviceRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothDeviceRequest)
            return object;
        var message = new $root.BluetoothDeviceRequest();
        if (object.address != null)
            if ($util.Long)
                (message.address = $util.Long.fromValue(object.address)).unsigned = true;
            else if (typeof object.address === "string")
                message.address = parseInt(object.address, 10);
            else if (typeof object.address === "number")
                message.address = object.address;
            else if (typeof object.address === "object")
                message.address = new $util.LongBits(object.address.low >>> 0, object.address.high >>> 0).toNumber(true);
        switch (object.request_type) {
        default:
            if (typeof object.request_type === "number") {
                message.request_type = object.request_type;
                break;
            }
            break;
        case "BLUETOOTH_DEVICE_REQUEST_TYPE_CONNECT":
        case 0:
            message.request_type = 0;
            break;
        case "BLUETOOTH_DEVICE_REQUEST_TYPE_DISCONNECT":
        case 1:
            message.request_type = 1;
            break;
        case "BLUETOOTH_DEVICE_REQUEST_TYPE_PAIR":
        case 2:
            message.request_type = 2;
            break;
        case "BLUETOOTH_DEVICE_REQUEST_TYPE_UNPAIR":
        case 3:
            message.request_type = 3;
            break;
        case "BLUETOOTH_DEVICE_REQUEST_TYPE_CONNECT_V3_WITH_CACHE":
        case 4:
            message.request_type = 4;
            break;
        case "BLUETOOTH_DEVICE_REQUEST_TYPE_CONNECT_V3_WITHOUT_CACHE":
        case 5:
            message.request_type = 5;
            break;
        case "BLUETOOTH_DEVICE_REQUEST_TYPE_CLEAR_CACHE":
        case 6:
            message.request_type = 6;
            break;
        }
        if (object.has_address_type != null)
            message.has_address_type = Boolean(object.has_address_type);
        if (object.address_type != null)
            message.address_type = object.address_type >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a BluetoothDeviceRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothDeviceRequest
     * @static
     * @param {BluetoothDeviceRequest} message BluetoothDeviceRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothDeviceRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.address = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.address = options.longs === String ? "0" : 0;
            object.request_type = options.enums === String ? "BLUETOOTH_DEVICE_REQUEST_TYPE_CONNECT" : 0;
            object.has_address_type = false;
            object.address_type = 0;
        }
        if (message.address != null && message.hasOwnProperty("address"))
            if (typeof message.address === "number")
                object.address = options.longs === String ? String(message.address) : message.address;
            else
                object.address = options.longs === String ? $util.Long.prototype.toString.call(message.address) : options.longs === Number ? new $util.LongBits(message.address.low >>> 0, message.address.high >>> 0).toNumber(true) : message.address;
        if (message.request_type != null && message.hasOwnProperty("request_type"))
            object.request_type = options.enums === String ? $root.BluetoothDeviceRequestType[message.request_type] === undefined ? message.request_type : $root.BluetoothDeviceRequestType[message.request_type] : message.request_type;
        if (message.has_address_type != null && message.hasOwnProperty("has_address_type"))
            object.has_address_type = message.has_address_type;
        if (message.address_type != null && message.hasOwnProperty("address_type"))
            object.address_type = message.address_type;
        return object;
    };

    /**
     * Converts this BluetoothDeviceRequest to JSON.
     * @function toJSON
     * @memberof BluetoothDeviceRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothDeviceRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothDeviceRequest
     * @function getTypeUrl
     * @memberof BluetoothDeviceRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothDeviceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothDeviceRequest";
    };

    return BluetoothDeviceRequest;
})();

$root.BluetoothDeviceConnectionResponse = (function() {

    /**
     * Properties of a BluetoothDeviceConnectionResponse.
     * @exports IBluetoothDeviceConnectionResponse
     * @interface IBluetoothDeviceConnectionResponse
     * @property {number|Long|null} [address] BluetoothDeviceConnectionResponse address
     * @property {boolean|null} [connected] BluetoothDeviceConnectionResponse connected
     * @property {number|null} [mtu] BluetoothDeviceConnectionResponse mtu
     * @property {number|null} [error] BluetoothDeviceConnectionResponse error
     */

    /**
     * Constructs a new BluetoothDeviceConnectionResponse.
     * @exports BluetoothDeviceConnectionResponse
     * @classdesc Represents a BluetoothDeviceConnectionResponse.
     * @implements IBluetoothDeviceConnectionResponse
     * @constructor
     * @param {IBluetoothDeviceConnectionResponse=} [properties] Properties to set
     */
    function BluetoothDeviceConnectionResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothDeviceConnectionResponse address.
     * @member {number|Long} address
     * @memberof BluetoothDeviceConnectionResponse
     * @instance
     */
    BluetoothDeviceConnectionResponse.prototype.address = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * BluetoothDeviceConnectionResponse connected.
     * @member {boolean} connected
     * @memberof BluetoothDeviceConnectionResponse
     * @instance
     */
    BluetoothDeviceConnectionResponse.prototype.connected = false;

    /**
     * BluetoothDeviceConnectionResponse mtu.
     * @member {number} mtu
     * @memberof BluetoothDeviceConnectionResponse
     * @instance
     */
    BluetoothDeviceConnectionResponse.prototype.mtu = 0;

    /**
     * BluetoothDeviceConnectionResponse error.
     * @member {number} error
     * @memberof BluetoothDeviceConnectionResponse
     * @instance
     */
    BluetoothDeviceConnectionResponse.prototype.error = 0;

    /**
     * Creates a new BluetoothDeviceConnectionResponse instance using the specified properties.
     * @function create
     * @memberof BluetoothDeviceConnectionResponse
     * @static
     * @param {IBluetoothDeviceConnectionResponse=} [properties] Properties to set
     * @returns {BluetoothDeviceConnectionResponse} BluetoothDeviceConnectionResponse instance
     */
    BluetoothDeviceConnectionResponse.create = function create(properties) {
        return new BluetoothDeviceConnectionResponse(properties);
    };

    /**
     * Encodes the specified BluetoothDeviceConnectionResponse message. Does not implicitly {@link BluetoothDeviceConnectionResponse.verify|verify} messages.
     * @function encode
     * @memberof BluetoothDeviceConnectionResponse
     * @static
     * @param {IBluetoothDeviceConnectionResponse} message BluetoothDeviceConnectionResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothDeviceConnectionResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.address);
        if (message.connected != null && Object.hasOwnProperty.call(message, "connected"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.connected);
        if (message.mtu != null && Object.hasOwnProperty.call(message, "mtu"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.mtu);
        if (message.error != null && Object.hasOwnProperty.call(message, "error"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.error);
        return writer;
    };

    /**
     * Encodes the specified BluetoothDeviceConnectionResponse message, length delimited. Does not implicitly {@link BluetoothDeviceConnectionResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothDeviceConnectionResponse
     * @static
     * @param {IBluetoothDeviceConnectionResponse} message BluetoothDeviceConnectionResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothDeviceConnectionResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothDeviceConnectionResponse message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothDeviceConnectionResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothDeviceConnectionResponse} BluetoothDeviceConnectionResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothDeviceConnectionResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothDeviceConnectionResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.address = reader.uint64();
                    break;
                }
            case 2: {
                    message.connected = reader.bool();
                    break;
                }
            case 3: {
                    message.mtu = reader.uint32();
                    break;
                }
            case 4: {
                    message.error = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothDeviceConnectionResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothDeviceConnectionResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothDeviceConnectionResponse} BluetoothDeviceConnectionResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothDeviceConnectionResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothDeviceConnectionResponse message.
     * @function verify
     * @memberof BluetoothDeviceConnectionResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothDeviceConnectionResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.address != null && message.hasOwnProperty("address"))
            if (!$util.isInteger(message.address) && !(message.address && $util.isInteger(message.address.low) && $util.isInteger(message.address.high)))
                return "address: integer|Long expected";
        if (message.connected != null && message.hasOwnProperty("connected"))
            if (typeof message.connected !== "boolean")
                return "connected: boolean expected";
        if (message.mtu != null && message.hasOwnProperty("mtu"))
            if (!$util.isInteger(message.mtu))
                return "mtu: integer expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };

    /**
     * Creates a BluetoothDeviceConnectionResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothDeviceConnectionResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothDeviceConnectionResponse} BluetoothDeviceConnectionResponse
     */
    BluetoothDeviceConnectionResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothDeviceConnectionResponse)
            return object;
        var message = new $root.BluetoothDeviceConnectionResponse();
        if (object.address != null)
            if ($util.Long)
                (message.address = $util.Long.fromValue(object.address)).unsigned = true;
            else if (typeof object.address === "string")
                message.address = parseInt(object.address, 10);
            else if (typeof object.address === "number")
                message.address = object.address;
            else if (typeof object.address === "object")
                message.address = new $util.LongBits(object.address.low >>> 0, object.address.high >>> 0).toNumber(true);
        if (object.connected != null)
            message.connected = Boolean(object.connected);
        if (object.mtu != null)
            message.mtu = object.mtu >>> 0;
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };

    /**
     * Creates a plain object from a BluetoothDeviceConnectionResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothDeviceConnectionResponse
     * @static
     * @param {BluetoothDeviceConnectionResponse} message BluetoothDeviceConnectionResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothDeviceConnectionResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.address = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.address = options.longs === String ? "0" : 0;
            object.connected = false;
            object.mtu = 0;
            object.error = 0;
        }
        if (message.address != null && message.hasOwnProperty("address"))
            if (typeof message.address === "number")
                object.address = options.longs === String ? String(message.address) : message.address;
            else
                object.address = options.longs === String ? $util.Long.prototype.toString.call(message.address) : options.longs === Number ? new $util.LongBits(message.address.low >>> 0, message.address.high >>> 0).toNumber(true) : message.address;
        if (message.connected != null && message.hasOwnProperty("connected"))
            object.connected = message.connected;
        if (message.mtu != null && message.hasOwnProperty("mtu"))
            object.mtu = message.mtu;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };

    /**
     * Converts this BluetoothDeviceConnectionResponse to JSON.
     * @function toJSON
     * @memberof BluetoothDeviceConnectionResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothDeviceConnectionResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothDeviceConnectionResponse
     * @function getTypeUrl
     * @memberof BluetoothDeviceConnectionResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothDeviceConnectionResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothDeviceConnectionResponse";
    };

    return BluetoothDeviceConnectionResponse;
})();

$root.BluetoothGATTGetServicesRequest = (function() {

    /**
     * Properties of a BluetoothGATTGetServicesRequest.
     * @exports IBluetoothGATTGetServicesRequest
     * @interface IBluetoothGATTGetServicesRequest
     * @property {number|Long|null} [address] BluetoothGATTGetServicesRequest address
     */

    /**
     * Constructs a new BluetoothGATTGetServicesRequest.
     * @exports BluetoothGATTGetServicesRequest
     * @classdesc Represents a BluetoothGATTGetServicesRequest.
     * @implements IBluetoothGATTGetServicesRequest
     * @constructor
     * @param {IBluetoothGATTGetServicesRequest=} [properties] Properties to set
     */
    function BluetoothGATTGetServicesRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothGATTGetServicesRequest address.
     * @member {number|Long} address
     * @memberof BluetoothGATTGetServicesRequest
     * @instance
     */
    BluetoothGATTGetServicesRequest.prototype.address = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new BluetoothGATTGetServicesRequest instance using the specified properties.
     * @function create
     * @memberof BluetoothGATTGetServicesRequest
     * @static
     * @param {IBluetoothGATTGetServicesRequest=} [properties] Properties to set
     * @returns {BluetoothGATTGetServicesRequest} BluetoothGATTGetServicesRequest instance
     */
    BluetoothGATTGetServicesRequest.create = function create(properties) {
        return new BluetoothGATTGetServicesRequest(properties);
    };

    /**
     * Encodes the specified BluetoothGATTGetServicesRequest message. Does not implicitly {@link BluetoothGATTGetServicesRequest.verify|verify} messages.
     * @function encode
     * @memberof BluetoothGATTGetServicesRequest
     * @static
     * @param {IBluetoothGATTGetServicesRequest} message BluetoothGATTGetServicesRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTGetServicesRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.address);
        return writer;
    };

    /**
     * Encodes the specified BluetoothGATTGetServicesRequest message, length delimited. Does not implicitly {@link BluetoothGATTGetServicesRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothGATTGetServicesRequest
     * @static
     * @param {IBluetoothGATTGetServicesRequest} message BluetoothGATTGetServicesRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTGetServicesRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothGATTGetServicesRequest message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothGATTGetServicesRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothGATTGetServicesRequest} BluetoothGATTGetServicesRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTGetServicesRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothGATTGetServicesRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.address = reader.uint64();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothGATTGetServicesRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothGATTGetServicesRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothGATTGetServicesRequest} BluetoothGATTGetServicesRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTGetServicesRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothGATTGetServicesRequest message.
     * @function verify
     * @memberof BluetoothGATTGetServicesRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothGATTGetServicesRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.address != null && message.hasOwnProperty("address"))
            if (!$util.isInteger(message.address) && !(message.address && $util.isInteger(message.address.low) && $util.isInteger(message.address.high)))
                return "address: integer|Long expected";
        return null;
    };

    /**
     * Creates a BluetoothGATTGetServicesRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothGATTGetServicesRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothGATTGetServicesRequest} BluetoothGATTGetServicesRequest
     */
    BluetoothGATTGetServicesRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothGATTGetServicesRequest)
            return object;
        var message = new $root.BluetoothGATTGetServicesRequest();
        if (object.address != null)
            if ($util.Long)
                (message.address = $util.Long.fromValue(object.address)).unsigned = true;
            else if (typeof object.address === "string")
                message.address = parseInt(object.address, 10);
            else if (typeof object.address === "number")
                message.address = object.address;
            else if (typeof object.address === "object")
                message.address = new $util.LongBits(object.address.low >>> 0, object.address.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a BluetoothGATTGetServicesRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothGATTGetServicesRequest
     * @static
     * @param {BluetoothGATTGetServicesRequest} message BluetoothGATTGetServicesRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothGATTGetServicesRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.address = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.address = options.longs === String ? "0" : 0;
        if (message.address != null && message.hasOwnProperty("address"))
            if (typeof message.address === "number")
                object.address = options.longs === String ? String(message.address) : message.address;
            else
                object.address = options.longs === String ? $util.Long.prototype.toString.call(message.address) : options.longs === Number ? new $util.LongBits(message.address.low >>> 0, message.address.high >>> 0).toNumber(true) : message.address;
        return object;
    };

    /**
     * Converts this BluetoothGATTGetServicesRequest to JSON.
     * @function toJSON
     * @memberof BluetoothGATTGetServicesRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothGATTGetServicesRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothGATTGetServicesRequest
     * @function getTypeUrl
     * @memberof BluetoothGATTGetServicesRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothGATTGetServicesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothGATTGetServicesRequest";
    };

    return BluetoothGATTGetServicesRequest;
})();

$root.BluetoothGATTDescriptor = (function() {

    /**
     * Properties of a BluetoothGATTDescriptor.
     * @exports IBluetoothGATTDescriptor
     * @interface IBluetoothGATTDescriptor
     * @property {Array.<number|Long>|null} [uuid] BluetoothGATTDescriptor uuid
     * @property {number|null} [handle] BluetoothGATTDescriptor handle
     * @property {number|null} [short_uuid] BluetoothGATTDescriptor short_uuid
     */

    /**
     * Constructs a new BluetoothGATTDescriptor.
     * @exports BluetoothGATTDescriptor
     * @classdesc Represents a BluetoothGATTDescriptor.
     * @implements IBluetoothGATTDescriptor
     * @constructor
     * @param {IBluetoothGATTDescriptor=} [properties] Properties to set
     */
    function BluetoothGATTDescriptor(properties) {
        this.uuid = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothGATTDescriptor uuid.
     * @member {Array.<number|Long>} uuid
     * @memberof BluetoothGATTDescriptor
     * @instance
     */
    BluetoothGATTDescriptor.prototype.uuid = $util.emptyArray;

    /**
     * BluetoothGATTDescriptor handle.
     * @member {number} handle
     * @memberof BluetoothGATTDescriptor
     * @instance
     */
    BluetoothGATTDescriptor.prototype.handle = 0;

    /**
     * BluetoothGATTDescriptor short_uuid.
     * @member {number} short_uuid
     * @memberof BluetoothGATTDescriptor
     * @instance
     */
    BluetoothGATTDescriptor.prototype.short_uuid = 0;

    /**
     * Creates a new BluetoothGATTDescriptor instance using the specified properties.
     * @function create
     * @memberof BluetoothGATTDescriptor
     * @static
     * @param {IBluetoothGATTDescriptor=} [properties] Properties to set
     * @returns {BluetoothGATTDescriptor} BluetoothGATTDescriptor instance
     */
    BluetoothGATTDescriptor.create = function create(properties) {
        return new BluetoothGATTDescriptor(properties);
    };

    /**
     * Encodes the specified BluetoothGATTDescriptor message. Does not implicitly {@link BluetoothGATTDescriptor.verify|verify} messages.
     * @function encode
     * @memberof BluetoothGATTDescriptor
     * @static
     * @param {IBluetoothGATTDescriptor} message BluetoothGATTDescriptor message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTDescriptor.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uuid != null && message.uuid.length) {
            writer.uint32(/* id 1, wireType 2 =*/10).fork();
            for (var i = 0; i < message.uuid.length; ++i)
                writer.uint64(message.uuid[i]);
            writer.ldelim();
        }
        if (message.handle != null && Object.hasOwnProperty.call(message, "handle"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.handle);
        if (message.short_uuid != null && Object.hasOwnProperty.call(message, "short_uuid"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.short_uuid);
        return writer;
    };

    /**
     * Encodes the specified BluetoothGATTDescriptor message, length delimited. Does not implicitly {@link BluetoothGATTDescriptor.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothGATTDescriptor
     * @static
     * @param {IBluetoothGATTDescriptor} message BluetoothGATTDescriptor message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTDescriptor.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothGATTDescriptor message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothGATTDescriptor
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothGATTDescriptor} BluetoothGATTDescriptor
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTDescriptor.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothGATTDescriptor();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    if (!(message.uuid && message.uuid.length))
                        message.uuid = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.uuid.push(reader.uint64());
                    } else
                        message.uuid.push(reader.uint64());
                    break;
                }
            case 2: {
                    message.handle = reader.uint32();
                    break;
                }
            case 3: {
                    message.short_uuid = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothGATTDescriptor message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothGATTDescriptor
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothGATTDescriptor} BluetoothGATTDescriptor
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTDescriptor.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothGATTDescriptor message.
     * @function verify
     * @memberof BluetoothGATTDescriptor
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothGATTDescriptor.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uuid != null && message.hasOwnProperty("uuid")) {
            if (!Array.isArray(message.uuid))
                return "uuid: array expected";
            for (var i = 0; i < message.uuid.length; ++i)
                if (!$util.isInteger(message.uuid[i]) && !(message.uuid[i] && $util.isInteger(message.uuid[i].low) && $util.isInteger(message.uuid[i].high)))
                    return "uuid: integer|Long[] expected";
        }
        if (message.handle != null && message.hasOwnProperty("handle"))
            if (!$util.isInteger(message.handle))
                return "handle: integer expected";
        if (message.short_uuid != null && message.hasOwnProperty("short_uuid"))
            if (!$util.isInteger(message.short_uuid))
                return "short_uuid: integer expected";
        return null;
    };

    /**
     * Creates a BluetoothGATTDescriptor message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothGATTDescriptor
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothGATTDescriptor} BluetoothGATTDescriptor
     */
    BluetoothGATTDescriptor.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothGATTDescriptor)
            return object;
        var message = new $root.BluetoothGATTDescriptor();
        if (object.uuid) {
            if (!Array.isArray(object.uuid))
                throw TypeError(".BluetoothGATTDescriptor.uuid: array expected");
            message.uuid = [];
            for (var i = 0; i < object.uuid.length; ++i)
                if ($util.Long)
                    (message.uuid[i] = $util.Long.fromValue(object.uuid[i])).unsigned = true;
                else if (typeof object.uuid[i] === "string")
                    message.uuid[i] = parseInt(object.uuid[i], 10);
                else if (typeof object.uuid[i] === "number")
                    message.uuid[i] = object.uuid[i];
                else if (typeof object.uuid[i] === "object")
                    message.uuid[i] = new $util.LongBits(object.uuid[i].low >>> 0, object.uuid[i].high >>> 0).toNumber(true);
        }
        if (object.handle != null)
            message.handle = object.handle >>> 0;
        if (object.short_uuid != null)
            message.short_uuid = object.short_uuid >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a BluetoothGATTDescriptor message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothGATTDescriptor
     * @static
     * @param {BluetoothGATTDescriptor} message BluetoothGATTDescriptor
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothGATTDescriptor.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.uuid = [];
        if (options.defaults) {
            object.handle = 0;
            object.short_uuid = 0;
        }
        if (message.uuid && message.uuid.length) {
            object.uuid = [];
            for (var j = 0; j < message.uuid.length; ++j)
                if (typeof message.uuid[j] === "number")
                    object.uuid[j] = options.longs === String ? String(message.uuid[j]) : message.uuid[j];
                else
                    object.uuid[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uuid[j]) : options.longs === Number ? new $util.LongBits(message.uuid[j].low >>> 0, message.uuid[j].high >>> 0).toNumber(true) : message.uuid[j];
        }
        if (message.handle != null && message.hasOwnProperty("handle"))
            object.handle = message.handle;
        if (message.short_uuid != null && message.hasOwnProperty("short_uuid"))
            object.short_uuid = message.short_uuid;
        return object;
    };

    /**
     * Converts this BluetoothGATTDescriptor to JSON.
     * @function toJSON
     * @memberof BluetoothGATTDescriptor
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothGATTDescriptor.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothGATTDescriptor
     * @function getTypeUrl
     * @memberof BluetoothGATTDescriptor
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothGATTDescriptor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothGATTDescriptor";
    };

    return BluetoothGATTDescriptor;
})();

$root.BluetoothGATTCharacteristic = (function() {

    /**
     * Properties of a BluetoothGATTCharacteristic.
     * @exports IBluetoothGATTCharacteristic
     * @interface IBluetoothGATTCharacteristic
     * @property {Array.<number|Long>|null} [uuid] BluetoothGATTCharacteristic uuid
     * @property {number|null} [handle] BluetoothGATTCharacteristic handle
     * @property {number|null} [properties] BluetoothGATTCharacteristic properties
     * @property {Array.<IBluetoothGATTDescriptor>|null} [descriptors] BluetoothGATTCharacteristic descriptors
     * @property {number|null} [short_uuid] BluetoothGATTCharacteristic short_uuid
     */

    /**
     * Constructs a new BluetoothGATTCharacteristic.
     * @exports BluetoothGATTCharacteristic
     * @classdesc Represents a BluetoothGATTCharacteristic.
     * @implements IBluetoothGATTCharacteristic
     * @constructor
     * @param {IBluetoothGATTCharacteristic=} [properties] Properties to set
     */
    function BluetoothGATTCharacteristic(properties) {
        this.uuid = [];
        this.descriptors = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothGATTCharacteristic uuid.
     * @member {Array.<number|Long>} uuid
     * @memberof BluetoothGATTCharacteristic
     * @instance
     */
    BluetoothGATTCharacteristic.prototype.uuid = $util.emptyArray;

    /**
     * BluetoothGATTCharacteristic handle.
     * @member {number} handle
     * @memberof BluetoothGATTCharacteristic
     * @instance
     */
    BluetoothGATTCharacteristic.prototype.handle = 0;

    /**
     * BluetoothGATTCharacteristic properties.
     * @member {number} properties
     * @memberof BluetoothGATTCharacteristic
     * @instance
     */
    BluetoothGATTCharacteristic.prototype.properties = 0;

    /**
     * BluetoothGATTCharacteristic descriptors.
     * @member {Array.<IBluetoothGATTDescriptor>} descriptors
     * @memberof BluetoothGATTCharacteristic
     * @instance
     */
    BluetoothGATTCharacteristic.prototype.descriptors = $util.emptyArray;

    /**
     * BluetoothGATTCharacteristic short_uuid.
     * @member {number} short_uuid
     * @memberof BluetoothGATTCharacteristic
     * @instance
     */
    BluetoothGATTCharacteristic.prototype.short_uuid = 0;

    /**
     * Creates a new BluetoothGATTCharacteristic instance using the specified properties.
     * @function create
     * @memberof BluetoothGATTCharacteristic
     * @static
     * @param {IBluetoothGATTCharacteristic=} [properties] Properties to set
     * @returns {BluetoothGATTCharacteristic} BluetoothGATTCharacteristic instance
     */
    BluetoothGATTCharacteristic.create = function create(properties) {
        return new BluetoothGATTCharacteristic(properties);
    };

    /**
     * Encodes the specified BluetoothGATTCharacteristic message. Does not implicitly {@link BluetoothGATTCharacteristic.verify|verify} messages.
     * @function encode
     * @memberof BluetoothGATTCharacteristic
     * @static
     * @param {IBluetoothGATTCharacteristic} message BluetoothGATTCharacteristic message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTCharacteristic.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uuid != null && message.uuid.length) {
            writer.uint32(/* id 1, wireType 2 =*/10).fork();
            for (var i = 0; i < message.uuid.length; ++i)
                writer.uint64(message.uuid[i]);
            writer.ldelim();
        }
        if (message.handle != null && Object.hasOwnProperty.call(message, "handle"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.handle);
        if (message.properties != null && Object.hasOwnProperty.call(message, "properties"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.properties);
        if (message.descriptors != null && message.descriptors.length)
            for (var i = 0; i < message.descriptors.length; ++i)
                $root.BluetoothGATTDescriptor.encode(message.descriptors[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.short_uuid != null && Object.hasOwnProperty.call(message, "short_uuid"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.short_uuid);
        return writer;
    };

    /**
     * Encodes the specified BluetoothGATTCharacteristic message, length delimited. Does not implicitly {@link BluetoothGATTCharacteristic.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothGATTCharacteristic
     * @static
     * @param {IBluetoothGATTCharacteristic} message BluetoothGATTCharacteristic message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTCharacteristic.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothGATTCharacteristic message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothGATTCharacteristic
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothGATTCharacteristic} BluetoothGATTCharacteristic
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTCharacteristic.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothGATTCharacteristic();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    if (!(message.uuid && message.uuid.length))
                        message.uuid = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.uuid.push(reader.uint64());
                    } else
                        message.uuid.push(reader.uint64());
                    break;
                }
            case 2: {
                    message.handle = reader.uint32();
                    break;
                }
            case 3: {
                    message.properties = reader.uint32();
                    break;
                }
            case 4: {
                    if (!(message.descriptors && message.descriptors.length))
                        message.descriptors = [];
                    message.descriptors.push($root.BluetoothGATTDescriptor.decode(reader, reader.uint32()));
                    break;
                }
            case 5: {
                    message.short_uuid = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothGATTCharacteristic message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothGATTCharacteristic
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothGATTCharacteristic} BluetoothGATTCharacteristic
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTCharacteristic.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothGATTCharacteristic message.
     * @function verify
     * @memberof BluetoothGATTCharacteristic
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothGATTCharacteristic.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uuid != null && message.hasOwnProperty("uuid")) {
            if (!Array.isArray(message.uuid))
                return "uuid: array expected";
            for (var i = 0; i < message.uuid.length; ++i)
                if (!$util.isInteger(message.uuid[i]) && !(message.uuid[i] && $util.isInteger(message.uuid[i].low) && $util.isInteger(message.uuid[i].high)))
                    return "uuid: integer|Long[] expected";
        }
        if (message.handle != null && message.hasOwnProperty("handle"))
            if (!$util.isInteger(message.handle))
                return "handle: integer expected";
        if (message.properties != null && message.hasOwnProperty("properties"))
            if (!$util.isInteger(message.properties))
                return "properties: integer expected";
        if (message.descriptors != null && message.hasOwnProperty("descriptors")) {
            if (!Array.isArray(message.descriptors))
                return "descriptors: array expected";
            for (var i = 0; i < message.descriptors.length; ++i) {
                var error = $root.BluetoothGATTDescriptor.verify(message.descriptors[i]);
                if (error)
                    return "descriptors." + error;
            }
        }
        if (message.short_uuid != null && message.hasOwnProperty("short_uuid"))
            if (!$util.isInteger(message.short_uuid))
                return "short_uuid: integer expected";
        return null;
    };

    /**
     * Creates a BluetoothGATTCharacteristic message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothGATTCharacteristic
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothGATTCharacteristic} BluetoothGATTCharacteristic
     */
    BluetoothGATTCharacteristic.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothGATTCharacteristic)
            return object;
        var message = new $root.BluetoothGATTCharacteristic();
        if (object.uuid) {
            if (!Array.isArray(object.uuid))
                throw TypeError(".BluetoothGATTCharacteristic.uuid: array expected");
            message.uuid = [];
            for (var i = 0; i < object.uuid.length; ++i)
                if ($util.Long)
                    (message.uuid[i] = $util.Long.fromValue(object.uuid[i])).unsigned = true;
                else if (typeof object.uuid[i] === "string")
                    message.uuid[i] = parseInt(object.uuid[i], 10);
                else if (typeof object.uuid[i] === "number")
                    message.uuid[i] = object.uuid[i];
                else if (typeof object.uuid[i] === "object")
                    message.uuid[i] = new $util.LongBits(object.uuid[i].low >>> 0, object.uuid[i].high >>> 0).toNumber(true);
        }
        if (object.handle != null)
            message.handle = object.handle >>> 0;
        if (object.properties != null)
            message.properties = object.properties >>> 0;
        if (object.descriptors) {
            if (!Array.isArray(object.descriptors))
                throw TypeError(".BluetoothGATTCharacteristic.descriptors: array expected");
            message.descriptors = [];
            for (var i = 0; i < object.descriptors.length; ++i) {
                if (typeof object.descriptors[i] !== "object")
                    throw TypeError(".BluetoothGATTCharacteristic.descriptors: object expected");
                message.descriptors[i] = $root.BluetoothGATTDescriptor.fromObject(object.descriptors[i]);
            }
        }
        if (object.short_uuid != null)
            message.short_uuid = object.short_uuid >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a BluetoothGATTCharacteristic message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothGATTCharacteristic
     * @static
     * @param {BluetoothGATTCharacteristic} message BluetoothGATTCharacteristic
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothGATTCharacteristic.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.uuid = [];
            object.descriptors = [];
        }
        if (options.defaults) {
            object.handle = 0;
            object.properties = 0;
            object.short_uuid = 0;
        }
        if (message.uuid && message.uuid.length) {
            object.uuid = [];
            for (var j = 0; j < message.uuid.length; ++j)
                if (typeof message.uuid[j] === "number")
                    object.uuid[j] = options.longs === String ? String(message.uuid[j]) : message.uuid[j];
                else
                    object.uuid[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uuid[j]) : options.longs === Number ? new $util.LongBits(message.uuid[j].low >>> 0, message.uuid[j].high >>> 0).toNumber(true) : message.uuid[j];
        }
        if (message.handle != null && message.hasOwnProperty("handle"))
            object.handle = message.handle;
        if (message.properties != null && message.hasOwnProperty("properties"))
            object.properties = message.properties;
        if (message.descriptors && message.descriptors.length) {
            object.descriptors = [];
            for (var j = 0; j < message.descriptors.length; ++j)
                object.descriptors[j] = $root.BluetoothGATTDescriptor.toObject(message.descriptors[j], options);
        }
        if (message.short_uuid != null && message.hasOwnProperty("short_uuid"))
            object.short_uuid = message.short_uuid;
        return object;
    };

    /**
     * Converts this BluetoothGATTCharacteristic to JSON.
     * @function toJSON
     * @memberof BluetoothGATTCharacteristic
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothGATTCharacteristic.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothGATTCharacteristic
     * @function getTypeUrl
     * @memberof BluetoothGATTCharacteristic
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothGATTCharacteristic.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothGATTCharacteristic";
    };

    return BluetoothGATTCharacteristic;
})();

$root.BluetoothGATTService = (function() {

    /**
     * Properties of a BluetoothGATTService.
     * @exports IBluetoothGATTService
     * @interface IBluetoothGATTService
     * @property {Array.<number|Long>|null} [uuid] BluetoothGATTService uuid
     * @property {number|null} [handle] BluetoothGATTService handle
     * @property {Array.<IBluetoothGATTCharacteristic>|null} [characteristics] BluetoothGATTService characteristics
     * @property {number|null} [short_uuid] BluetoothGATTService short_uuid
     */

    /**
     * Constructs a new BluetoothGATTService.
     * @exports BluetoothGATTService
     * @classdesc Represents a BluetoothGATTService.
     * @implements IBluetoothGATTService
     * @constructor
     * @param {IBluetoothGATTService=} [properties] Properties to set
     */
    function BluetoothGATTService(properties) {
        this.uuid = [];
        this.characteristics = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothGATTService uuid.
     * @member {Array.<number|Long>} uuid
     * @memberof BluetoothGATTService
     * @instance
     */
    BluetoothGATTService.prototype.uuid = $util.emptyArray;

    /**
     * BluetoothGATTService handle.
     * @member {number} handle
     * @memberof BluetoothGATTService
     * @instance
     */
    BluetoothGATTService.prototype.handle = 0;

    /**
     * BluetoothGATTService characteristics.
     * @member {Array.<IBluetoothGATTCharacteristic>} characteristics
     * @memberof BluetoothGATTService
     * @instance
     */
    BluetoothGATTService.prototype.characteristics = $util.emptyArray;

    /**
     * BluetoothGATTService short_uuid.
     * @member {number} short_uuid
     * @memberof BluetoothGATTService
     * @instance
     */
    BluetoothGATTService.prototype.short_uuid = 0;

    /**
     * Creates a new BluetoothGATTService instance using the specified properties.
     * @function create
     * @memberof BluetoothGATTService
     * @static
     * @param {IBluetoothGATTService=} [properties] Properties to set
     * @returns {BluetoothGATTService} BluetoothGATTService instance
     */
    BluetoothGATTService.create = function create(properties) {
        return new BluetoothGATTService(properties);
    };

    /**
     * Encodes the specified BluetoothGATTService message. Does not implicitly {@link BluetoothGATTService.verify|verify} messages.
     * @function encode
     * @memberof BluetoothGATTService
     * @static
     * @param {IBluetoothGATTService} message BluetoothGATTService message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTService.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.uuid != null && message.uuid.length) {
            writer.uint32(/* id 1, wireType 2 =*/10).fork();
            for (var i = 0; i < message.uuid.length; ++i)
                writer.uint64(message.uuid[i]);
            writer.ldelim();
        }
        if (message.handle != null && Object.hasOwnProperty.call(message, "handle"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.handle);
        if (message.characteristics != null && message.characteristics.length)
            for (var i = 0; i < message.characteristics.length; ++i)
                $root.BluetoothGATTCharacteristic.encode(message.characteristics[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.short_uuid != null && Object.hasOwnProperty.call(message, "short_uuid"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.short_uuid);
        return writer;
    };

    /**
     * Encodes the specified BluetoothGATTService message, length delimited. Does not implicitly {@link BluetoothGATTService.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothGATTService
     * @static
     * @param {IBluetoothGATTService} message BluetoothGATTService message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTService.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothGATTService message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothGATTService
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothGATTService} BluetoothGATTService
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTService.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothGATTService();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    if (!(message.uuid && message.uuid.length))
                        message.uuid = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.uuid.push(reader.uint64());
                    } else
                        message.uuid.push(reader.uint64());
                    break;
                }
            case 2: {
                    message.handle = reader.uint32();
                    break;
                }
            case 3: {
                    if (!(message.characteristics && message.characteristics.length))
                        message.characteristics = [];
                    message.characteristics.push($root.BluetoothGATTCharacteristic.decode(reader, reader.uint32()));
                    break;
                }
            case 4: {
                    message.short_uuid = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothGATTService message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothGATTService
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothGATTService} BluetoothGATTService
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTService.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothGATTService message.
     * @function verify
     * @memberof BluetoothGATTService
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothGATTService.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.uuid != null && message.hasOwnProperty("uuid")) {
            if (!Array.isArray(message.uuid))
                return "uuid: array expected";
            for (var i = 0; i < message.uuid.length; ++i)
                if (!$util.isInteger(message.uuid[i]) && !(message.uuid[i] && $util.isInteger(message.uuid[i].low) && $util.isInteger(message.uuid[i].high)))
                    return "uuid: integer|Long[] expected";
        }
        if (message.handle != null && message.hasOwnProperty("handle"))
            if (!$util.isInteger(message.handle))
                return "handle: integer expected";
        if (message.characteristics != null && message.hasOwnProperty("characteristics")) {
            if (!Array.isArray(message.characteristics))
                return "characteristics: array expected";
            for (var i = 0; i < message.characteristics.length; ++i) {
                var error = $root.BluetoothGATTCharacteristic.verify(message.characteristics[i]);
                if (error)
                    return "characteristics." + error;
            }
        }
        if (message.short_uuid != null && message.hasOwnProperty("short_uuid"))
            if (!$util.isInteger(message.short_uuid))
                return "short_uuid: integer expected";
        return null;
    };

    /**
     * Creates a BluetoothGATTService message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothGATTService
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothGATTService} BluetoothGATTService
     */
    BluetoothGATTService.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothGATTService)
            return object;
        var message = new $root.BluetoothGATTService();
        if (object.uuid) {
            if (!Array.isArray(object.uuid))
                throw TypeError(".BluetoothGATTService.uuid: array expected");
            message.uuid = [];
            for (var i = 0; i < object.uuid.length; ++i)
                if ($util.Long)
                    (message.uuid[i] = $util.Long.fromValue(object.uuid[i])).unsigned = true;
                else if (typeof object.uuid[i] === "string")
                    message.uuid[i] = parseInt(object.uuid[i], 10);
                else if (typeof object.uuid[i] === "number")
                    message.uuid[i] = object.uuid[i];
                else if (typeof object.uuid[i] === "object")
                    message.uuid[i] = new $util.LongBits(object.uuid[i].low >>> 0, object.uuid[i].high >>> 0).toNumber(true);
        }
        if (object.handle != null)
            message.handle = object.handle >>> 0;
        if (object.characteristics) {
            if (!Array.isArray(object.characteristics))
                throw TypeError(".BluetoothGATTService.characteristics: array expected");
            message.characteristics = [];
            for (var i = 0; i < object.characteristics.length; ++i) {
                if (typeof object.characteristics[i] !== "object")
                    throw TypeError(".BluetoothGATTService.characteristics: object expected");
                message.characteristics[i] = $root.BluetoothGATTCharacteristic.fromObject(object.characteristics[i]);
            }
        }
        if (object.short_uuid != null)
            message.short_uuid = object.short_uuid >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a BluetoothGATTService message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothGATTService
     * @static
     * @param {BluetoothGATTService} message BluetoothGATTService
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothGATTService.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.uuid = [];
            object.characteristics = [];
        }
        if (options.defaults) {
            object.handle = 0;
            object.short_uuid = 0;
        }
        if (message.uuid && message.uuid.length) {
            object.uuid = [];
            for (var j = 0; j < message.uuid.length; ++j)
                if (typeof message.uuid[j] === "number")
                    object.uuid[j] = options.longs === String ? String(message.uuid[j]) : message.uuid[j];
                else
                    object.uuid[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uuid[j]) : options.longs === Number ? new $util.LongBits(message.uuid[j].low >>> 0, message.uuid[j].high >>> 0).toNumber(true) : message.uuid[j];
        }
        if (message.handle != null && message.hasOwnProperty("handle"))
            object.handle = message.handle;
        if (message.characteristics && message.characteristics.length) {
            object.characteristics = [];
            for (var j = 0; j < message.characteristics.length; ++j)
                object.characteristics[j] = $root.BluetoothGATTCharacteristic.toObject(message.characteristics[j], options);
        }
        if (message.short_uuid != null && message.hasOwnProperty("short_uuid"))
            object.short_uuid = message.short_uuid;
        return object;
    };

    /**
     * Converts this BluetoothGATTService to JSON.
     * @function toJSON
     * @memberof BluetoothGATTService
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothGATTService.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothGATTService
     * @function getTypeUrl
     * @memberof BluetoothGATTService
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothGATTService.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothGATTService";
    };

    return BluetoothGATTService;
})();

$root.BluetoothGATTGetServicesResponse = (function() {

    /**
     * Properties of a BluetoothGATTGetServicesResponse.
     * @exports IBluetoothGATTGetServicesResponse
     * @interface IBluetoothGATTGetServicesResponse
     * @property {number|Long|null} [address] BluetoothGATTGetServicesResponse address
     * @property {Array.<IBluetoothGATTService>|null} [services] BluetoothGATTGetServicesResponse services
     */

    /**
     * Constructs a new BluetoothGATTGetServicesResponse.
     * @exports BluetoothGATTGetServicesResponse
     * @classdesc Represents a BluetoothGATTGetServicesResponse.
     * @implements IBluetoothGATTGetServicesResponse
     * @constructor
     * @param {IBluetoothGATTGetServicesResponse=} [properties] Properties to set
     */
    function BluetoothGATTGetServicesResponse(properties) {
        this.services = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothGATTGetServicesResponse address.
     * @member {number|Long} address
     * @memberof BluetoothGATTGetServicesResponse
     * @instance
     */
    BluetoothGATTGetServicesResponse.prototype.address = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * BluetoothGATTGetServicesResponse services.
     * @member {Array.<IBluetoothGATTService>} services
     * @memberof BluetoothGATTGetServicesResponse
     * @instance
     */
    BluetoothGATTGetServicesResponse.prototype.services = $util.emptyArray;

    /**
     * Creates a new BluetoothGATTGetServicesResponse instance using the specified properties.
     * @function create
     * @memberof BluetoothGATTGetServicesResponse
     * @static
     * @param {IBluetoothGATTGetServicesResponse=} [properties] Properties to set
     * @returns {BluetoothGATTGetServicesResponse} BluetoothGATTGetServicesResponse instance
     */
    BluetoothGATTGetServicesResponse.create = function create(properties) {
        return new BluetoothGATTGetServicesResponse(properties);
    };

    /**
     * Encodes the specified BluetoothGATTGetServicesResponse message. Does not implicitly {@link BluetoothGATTGetServicesResponse.verify|verify} messages.
     * @function encode
     * @memberof BluetoothGATTGetServicesResponse
     * @static
     * @param {IBluetoothGATTGetServicesResponse} message BluetoothGATTGetServicesResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTGetServicesResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.address);
        if (message.services != null && message.services.length)
            for (var i = 0; i < message.services.length; ++i)
                $root.BluetoothGATTService.encode(message.services[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified BluetoothGATTGetServicesResponse message, length delimited. Does not implicitly {@link BluetoothGATTGetServicesResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothGATTGetServicesResponse
     * @static
     * @param {IBluetoothGATTGetServicesResponse} message BluetoothGATTGetServicesResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTGetServicesResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothGATTGetServicesResponse message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothGATTGetServicesResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothGATTGetServicesResponse} BluetoothGATTGetServicesResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTGetServicesResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothGATTGetServicesResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.address = reader.uint64();
                    break;
                }
            case 2: {
                    if (!(message.services && message.services.length))
                        message.services = [];
                    message.services.push($root.BluetoothGATTService.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothGATTGetServicesResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothGATTGetServicesResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothGATTGetServicesResponse} BluetoothGATTGetServicesResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTGetServicesResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothGATTGetServicesResponse message.
     * @function verify
     * @memberof BluetoothGATTGetServicesResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothGATTGetServicesResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.address != null && message.hasOwnProperty("address"))
            if (!$util.isInteger(message.address) && !(message.address && $util.isInteger(message.address.low) && $util.isInteger(message.address.high)))
                return "address: integer|Long expected";
        if (message.services != null && message.hasOwnProperty("services")) {
            if (!Array.isArray(message.services))
                return "services: array expected";
            for (var i = 0; i < message.services.length; ++i) {
                var error = $root.BluetoothGATTService.verify(message.services[i]);
                if (error)
                    return "services." + error;
            }
        }
        return null;
    };

    /**
     * Creates a BluetoothGATTGetServicesResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothGATTGetServicesResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothGATTGetServicesResponse} BluetoothGATTGetServicesResponse
     */
    BluetoothGATTGetServicesResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothGATTGetServicesResponse)
            return object;
        var message = new $root.BluetoothGATTGetServicesResponse();
        if (object.address != null)
            if ($util.Long)
                (message.address = $util.Long.fromValue(object.address)).unsigned = true;
            else if (typeof object.address === "string")
                message.address = parseInt(object.address, 10);
            else if (typeof object.address === "number")
                message.address = object.address;
            else if (typeof object.address === "object")
                message.address = new $util.LongBits(object.address.low >>> 0, object.address.high >>> 0).toNumber(true);
        if (object.services) {
            if (!Array.isArray(object.services))
                throw TypeError(".BluetoothGATTGetServicesResponse.services: array expected");
            message.services = [];
            for (var i = 0; i < object.services.length; ++i) {
                if (typeof object.services[i] !== "object")
                    throw TypeError(".BluetoothGATTGetServicesResponse.services: object expected");
                message.services[i] = $root.BluetoothGATTService.fromObject(object.services[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a BluetoothGATTGetServicesResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothGATTGetServicesResponse
     * @static
     * @param {BluetoothGATTGetServicesResponse} message BluetoothGATTGetServicesResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothGATTGetServicesResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.services = [];
        if (options.defaults)
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.address = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.address = options.longs === String ? "0" : 0;
        if (message.address != null && message.hasOwnProperty("address"))
            if (typeof message.address === "number")
                object.address = options.longs === String ? String(message.address) : message.address;
            else
                object.address = options.longs === String ? $util.Long.prototype.toString.call(message.address) : options.longs === Number ? new $util.LongBits(message.address.low >>> 0, message.address.high >>> 0).toNumber(true) : message.address;
        if (message.services && message.services.length) {
            object.services = [];
            for (var j = 0; j < message.services.length; ++j)
                object.services[j] = $root.BluetoothGATTService.toObject(message.services[j], options);
        }
        return object;
    };

    /**
     * Converts this BluetoothGATTGetServicesResponse to JSON.
     * @function toJSON
     * @memberof BluetoothGATTGetServicesResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothGATTGetServicesResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothGATTGetServicesResponse
     * @function getTypeUrl
     * @memberof BluetoothGATTGetServicesResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothGATTGetServicesResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothGATTGetServicesResponse";
    };

    return BluetoothGATTGetServicesResponse;
})();

$root.BluetoothGATTGetServicesDoneResponse = (function() {

    /**
     * Properties of a BluetoothGATTGetServicesDoneResponse.
     * @exports IBluetoothGATTGetServicesDoneResponse
     * @interface IBluetoothGATTGetServicesDoneResponse
     * @property {number|Long|null} [address] BluetoothGATTGetServicesDoneResponse address
     */

    /**
     * Constructs a new BluetoothGATTGetServicesDoneResponse.
     * @exports BluetoothGATTGetServicesDoneResponse
     * @classdesc Represents a BluetoothGATTGetServicesDoneResponse.
     * @implements IBluetoothGATTGetServicesDoneResponse
     * @constructor
     * @param {IBluetoothGATTGetServicesDoneResponse=} [properties] Properties to set
     */
    function BluetoothGATTGetServicesDoneResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothGATTGetServicesDoneResponse address.
     * @member {number|Long} address
     * @memberof BluetoothGATTGetServicesDoneResponse
     * @instance
     */
    BluetoothGATTGetServicesDoneResponse.prototype.address = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * Creates a new BluetoothGATTGetServicesDoneResponse instance using the specified properties.
     * @function create
     * @memberof BluetoothGATTGetServicesDoneResponse
     * @static
     * @param {IBluetoothGATTGetServicesDoneResponse=} [properties] Properties to set
     * @returns {BluetoothGATTGetServicesDoneResponse} BluetoothGATTGetServicesDoneResponse instance
     */
    BluetoothGATTGetServicesDoneResponse.create = function create(properties) {
        return new BluetoothGATTGetServicesDoneResponse(properties);
    };

    /**
     * Encodes the specified BluetoothGATTGetServicesDoneResponse message. Does not implicitly {@link BluetoothGATTGetServicesDoneResponse.verify|verify} messages.
     * @function encode
     * @memberof BluetoothGATTGetServicesDoneResponse
     * @static
     * @param {IBluetoothGATTGetServicesDoneResponse} message BluetoothGATTGetServicesDoneResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTGetServicesDoneResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.address);
        return writer;
    };

    /**
     * Encodes the specified BluetoothGATTGetServicesDoneResponse message, length delimited. Does not implicitly {@link BluetoothGATTGetServicesDoneResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothGATTGetServicesDoneResponse
     * @static
     * @param {IBluetoothGATTGetServicesDoneResponse} message BluetoothGATTGetServicesDoneResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTGetServicesDoneResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothGATTGetServicesDoneResponse message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothGATTGetServicesDoneResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothGATTGetServicesDoneResponse} BluetoothGATTGetServicesDoneResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTGetServicesDoneResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothGATTGetServicesDoneResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.address = reader.uint64();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothGATTGetServicesDoneResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothGATTGetServicesDoneResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothGATTGetServicesDoneResponse} BluetoothGATTGetServicesDoneResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTGetServicesDoneResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothGATTGetServicesDoneResponse message.
     * @function verify
     * @memberof BluetoothGATTGetServicesDoneResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothGATTGetServicesDoneResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.address != null && message.hasOwnProperty("address"))
            if (!$util.isInteger(message.address) && !(message.address && $util.isInteger(message.address.low) && $util.isInteger(message.address.high)))
                return "address: integer|Long expected";
        return null;
    };

    /**
     * Creates a BluetoothGATTGetServicesDoneResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothGATTGetServicesDoneResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothGATTGetServicesDoneResponse} BluetoothGATTGetServicesDoneResponse
     */
    BluetoothGATTGetServicesDoneResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothGATTGetServicesDoneResponse)
            return object;
        var message = new $root.BluetoothGATTGetServicesDoneResponse();
        if (object.address != null)
            if ($util.Long)
                (message.address = $util.Long.fromValue(object.address)).unsigned = true;
            else if (typeof object.address === "string")
                message.address = parseInt(object.address, 10);
            else if (typeof object.address === "number")
                message.address = object.address;
            else if (typeof object.address === "object")
                message.address = new $util.LongBits(object.address.low >>> 0, object.address.high >>> 0).toNumber(true);
        return message;
    };

    /**
     * Creates a plain object from a BluetoothGATTGetServicesDoneResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothGATTGetServicesDoneResponse
     * @static
     * @param {BluetoothGATTGetServicesDoneResponse} message BluetoothGATTGetServicesDoneResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothGATTGetServicesDoneResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.address = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.address = options.longs === String ? "0" : 0;
        if (message.address != null && message.hasOwnProperty("address"))
            if (typeof message.address === "number")
                object.address = options.longs === String ? String(message.address) : message.address;
            else
                object.address = options.longs === String ? $util.Long.prototype.toString.call(message.address) : options.longs === Number ? new $util.LongBits(message.address.low >>> 0, message.address.high >>> 0).toNumber(true) : message.address;
        return object;
    };

    /**
     * Converts this BluetoothGATTGetServicesDoneResponse to JSON.
     * @function toJSON
     * @memberof BluetoothGATTGetServicesDoneResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothGATTGetServicesDoneResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothGATTGetServicesDoneResponse
     * @function getTypeUrl
     * @memberof BluetoothGATTGetServicesDoneResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothGATTGetServicesDoneResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothGATTGetServicesDoneResponse";
    };

    return BluetoothGATTGetServicesDoneResponse;
})();

$root.BluetoothGATTReadRequest = (function() {

    /**
     * Properties of a BluetoothGATTReadRequest.
     * @exports IBluetoothGATTReadRequest
     * @interface IBluetoothGATTReadRequest
     * @property {number|Long|null} [address] BluetoothGATTReadRequest address
     * @property {number|null} [handle] BluetoothGATTReadRequest handle
     */

    /**
     * Constructs a new BluetoothGATTReadRequest.
     * @exports BluetoothGATTReadRequest
     * @classdesc Represents a BluetoothGATTReadRequest.
     * @implements IBluetoothGATTReadRequest
     * @constructor
     * @param {IBluetoothGATTReadRequest=} [properties] Properties to set
     */
    function BluetoothGATTReadRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothGATTReadRequest address.
     * @member {number|Long} address
     * @memberof BluetoothGATTReadRequest
     * @instance
     */
    BluetoothGATTReadRequest.prototype.address = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * BluetoothGATTReadRequest handle.
     * @member {number} handle
     * @memberof BluetoothGATTReadRequest
     * @instance
     */
    BluetoothGATTReadRequest.prototype.handle = 0;

    /**
     * Creates a new BluetoothGATTReadRequest instance using the specified properties.
     * @function create
     * @memberof BluetoothGATTReadRequest
     * @static
     * @param {IBluetoothGATTReadRequest=} [properties] Properties to set
     * @returns {BluetoothGATTReadRequest} BluetoothGATTReadRequest instance
     */
    BluetoothGATTReadRequest.create = function create(properties) {
        return new BluetoothGATTReadRequest(properties);
    };

    /**
     * Encodes the specified BluetoothGATTReadRequest message. Does not implicitly {@link BluetoothGATTReadRequest.verify|verify} messages.
     * @function encode
     * @memberof BluetoothGATTReadRequest
     * @static
     * @param {IBluetoothGATTReadRequest} message BluetoothGATTReadRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTReadRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.address);
        if (message.handle != null && Object.hasOwnProperty.call(message, "handle"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.handle);
        return writer;
    };

    /**
     * Encodes the specified BluetoothGATTReadRequest message, length delimited. Does not implicitly {@link BluetoothGATTReadRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothGATTReadRequest
     * @static
     * @param {IBluetoothGATTReadRequest} message BluetoothGATTReadRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTReadRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothGATTReadRequest message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothGATTReadRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothGATTReadRequest} BluetoothGATTReadRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTReadRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothGATTReadRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.address = reader.uint64();
                    break;
                }
            case 2: {
                    message.handle = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothGATTReadRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothGATTReadRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothGATTReadRequest} BluetoothGATTReadRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTReadRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothGATTReadRequest message.
     * @function verify
     * @memberof BluetoothGATTReadRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothGATTReadRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.address != null && message.hasOwnProperty("address"))
            if (!$util.isInteger(message.address) && !(message.address && $util.isInteger(message.address.low) && $util.isInteger(message.address.high)))
                return "address: integer|Long expected";
        if (message.handle != null && message.hasOwnProperty("handle"))
            if (!$util.isInteger(message.handle))
                return "handle: integer expected";
        return null;
    };

    /**
     * Creates a BluetoothGATTReadRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothGATTReadRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothGATTReadRequest} BluetoothGATTReadRequest
     */
    BluetoothGATTReadRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothGATTReadRequest)
            return object;
        var message = new $root.BluetoothGATTReadRequest();
        if (object.address != null)
            if ($util.Long)
                (message.address = $util.Long.fromValue(object.address)).unsigned = true;
            else if (typeof object.address === "string")
                message.address = parseInt(object.address, 10);
            else if (typeof object.address === "number")
                message.address = object.address;
            else if (typeof object.address === "object")
                message.address = new $util.LongBits(object.address.low >>> 0, object.address.high >>> 0).toNumber(true);
        if (object.handle != null)
            message.handle = object.handle >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a BluetoothGATTReadRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothGATTReadRequest
     * @static
     * @param {BluetoothGATTReadRequest} message BluetoothGATTReadRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothGATTReadRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.address = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.address = options.longs === String ? "0" : 0;
            object.handle = 0;
        }
        if (message.address != null && message.hasOwnProperty("address"))
            if (typeof message.address === "number")
                object.address = options.longs === String ? String(message.address) : message.address;
            else
                object.address = options.longs === String ? $util.Long.prototype.toString.call(message.address) : options.longs === Number ? new $util.LongBits(message.address.low >>> 0, message.address.high >>> 0).toNumber(true) : message.address;
        if (message.handle != null && message.hasOwnProperty("handle"))
            object.handle = message.handle;
        return object;
    };

    /**
     * Converts this BluetoothGATTReadRequest to JSON.
     * @function toJSON
     * @memberof BluetoothGATTReadRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothGATTReadRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothGATTReadRequest
     * @function getTypeUrl
     * @memberof BluetoothGATTReadRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothGATTReadRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothGATTReadRequest";
    };

    return BluetoothGATTReadRequest;
})();

$root.BluetoothGATTReadResponse = (function() {

    /**
     * Properties of a BluetoothGATTReadResponse.
     * @exports IBluetoothGATTReadResponse
     * @interface IBluetoothGATTReadResponse
     * @property {number|Long|null} [address] BluetoothGATTReadResponse address
     * @property {number|null} [handle] BluetoothGATTReadResponse handle
     * @property {Uint8Array|null} [data] BluetoothGATTReadResponse data
     */

    /**
     * Constructs a new BluetoothGATTReadResponse.
     * @exports BluetoothGATTReadResponse
     * @classdesc Represents a BluetoothGATTReadResponse.
     * @implements IBluetoothGATTReadResponse
     * @constructor
     * @param {IBluetoothGATTReadResponse=} [properties] Properties to set
     */
    function BluetoothGATTReadResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothGATTReadResponse address.
     * @member {number|Long} address
     * @memberof BluetoothGATTReadResponse
     * @instance
     */
    BluetoothGATTReadResponse.prototype.address = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * BluetoothGATTReadResponse handle.
     * @member {number} handle
     * @memberof BluetoothGATTReadResponse
     * @instance
     */
    BluetoothGATTReadResponse.prototype.handle = 0;

    /**
     * BluetoothGATTReadResponse data.
     * @member {Uint8Array} data
     * @memberof BluetoothGATTReadResponse
     * @instance
     */
    BluetoothGATTReadResponse.prototype.data = $util.newBuffer([]);

    /**
     * Creates a new BluetoothGATTReadResponse instance using the specified properties.
     * @function create
     * @memberof BluetoothGATTReadResponse
     * @static
     * @param {IBluetoothGATTReadResponse=} [properties] Properties to set
     * @returns {BluetoothGATTReadResponse} BluetoothGATTReadResponse instance
     */
    BluetoothGATTReadResponse.create = function create(properties) {
        return new BluetoothGATTReadResponse(properties);
    };

    /**
     * Encodes the specified BluetoothGATTReadResponse message. Does not implicitly {@link BluetoothGATTReadResponse.verify|verify} messages.
     * @function encode
     * @memberof BluetoothGATTReadResponse
     * @static
     * @param {IBluetoothGATTReadResponse} message BluetoothGATTReadResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTReadResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.address);
        if (message.handle != null && Object.hasOwnProperty.call(message, "handle"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.handle);
        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);
        return writer;
    };

    /**
     * Encodes the specified BluetoothGATTReadResponse message, length delimited. Does not implicitly {@link BluetoothGATTReadResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothGATTReadResponse
     * @static
     * @param {IBluetoothGATTReadResponse} message BluetoothGATTReadResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTReadResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothGATTReadResponse message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothGATTReadResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothGATTReadResponse} BluetoothGATTReadResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTReadResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothGATTReadResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.address = reader.uint64();
                    break;
                }
            case 2: {
                    message.handle = reader.uint32();
                    break;
                }
            case 3: {
                    message.data = reader.bytes();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothGATTReadResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothGATTReadResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothGATTReadResponse} BluetoothGATTReadResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTReadResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothGATTReadResponse message.
     * @function verify
     * @memberof BluetoothGATTReadResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothGATTReadResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.address != null && message.hasOwnProperty("address"))
            if (!$util.isInteger(message.address) && !(message.address && $util.isInteger(message.address.low) && $util.isInteger(message.address.high)))
                return "address: integer|Long expected";
        if (message.handle != null && message.hasOwnProperty("handle"))
            if (!$util.isInteger(message.handle))
                return "handle: integer expected";
        if (message.data != null && message.hasOwnProperty("data"))
            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                return "data: buffer expected";
        return null;
    };

    /**
     * Creates a BluetoothGATTReadResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothGATTReadResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothGATTReadResponse} BluetoothGATTReadResponse
     */
    BluetoothGATTReadResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothGATTReadResponse)
            return object;
        var message = new $root.BluetoothGATTReadResponse();
        if (object.address != null)
            if ($util.Long)
                (message.address = $util.Long.fromValue(object.address)).unsigned = true;
            else if (typeof object.address === "string")
                message.address = parseInt(object.address, 10);
            else if (typeof object.address === "number")
                message.address = object.address;
            else if (typeof object.address === "object")
                message.address = new $util.LongBits(object.address.low >>> 0, object.address.high >>> 0).toNumber(true);
        if (object.handle != null)
            message.handle = object.handle >>> 0;
        if (object.data != null)
            if (typeof object.data === "string")
                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
            else if (object.data.length >= 0)
                message.data = object.data;
        return message;
    };

    /**
     * Creates a plain object from a BluetoothGATTReadResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothGATTReadResponse
     * @static
     * @param {BluetoothGATTReadResponse} message BluetoothGATTReadResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothGATTReadResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.address = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.address = options.longs === String ? "0" : 0;
            object.handle = 0;
            if (options.bytes === String)
                object.data = "";
            else {
                object.data = [];
                if (options.bytes !== Array)
                    object.data = $util.newBuffer(object.data);
            }
        }
        if (message.address != null && message.hasOwnProperty("address"))
            if (typeof message.address === "number")
                object.address = options.longs === String ? String(message.address) : message.address;
            else
                object.address = options.longs === String ? $util.Long.prototype.toString.call(message.address) : options.longs === Number ? new $util.LongBits(message.address.low >>> 0, message.address.high >>> 0).toNumber(true) : message.address;
        if (message.handle != null && message.hasOwnProperty("handle"))
            object.handle = message.handle;
        if (message.data != null && message.hasOwnProperty("data"))
            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
        return object;
    };

    /**
     * Converts this BluetoothGATTReadResponse to JSON.
     * @function toJSON
     * @memberof BluetoothGATTReadResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothGATTReadResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothGATTReadResponse
     * @function getTypeUrl
     * @memberof BluetoothGATTReadResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothGATTReadResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothGATTReadResponse";
    };

    return BluetoothGATTReadResponse;
})();

$root.BluetoothGATTWriteRequest = (function() {

    /**
     * Properties of a BluetoothGATTWriteRequest.
     * @exports IBluetoothGATTWriteRequest
     * @interface IBluetoothGATTWriteRequest
     * @property {number|Long|null} [address] BluetoothGATTWriteRequest address
     * @property {number|null} [handle] BluetoothGATTWriteRequest handle
     * @property {boolean|null} [response] BluetoothGATTWriteRequest response
     * @property {Uint8Array|null} [data] BluetoothGATTWriteRequest data
     */

    /**
     * Constructs a new BluetoothGATTWriteRequest.
     * @exports BluetoothGATTWriteRequest
     * @classdesc Represents a BluetoothGATTWriteRequest.
     * @implements IBluetoothGATTWriteRequest
     * @constructor
     * @param {IBluetoothGATTWriteRequest=} [properties] Properties to set
     */
    function BluetoothGATTWriteRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothGATTWriteRequest address.
     * @member {number|Long} address
     * @memberof BluetoothGATTWriteRequest
     * @instance
     */
    BluetoothGATTWriteRequest.prototype.address = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * BluetoothGATTWriteRequest handle.
     * @member {number} handle
     * @memberof BluetoothGATTWriteRequest
     * @instance
     */
    BluetoothGATTWriteRequest.prototype.handle = 0;

    /**
     * BluetoothGATTWriteRequest response.
     * @member {boolean} response
     * @memberof BluetoothGATTWriteRequest
     * @instance
     */
    BluetoothGATTWriteRequest.prototype.response = false;

    /**
     * BluetoothGATTWriteRequest data.
     * @member {Uint8Array} data
     * @memberof BluetoothGATTWriteRequest
     * @instance
     */
    BluetoothGATTWriteRequest.prototype.data = $util.newBuffer([]);

    /**
     * Creates a new BluetoothGATTWriteRequest instance using the specified properties.
     * @function create
     * @memberof BluetoothGATTWriteRequest
     * @static
     * @param {IBluetoothGATTWriteRequest=} [properties] Properties to set
     * @returns {BluetoothGATTWriteRequest} BluetoothGATTWriteRequest instance
     */
    BluetoothGATTWriteRequest.create = function create(properties) {
        return new BluetoothGATTWriteRequest(properties);
    };

    /**
     * Encodes the specified BluetoothGATTWriteRequest message. Does not implicitly {@link BluetoothGATTWriteRequest.verify|verify} messages.
     * @function encode
     * @memberof BluetoothGATTWriteRequest
     * @static
     * @param {IBluetoothGATTWriteRequest} message BluetoothGATTWriteRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTWriteRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.address);
        if (message.handle != null && Object.hasOwnProperty.call(message, "handle"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.handle);
        if (message.response != null && Object.hasOwnProperty.call(message, "response"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.response);
        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.data);
        return writer;
    };

    /**
     * Encodes the specified BluetoothGATTWriteRequest message, length delimited. Does not implicitly {@link BluetoothGATTWriteRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothGATTWriteRequest
     * @static
     * @param {IBluetoothGATTWriteRequest} message BluetoothGATTWriteRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTWriteRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothGATTWriteRequest message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothGATTWriteRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothGATTWriteRequest} BluetoothGATTWriteRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTWriteRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothGATTWriteRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.address = reader.uint64();
                    break;
                }
            case 2: {
                    message.handle = reader.uint32();
                    break;
                }
            case 3: {
                    message.response = reader.bool();
                    break;
                }
            case 4: {
                    message.data = reader.bytes();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothGATTWriteRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothGATTWriteRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothGATTWriteRequest} BluetoothGATTWriteRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTWriteRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothGATTWriteRequest message.
     * @function verify
     * @memberof BluetoothGATTWriteRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothGATTWriteRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.address != null && message.hasOwnProperty("address"))
            if (!$util.isInteger(message.address) && !(message.address && $util.isInteger(message.address.low) && $util.isInteger(message.address.high)))
                return "address: integer|Long expected";
        if (message.handle != null && message.hasOwnProperty("handle"))
            if (!$util.isInteger(message.handle))
                return "handle: integer expected";
        if (message.response != null && message.hasOwnProperty("response"))
            if (typeof message.response !== "boolean")
                return "response: boolean expected";
        if (message.data != null && message.hasOwnProperty("data"))
            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                return "data: buffer expected";
        return null;
    };

    /**
     * Creates a BluetoothGATTWriteRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothGATTWriteRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothGATTWriteRequest} BluetoothGATTWriteRequest
     */
    BluetoothGATTWriteRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothGATTWriteRequest)
            return object;
        var message = new $root.BluetoothGATTWriteRequest();
        if (object.address != null)
            if ($util.Long)
                (message.address = $util.Long.fromValue(object.address)).unsigned = true;
            else if (typeof object.address === "string")
                message.address = parseInt(object.address, 10);
            else if (typeof object.address === "number")
                message.address = object.address;
            else if (typeof object.address === "object")
                message.address = new $util.LongBits(object.address.low >>> 0, object.address.high >>> 0).toNumber(true);
        if (object.handle != null)
            message.handle = object.handle >>> 0;
        if (object.response != null)
            message.response = Boolean(object.response);
        if (object.data != null)
            if (typeof object.data === "string")
                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
            else if (object.data.length >= 0)
                message.data = object.data;
        return message;
    };

    /**
     * Creates a plain object from a BluetoothGATTWriteRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothGATTWriteRequest
     * @static
     * @param {BluetoothGATTWriteRequest} message BluetoothGATTWriteRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothGATTWriteRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.address = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.address = options.longs === String ? "0" : 0;
            object.handle = 0;
            object.response = false;
            if (options.bytes === String)
                object.data = "";
            else {
                object.data = [];
                if (options.bytes !== Array)
                    object.data = $util.newBuffer(object.data);
            }
        }
        if (message.address != null && message.hasOwnProperty("address"))
            if (typeof message.address === "number")
                object.address = options.longs === String ? String(message.address) : message.address;
            else
                object.address = options.longs === String ? $util.Long.prototype.toString.call(message.address) : options.longs === Number ? new $util.LongBits(message.address.low >>> 0, message.address.high >>> 0).toNumber(true) : message.address;
        if (message.handle != null && message.hasOwnProperty("handle"))
            object.handle = message.handle;
        if (message.response != null && message.hasOwnProperty("response"))
            object.response = message.response;
        if (message.data != null && message.hasOwnProperty("data"))
            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
        return object;
    };

    /**
     * Converts this BluetoothGATTWriteRequest to JSON.
     * @function toJSON
     * @memberof BluetoothGATTWriteRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothGATTWriteRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothGATTWriteRequest
     * @function getTypeUrl
     * @memberof BluetoothGATTWriteRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothGATTWriteRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothGATTWriteRequest";
    };

    return BluetoothGATTWriteRequest;
})();

$root.BluetoothGATTReadDescriptorRequest = (function() {

    /**
     * Properties of a BluetoothGATTReadDescriptorRequest.
     * @exports IBluetoothGATTReadDescriptorRequest
     * @interface IBluetoothGATTReadDescriptorRequest
     * @property {number|Long|null} [address] BluetoothGATTReadDescriptorRequest address
     * @property {number|null} [handle] BluetoothGATTReadDescriptorRequest handle
     */

    /**
     * Constructs a new BluetoothGATTReadDescriptorRequest.
     * @exports BluetoothGATTReadDescriptorRequest
     * @classdesc Represents a BluetoothGATTReadDescriptorRequest.
     * @implements IBluetoothGATTReadDescriptorRequest
     * @constructor
     * @param {IBluetoothGATTReadDescriptorRequest=} [properties] Properties to set
     */
    function BluetoothGATTReadDescriptorRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothGATTReadDescriptorRequest address.
     * @member {number|Long} address
     * @memberof BluetoothGATTReadDescriptorRequest
     * @instance
     */
    BluetoothGATTReadDescriptorRequest.prototype.address = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * BluetoothGATTReadDescriptorRequest handle.
     * @member {number} handle
     * @memberof BluetoothGATTReadDescriptorRequest
     * @instance
     */
    BluetoothGATTReadDescriptorRequest.prototype.handle = 0;

    /**
     * Creates a new BluetoothGATTReadDescriptorRequest instance using the specified properties.
     * @function create
     * @memberof BluetoothGATTReadDescriptorRequest
     * @static
     * @param {IBluetoothGATTReadDescriptorRequest=} [properties] Properties to set
     * @returns {BluetoothGATTReadDescriptorRequest} BluetoothGATTReadDescriptorRequest instance
     */
    BluetoothGATTReadDescriptorRequest.create = function create(properties) {
        return new BluetoothGATTReadDescriptorRequest(properties);
    };

    /**
     * Encodes the specified BluetoothGATTReadDescriptorRequest message. Does not implicitly {@link BluetoothGATTReadDescriptorRequest.verify|verify} messages.
     * @function encode
     * @memberof BluetoothGATTReadDescriptorRequest
     * @static
     * @param {IBluetoothGATTReadDescriptorRequest} message BluetoothGATTReadDescriptorRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTReadDescriptorRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.address);
        if (message.handle != null && Object.hasOwnProperty.call(message, "handle"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.handle);
        return writer;
    };

    /**
     * Encodes the specified BluetoothGATTReadDescriptorRequest message, length delimited. Does not implicitly {@link BluetoothGATTReadDescriptorRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothGATTReadDescriptorRequest
     * @static
     * @param {IBluetoothGATTReadDescriptorRequest} message BluetoothGATTReadDescriptorRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTReadDescriptorRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothGATTReadDescriptorRequest message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothGATTReadDescriptorRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothGATTReadDescriptorRequest} BluetoothGATTReadDescriptorRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTReadDescriptorRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothGATTReadDescriptorRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.address = reader.uint64();
                    break;
                }
            case 2: {
                    message.handle = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothGATTReadDescriptorRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothGATTReadDescriptorRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothGATTReadDescriptorRequest} BluetoothGATTReadDescriptorRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTReadDescriptorRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothGATTReadDescriptorRequest message.
     * @function verify
     * @memberof BluetoothGATTReadDescriptorRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothGATTReadDescriptorRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.address != null && message.hasOwnProperty("address"))
            if (!$util.isInteger(message.address) && !(message.address && $util.isInteger(message.address.low) && $util.isInteger(message.address.high)))
                return "address: integer|Long expected";
        if (message.handle != null && message.hasOwnProperty("handle"))
            if (!$util.isInteger(message.handle))
                return "handle: integer expected";
        return null;
    };

    /**
     * Creates a BluetoothGATTReadDescriptorRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothGATTReadDescriptorRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothGATTReadDescriptorRequest} BluetoothGATTReadDescriptorRequest
     */
    BluetoothGATTReadDescriptorRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothGATTReadDescriptorRequest)
            return object;
        var message = new $root.BluetoothGATTReadDescriptorRequest();
        if (object.address != null)
            if ($util.Long)
                (message.address = $util.Long.fromValue(object.address)).unsigned = true;
            else if (typeof object.address === "string")
                message.address = parseInt(object.address, 10);
            else if (typeof object.address === "number")
                message.address = object.address;
            else if (typeof object.address === "object")
                message.address = new $util.LongBits(object.address.low >>> 0, object.address.high >>> 0).toNumber(true);
        if (object.handle != null)
            message.handle = object.handle >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a BluetoothGATTReadDescriptorRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothGATTReadDescriptorRequest
     * @static
     * @param {BluetoothGATTReadDescriptorRequest} message BluetoothGATTReadDescriptorRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothGATTReadDescriptorRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.address = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.address = options.longs === String ? "0" : 0;
            object.handle = 0;
        }
        if (message.address != null && message.hasOwnProperty("address"))
            if (typeof message.address === "number")
                object.address = options.longs === String ? String(message.address) : message.address;
            else
                object.address = options.longs === String ? $util.Long.prototype.toString.call(message.address) : options.longs === Number ? new $util.LongBits(message.address.low >>> 0, message.address.high >>> 0).toNumber(true) : message.address;
        if (message.handle != null && message.hasOwnProperty("handle"))
            object.handle = message.handle;
        return object;
    };

    /**
     * Converts this BluetoothGATTReadDescriptorRequest to JSON.
     * @function toJSON
     * @memberof BluetoothGATTReadDescriptorRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothGATTReadDescriptorRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothGATTReadDescriptorRequest
     * @function getTypeUrl
     * @memberof BluetoothGATTReadDescriptorRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothGATTReadDescriptorRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothGATTReadDescriptorRequest";
    };

    return BluetoothGATTReadDescriptorRequest;
})();

$root.BluetoothGATTWriteDescriptorRequest = (function() {

    /**
     * Properties of a BluetoothGATTWriteDescriptorRequest.
     * @exports IBluetoothGATTWriteDescriptorRequest
     * @interface IBluetoothGATTWriteDescriptorRequest
     * @property {number|Long|null} [address] BluetoothGATTWriteDescriptorRequest address
     * @property {number|null} [handle] BluetoothGATTWriteDescriptorRequest handle
     * @property {Uint8Array|null} [data] BluetoothGATTWriteDescriptorRequest data
     */

    /**
     * Constructs a new BluetoothGATTWriteDescriptorRequest.
     * @exports BluetoothGATTWriteDescriptorRequest
     * @classdesc Represents a BluetoothGATTWriteDescriptorRequest.
     * @implements IBluetoothGATTWriteDescriptorRequest
     * @constructor
     * @param {IBluetoothGATTWriteDescriptorRequest=} [properties] Properties to set
     */
    function BluetoothGATTWriteDescriptorRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothGATTWriteDescriptorRequest address.
     * @member {number|Long} address
     * @memberof BluetoothGATTWriteDescriptorRequest
     * @instance
     */
    BluetoothGATTWriteDescriptorRequest.prototype.address = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * BluetoothGATTWriteDescriptorRequest handle.
     * @member {number} handle
     * @memberof BluetoothGATTWriteDescriptorRequest
     * @instance
     */
    BluetoothGATTWriteDescriptorRequest.prototype.handle = 0;

    /**
     * BluetoothGATTWriteDescriptorRequest data.
     * @member {Uint8Array} data
     * @memberof BluetoothGATTWriteDescriptorRequest
     * @instance
     */
    BluetoothGATTWriteDescriptorRequest.prototype.data = $util.newBuffer([]);

    /**
     * Creates a new BluetoothGATTWriteDescriptorRequest instance using the specified properties.
     * @function create
     * @memberof BluetoothGATTWriteDescriptorRequest
     * @static
     * @param {IBluetoothGATTWriteDescriptorRequest=} [properties] Properties to set
     * @returns {BluetoothGATTWriteDescriptorRequest} BluetoothGATTWriteDescriptorRequest instance
     */
    BluetoothGATTWriteDescriptorRequest.create = function create(properties) {
        return new BluetoothGATTWriteDescriptorRequest(properties);
    };

    /**
     * Encodes the specified BluetoothGATTWriteDescriptorRequest message. Does not implicitly {@link BluetoothGATTWriteDescriptorRequest.verify|verify} messages.
     * @function encode
     * @memberof BluetoothGATTWriteDescriptorRequest
     * @static
     * @param {IBluetoothGATTWriteDescriptorRequest} message BluetoothGATTWriteDescriptorRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTWriteDescriptorRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.address);
        if (message.handle != null && Object.hasOwnProperty.call(message, "handle"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.handle);
        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);
        return writer;
    };

    /**
     * Encodes the specified BluetoothGATTWriteDescriptorRequest message, length delimited. Does not implicitly {@link BluetoothGATTWriteDescriptorRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothGATTWriteDescriptorRequest
     * @static
     * @param {IBluetoothGATTWriteDescriptorRequest} message BluetoothGATTWriteDescriptorRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTWriteDescriptorRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothGATTWriteDescriptorRequest message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothGATTWriteDescriptorRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothGATTWriteDescriptorRequest} BluetoothGATTWriteDescriptorRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTWriteDescriptorRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothGATTWriteDescriptorRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.address = reader.uint64();
                    break;
                }
            case 2: {
                    message.handle = reader.uint32();
                    break;
                }
            case 3: {
                    message.data = reader.bytes();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothGATTWriteDescriptorRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothGATTWriteDescriptorRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothGATTWriteDescriptorRequest} BluetoothGATTWriteDescriptorRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTWriteDescriptorRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothGATTWriteDescriptorRequest message.
     * @function verify
     * @memberof BluetoothGATTWriteDescriptorRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothGATTWriteDescriptorRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.address != null && message.hasOwnProperty("address"))
            if (!$util.isInteger(message.address) && !(message.address && $util.isInteger(message.address.low) && $util.isInteger(message.address.high)))
                return "address: integer|Long expected";
        if (message.handle != null && message.hasOwnProperty("handle"))
            if (!$util.isInteger(message.handle))
                return "handle: integer expected";
        if (message.data != null && message.hasOwnProperty("data"))
            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                return "data: buffer expected";
        return null;
    };

    /**
     * Creates a BluetoothGATTWriteDescriptorRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothGATTWriteDescriptorRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothGATTWriteDescriptorRequest} BluetoothGATTWriteDescriptorRequest
     */
    BluetoothGATTWriteDescriptorRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothGATTWriteDescriptorRequest)
            return object;
        var message = new $root.BluetoothGATTWriteDescriptorRequest();
        if (object.address != null)
            if ($util.Long)
                (message.address = $util.Long.fromValue(object.address)).unsigned = true;
            else if (typeof object.address === "string")
                message.address = parseInt(object.address, 10);
            else if (typeof object.address === "number")
                message.address = object.address;
            else if (typeof object.address === "object")
                message.address = new $util.LongBits(object.address.low >>> 0, object.address.high >>> 0).toNumber(true);
        if (object.handle != null)
            message.handle = object.handle >>> 0;
        if (object.data != null)
            if (typeof object.data === "string")
                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
            else if (object.data.length >= 0)
                message.data = object.data;
        return message;
    };

    /**
     * Creates a plain object from a BluetoothGATTWriteDescriptorRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothGATTWriteDescriptorRequest
     * @static
     * @param {BluetoothGATTWriteDescriptorRequest} message BluetoothGATTWriteDescriptorRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothGATTWriteDescriptorRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.address = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.address = options.longs === String ? "0" : 0;
            object.handle = 0;
            if (options.bytes === String)
                object.data = "";
            else {
                object.data = [];
                if (options.bytes !== Array)
                    object.data = $util.newBuffer(object.data);
            }
        }
        if (message.address != null && message.hasOwnProperty("address"))
            if (typeof message.address === "number")
                object.address = options.longs === String ? String(message.address) : message.address;
            else
                object.address = options.longs === String ? $util.Long.prototype.toString.call(message.address) : options.longs === Number ? new $util.LongBits(message.address.low >>> 0, message.address.high >>> 0).toNumber(true) : message.address;
        if (message.handle != null && message.hasOwnProperty("handle"))
            object.handle = message.handle;
        if (message.data != null && message.hasOwnProperty("data"))
            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
        return object;
    };

    /**
     * Converts this BluetoothGATTWriteDescriptorRequest to JSON.
     * @function toJSON
     * @memberof BluetoothGATTWriteDescriptorRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothGATTWriteDescriptorRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothGATTWriteDescriptorRequest
     * @function getTypeUrl
     * @memberof BluetoothGATTWriteDescriptorRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothGATTWriteDescriptorRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothGATTWriteDescriptorRequest";
    };

    return BluetoothGATTWriteDescriptorRequest;
})();

$root.BluetoothGATTNotifyRequest = (function() {

    /**
     * Properties of a BluetoothGATTNotifyRequest.
     * @exports IBluetoothGATTNotifyRequest
     * @interface IBluetoothGATTNotifyRequest
     * @property {number|Long|null} [address] BluetoothGATTNotifyRequest address
     * @property {number|null} [handle] BluetoothGATTNotifyRequest handle
     * @property {boolean|null} [enable] BluetoothGATTNotifyRequest enable
     */

    /**
     * Constructs a new BluetoothGATTNotifyRequest.
     * @exports BluetoothGATTNotifyRequest
     * @classdesc Represents a BluetoothGATTNotifyRequest.
     * @implements IBluetoothGATTNotifyRequest
     * @constructor
     * @param {IBluetoothGATTNotifyRequest=} [properties] Properties to set
     */
    function BluetoothGATTNotifyRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothGATTNotifyRequest address.
     * @member {number|Long} address
     * @memberof BluetoothGATTNotifyRequest
     * @instance
     */
    BluetoothGATTNotifyRequest.prototype.address = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * BluetoothGATTNotifyRequest handle.
     * @member {number} handle
     * @memberof BluetoothGATTNotifyRequest
     * @instance
     */
    BluetoothGATTNotifyRequest.prototype.handle = 0;

    /**
     * BluetoothGATTNotifyRequest enable.
     * @member {boolean} enable
     * @memberof BluetoothGATTNotifyRequest
     * @instance
     */
    BluetoothGATTNotifyRequest.prototype.enable = false;

    /**
     * Creates a new BluetoothGATTNotifyRequest instance using the specified properties.
     * @function create
     * @memberof BluetoothGATTNotifyRequest
     * @static
     * @param {IBluetoothGATTNotifyRequest=} [properties] Properties to set
     * @returns {BluetoothGATTNotifyRequest} BluetoothGATTNotifyRequest instance
     */
    BluetoothGATTNotifyRequest.create = function create(properties) {
        return new BluetoothGATTNotifyRequest(properties);
    };

    /**
     * Encodes the specified BluetoothGATTNotifyRequest message. Does not implicitly {@link BluetoothGATTNotifyRequest.verify|verify} messages.
     * @function encode
     * @memberof BluetoothGATTNotifyRequest
     * @static
     * @param {IBluetoothGATTNotifyRequest} message BluetoothGATTNotifyRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTNotifyRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.address);
        if (message.handle != null && Object.hasOwnProperty.call(message, "handle"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.handle);
        if (message.enable != null && Object.hasOwnProperty.call(message, "enable"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.enable);
        return writer;
    };

    /**
     * Encodes the specified BluetoothGATTNotifyRequest message, length delimited. Does not implicitly {@link BluetoothGATTNotifyRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothGATTNotifyRequest
     * @static
     * @param {IBluetoothGATTNotifyRequest} message BluetoothGATTNotifyRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTNotifyRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothGATTNotifyRequest message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothGATTNotifyRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothGATTNotifyRequest} BluetoothGATTNotifyRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTNotifyRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothGATTNotifyRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.address = reader.uint64();
                    break;
                }
            case 2: {
                    message.handle = reader.uint32();
                    break;
                }
            case 3: {
                    message.enable = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothGATTNotifyRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothGATTNotifyRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothGATTNotifyRequest} BluetoothGATTNotifyRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTNotifyRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothGATTNotifyRequest message.
     * @function verify
     * @memberof BluetoothGATTNotifyRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothGATTNotifyRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.address != null && message.hasOwnProperty("address"))
            if (!$util.isInteger(message.address) && !(message.address && $util.isInteger(message.address.low) && $util.isInteger(message.address.high)))
                return "address: integer|Long expected";
        if (message.handle != null && message.hasOwnProperty("handle"))
            if (!$util.isInteger(message.handle))
                return "handle: integer expected";
        if (message.enable != null && message.hasOwnProperty("enable"))
            if (typeof message.enable !== "boolean")
                return "enable: boolean expected";
        return null;
    };

    /**
     * Creates a BluetoothGATTNotifyRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothGATTNotifyRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothGATTNotifyRequest} BluetoothGATTNotifyRequest
     */
    BluetoothGATTNotifyRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothGATTNotifyRequest)
            return object;
        var message = new $root.BluetoothGATTNotifyRequest();
        if (object.address != null)
            if ($util.Long)
                (message.address = $util.Long.fromValue(object.address)).unsigned = true;
            else if (typeof object.address === "string")
                message.address = parseInt(object.address, 10);
            else if (typeof object.address === "number")
                message.address = object.address;
            else if (typeof object.address === "object")
                message.address = new $util.LongBits(object.address.low >>> 0, object.address.high >>> 0).toNumber(true);
        if (object.handle != null)
            message.handle = object.handle >>> 0;
        if (object.enable != null)
            message.enable = Boolean(object.enable);
        return message;
    };

    /**
     * Creates a plain object from a BluetoothGATTNotifyRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothGATTNotifyRequest
     * @static
     * @param {BluetoothGATTNotifyRequest} message BluetoothGATTNotifyRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothGATTNotifyRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.address = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.address = options.longs === String ? "0" : 0;
            object.handle = 0;
            object.enable = false;
        }
        if (message.address != null && message.hasOwnProperty("address"))
            if (typeof message.address === "number")
                object.address = options.longs === String ? String(message.address) : message.address;
            else
                object.address = options.longs === String ? $util.Long.prototype.toString.call(message.address) : options.longs === Number ? new $util.LongBits(message.address.low >>> 0, message.address.high >>> 0).toNumber(true) : message.address;
        if (message.handle != null && message.hasOwnProperty("handle"))
            object.handle = message.handle;
        if (message.enable != null && message.hasOwnProperty("enable"))
            object.enable = message.enable;
        return object;
    };

    /**
     * Converts this BluetoothGATTNotifyRequest to JSON.
     * @function toJSON
     * @memberof BluetoothGATTNotifyRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothGATTNotifyRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothGATTNotifyRequest
     * @function getTypeUrl
     * @memberof BluetoothGATTNotifyRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothGATTNotifyRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothGATTNotifyRequest";
    };

    return BluetoothGATTNotifyRequest;
})();

$root.BluetoothGATTNotifyDataResponse = (function() {

    /**
     * Properties of a BluetoothGATTNotifyDataResponse.
     * @exports IBluetoothGATTNotifyDataResponse
     * @interface IBluetoothGATTNotifyDataResponse
     * @property {number|Long|null} [address] BluetoothGATTNotifyDataResponse address
     * @property {number|null} [handle] BluetoothGATTNotifyDataResponse handle
     * @property {Uint8Array|null} [data] BluetoothGATTNotifyDataResponse data
     */

    /**
     * Constructs a new BluetoothGATTNotifyDataResponse.
     * @exports BluetoothGATTNotifyDataResponse
     * @classdesc Represents a BluetoothGATTNotifyDataResponse.
     * @implements IBluetoothGATTNotifyDataResponse
     * @constructor
     * @param {IBluetoothGATTNotifyDataResponse=} [properties] Properties to set
     */
    function BluetoothGATTNotifyDataResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothGATTNotifyDataResponse address.
     * @member {number|Long} address
     * @memberof BluetoothGATTNotifyDataResponse
     * @instance
     */
    BluetoothGATTNotifyDataResponse.prototype.address = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * BluetoothGATTNotifyDataResponse handle.
     * @member {number} handle
     * @memberof BluetoothGATTNotifyDataResponse
     * @instance
     */
    BluetoothGATTNotifyDataResponse.prototype.handle = 0;

    /**
     * BluetoothGATTNotifyDataResponse data.
     * @member {Uint8Array} data
     * @memberof BluetoothGATTNotifyDataResponse
     * @instance
     */
    BluetoothGATTNotifyDataResponse.prototype.data = $util.newBuffer([]);

    /**
     * Creates a new BluetoothGATTNotifyDataResponse instance using the specified properties.
     * @function create
     * @memberof BluetoothGATTNotifyDataResponse
     * @static
     * @param {IBluetoothGATTNotifyDataResponse=} [properties] Properties to set
     * @returns {BluetoothGATTNotifyDataResponse} BluetoothGATTNotifyDataResponse instance
     */
    BluetoothGATTNotifyDataResponse.create = function create(properties) {
        return new BluetoothGATTNotifyDataResponse(properties);
    };

    /**
     * Encodes the specified BluetoothGATTNotifyDataResponse message. Does not implicitly {@link BluetoothGATTNotifyDataResponse.verify|verify} messages.
     * @function encode
     * @memberof BluetoothGATTNotifyDataResponse
     * @static
     * @param {IBluetoothGATTNotifyDataResponse} message BluetoothGATTNotifyDataResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTNotifyDataResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.address);
        if (message.handle != null && Object.hasOwnProperty.call(message, "handle"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.handle);
        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);
        return writer;
    };

    /**
     * Encodes the specified BluetoothGATTNotifyDataResponse message, length delimited. Does not implicitly {@link BluetoothGATTNotifyDataResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothGATTNotifyDataResponse
     * @static
     * @param {IBluetoothGATTNotifyDataResponse} message BluetoothGATTNotifyDataResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTNotifyDataResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothGATTNotifyDataResponse message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothGATTNotifyDataResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothGATTNotifyDataResponse} BluetoothGATTNotifyDataResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTNotifyDataResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothGATTNotifyDataResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.address = reader.uint64();
                    break;
                }
            case 2: {
                    message.handle = reader.uint32();
                    break;
                }
            case 3: {
                    message.data = reader.bytes();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothGATTNotifyDataResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothGATTNotifyDataResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothGATTNotifyDataResponse} BluetoothGATTNotifyDataResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTNotifyDataResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothGATTNotifyDataResponse message.
     * @function verify
     * @memberof BluetoothGATTNotifyDataResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothGATTNotifyDataResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.address != null && message.hasOwnProperty("address"))
            if (!$util.isInteger(message.address) && !(message.address && $util.isInteger(message.address.low) && $util.isInteger(message.address.high)))
                return "address: integer|Long expected";
        if (message.handle != null && message.hasOwnProperty("handle"))
            if (!$util.isInteger(message.handle))
                return "handle: integer expected";
        if (message.data != null && message.hasOwnProperty("data"))
            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                return "data: buffer expected";
        return null;
    };

    /**
     * Creates a BluetoothGATTNotifyDataResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothGATTNotifyDataResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothGATTNotifyDataResponse} BluetoothGATTNotifyDataResponse
     */
    BluetoothGATTNotifyDataResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothGATTNotifyDataResponse)
            return object;
        var message = new $root.BluetoothGATTNotifyDataResponse();
        if (object.address != null)
            if ($util.Long)
                (message.address = $util.Long.fromValue(object.address)).unsigned = true;
            else if (typeof object.address === "string")
                message.address = parseInt(object.address, 10);
            else if (typeof object.address === "number")
                message.address = object.address;
            else if (typeof object.address === "object")
                message.address = new $util.LongBits(object.address.low >>> 0, object.address.high >>> 0).toNumber(true);
        if (object.handle != null)
            message.handle = object.handle >>> 0;
        if (object.data != null)
            if (typeof object.data === "string")
                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
            else if (object.data.length >= 0)
                message.data = object.data;
        return message;
    };

    /**
     * Creates a plain object from a BluetoothGATTNotifyDataResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothGATTNotifyDataResponse
     * @static
     * @param {BluetoothGATTNotifyDataResponse} message BluetoothGATTNotifyDataResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothGATTNotifyDataResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.address = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.address = options.longs === String ? "0" : 0;
            object.handle = 0;
            if (options.bytes === String)
                object.data = "";
            else {
                object.data = [];
                if (options.bytes !== Array)
                    object.data = $util.newBuffer(object.data);
            }
        }
        if (message.address != null && message.hasOwnProperty("address"))
            if (typeof message.address === "number")
                object.address = options.longs === String ? String(message.address) : message.address;
            else
                object.address = options.longs === String ? $util.Long.prototype.toString.call(message.address) : options.longs === Number ? new $util.LongBits(message.address.low >>> 0, message.address.high >>> 0).toNumber(true) : message.address;
        if (message.handle != null && message.hasOwnProperty("handle"))
            object.handle = message.handle;
        if (message.data != null && message.hasOwnProperty("data"))
            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
        return object;
    };

    /**
     * Converts this BluetoothGATTNotifyDataResponse to JSON.
     * @function toJSON
     * @memberof BluetoothGATTNotifyDataResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothGATTNotifyDataResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothGATTNotifyDataResponse
     * @function getTypeUrl
     * @memberof BluetoothGATTNotifyDataResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothGATTNotifyDataResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothGATTNotifyDataResponse";
    };

    return BluetoothGATTNotifyDataResponse;
})();

$root.SubscribeBluetoothConnectionsFreeRequest = (function() {

    /**
     * Properties of a SubscribeBluetoothConnectionsFreeRequest.
     * @exports ISubscribeBluetoothConnectionsFreeRequest
     * @interface ISubscribeBluetoothConnectionsFreeRequest
     */

    /**
     * Constructs a new SubscribeBluetoothConnectionsFreeRequest.
     * @exports SubscribeBluetoothConnectionsFreeRequest
     * @classdesc Represents a SubscribeBluetoothConnectionsFreeRequest.
     * @implements ISubscribeBluetoothConnectionsFreeRequest
     * @constructor
     * @param {ISubscribeBluetoothConnectionsFreeRequest=} [properties] Properties to set
     */
    function SubscribeBluetoothConnectionsFreeRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new SubscribeBluetoothConnectionsFreeRequest instance using the specified properties.
     * @function create
     * @memberof SubscribeBluetoothConnectionsFreeRequest
     * @static
     * @param {ISubscribeBluetoothConnectionsFreeRequest=} [properties] Properties to set
     * @returns {SubscribeBluetoothConnectionsFreeRequest} SubscribeBluetoothConnectionsFreeRequest instance
     */
    SubscribeBluetoothConnectionsFreeRequest.create = function create(properties) {
        return new SubscribeBluetoothConnectionsFreeRequest(properties);
    };

    /**
     * Encodes the specified SubscribeBluetoothConnectionsFreeRequest message. Does not implicitly {@link SubscribeBluetoothConnectionsFreeRequest.verify|verify} messages.
     * @function encode
     * @memberof SubscribeBluetoothConnectionsFreeRequest
     * @static
     * @param {ISubscribeBluetoothConnectionsFreeRequest} message SubscribeBluetoothConnectionsFreeRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SubscribeBluetoothConnectionsFreeRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified SubscribeBluetoothConnectionsFreeRequest message, length delimited. Does not implicitly {@link SubscribeBluetoothConnectionsFreeRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SubscribeBluetoothConnectionsFreeRequest
     * @static
     * @param {ISubscribeBluetoothConnectionsFreeRequest} message SubscribeBluetoothConnectionsFreeRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SubscribeBluetoothConnectionsFreeRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SubscribeBluetoothConnectionsFreeRequest message from the specified reader or buffer.
     * @function decode
     * @memberof SubscribeBluetoothConnectionsFreeRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SubscribeBluetoothConnectionsFreeRequest} SubscribeBluetoothConnectionsFreeRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SubscribeBluetoothConnectionsFreeRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SubscribeBluetoothConnectionsFreeRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SubscribeBluetoothConnectionsFreeRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SubscribeBluetoothConnectionsFreeRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SubscribeBluetoothConnectionsFreeRequest} SubscribeBluetoothConnectionsFreeRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SubscribeBluetoothConnectionsFreeRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SubscribeBluetoothConnectionsFreeRequest message.
     * @function verify
     * @memberof SubscribeBluetoothConnectionsFreeRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SubscribeBluetoothConnectionsFreeRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a SubscribeBluetoothConnectionsFreeRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SubscribeBluetoothConnectionsFreeRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SubscribeBluetoothConnectionsFreeRequest} SubscribeBluetoothConnectionsFreeRequest
     */
    SubscribeBluetoothConnectionsFreeRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.SubscribeBluetoothConnectionsFreeRequest)
            return object;
        return new $root.SubscribeBluetoothConnectionsFreeRequest();
    };

    /**
     * Creates a plain object from a SubscribeBluetoothConnectionsFreeRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SubscribeBluetoothConnectionsFreeRequest
     * @static
     * @param {SubscribeBluetoothConnectionsFreeRequest} message SubscribeBluetoothConnectionsFreeRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SubscribeBluetoothConnectionsFreeRequest.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this SubscribeBluetoothConnectionsFreeRequest to JSON.
     * @function toJSON
     * @memberof SubscribeBluetoothConnectionsFreeRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SubscribeBluetoothConnectionsFreeRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SubscribeBluetoothConnectionsFreeRequest
     * @function getTypeUrl
     * @memberof SubscribeBluetoothConnectionsFreeRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SubscribeBluetoothConnectionsFreeRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SubscribeBluetoothConnectionsFreeRequest";
    };

    return SubscribeBluetoothConnectionsFreeRequest;
})();

$root.BluetoothConnectionsFreeResponse = (function() {

    /**
     * Properties of a BluetoothConnectionsFreeResponse.
     * @exports IBluetoothConnectionsFreeResponse
     * @interface IBluetoothConnectionsFreeResponse
     * @property {number|null} [free] BluetoothConnectionsFreeResponse free
     * @property {number|null} [limit] BluetoothConnectionsFreeResponse limit
     * @property {Array.<number|Long>|null} [allocated] BluetoothConnectionsFreeResponse allocated
     */

    /**
     * Constructs a new BluetoothConnectionsFreeResponse.
     * @exports BluetoothConnectionsFreeResponse
     * @classdesc Represents a BluetoothConnectionsFreeResponse.
     * @implements IBluetoothConnectionsFreeResponse
     * @constructor
     * @param {IBluetoothConnectionsFreeResponse=} [properties] Properties to set
     */
    function BluetoothConnectionsFreeResponse(properties) {
        this.allocated = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothConnectionsFreeResponse free.
     * @member {number} free
     * @memberof BluetoothConnectionsFreeResponse
     * @instance
     */
    BluetoothConnectionsFreeResponse.prototype.free = 0;

    /**
     * BluetoothConnectionsFreeResponse limit.
     * @member {number} limit
     * @memberof BluetoothConnectionsFreeResponse
     * @instance
     */
    BluetoothConnectionsFreeResponse.prototype.limit = 0;

    /**
     * BluetoothConnectionsFreeResponse allocated.
     * @member {Array.<number|Long>} allocated
     * @memberof BluetoothConnectionsFreeResponse
     * @instance
     */
    BluetoothConnectionsFreeResponse.prototype.allocated = $util.emptyArray;

    /**
     * Creates a new BluetoothConnectionsFreeResponse instance using the specified properties.
     * @function create
     * @memberof BluetoothConnectionsFreeResponse
     * @static
     * @param {IBluetoothConnectionsFreeResponse=} [properties] Properties to set
     * @returns {BluetoothConnectionsFreeResponse} BluetoothConnectionsFreeResponse instance
     */
    BluetoothConnectionsFreeResponse.create = function create(properties) {
        return new BluetoothConnectionsFreeResponse(properties);
    };

    /**
     * Encodes the specified BluetoothConnectionsFreeResponse message. Does not implicitly {@link BluetoothConnectionsFreeResponse.verify|verify} messages.
     * @function encode
     * @memberof BluetoothConnectionsFreeResponse
     * @static
     * @param {IBluetoothConnectionsFreeResponse} message BluetoothConnectionsFreeResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothConnectionsFreeResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.free != null && Object.hasOwnProperty.call(message, "free"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.free);
        if (message.limit != null && Object.hasOwnProperty.call(message, "limit"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.limit);
        if (message.allocated != null && message.allocated.length) {
            writer.uint32(/* id 3, wireType 2 =*/26).fork();
            for (var i = 0; i < message.allocated.length; ++i)
                writer.uint64(message.allocated[i]);
            writer.ldelim();
        }
        return writer;
    };

    /**
     * Encodes the specified BluetoothConnectionsFreeResponse message, length delimited. Does not implicitly {@link BluetoothConnectionsFreeResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothConnectionsFreeResponse
     * @static
     * @param {IBluetoothConnectionsFreeResponse} message BluetoothConnectionsFreeResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothConnectionsFreeResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothConnectionsFreeResponse message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothConnectionsFreeResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothConnectionsFreeResponse} BluetoothConnectionsFreeResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothConnectionsFreeResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothConnectionsFreeResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.free = reader.uint32();
                    break;
                }
            case 2: {
                    message.limit = reader.uint32();
                    break;
                }
            case 3: {
                    if (!(message.allocated && message.allocated.length))
                        message.allocated = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.allocated.push(reader.uint64());
                    } else
                        message.allocated.push(reader.uint64());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothConnectionsFreeResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothConnectionsFreeResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothConnectionsFreeResponse} BluetoothConnectionsFreeResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothConnectionsFreeResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothConnectionsFreeResponse message.
     * @function verify
     * @memberof BluetoothConnectionsFreeResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothConnectionsFreeResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.free != null && message.hasOwnProperty("free"))
            if (!$util.isInteger(message.free))
                return "free: integer expected";
        if (message.limit != null && message.hasOwnProperty("limit"))
            if (!$util.isInteger(message.limit))
                return "limit: integer expected";
        if (message.allocated != null && message.hasOwnProperty("allocated")) {
            if (!Array.isArray(message.allocated))
                return "allocated: array expected";
            for (var i = 0; i < message.allocated.length; ++i)
                if (!$util.isInteger(message.allocated[i]) && !(message.allocated[i] && $util.isInteger(message.allocated[i].low) && $util.isInteger(message.allocated[i].high)))
                    return "allocated: integer|Long[] expected";
        }
        return null;
    };

    /**
     * Creates a BluetoothConnectionsFreeResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothConnectionsFreeResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothConnectionsFreeResponse} BluetoothConnectionsFreeResponse
     */
    BluetoothConnectionsFreeResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothConnectionsFreeResponse)
            return object;
        var message = new $root.BluetoothConnectionsFreeResponse();
        if (object.free != null)
            message.free = object.free >>> 0;
        if (object.limit != null)
            message.limit = object.limit >>> 0;
        if (object.allocated) {
            if (!Array.isArray(object.allocated))
                throw TypeError(".BluetoothConnectionsFreeResponse.allocated: array expected");
            message.allocated = [];
            for (var i = 0; i < object.allocated.length; ++i)
                if ($util.Long)
                    (message.allocated[i] = $util.Long.fromValue(object.allocated[i])).unsigned = true;
                else if (typeof object.allocated[i] === "string")
                    message.allocated[i] = parseInt(object.allocated[i], 10);
                else if (typeof object.allocated[i] === "number")
                    message.allocated[i] = object.allocated[i];
                else if (typeof object.allocated[i] === "object")
                    message.allocated[i] = new $util.LongBits(object.allocated[i].low >>> 0, object.allocated[i].high >>> 0).toNumber(true);
        }
        return message;
    };

    /**
     * Creates a plain object from a BluetoothConnectionsFreeResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothConnectionsFreeResponse
     * @static
     * @param {BluetoothConnectionsFreeResponse} message BluetoothConnectionsFreeResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothConnectionsFreeResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.allocated = [];
        if (options.defaults) {
            object.free = 0;
            object.limit = 0;
        }
        if (message.free != null && message.hasOwnProperty("free"))
            object.free = message.free;
        if (message.limit != null && message.hasOwnProperty("limit"))
            object.limit = message.limit;
        if (message.allocated && message.allocated.length) {
            object.allocated = [];
            for (var j = 0; j < message.allocated.length; ++j)
                if (typeof message.allocated[j] === "number")
                    object.allocated[j] = options.longs === String ? String(message.allocated[j]) : message.allocated[j];
                else
                    object.allocated[j] = options.longs === String ? $util.Long.prototype.toString.call(message.allocated[j]) : options.longs === Number ? new $util.LongBits(message.allocated[j].low >>> 0, message.allocated[j].high >>> 0).toNumber(true) : message.allocated[j];
        }
        return object;
    };

    /**
     * Converts this BluetoothConnectionsFreeResponse to JSON.
     * @function toJSON
     * @memberof BluetoothConnectionsFreeResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothConnectionsFreeResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothConnectionsFreeResponse
     * @function getTypeUrl
     * @memberof BluetoothConnectionsFreeResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothConnectionsFreeResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothConnectionsFreeResponse";
    };

    return BluetoothConnectionsFreeResponse;
})();

$root.BluetoothGATTErrorResponse = (function() {

    /**
     * Properties of a BluetoothGATTErrorResponse.
     * @exports IBluetoothGATTErrorResponse
     * @interface IBluetoothGATTErrorResponse
     * @property {number|Long|null} [address] BluetoothGATTErrorResponse address
     * @property {number|null} [handle] BluetoothGATTErrorResponse handle
     * @property {number|null} [error] BluetoothGATTErrorResponse error
     */

    /**
     * Constructs a new BluetoothGATTErrorResponse.
     * @exports BluetoothGATTErrorResponse
     * @classdesc Represents a BluetoothGATTErrorResponse.
     * @implements IBluetoothGATTErrorResponse
     * @constructor
     * @param {IBluetoothGATTErrorResponse=} [properties] Properties to set
     */
    function BluetoothGATTErrorResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothGATTErrorResponse address.
     * @member {number|Long} address
     * @memberof BluetoothGATTErrorResponse
     * @instance
     */
    BluetoothGATTErrorResponse.prototype.address = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * BluetoothGATTErrorResponse handle.
     * @member {number} handle
     * @memberof BluetoothGATTErrorResponse
     * @instance
     */
    BluetoothGATTErrorResponse.prototype.handle = 0;

    /**
     * BluetoothGATTErrorResponse error.
     * @member {number} error
     * @memberof BluetoothGATTErrorResponse
     * @instance
     */
    BluetoothGATTErrorResponse.prototype.error = 0;

    /**
     * Creates a new BluetoothGATTErrorResponse instance using the specified properties.
     * @function create
     * @memberof BluetoothGATTErrorResponse
     * @static
     * @param {IBluetoothGATTErrorResponse=} [properties] Properties to set
     * @returns {BluetoothGATTErrorResponse} BluetoothGATTErrorResponse instance
     */
    BluetoothGATTErrorResponse.create = function create(properties) {
        return new BluetoothGATTErrorResponse(properties);
    };

    /**
     * Encodes the specified BluetoothGATTErrorResponse message. Does not implicitly {@link BluetoothGATTErrorResponse.verify|verify} messages.
     * @function encode
     * @memberof BluetoothGATTErrorResponse
     * @static
     * @param {IBluetoothGATTErrorResponse} message BluetoothGATTErrorResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTErrorResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.address);
        if (message.handle != null && Object.hasOwnProperty.call(message, "handle"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.handle);
        if (message.error != null && Object.hasOwnProperty.call(message, "error"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.error);
        return writer;
    };

    /**
     * Encodes the specified BluetoothGATTErrorResponse message, length delimited. Does not implicitly {@link BluetoothGATTErrorResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothGATTErrorResponse
     * @static
     * @param {IBluetoothGATTErrorResponse} message BluetoothGATTErrorResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTErrorResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothGATTErrorResponse message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothGATTErrorResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothGATTErrorResponse} BluetoothGATTErrorResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTErrorResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothGATTErrorResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.address = reader.uint64();
                    break;
                }
            case 2: {
                    message.handle = reader.uint32();
                    break;
                }
            case 3: {
                    message.error = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothGATTErrorResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothGATTErrorResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothGATTErrorResponse} BluetoothGATTErrorResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTErrorResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothGATTErrorResponse message.
     * @function verify
     * @memberof BluetoothGATTErrorResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothGATTErrorResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.address != null && message.hasOwnProperty("address"))
            if (!$util.isInteger(message.address) && !(message.address && $util.isInteger(message.address.low) && $util.isInteger(message.address.high)))
                return "address: integer|Long expected";
        if (message.handle != null && message.hasOwnProperty("handle"))
            if (!$util.isInteger(message.handle))
                return "handle: integer expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };

    /**
     * Creates a BluetoothGATTErrorResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothGATTErrorResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothGATTErrorResponse} BluetoothGATTErrorResponse
     */
    BluetoothGATTErrorResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothGATTErrorResponse)
            return object;
        var message = new $root.BluetoothGATTErrorResponse();
        if (object.address != null)
            if ($util.Long)
                (message.address = $util.Long.fromValue(object.address)).unsigned = true;
            else if (typeof object.address === "string")
                message.address = parseInt(object.address, 10);
            else if (typeof object.address === "number")
                message.address = object.address;
            else if (typeof object.address === "object")
                message.address = new $util.LongBits(object.address.low >>> 0, object.address.high >>> 0).toNumber(true);
        if (object.handle != null)
            message.handle = object.handle >>> 0;
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };

    /**
     * Creates a plain object from a BluetoothGATTErrorResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothGATTErrorResponse
     * @static
     * @param {BluetoothGATTErrorResponse} message BluetoothGATTErrorResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothGATTErrorResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.address = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.address = options.longs === String ? "0" : 0;
            object.handle = 0;
            object.error = 0;
        }
        if (message.address != null && message.hasOwnProperty("address"))
            if (typeof message.address === "number")
                object.address = options.longs === String ? String(message.address) : message.address;
            else
                object.address = options.longs === String ? $util.Long.prototype.toString.call(message.address) : options.longs === Number ? new $util.LongBits(message.address.low >>> 0, message.address.high >>> 0).toNumber(true) : message.address;
        if (message.handle != null && message.hasOwnProperty("handle"))
            object.handle = message.handle;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };

    /**
     * Converts this BluetoothGATTErrorResponse to JSON.
     * @function toJSON
     * @memberof BluetoothGATTErrorResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothGATTErrorResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothGATTErrorResponse
     * @function getTypeUrl
     * @memberof BluetoothGATTErrorResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothGATTErrorResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothGATTErrorResponse";
    };

    return BluetoothGATTErrorResponse;
})();

$root.BluetoothGATTWriteResponse = (function() {

    /**
     * Properties of a BluetoothGATTWriteResponse.
     * @exports IBluetoothGATTWriteResponse
     * @interface IBluetoothGATTWriteResponse
     * @property {number|Long|null} [address] BluetoothGATTWriteResponse address
     * @property {number|null} [handle] BluetoothGATTWriteResponse handle
     */

    /**
     * Constructs a new BluetoothGATTWriteResponse.
     * @exports BluetoothGATTWriteResponse
     * @classdesc Represents a BluetoothGATTWriteResponse.
     * @implements IBluetoothGATTWriteResponse
     * @constructor
     * @param {IBluetoothGATTWriteResponse=} [properties] Properties to set
     */
    function BluetoothGATTWriteResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothGATTWriteResponse address.
     * @member {number|Long} address
     * @memberof BluetoothGATTWriteResponse
     * @instance
     */
    BluetoothGATTWriteResponse.prototype.address = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * BluetoothGATTWriteResponse handle.
     * @member {number} handle
     * @memberof BluetoothGATTWriteResponse
     * @instance
     */
    BluetoothGATTWriteResponse.prototype.handle = 0;

    /**
     * Creates a new BluetoothGATTWriteResponse instance using the specified properties.
     * @function create
     * @memberof BluetoothGATTWriteResponse
     * @static
     * @param {IBluetoothGATTWriteResponse=} [properties] Properties to set
     * @returns {BluetoothGATTWriteResponse} BluetoothGATTWriteResponse instance
     */
    BluetoothGATTWriteResponse.create = function create(properties) {
        return new BluetoothGATTWriteResponse(properties);
    };

    /**
     * Encodes the specified BluetoothGATTWriteResponse message. Does not implicitly {@link BluetoothGATTWriteResponse.verify|verify} messages.
     * @function encode
     * @memberof BluetoothGATTWriteResponse
     * @static
     * @param {IBluetoothGATTWriteResponse} message BluetoothGATTWriteResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTWriteResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.address);
        if (message.handle != null && Object.hasOwnProperty.call(message, "handle"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.handle);
        return writer;
    };

    /**
     * Encodes the specified BluetoothGATTWriteResponse message, length delimited. Does not implicitly {@link BluetoothGATTWriteResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothGATTWriteResponse
     * @static
     * @param {IBluetoothGATTWriteResponse} message BluetoothGATTWriteResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTWriteResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothGATTWriteResponse message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothGATTWriteResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothGATTWriteResponse} BluetoothGATTWriteResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTWriteResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothGATTWriteResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.address = reader.uint64();
                    break;
                }
            case 2: {
                    message.handle = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothGATTWriteResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothGATTWriteResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothGATTWriteResponse} BluetoothGATTWriteResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTWriteResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothGATTWriteResponse message.
     * @function verify
     * @memberof BluetoothGATTWriteResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothGATTWriteResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.address != null && message.hasOwnProperty("address"))
            if (!$util.isInteger(message.address) && !(message.address && $util.isInteger(message.address.low) && $util.isInteger(message.address.high)))
                return "address: integer|Long expected";
        if (message.handle != null && message.hasOwnProperty("handle"))
            if (!$util.isInteger(message.handle))
                return "handle: integer expected";
        return null;
    };

    /**
     * Creates a BluetoothGATTWriteResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothGATTWriteResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothGATTWriteResponse} BluetoothGATTWriteResponse
     */
    BluetoothGATTWriteResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothGATTWriteResponse)
            return object;
        var message = new $root.BluetoothGATTWriteResponse();
        if (object.address != null)
            if ($util.Long)
                (message.address = $util.Long.fromValue(object.address)).unsigned = true;
            else if (typeof object.address === "string")
                message.address = parseInt(object.address, 10);
            else if (typeof object.address === "number")
                message.address = object.address;
            else if (typeof object.address === "object")
                message.address = new $util.LongBits(object.address.low >>> 0, object.address.high >>> 0).toNumber(true);
        if (object.handle != null)
            message.handle = object.handle >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a BluetoothGATTWriteResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothGATTWriteResponse
     * @static
     * @param {BluetoothGATTWriteResponse} message BluetoothGATTWriteResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothGATTWriteResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.address = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.address = options.longs === String ? "0" : 0;
            object.handle = 0;
        }
        if (message.address != null && message.hasOwnProperty("address"))
            if (typeof message.address === "number")
                object.address = options.longs === String ? String(message.address) : message.address;
            else
                object.address = options.longs === String ? $util.Long.prototype.toString.call(message.address) : options.longs === Number ? new $util.LongBits(message.address.low >>> 0, message.address.high >>> 0).toNumber(true) : message.address;
        if (message.handle != null && message.hasOwnProperty("handle"))
            object.handle = message.handle;
        return object;
    };

    /**
     * Converts this BluetoothGATTWriteResponse to JSON.
     * @function toJSON
     * @memberof BluetoothGATTWriteResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothGATTWriteResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothGATTWriteResponse
     * @function getTypeUrl
     * @memberof BluetoothGATTWriteResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothGATTWriteResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothGATTWriteResponse";
    };

    return BluetoothGATTWriteResponse;
})();

$root.BluetoothGATTNotifyResponse = (function() {

    /**
     * Properties of a BluetoothGATTNotifyResponse.
     * @exports IBluetoothGATTNotifyResponse
     * @interface IBluetoothGATTNotifyResponse
     * @property {number|Long|null} [address] BluetoothGATTNotifyResponse address
     * @property {number|null} [handle] BluetoothGATTNotifyResponse handle
     */

    /**
     * Constructs a new BluetoothGATTNotifyResponse.
     * @exports BluetoothGATTNotifyResponse
     * @classdesc Represents a BluetoothGATTNotifyResponse.
     * @implements IBluetoothGATTNotifyResponse
     * @constructor
     * @param {IBluetoothGATTNotifyResponse=} [properties] Properties to set
     */
    function BluetoothGATTNotifyResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothGATTNotifyResponse address.
     * @member {number|Long} address
     * @memberof BluetoothGATTNotifyResponse
     * @instance
     */
    BluetoothGATTNotifyResponse.prototype.address = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * BluetoothGATTNotifyResponse handle.
     * @member {number} handle
     * @memberof BluetoothGATTNotifyResponse
     * @instance
     */
    BluetoothGATTNotifyResponse.prototype.handle = 0;

    /**
     * Creates a new BluetoothGATTNotifyResponse instance using the specified properties.
     * @function create
     * @memberof BluetoothGATTNotifyResponse
     * @static
     * @param {IBluetoothGATTNotifyResponse=} [properties] Properties to set
     * @returns {BluetoothGATTNotifyResponse} BluetoothGATTNotifyResponse instance
     */
    BluetoothGATTNotifyResponse.create = function create(properties) {
        return new BluetoothGATTNotifyResponse(properties);
    };

    /**
     * Encodes the specified BluetoothGATTNotifyResponse message. Does not implicitly {@link BluetoothGATTNotifyResponse.verify|verify} messages.
     * @function encode
     * @memberof BluetoothGATTNotifyResponse
     * @static
     * @param {IBluetoothGATTNotifyResponse} message BluetoothGATTNotifyResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTNotifyResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.address);
        if (message.handle != null && Object.hasOwnProperty.call(message, "handle"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.handle);
        return writer;
    };

    /**
     * Encodes the specified BluetoothGATTNotifyResponse message, length delimited. Does not implicitly {@link BluetoothGATTNotifyResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothGATTNotifyResponse
     * @static
     * @param {IBluetoothGATTNotifyResponse} message BluetoothGATTNotifyResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothGATTNotifyResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothGATTNotifyResponse message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothGATTNotifyResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothGATTNotifyResponse} BluetoothGATTNotifyResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTNotifyResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothGATTNotifyResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.address = reader.uint64();
                    break;
                }
            case 2: {
                    message.handle = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothGATTNotifyResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothGATTNotifyResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothGATTNotifyResponse} BluetoothGATTNotifyResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothGATTNotifyResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothGATTNotifyResponse message.
     * @function verify
     * @memberof BluetoothGATTNotifyResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothGATTNotifyResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.address != null && message.hasOwnProperty("address"))
            if (!$util.isInteger(message.address) && !(message.address && $util.isInteger(message.address.low) && $util.isInteger(message.address.high)))
                return "address: integer|Long expected";
        if (message.handle != null && message.hasOwnProperty("handle"))
            if (!$util.isInteger(message.handle))
                return "handle: integer expected";
        return null;
    };

    /**
     * Creates a BluetoothGATTNotifyResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothGATTNotifyResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothGATTNotifyResponse} BluetoothGATTNotifyResponse
     */
    BluetoothGATTNotifyResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothGATTNotifyResponse)
            return object;
        var message = new $root.BluetoothGATTNotifyResponse();
        if (object.address != null)
            if ($util.Long)
                (message.address = $util.Long.fromValue(object.address)).unsigned = true;
            else if (typeof object.address === "string")
                message.address = parseInt(object.address, 10);
            else if (typeof object.address === "number")
                message.address = object.address;
            else if (typeof object.address === "object")
                message.address = new $util.LongBits(object.address.low >>> 0, object.address.high >>> 0).toNumber(true);
        if (object.handle != null)
            message.handle = object.handle >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a BluetoothGATTNotifyResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothGATTNotifyResponse
     * @static
     * @param {BluetoothGATTNotifyResponse} message BluetoothGATTNotifyResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothGATTNotifyResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.address = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.address = options.longs === String ? "0" : 0;
            object.handle = 0;
        }
        if (message.address != null && message.hasOwnProperty("address"))
            if (typeof message.address === "number")
                object.address = options.longs === String ? String(message.address) : message.address;
            else
                object.address = options.longs === String ? $util.Long.prototype.toString.call(message.address) : options.longs === Number ? new $util.LongBits(message.address.low >>> 0, message.address.high >>> 0).toNumber(true) : message.address;
        if (message.handle != null && message.hasOwnProperty("handle"))
            object.handle = message.handle;
        return object;
    };

    /**
     * Converts this BluetoothGATTNotifyResponse to JSON.
     * @function toJSON
     * @memberof BluetoothGATTNotifyResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothGATTNotifyResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothGATTNotifyResponse
     * @function getTypeUrl
     * @memberof BluetoothGATTNotifyResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothGATTNotifyResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothGATTNotifyResponse";
    };

    return BluetoothGATTNotifyResponse;
})();

$root.BluetoothDevicePairingResponse = (function() {

    /**
     * Properties of a BluetoothDevicePairingResponse.
     * @exports IBluetoothDevicePairingResponse
     * @interface IBluetoothDevicePairingResponse
     * @property {number|Long|null} [address] BluetoothDevicePairingResponse address
     * @property {boolean|null} [paired] BluetoothDevicePairingResponse paired
     * @property {number|null} [error] BluetoothDevicePairingResponse error
     */

    /**
     * Constructs a new BluetoothDevicePairingResponse.
     * @exports BluetoothDevicePairingResponse
     * @classdesc Represents a BluetoothDevicePairingResponse.
     * @implements IBluetoothDevicePairingResponse
     * @constructor
     * @param {IBluetoothDevicePairingResponse=} [properties] Properties to set
     */
    function BluetoothDevicePairingResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothDevicePairingResponse address.
     * @member {number|Long} address
     * @memberof BluetoothDevicePairingResponse
     * @instance
     */
    BluetoothDevicePairingResponse.prototype.address = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * BluetoothDevicePairingResponse paired.
     * @member {boolean} paired
     * @memberof BluetoothDevicePairingResponse
     * @instance
     */
    BluetoothDevicePairingResponse.prototype.paired = false;

    /**
     * BluetoothDevicePairingResponse error.
     * @member {number} error
     * @memberof BluetoothDevicePairingResponse
     * @instance
     */
    BluetoothDevicePairingResponse.prototype.error = 0;

    /**
     * Creates a new BluetoothDevicePairingResponse instance using the specified properties.
     * @function create
     * @memberof BluetoothDevicePairingResponse
     * @static
     * @param {IBluetoothDevicePairingResponse=} [properties] Properties to set
     * @returns {BluetoothDevicePairingResponse} BluetoothDevicePairingResponse instance
     */
    BluetoothDevicePairingResponse.create = function create(properties) {
        return new BluetoothDevicePairingResponse(properties);
    };

    /**
     * Encodes the specified BluetoothDevicePairingResponse message. Does not implicitly {@link BluetoothDevicePairingResponse.verify|verify} messages.
     * @function encode
     * @memberof BluetoothDevicePairingResponse
     * @static
     * @param {IBluetoothDevicePairingResponse} message BluetoothDevicePairingResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothDevicePairingResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.address);
        if (message.paired != null && Object.hasOwnProperty.call(message, "paired"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.paired);
        if (message.error != null && Object.hasOwnProperty.call(message, "error"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.error);
        return writer;
    };

    /**
     * Encodes the specified BluetoothDevicePairingResponse message, length delimited. Does not implicitly {@link BluetoothDevicePairingResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothDevicePairingResponse
     * @static
     * @param {IBluetoothDevicePairingResponse} message BluetoothDevicePairingResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothDevicePairingResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothDevicePairingResponse message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothDevicePairingResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothDevicePairingResponse} BluetoothDevicePairingResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothDevicePairingResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothDevicePairingResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.address = reader.uint64();
                    break;
                }
            case 2: {
                    message.paired = reader.bool();
                    break;
                }
            case 3: {
                    message.error = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothDevicePairingResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothDevicePairingResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothDevicePairingResponse} BluetoothDevicePairingResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothDevicePairingResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothDevicePairingResponse message.
     * @function verify
     * @memberof BluetoothDevicePairingResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothDevicePairingResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.address != null && message.hasOwnProperty("address"))
            if (!$util.isInteger(message.address) && !(message.address && $util.isInteger(message.address.low) && $util.isInteger(message.address.high)))
                return "address: integer|Long expected";
        if (message.paired != null && message.hasOwnProperty("paired"))
            if (typeof message.paired !== "boolean")
                return "paired: boolean expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };

    /**
     * Creates a BluetoothDevicePairingResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothDevicePairingResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothDevicePairingResponse} BluetoothDevicePairingResponse
     */
    BluetoothDevicePairingResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothDevicePairingResponse)
            return object;
        var message = new $root.BluetoothDevicePairingResponse();
        if (object.address != null)
            if ($util.Long)
                (message.address = $util.Long.fromValue(object.address)).unsigned = true;
            else if (typeof object.address === "string")
                message.address = parseInt(object.address, 10);
            else if (typeof object.address === "number")
                message.address = object.address;
            else if (typeof object.address === "object")
                message.address = new $util.LongBits(object.address.low >>> 0, object.address.high >>> 0).toNumber(true);
        if (object.paired != null)
            message.paired = Boolean(object.paired);
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };

    /**
     * Creates a plain object from a BluetoothDevicePairingResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothDevicePairingResponse
     * @static
     * @param {BluetoothDevicePairingResponse} message BluetoothDevicePairingResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothDevicePairingResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.address = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.address = options.longs === String ? "0" : 0;
            object.paired = false;
            object.error = 0;
        }
        if (message.address != null && message.hasOwnProperty("address"))
            if (typeof message.address === "number")
                object.address = options.longs === String ? String(message.address) : message.address;
            else
                object.address = options.longs === String ? $util.Long.prototype.toString.call(message.address) : options.longs === Number ? new $util.LongBits(message.address.low >>> 0, message.address.high >>> 0).toNumber(true) : message.address;
        if (message.paired != null && message.hasOwnProperty("paired"))
            object.paired = message.paired;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };

    /**
     * Converts this BluetoothDevicePairingResponse to JSON.
     * @function toJSON
     * @memberof BluetoothDevicePairingResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothDevicePairingResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothDevicePairingResponse
     * @function getTypeUrl
     * @memberof BluetoothDevicePairingResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothDevicePairingResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothDevicePairingResponse";
    };

    return BluetoothDevicePairingResponse;
})();

$root.BluetoothDeviceUnpairingResponse = (function() {

    /**
     * Properties of a BluetoothDeviceUnpairingResponse.
     * @exports IBluetoothDeviceUnpairingResponse
     * @interface IBluetoothDeviceUnpairingResponse
     * @property {number|Long|null} [address] BluetoothDeviceUnpairingResponse address
     * @property {boolean|null} [success] BluetoothDeviceUnpairingResponse success
     * @property {number|null} [error] BluetoothDeviceUnpairingResponse error
     */

    /**
     * Constructs a new BluetoothDeviceUnpairingResponse.
     * @exports BluetoothDeviceUnpairingResponse
     * @classdesc Represents a BluetoothDeviceUnpairingResponse.
     * @implements IBluetoothDeviceUnpairingResponse
     * @constructor
     * @param {IBluetoothDeviceUnpairingResponse=} [properties] Properties to set
     */
    function BluetoothDeviceUnpairingResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothDeviceUnpairingResponse address.
     * @member {number|Long} address
     * @memberof BluetoothDeviceUnpairingResponse
     * @instance
     */
    BluetoothDeviceUnpairingResponse.prototype.address = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * BluetoothDeviceUnpairingResponse success.
     * @member {boolean} success
     * @memberof BluetoothDeviceUnpairingResponse
     * @instance
     */
    BluetoothDeviceUnpairingResponse.prototype.success = false;

    /**
     * BluetoothDeviceUnpairingResponse error.
     * @member {number} error
     * @memberof BluetoothDeviceUnpairingResponse
     * @instance
     */
    BluetoothDeviceUnpairingResponse.prototype.error = 0;

    /**
     * Creates a new BluetoothDeviceUnpairingResponse instance using the specified properties.
     * @function create
     * @memberof BluetoothDeviceUnpairingResponse
     * @static
     * @param {IBluetoothDeviceUnpairingResponse=} [properties] Properties to set
     * @returns {BluetoothDeviceUnpairingResponse} BluetoothDeviceUnpairingResponse instance
     */
    BluetoothDeviceUnpairingResponse.create = function create(properties) {
        return new BluetoothDeviceUnpairingResponse(properties);
    };

    /**
     * Encodes the specified BluetoothDeviceUnpairingResponse message. Does not implicitly {@link BluetoothDeviceUnpairingResponse.verify|verify} messages.
     * @function encode
     * @memberof BluetoothDeviceUnpairingResponse
     * @static
     * @param {IBluetoothDeviceUnpairingResponse} message BluetoothDeviceUnpairingResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothDeviceUnpairingResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.address);
        if (message.success != null && Object.hasOwnProperty.call(message, "success"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.success);
        if (message.error != null && Object.hasOwnProperty.call(message, "error"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.error);
        return writer;
    };

    /**
     * Encodes the specified BluetoothDeviceUnpairingResponse message, length delimited. Does not implicitly {@link BluetoothDeviceUnpairingResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothDeviceUnpairingResponse
     * @static
     * @param {IBluetoothDeviceUnpairingResponse} message BluetoothDeviceUnpairingResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothDeviceUnpairingResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothDeviceUnpairingResponse message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothDeviceUnpairingResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothDeviceUnpairingResponse} BluetoothDeviceUnpairingResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothDeviceUnpairingResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothDeviceUnpairingResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.address = reader.uint64();
                    break;
                }
            case 2: {
                    message.success = reader.bool();
                    break;
                }
            case 3: {
                    message.error = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothDeviceUnpairingResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothDeviceUnpairingResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothDeviceUnpairingResponse} BluetoothDeviceUnpairingResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothDeviceUnpairingResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothDeviceUnpairingResponse message.
     * @function verify
     * @memberof BluetoothDeviceUnpairingResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothDeviceUnpairingResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.address != null && message.hasOwnProperty("address"))
            if (!$util.isInteger(message.address) && !(message.address && $util.isInteger(message.address.low) && $util.isInteger(message.address.high)))
                return "address: integer|Long expected";
        if (message.success != null && message.hasOwnProperty("success"))
            if (typeof message.success !== "boolean")
                return "success: boolean expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };

    /**
     * Creates a BluetoothDeviceUnpairingResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothDeviceUnpairingResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothDeviceUnpairingResponse} BluetoothDeviceUnpairingResponse
     */
    BluetoothDeviceUnpairingResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothDeviceUnpairingResponse)
            return object;
        var message = new $root.BluetoothDeviceUnpairingResponse();
        if (object.address != null)
            if ($util.Long)
                (message.address = $util.Long.fromValue(object.address)).unsigned = true;
            else if (typeof object.address === "string")
                message.address = parseInt(object.address, 10);
            else if (typeof object.address === "number")
                message.address = object.address;
            else if (typeof object.address === "object")
                message.address = new $util.LongBits(object.address.low >>> 0, object.address.high >>> 0).toNumber(true);
        if (object.success != null)
            message.success = Boolean(object.success);
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };

    /**
     * Creates a plain object from a BluetoothDeviceUnpairingResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothDeviceUnpairingResponse
     * @static
     * @param {BluetoothDeviceUnpairingResponse} message BluetoothDeviceUnpairingResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothDeviceUnpairingResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.address = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.address = options.longs === String ? "0" : 0;
            object.success = false;
            object.error = 0;
        }
        if (message.address != null && message.hasOwnProperty("address"))
            if (typeof message.address === "number")
                object.address = options.longs === String ? String(message.address) : message.address;
            else
                object.address = options.longs === String ? $util.Long.prototype.toString.call(message.address) : options.longs === Number ? new $util.LongBits(message.address.low >>> 0, message.address.high >>> 0).toNumber(true) : message.address;
        if (message.success != null && message.hasOwnProperty("success"))
            object.success = message.success;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };

    /**
     * Converts this BluetoothDeviceUnpairingResponse to JSON.
     * @function toJSON
     * @memberof BluetoothDeviceUnpairingResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothDeviceUnpairingResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothDeviceUnpairingResponse
     * @function getTypeUrl
     * @memberof BluetoothDeviceUnpairingResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothDeviceUnpairingResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothDeviceUnpairingResponse";
    };

    return BluetoothDeviceUnpairingResponse;
})();

$root.UnsubscribeBluetoothLEAdvertisementsRequest = (function() {

    /**
     * Properties of an UnsubscribeBluetoothLEAdvertisementsRequest.
     * @exports IUnsubscribeBluetoothLEAdvertisementsRequest
     * @interface IUnsubscribeBluetoothLEAdvertisementsRequest
     */

    /**
     * Constructs a new UnsubscribeBluetoothLEAdvertisementsRequest.
     * @exports UnsubscribeBluetoothLEAdvertisementsRequest
     * @classdesc Represents an UnsubscribeBluetoothLEAdvertisementsRequest.
     * @implements IUnsubscribeBluetoothLEAdvertisementsRequest
     * @constructor
     * @param {IUnsubscribeBluetoothLEAdvertisementsRequest=} [properties] Properties to set
     */
    function UnsubscribeBluetoothLEAdvertisementsRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new UnsubscribeBluetoothLEAdvertisementsRequest instance using the specified properties.
     * @function create
     * @memberof UnsubscribeBluetoothLEAdvertisementsRequest
     * @static
     * @param {IUnsubscribeBluetoothLEAdvertisementsRequest=} [properties] Properties to set
     * @returns {UnsubscribeBluetoothLEAdvertisementsRequest} UnsubscribeBluetoothLEAdvertisementsRequest instance
     */
    UnsubscribeBluetoothLEAdvertisementsRequest.create = function create(properties) {
        return new UnsubscribeBluetoothLEAdvertisementsRequest(properties);
    };

    /**
     * Encodes the specified UnsubscribeBluetoothLEAdvertisementsRequest message. Does not implicitly {@link UnsubscribeBluetoothLEAdvertisementsRequest.verify|verify} messages.
     * @function encode
     * @memberof UnsubscribeBluetoothLEAdvertisementsRequest
     * @static
     * @param {IUnsubscribeBluetoothLEAdvertisementsRequest} message UnsubscribeBluetoothLEAdvertisementsRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    UnsubscribeBluetoothLEAdvertisementsRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified UnsubscribeBluetoothLEAdvertisementsRequest message, length delimited. Does not implicitly {@link UnsubscribeBluetoothLEAdvertisementsRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof UnsubscribeBluetoothLEAdvertisementsRequest
     * @static
     * @param {IUnsubscribeBluetoothLEAdvertisementsRequest} message UnsubscribeBluetoothLEAdvertisementsRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    UnsubscribeBluetoothLEAdvertisementsRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an UnsubscribeBluetoothLEAdvertisementsRequest message from the specified reader or buffer.
     * @function decode
     * @memberof UnsubscribeBluetoothLEAdvertisementsRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {UnsubscribeBluetoothLEAdvertisementsRequest} UnsubscribeBluetoothLEAdvertisementsRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    UnsubscribeBluetoothLEAdvertisementsRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UnsubscribeBluetoothLEAdvertisementsRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an UnsubscribeBluetoothLEAdvertisementsRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof UnsubscribeBluetoothLEAdvertisementsRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {UnsubscribeBluetoothLEAdvertisementsRequest} UnsubscribeBluetoothLEAdvertisementsRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    UnsubscribeBluetoothLEAdvertisementsRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an UnsubscribeBluetoothLEAdvertisementsRequest message.
     * @function verify
     * @memberof UnsubscribeBluetoothLEAdvertisementsRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    UnsubscribeBluetoothLEAdvertisementsRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates an UnsubscribeBluetoothLEAdvertisementsRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof UnsubscribeBluetoothLEAdvertisementsRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {UnsubscribeBluetoothLEAdvertisementsRequest} UnsubscribeBluetoothLEAdvertisementsRequest
     */
    UnsubscribeBluetoothLEAdvertisementsRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.UnsubscribeBluetoothLEAdvertisementsRequest)
            return object;
        return new $root.UnsubscribeBluetoothLEAdvertisementsRequest();
    };

    /**
     * Creates a plain object from an UnsubscribeBluetoothLEAdvertisementsRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof UnsubscribeBluetoothLEAdvertisementsRequest
     * @static
     * @param {UnsubscribeBluetoothLEAdvertisementsRequest} message UnsubscribeBluetoothLEAdvertisementsRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    UnsubscribeBluetoothLEAdvertisementsRequest.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this UnsubscribeBluetoothLEAdvertisementsRequest to JSON.
     * @function toJSON
     * @memberof UnsubscribeBluetoothLEAdvertisementsRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    UnsubscribeBluetoothLEAdvertisementsRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for UnsubscribeBluetoothLEAdvertisementsRequest
     * @function getTypeUrl
     * @memberof UnsubscribeBluetoothLEAdvertisementsRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    UnsubscribeBluetoothLEAdvertisementsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/UnsubscribeBluetoothLEAdvertisementsRequest";
    };

    return UnsubscribeBluetoothLEAdvertisementsRequest;
})();

$root.BluetoothDeviceClearCacheResponse = (function() {

    /**
     * Properties of a BluetoothDeviceClearCacheResponse.
     * @exports IBluetoothDeviceClearCacheResponse
     * @interface IBluetoothDeviceClearCacheResponse
     * @property {number|Long|null} [address] BluetoothDeviceClearCacheResponse address
     * @property {boolean|null} [success] BluetoothDeviceClearCacheResponse success
     * @property {number|null} [error] BluetoothDeviceClearCacheResponse error
     */

    /**
     * Constructs a new BluetoothDeviceClearCacheResponse.
     * @exports BluetoothDeviceClearCacheResponse
     * @classdesc Represents a BluetoothDeviceClearCacheResponse.
     * @implements IBluetoothDeviceClearCacheResponse
     * @constructor
     * @param {IBluetoothDeviceClearCacheResponse=} [properties] Properties to set
     */
    function BluetoothDeviceClearCacheResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothDeviceClearCacheResponse address.
     * @member {number|Long} address
     * @memberof BluetoothDeviceClearCacheResponse
     * @instance
     */
    BluetoothDeviceClearCacheResponse.prototype.address = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

    /**
     * BluetoothDeviceClearCacheResponse success.
     * @member {boolean} success
     * @memberof BluetoothDeviceClearCacheResponse
     * @instance
     */
    BluetoothDeviceClearCacheResponse.prototype.success = false;

    /**
     * BluetoothDeviceClearCacheResponse error.
     * @member {number} error
     * @memberof BluetoothDeviceClearCacheResponse
     * @instance
     */
    BluetoothDeviceClearCacheResponse.prototype.error = 0;

    /**
     * Creates a new BluetoothDeviceClearCacheResponse instance using the specified properties.
     * @function create
     * @memberof BluetoothDeviceClearCacheResponse
     * @static
     * @param {IBluetoothDeviceClearCacheResponse=} [properties] Properties to set
     * @returns {BluetoothDeviceClearCacheResponse} BluetoothDeviceClearCacheResponse instance
     */
    BluetoothDeviceClearCacheResponse.create = function create(properties) {
        return new BluetoothDeviceClearCacheResponse(properties);
    };

    /**
     * Encodes the specified BluetoothDeviceClearCacheResponse message. Does not implicitly {@link BluetoothDeviceClearCacheResponse.verify|verify} messages.
     * @function encode
     * @memberof BluetoothDeviceClearCacheResponse
     * @static
     * @param {IBluetoothDeviceClearCacheResponse} message BluetoothDeviceClearCacheResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothDeviceClearCacheResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.address);
        if (message.success != null && Object.hasOwnProperty.call(message, "success"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.success);
        if (message.error != null && Object.hasOwnProperty.call(message, "error"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.error);
        return writer;
    };

    /**
     * Encodes the specified BluetoothDeviceClearCacheResponse message, length delimited. Does not implicitly {@link BluetoothDeviceClearCacheResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothDeviceClearCacheResponse
     * @static
     * @param {IBluetoothDeviceClearCacheResponse} message BluetoothDeviceClearCacheResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothDeviceClearCacheResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothDeviceClearCacheResponse message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothDeviceClearCacheResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothDeviceClearCacheResponse} BluetoothDeviceClearCacheResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothDeviceClearCacheResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothDeviceClearCacheResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.address = reader.uint64();
                    break;
                }
            case 2: {
                    message.success = reader.bool();
                    break;
                }
            case 3: {
                    message.error = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothDeviceClearCacheResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothDeviceClearCacheResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothDeviceClearCacheResponse} BluetoothDeviceClearCacheResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothDeviceClearCacheResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothDeviceClearCacheResponse message.
     * @function verify
     * @memberof BluetoothDeviceClearCacheResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothDeviceClearCacheResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.address != null && message.hasOwnProperty("address"))
            if (!$util.isInteger(message.address) && !(message.address && $util.isInteger(message.address.low) && $util.isInteger(message.address.high)))
                return "address: integer|Long expected";
        if (message.success != null && message.hasOwnProperty("success"))
            if (typeof message.success !== "boolean")
                return "success: boolean expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (!$util.isInteger(message.error))
                return "error: integer expected";
        return null;
    };

    /**
     * Creates a BluetoothDeviceClearCacheResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothDeviceClearCacheResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothDeviceClearCacheResponse} BluetoothDeviceClearCacheResponse
     */
    BluetoothDeviceClearCacheResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothDeviceClearCacheResponse)
            return object;
        var message = new $root.BluetoothDeviceClearCacheResponse();
        if (object.address != null)
            if ($util.Long)
                (message.address = $util.Long.fromValue(object.address)).unsigned = true;
            else if (typeof object.address === "string")
                message.address = parseInt(object.address, 10);
            else if (typeof object.address === "number")
                message.address = object.address;
            else if (typeof object.address === "object")
                message.address = new $util.LongBits(object.address.low >>> 0, object.address.high >>> 0).toNumber(true);
        if (object.success != null)
            message.success = Boolean(object.success);
        if (object.error != null)
            message.error = object.error | 0;
        return message;
    };

    /**
     * Creates a plain object from a BluetoothDeviceClearCacheResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothDeviceClearCacheResponse
     * @static
     * @param {BluetoothDeviceClearCacheResponse} message BluetoothDeviceClearCacheResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothDeviceClearCacheResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if ($util.Long) {
                var long = new $util.Long(0, 0, true);
                object.address = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else
                object.address = options.longs === String ? "0" : 0;
            object.success = false;
            object.error = 0;
        }
        if (message.address != null && message.hasOwnProperty("address"))
            if (typeof message.address === "number")
                object.address = options.longs === String ? String(message.address) : message.address;
            else
                object.address = options.longs === String ? $util.Long.prototype.toString.call(message.address) : options.longs === Number ? new $util.LongBits(message.address.low >>> 0, message.address.high >>> 0).toNumber(true) : message.address;
        if (message.success != null && message.hasOwnProperty("success"))
            object.success = message.success;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };

    /**
     * Converts this BluetoothDeviceClearCacheResponse to JSON.
     * @function toJSON
     * @memberof BluetoothDeviceClearCacheResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothDeviceClearCacheResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothDeviceClearCacheResponse
     * @function getTypeUrl
     * @memberof BluetoothDeviceClearCacheResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothDeviceClearCacheResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothDeviceClearCacheResponse";
    };

    return BluetoothDeviceClearCacheResponse;
})();

/**
 * BluetoothScannerState enum.
 * @exports BluetoothScannerState
 * @enum {number}
 * @property {number} BLUETOOTH_SCANNER_STATE_IDLE=0 BLUETOOTH_SCANNER_STATE_IDLE value
 * @property {number} BLUETOOTH_SCANNER_STATE_STARTING=1 BLUETOOTH_SCANNER_STATE_STARTING value
 * @property {number} BLUETOOTH_SCANNER_STATE_RUNNING=2 BLUETOOTH_SCANNER_STATE_RUNNING value
 * @property {number} BLUETOOTH_SCANNER_STATE_FAILED=3 BLUETOOTH_SCANNER_STATE_FAILED value
 * @property {number} BLUETOOTH_SCANNER_STATE_STOPPING=4 BLUETOOTH_SCANNER_STATE_STOPPING value
 * @property {number} BLUETOOTH_SCANNER_STATE_STOPPED=5 BLUETOOTH_SCANNER_STATE_STOPPED value
 */
$root.BluetoothScannerState = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "BLUETOOTH_SCANNER_STATE_IDLE"] = 0;
    values[valuesById[1] = "BLUETOOTH_SCANNER_STATE_STARTING"] = 1;
    values[valuesById[2] = "BLUETOOTH_SCANNER_STATE_RUNNING"] = 2;
    values[valuesById[3] = "BLUETOOTH_SCANNER_STATE_FAILED"] = 3;
    values[valuesById[4] = "BLUETOOTH_SCANNER_STATE_STOPPING"] = 4;
    values[valuesById[5] = "BLUETOOTH_SCANNER_STATE_STOPPED"] = 5;
    return values;
})();

/**
 * BluetoothScannerMode enum.
 * @exports BluetoothScannerMode
 * @enum {number}
 * @property {number} BLUETOOTH_SCANNER_MODE_PASSIVE=0 BLUETOOTH_SCANNER_MODE_PASSIVE value
 * @property {number} BLUETOOTH_SCANNER_MODE_ACTIVE=1 BLUETOOTH_SCANNER_MODE_ACTIVE value
 */
$root.BluetoothScannerMode = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "BLUETOOTH_SCANNER_MODE_PASSIVE"] = 0;
    values[valuesById[1] = "BLUETOOTH_SCANNER_MODE_ACTIVE"] = 1;
    return values;
})();

$root.BluetoothScannerStateResponse = (function() {

    /**
     * Properties of a BluetoothScannerStateResponse.
     * @exports IBluetoothScannerStateResponse
     * @interface IBluetoothScannerStateResponse
     * @property {BluetoothScannerState|null} [state] BluetoothScannerStateResponse state
     * @property {BluetoothScannerMode|null} [mode] BluetoothScannerStateResponse mode
     * @property {BluetoothScannerMode|null} [configured_mode] BluetoothScannerStateResponse configured_mode
     */

    /**
     * Constructs a new BluetoothScannerStateResponse.
     * @exports BluetoothScannerStateResponse
     * @classdesc Represents a BluetoothScannerStateResponse.
     * @implements IBluetoothScannerStateResponse
     * @constructor
     * @param {IBluetoothScannerStateResponse=} [properties] Properties to set
     */
    function BluetoothScannerStateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothScannerStateResponse state.
     * @member {BluetoothScannerState} state
     * @memberof BluetoothScannerStateResponse
     * @instance
     */
    BluetoothScannerStateResponse.prototype.state = 0;

    /**
     * BluetoothScannerStateResponse mode.
     * @member {BluetoothScannerMode} mode
     * @memberof BluetoothScannerStateResponse
     * @instance
     */
    BluetoothScannerStateResponse.prototype.mode = 0;

    /**
     * BluetoothScannerStateResponse configured_mode.
     * @member {BluetoothScannerMode} configured_mode
     * @memberof BluetoothScannerStateResponse
     * @instance
     */
    BluetoothScannerStateResponse.prototype.configured_mode = 0;

    /**
     * Creates a new BluetoothScannerStateResponse instance using the specified properties.
     * @function create
     * @memberof BluetoothScannerStateResponse
     * @static
     * @param {IBluetoothScannerStateResponse=} [properties] Properties to set
     * @returns {BluetoothScannerStateResponse} BluetoothScannerStateResponse instance
     */
    BluetoothScannerStateResponse.create = function create(properties) {
        return new BluetoothScannerStateResponse(properties);
    };

    /**
     * Encodes the specified BluetoothScannerStateResponse message. Does not implicitly {@link BluetoothScannerStateResponse.verify|verify} messages.
     * @function encode
     * @memberof BluetoothScannerStateResponse
     * @static
     * @param {IBluetoothScannerStateResponse} message BluetoothScannerStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothScannerStateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.state);
        if (message.mode != null && Object.hasOwnProperty.call(message, "mode"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.mode);
        if (message.configured_mode != null && Object.hasOwnProperty.call(message, "configured_mode"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.configured_mode);
        return writer;
    };

    /**
     * Encodes the specified BluetoothScannerStateResponse message, length delimited. Does not implicitly {@link BluetoothScannerStateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothScannerStateResponse
     * @static
     * @param {IBluetoothScannerStateResponse} message BluetoothScannerStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothScannerStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothScannerStateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothScannerStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothScannerStateResponse} BluetoothScannerStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothScannerStateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothScannerStateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.state = reader.int32();
                    break;
                }
            case 2: {
                    message.mode = reader.int32();
                    break;
                }
            case 3: {
                    message.configured_mode = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothScannerStateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothScannerStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothScannerStateResponse} BluetoothScannerStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothScannerStateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothScannerStateResponse message.
     * @function verify
     * @memberof BluetoothScannerStateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothScannerStateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.state != null && message.hasOwnProperty("state"))
            switch (message.state) {
            default:
                return "state: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            }
        if (message.mode != null && message.hasOwnProperty("mode"))
            switch (message.mode) {
            default:
                return "mode: enum value expected";
            case 0:
            case 1:
                break;
            }
        if (message.configured_mode != null && message.hasOwnProperty("configured_mode"))
            switch (message.configured_mode) {
            default:
                return "configured_mode: enum value expected";
            case 0:
            case 1:
                break;
            }
        return null;
    };

    /**
     * Creates a BluetoothScannerStateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothScannerStateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothScannerStateResponse} BluetoothScannerStateResponse
     */
    BluetoothScannerStateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothScannerStateResponse)
            return object;
        var message = new $root.BluetoothScannerStateResponse();
        switch (object.state) {
        default:
            if (typeof object.state === "number") {
                message.state = object.state;
                break;
            }
            break;
        case "BLUETOOTH_SCANNER_STATE_IDLE":
        case 0:
            message.state = 0;
            break;
        case "BLUETOOTH_SCANNER_STATE_STARTING":
        case 1:
            message.state = 1;
            break;
        case "BLUETOOTH_SCANNER_STATE_RUNNING":
        case 2:
            message.state = 2;
            break;
        case "BLUETOOTH_SCANNER_STATE_FAILED":
        case 3:
            message.state = 3;
            break;
        case "BLUETOOTH_SCANNER_STATE_STOPPING":
        case 4:
            message.state = 4;
            break;
        case "BLUETOOTH_SCANNER_STATE_STOPPED":
        case 5:
            message.state = 5;
            break;
        }
        switch (object.mode) {
        default:
            if (typeof object.mode === "number") {
                message.mode = object.mode;
                break;
            }
            break;
        case "BLUETOOTH_SCANNER_MODE_PASSIVE":
        case 0:
            message.mode = 0;
            break;
        case "BLUETOOTH_SCANNER_MODE_ACTIVE":
        case 1:
            message.mode = 1;
            break;
        }
        switch (object.configured_mode) {
        default:
            if (typeof object.configured_mode === "number") {
                message.configured_mode = object.configured_mode;
                break;
            }
            break;
        case "BLUETOOTH_SCANNER_MODE_PASSIVE":
        case 0:
            message.configured_mode = 0;
            break;
        case "BLUETOOTH_SCANNER_MODE_ACTIVE":
        case 1:
            message.configured_mode = 1;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a BluetoothScannerStateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothScannerStateResponse
     * @static
     * @param {BluetoothScannerStateResponse} message BluetoothScannerStateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothScannerStateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.state = options.enums === String ? "BLUETOOTH_SCANNER_STATE_IDLE" : 0;
            object.mode = options.enums === String ? "BLUETOOTH_SCANNER_MODE_PASSIVE" : 0;
            object.configured_mode = options.enums === String ? "BLUETOOTH_SCANNER_MODE_PASSIVE" : 0;
        }
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = options.enums === String ? $root.BluetoothScannerState[message.state] === undefined ? message.state : $root.BluetoothScannerState[message.state] : message.state;
        if (message.mode != null && message.hasOwnProperty("mode"))
            object.mode = options.enums === String ? $root.BluetoothScannerMode[message.mode] === undefined ? message.mode : $root.BluetoothScannerMode[message.mode] : message.mode;
        if (message.configured_mode != null && message.hasOwnProperty("configured_mode"))
            object.configured_mode = options.enums === String ? $root.BluetoothScannerMode[message.configured_mode] === undefined ? message.configured_mode : $root.BluetoothScannerMode[message.configured_mode] : message.configured_mode;
        return object;
    };

    /**
     * Converts this BluetoothScannerStateResponse to JSON.
     * @function toJSON
     * @memberof BluetoothScannerStateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothScannerStateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothScannerStateResponse
     * @function getTypeUrl
     * @memberof BluetoothScannerStateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothScannerStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothScannerStateResponse";
    };

    return BluetoothScannerStateResponse;
})();

$root.BluetoothScannerSetModeRequest = (function() {

    /**
     * Properties of a BluetoothScannerSetModeRequest.
     * @exports IBluetoothScannerSetModeRequest
     * @interface IBluetoothScannerSetModeRequest
     * @property {BluetoothScannerMode|null} [mode] BluetoothScannerSetModeRequest mode
     */

    /**
     * Constructs a new BluetoothScannerSetModeRequest.
     * @exports BluetoothScannerSetModeRequest
     * @classdesc Represents a BluetoothScannerSetModeRequest.
     * @implements IBluetoothScannerSetModeRequest
     * @constructor
     * @param {IBluetoothScannerSetModeRequest=} [properties] Properties to set
     */
    function BluetoothScannerSetModeRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * BluetoothScannerSetModeRequest mode.
     * @member {BluetoothScannerMode} mode
     * @memberof BluetoothScannerSetModeRequest
     * @instance
     */
    BluetoothScannerSetModeRequest.prototype.mode = 0;

    /**
     * Creates a new BluetoothScannerSetModeRequest instance using the specified properties.
     * @function create
     * @memberof BluetoothScannerSetModeRequest
     * @static
     * @param {IBluetoothScannerSetModeRequest=} [properties] Properties to set
     * @returns {BluetoothScannerSetModeRequest} BluetoothScannerSetModeRequest instance
     */
    BluetoothScannerSetModeRequest.create = function create(properties) {
        return new BluetoothScannerSetModeRequest(properties);
    };

    /**
     * Encodes the specified BluetoothScannerSetModeRequest message. Does not implicitly {@link BluetoothScannerSetModeRequest.verify|verify} messages.
     * @function encode
     * @memberof BluetoothScannerSetModeRequest
     * @static
     * @param {IBluetoothScannerSetModeRequest} message BluetoothScannerSetModeRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothScannerSetModeRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.mode != null && Object.hasOwnProperty.call(message, "mode"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.mode);
        return writer;
    };

    /**
     * Encodes the specified BluetoothScannerSetModeRequest message, length delimited. Does not implicitly {@link BluetoothScannerSetModeRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof BluetoothScannerSetModeRequest
     * @static
     * @param {IBluetoothScannerSetModeRequest} message BluetoothScannerSetModeRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    BluetoothScannerSetModeRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a BluetoothScannerSetModeRequest message from the specified reader or buffer.
     * @function decode
     * @memberof BluetoothScannerSetModeRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {BluetoothScannerSetModeRequest} BluetoothScannerSetModeRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothScannerSetModeRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BluetoothScannerSetModeRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.mode = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a BluetoothScannerSetModeRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof BluetoothScannerSetModeRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {BluetoothScannerSetModeRequest} BluetoothScannerSetModeRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    BluetoothScannerSetModeRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a BluetoothScannerSetModeRequest message.
     * @function verify
     * @memberof BluetoothScannerSetModeRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    BluetoothScannerSetModeRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.mode != null && message.hasOwnProperty("mode"))
            switch (message.mode) {
            default:
                return "mode: enum value expected";
            case 0:
            case 1:
                break;
            }
        return null;
    };

    /**
     * Creates a BluetoothScannerSetModeRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof BluetoothScannerSetModeRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {BluetoothScannerSetModeRequest} BluetoothScannerSetModeRequest
     */
    BluetoothScannerSetModeRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.BluetoothScannerSetModeRequest)
            return object;
        var message = new $root.BluetoothScannerSetModeRequest();
        switch (object.mode) {
        default:
            if (typeof object.mode === "number") {
                message.mode = object.mode;
                break;
            }
            break;
        case "BLUETOOTH_SCANNER_MODE_PASSIVE":
        case 0:
            message.mode = 0;
            break;
        case "BLUETOOTH_SCANNER_MODE_ACTIVE":
        case 1:
            message.mode = 1;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a BluetoothScannerSetModeRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof BluetoothScannerSetModeRequest
     * @static
     * @param {BluetoothScannerSetModeRequest} message BluetoothScannerSetModeRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    BluetoothScannerSetModeRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.mode = options.enums === String ? "BLUETOOTH_SCANNER_MODE_PASSIVE" : 0;
        if (message.mode != null && message.hasOwnProperty("mode"))
            object.mode = options.enums === String ? $root.BluetoothScannerMode[message.mode] === undefined ? message.mode : $root.BluetoothScannerMode[message.mode] : message.mode;
        return object;
    };

    /**
     * Converts this BluetoothScannerSetModeRequest to JSON.
     * @function toJSON
     * @memberof BluetoothScannerSetModeRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    BluetoothScannerSetModeRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for BluetoothScannerSetModeRequest
     * @function getTypeUrl
     * @memberof BluetoothScannerSetModeRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    BluetoothScannerSetModeRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/BluetoothScannerSetModeRequest";
    };

    return BluetoothScannerSetModeRequest;
})();

/**
 * VoiceAssistantSubscribeFlag enum.
 * @exports VoiceAssistantSubscribeFlag
 * @enum {number}
 * @property {number} VOICE_ASSISTANT_SUBSCRIBE_NONE=0 VOICE_ASSISTANT_SUBSCRIBE_NONE value
 * @property {number} VOICE_ASSISTANT_SUBSCRIBE_API_AUDIO=1 VOICE_ASSISTANT_SUBSCRIBE_API_AUDIO value
 */
$root.VoiceAssistantSubscribeFlag = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "VOICE_ASSISTANT_SUBSCRIBE_NONE"] = 0;
    values[valuesById[1] = "VOICE_ASSISTANT_SUBSCRIBE_API_AUDIO"] = 1;
    return values;
})();

$root.SubscribeVoiceAssistantRequest = (function() {

    /**
     * Properties of a SubscribeVoiceAssistantRequest.
     * @exports ISubscribeVoiceAssistantRequest
     * @interface ISubscribeVoiceAssistantRequest
     * @property {boolean|null} [subscribe] SubscribeVoiceAssistantRequest subscribe
     * @property {number|null} [flags] SubscribeVoiceAssistantRequest flags
     */

    /**
     * Constructs a new SubscribeVoiceAssistantRequest.
     * @exports SubscribeVoiceAssistantRequest
     * @classdesc Represents a SubscribeVoiceAssistantRequest.
     * @implements ISubscribeVoiceAssistantRequest
     * @constructor
     * @param {ISubscribeVoiceAssistantRequest=} [properties] Properties to set
     */
    function SubscribeVoiceAssistantRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * SubscribeVoiceAssistantRequest subscribe.
     * @member {boolean} subscribe
     * @memberof SubscribeVoiceAssistantRequest
     * @instance
     */
    SubscribeVoiceAssistantRequest.prototype.subscribe = false;

    /**
     * SubscribeVoiceAssistantRequest flags.
     * @member {number} flags
     * @memberof SubscribeVoiceAssistantRequest
     * @instance
     */
    SubscribeVoiceAssistantRequest.prototype.flags = 0;

    /**
     * Creates a new SubscribeVoiceAssistantRequest instance using the specified properties.
     * @function create
     * @memberof SubscribeVoiceAssistantRequest
     * @static
     * @param {ISubscribeVoiceAssistantRequest=} [properties] Properties to set
     * @returns {SubscribeVoiceAssistantRequest} SubscribeVoiceAssistantRequest instance
     */
    SubscribeVoiceAssistantRequest.create = function create(properties) {
        return new SubscribeVoiceAssistantRequest(properties);
    };

    /**
     * Encodes the specified SubscribeVoiceAssistantRequest message. Does not implicitly {@link SubscribeVoiceAssistantRequest.verify|verify} messages.
     * @function encode
     * @memberof SubscribeVoiceAssistantRequest
     * @static
     * @param {ISubscribeVoiceAssistantRequest} message SubscribeVoiceAssistantRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SubscribeVoiceAssistantRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.subscribe != null && Object.hasOwnProperty.call(message, "subscribe"))
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.subscribe);
        if (message.flags != null && Object.hasOwnProperty.call(message, "flags"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.flags);
        return writer;
    };

    /**
     * Encodes the specified SubscribeVoiceAssistantRequest message, length delimited. Does not implicitly {@link SubscribeVoiceAssistantRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof SubscribeVoiceAssistantRequest
     * @static
     * @param {ISubscribeVoiceAssistantRequest} message SubscribeVoiceAssistantRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    SubscribeVoiceAssistantRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a SubscribeVoiceAssistantRequest message from the specified reader or buffer.
     * @function decode
     * @memberof SubscribeVoiceAssistantRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {SubscribeVoiceAssistantRequest} SubscribeVoiceAssistantRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SubscribeVoiceAssistantRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.SubscribeVoiceAssistantRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.subscribe = reader.bool();
                    break;
                }
            case 2: {
                    message.flags = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a SubscribeVoiceAssistantRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof SubscribeVoiceAssistantRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {SubscribeVoiceAssistantRequest} SubscribeVoiceAssistantRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    SubscribeVoiceAssistantRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a SubscribeVoiceAssistantRequest message.
     * @function verify
     * @memberof SubscribeVoiceAssistantRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    SubscribeVoiceAssistantRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.subscribe != null && message.hasOwnProperty("subscribe"))
            if (typeof message.subscribe !== "boolean")
                return "subscribe: boolean expected";
        if (message.flags != null && message.hasOwnProperty("flags"))
            if (!$util.isInteger(message.flags))
                return "flags: integer expected";
        return null;
    };

    /**
     * Creates a SubscribeVoiceAssistantRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof SubscribeVoiceAssistantRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {SubscribeVoiceAssistantRequest} SubscribeVoiceAssistantRequest
     */
    SubscribeVoiceAssistantRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.SubscribeVoiceAssistantRequest)
            return object;
        var message = new $root.SubscribeVoiceAssistantRequest();
        if (object.subscribe != null)
            message.subscribe = Boolean(object.subscribe);
        if (object.flags != null)
            message.flags = object.flags >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a SubscribeVoiceAssistantRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof SubscribeVoiceAssistantRequest
     * @static
     * @param {SubscribeVoiceAssistantRequest} message SubscribeVoiceAssistantRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    SubscribeVoiceAssistantRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.subscribe = false;
            object.flags = 0;
        }
        if (message.subscribe != null && message.hasOwnProperty("subscribe"))
            object.subscribe = message.subscribe;
        if (message.flags != null && message.hasOwnProperty("flags"))
            object.flags = message.flags;
        return object;
    };

    /**
     * Converts this SubscribeVoiceAssistantRequest to JSON.
     * @function toJSON
     * @memberof SubscribeVoiceAssistantRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    SubscribeVoiceAssistantRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for SubscribeVoiceAssistantRequest
     * @function getTypeUrl
     * @memberof SubscribeVoiceAssistantRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    SubscribeVoiceAssistantRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/SubscribeVoiceAssistantRequest";
    };

    return SubscribeVoiceAssistantRequest;
})();

/**
 * VoiceAssistantRequestFlag enum.
 * @exports VoiceAssistantRequestFlag
 * @enum {number}
 * @property {number} VOICE_ASSISTANT_REQUEST_NONE=0 VOICE_ASSISTANT_REQUEST_NONE value
 * @property {number} VOICE_ASSISTANT_REQUEST_USE_VAD=1 VOICE_ASSISTANT_REQUEST_USE_VAD value
 * @property {number} VOICE_ASSISTANT_REQUEST_USE_WAKE_WORD=2 VOICE_ASSISTANT_REQUEST_USE_WAKE_WORD value
 */
$root.VoiceAssistantRequestFlag = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "VOICE_ASSISTANT_REQUEST_NONE"] = 0;
    values[valuesById[1] = "VOICE_ASSISTANT_REQUEST_USE_VAD"] = 1;
    values[valuesById[2] = "VOICE_ASSISTANT_REQUEST_USE_WAKE_WORD"] = 2;
    return values;
})();

$root.VoiceAssistantAudioSettings = (function() {

    /**
     * Properties of a VoiceAssistantAudioSettings.
     * @exports IVoiceAssistantAudioSettings
     * @interface IVoiceAssistantAudioSettings
     * @property {number|null} [noise_suppression_level] VoiceAssistantAudioSettings noise_suppression_level
     * @property {number|null} [auto_gain] VoiceAssistantAudioSettings auto_gain
     * @property {number|null} [volume_multiplier] VoiceAssistantAudioSettings volume_multiplier
     */

    /**
     * Constructs a new VoiceAssistantAudioSettings.
     * @exports VoiceAssistantAudioSettings
     * @classdesc Represents a VoiceAssistantAudioSettings.
     * @implements IVoiceAssistantAudioSettings
     * @constructor
     * @param {IVoiceAssistantAudioSettings=} [properties] Properties to set
     */
    function VoiceAssistantAudioSettings(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * VoiceAssistantAudioSettings noise_suppression_level.
     * @member {number} noise_suppression_level
     * @memberof VoiceAssistantAudioSettings
     * @instance
     */
    VoiceAssistantAudioSettings.prototype.noise_suppression_level = 0;

    /**
     * VoiceAssistantAudioSettings auto_gain.
     * @member {number} auto_gain
     * @memberof VoiceAssistantAudioSettings
     * @instance
     */
    VoiceAssistantAudioSettings.prototype.auto_gain = 0;

    /**
     * VoiceAssistantAudioSettings volume_multiplier.
     * @member {number} volume_multiplier
     * @memberof VoiceAssistantAudioSettings
     * @instance
     */
    VoiceAssistantAudioSettings.prototype.volume_multiplier = 0;

    /**
     * Creates a new VoiceAssistantAudioSettings instance using the specified properties.
     * @function create
     * @memberof VoiceAssistantAudioSettings
     * @static
     * @param {IVoiceAssistantAudioSettings=} [properties] Properties to set
     * @returns {VoiceAssistantAudioSettings} VoiceAssistantAudioSettings instance
     */
    VoiceAssistantAudioSettings.create = function create(properties) {
        return new VoiceAssistantAudioSettings(properties);
    };

    /**
     * Encodes the specified VoiceAssistantAudioSettings message. Does not implicitly {@link VoiceAssistantAudioSettings.verify|verify} messages.
     * @function encode
     * @memberof VoiceAssistantAudioSettings
     * @static
     * @param {IVoiceAssistantAudioSettings} message VoiceAssistantAudioSettings message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantAudioSettings.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.noise_suppression_level != null && Object.hasOwnProperty.call(message, "noise_suppression_level"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.noise_suppression_level);
        if (message.auto_gain != null && Object.hasOwnProperty.call(message, "auto_gain"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.auto_gain);
        if (message.volume_multiplier != null && Object.hasOwnProperty.call(message, "volume_multiplier"))
            writer.uint32(/* id 3, wireType 5 =*/29).float(message.volume_multiplier);
        return writer;
    };

    /**
     * Encodes the specified VoiceAssistantAudioSettings message, length delimited. Does not implicitly {@link VoiceAssistantAudioSettings.verify|verify} messages.
     * @function encodeDelimited
     * @memberof VoiceAssistantAudioSettings
     * @static
     * @param {IVoiceAssistantAudioSettings} message VoiceAssistantAudioSettings message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantAudioSettings.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a VoiceAssistantAudioSettings message from the specified reader or buffer.
     * @function decode
     * @memberof VoiceAssistantAudioSettings
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {VoiceAssistantAudioSettings} VoiceAssistantAudioSettings
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantAudioSettings.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.VoiceAssistantAudioSettings();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.noise_suppression_level = reader.uint32();
                    break;
                }
            case 2: {
                    message.auto_gain = reader.uint32();
                    break;
                }
            case 3: {
                    message.volume_multiplier = reader.float();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a VoiceAssistantAudioSettings message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof VoiceAssistantAudioSettings
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {VoiceAssistantAudioSettings} VoiceAssistantAudioSettings
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantAudioSettings.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a VoiceAssistantAudioSettings message.
     * @function verify
     * @memberof VoiceAssistantAudioSettings
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    VoiceAssistantAudioSettings.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.noise_suppression_level != null && message.hasOwnProperty("noise_suppression_level"))
            if (!$util.isInteger(message.noise_suppression_level))
                return "noise_suppression_level: integer expected";
        if (message.auto_gain != null && message.hasOwnProperty("auto_gain"))
            if (!$util.isInteger(message.auto_gain))
                return "auto_gain: integer expected";
        if (message.volume_multiplier != null && message.hasOwnProperty("volume_multiplier"))
            if (typeof message.volume_multiplier !== "number")
                return "volume_multiplier: number expected";
        return null;
    };

    /**
     * Creates a VoiceAssistantAudioSettings message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof VoiceAssistantAudioSettings
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {VoiceAssistantAudioSettings} VoiceAssistantAudioSettings
     */
    VoiceAssistantAudioSettings.fromObject = function fromObject(object) {
        if (object instanceof $root.VoiceAssistantAudioSettings)
            return object;
        var message = new $root.VoiceAssistantAudioSettings();
        if (object.noise_suppression_level != null)
            message.noise_suppression_level = object.noise_suppression_level >>> 0;
        if (object.auto_gain != null)
            message.auto_gain = object.auto_gain >>> 0;
        if (object.volume_multiplier != null)
            message.volume_multiplier = Number(object.volume_multiplier);
        return message;
    };

    /**
     * Creates a plain object from a VoiceAssistantAudioSettings message. Also converts values to other types if specified.
     * @function toObject
     * @memberof VoiceAssistantAudioSettings
     * @static
     * @param {VoiceAssistantAudioSettings} message VoiceAssistantAudioSettings
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    VoiceAssistantAudioSettings.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.noise_suppression_level = 0;
            object.auto_gain = 0;
            object.volume_multiplier = 0;
        }
        if (message.noise_suppression_level != null && message.hasOwnProperty("noise_suppression_level"))
            object.noise_suppression_level = message.noise_suppression_level;
        if (message.auto_gain != null && message.hasOwnProperty("auto_gain"))
            object.auto_gain = message.auto_gain;
        if (message.volume_multiplier != null && message.hasOwnProperty("volume_multiplier"))
            object.volume_multiplier = options.json && !isFinite(message.volume_multiplier) ? String(message.volume_multiplier) : message.volume_multiplier;
        return object;
    };

    /**
     * Converts this VoiceAssistantAudioSettings to JSON.
     * @function toJSON
     * @memberof VoiceAssistantAudioSettings
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    VoiceAssistantAudioSettings.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for VoiceAssistantAudioSettings
     * @function getTypeUrl
     * @memberof VoiceAssistantAudioSettings
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    VoiceAssistantAudioSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/VoiceAssistantAudioSettings";
    };

    return VoiceAssistantAudioSettings;
})();

$root.VoiceAssistantRequest = (function() {

    /**
     * Properties of a VoiceAssistantRequest.
     * @exports IVoiceAssistantRequest
     * @interface IVoiceAssistantRequest
     * @property {boolean|null} [start] VoiceAssistantRequest start
     * @property {string|null} [conversation_id] VoiceAssistantRequest conversation_id
     * @property {number|null} [flags] VoiceAssistantRequest flags
     * @property {IVoiceAssistantAudioSettings|null} [audio_settings] VoiceAssistantRequest audio_settings
     * @property {string|null} [wake_word_phrase] VoiceAssistantRequest wake_word_phrase
     */

    /**
     * Constructs a new VoiceAssistantRequest.
     * @exports VoiceAssistantRequest
     * @classdesc Represents a VoiceAssistantRequest.
     * @implements IVoiceAssistantRequest
     * @constructor
     * @param {IVoiceAssistantRequest=} [properties] Properties to set
     */
    function VoiceAssistantRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * VoiceAssistantRequest start.
     * @member {boolean} start
     * @memberof VoiceAssistantRequest
     * @instance
     */
    VoiceAssistantRequest.prototype.start = false;

    /**
     * VoiceAssistantRequest conversation_id.
     * @member {string} conversation_id
     * @memberof VoiceAssistantRequest
     * @instance
     */
    VoiceAssistantRequest.prototype.conversation_id = "";

    /**
     * VoiceAssistantRequest flags.
     * @member {number} flags
     * @memberof VoiceAssistantRequest
     * @instance
     */
    VoiceAssistantRequest.prototype.flags = 0;

    /**
     * VoiceAssistantRequest audio_settings.
     * @member {IVoiceAssistantAudioSettings|null|undefined} audio_settings
     * @memberof VoiceAssistantRequest
     * @instance
     */
    VoiceAssistantRequest.prototype.audio_settings = null;

    /**
     * VoiceAssistantRequest wake_word_phrase.
     * @member {string} wake_word_phrase
     * @memberof VoiceAssistantRequest
     * @instance
     */
    VoiceAssistantRequest.prototype.wake_word_phrase = "";

    /**
     * Creates a new VoiceAssistantRequest instance using the specified properties.
     * @function create
     * @memberof VoiceAssistantRequest
     * @static
     * @param {IVoiceAssistantRequest=} [properties] Properties to set
     * @returns {VoiceAssistantRequest} VoiceAssistantRequest instance
     */
    VoiceAssistantRequest.create = function create(properties) {
        return new VoiceAssistantRequest(properties);
    };

    /**
     * Encodes the specified VoiceAssistantRequest message. Does not implicitly {@link VoiceAssistantRequest.verify|verify} messages.
     * @function encode
     * @memberof VoiceAssistantRequest
     * @static
     * @param {IVoiceAssistantRequest} message VoiceAssistantRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.start);
        if (message.conversation_id != null && Object.hasOwnProperty.call(message, "conversation_id"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.conversation_id);
        if (message.flags != null && Object.hasOwnProperty.call(message, "flags"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.flags);
        if (message.audio_settings != null && Object.hasOwnProperty.call(message, "audio_settings"))
            $root.VoiceAssistantAudioSettings.encode(message.audio_settings, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.wake_word_phrase != null && Object.hasOwnProperty.call(message, "wake_word_phrase"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.wake_word_phrase);
        return writer;
    };

    /**
     * Encodes the specified VoiceAssistantRequest message, length delimited. Does not implicitly {@link VoiceAssistantRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof VoiceAssistantRequest
     * @static
     * @param {IVoiceAssistantRequest} message VoiceAssistantRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a VoiceAssistantRequest message from the specified reader or buffer.
     * @function decode
     * @memberof VoiceAssistantRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {VoiceAssistantRequest} VoiceAssistantRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.VoiceAssistantRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.start = reader.bool();
                    break;
                }
            case 2: {
                    message.conversation_id = reader.string();
                    break;
                }
            case 3: {
                    message.flags = reader.uint32();
                    break;
                }
            case 4: {
                    message.audio_settings = $root.VoiceAssistantAudioSettings.decode(reader, reader.uint32());
                    break;
                }
            case 5: {
                    message.wake_word_phrase = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a VoiceAssistantRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof VoiceAssistantRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {VoiceAssistantRequest} VoiceAssistantRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a VoiceAssistantRequest message.
     * @function verify
     * @memberof VoiceAssistantRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    VoiceAssistantRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.start != null && message.hasOwnProperty("start"))
            if (typeof message.start !== "boolean")
                return "start: boolean expected";
        if (message.conversation_id != null && message.hasOwnProperty("conversation_id"))
            if (!$util.isString(message.conversation_id))
                return "conversation_id: string expected";
        if (message.flags != null && message.hasOwnProperty("flags"))
            if (!$util.isInteger(message.flags))
                return "flags: integer expected";
        if (message.audio_settings != null && message.hasOwnProperty("audio_settings")) {
            var error = $root.VoiceAssistantAudioSettings.verify(message.audio_settings);
            if (error)
                return "audio_settings." + error;
        }
        if (message.wake_word_phrase != null && message.hasOwnProperty("wake_word_phrase"))
            if (!$util.isString(message.wake_word_phrase))
                return "wake_word_phrase: string expected";
        return null;
    };

    /**
     * Creates a VoiceAssistantRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof VoiceAssistantRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {VoiceAssistantRequest} VoiceAssistantRequest
     */
    VoiceAssistantRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.VoiceAssistantRequest)
            return object;
        var message = new $root.VoiceAssistantRequest();
        if (object.start != null)
            message.start = Boolean(object.start);
        if (object.conversation_id != null)
            message.conversation_id = String(object.conversation_id);
        if (object.flags != null)
            message.flags = object.flags >>> 0;
        if (object.audio_settings != null) {
            if (typeof object.audio_settings !== "object")
                throw TypeError(".VoiceAssistantRequest.audio_settings: object expected");
            message.audio_settings = $root.VoiceAssistantAudioSettings.fromObject(object.audio_settings);
        }
        if (object.wake_word_phrase != null)
            message.wake_word_phrase = String(object.wake_word_phrase);
        return message;
    };

    /**
     * Creates a plain object from a VoiceAssistantRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof VoiceAssistantRequest
     * @static
     * @param {VoiceAssistantRequest} message VoiceAssistantRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    VoiceAssistantRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.start = false;
            object.conversation_id = "";
            object.flags = 0;
            object.audio_settings = null;
            object.wake_word_phrase = "";
        }
        if (message.start != null && message.hasOwnProperty("start"))
            object.start = message.start;
        if (message.conversation_id != null && message.hasOwnProperty("conversation_id"))
            object.conversation_id = message.conversation_id;
        if (message.flags != null && message.hasOwnProperty("flags"))
            object.flags = message.flags;
        if (message.audio_settings != null && message.hasOwnProperty("audio_settings"))
            object.audio_settings = $root.VoiceAssistantAudioSettings.toObject(message.audio_settings, options);
        if (message.wake_word_phrase != null && message.hasOwnProperty("wake_word_phrase"))
            object.wake_word_phrase = message.wake_word_phrase;
        return object;
    };

    /**
     * Converts this VoiceAssistantRequest to JSON.
     * @function toJSON
     * @memberof VoiceAssistantRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    VoiceAssistantRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for VoiceAssistantRequest
     * @function getTypeUrl
     * @memberof VoiceAssistantRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    VoiceAssistantRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/VoiceAssistantRequest";
    };

    return VoiceAssistantRequest;
})();

$root.VoiceAssistantResponse = (function() {

    /**
     * Properties of a VoiceAssistantResponse.
     * @exports IVoiceAssistantResponse
     * @interface IVoiceAssistantResponse
     * @property {number|null} [port] VoiceAssistantResponse port
     * @property {boolean|null} [error] VoiceAssistantResponse error
     */

    /**
     * Constructs a new VoiceAssistantResponse.
     * @exports VoiceAssistantResponse
     * @classdesc Represents a VoiceAssistantResponse.
     * @implements IVoiceAssistantResponse
     * @constructor
     * @param {IVoiceAssistantResponse=} [properties] Properties to set
     */
    function VoiceAssistantResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * VoiceAssistantResponse port.
     * @member {number} port
     * @memberof VoiceAssistantResponse
     * @instance
     */
    VoiceAssistantResponse.prototype.port = 0;

    /**
     * VoiceAssistantResponse error.
     * @member {boolean} error
     * @memberof VoiceAssistantResponse
     * @instance
     */
    VoiceAssistantResponse.prototype.error = false;

    /**
     * Creates a new VoiceAssistantResponse instance using the specified properties.
     * @function create
     * @memberof VoiceAssistantResponse
     * @static
     * @param {IVoiceAssistantResponse=} [properties] Properties to set
     * @returns {VoiceAssistantResponse} VoiceAssistantResponse instance
     */
    VoiceAssistantResponse.create = function create(properties) {
        return new VoiceAssistantResponse(properties);
    };

    /**
     * Encodes the specified VoiceAssistantResponse message. Does not implicitly {@link VoiceAssistantResponse.verify|verify} messages.
     * @function encode
     * @memberof VoiceAssistantResponse
     * @static
     * @param {IVoiceAssistantResponse} message VoiceAssistantResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.port != null && Object.hasOwnProperty.call(message, "port"))
            writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.port);
        if (message.error != null && Object.hasOwnProperty.call(message, "error"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.error);
        return writer;
    };

    /**
     * Encodes the specified VoiceAssistantResponse message, length delimited. Does not implicitly {@link VoiceAssistantResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof VoiceAssistantResponse
     * @static
     * @param {IVoiceAssistantResponse} message VoiceAssistantResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a VoiceAssistantResponse message from the specified reader or buffer.
     * @function decode
     * @memberof VoiceAssistantResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {VoiceAssistantResponse} VoiceAssistantResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.VoiceAssistantResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.port = reader.uint32();
                    break;
                }
            case 2: {
                    message.error = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a VoiceAssistantResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof VoiceAssistantResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {VoiceAssistantResponse} VoiceAssistantResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a VoiceAssistantResponse message.
     * @function verify
     * @memberof VoiceAssistantResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    VoiceAssistantResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.port != null && message.hasOwnProperty("port"))
            if (!$util.isInteger(message.port))
                return "port: integer expected";
        if (message.error != null && message.hasOwnProperty("error"))
            if (typeof message.error !== "boolean")
                return "error: boolean expected";
        return null;
    };

    /**
     * Creates a VoiceAssistantResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof VoiceAssistantResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {VoiceAssistantResponse} VoiceAssistantResponse
     */
    VoiceAssistantResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.VoiceAssistantResponse)
            return object;
        var message = new $root.VoiceAssistantResponse();
        if (object.port != null)
            message.port = object.port >>> 0;
        if (object.error != null)
            message.error = Boolean(object.error);
        return message;
    };

    /**
     * Creates a plain object from a VoiceAssistantResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof VoiceAssistantResponse
     * @static
     * @param {VoiceAssistantResponse} message VoiceAssistantResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    VoiceAssistantResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.port = 0;
            object.error = false;
        }
        if (message.port != null && message.hasOwnProperty("port"))
            object.port = message.port;
        if (message.error != null && message.hasOwnProperty("error"))
            object.error = message.error;
        return object;
    };

    /**
     * Converts this VoiceAssistantResponse to JSON.
     * @function toJSON
     * @memberof VoiceAssistantResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    VoiceAssistantResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for VoiceAssistantResponse
     * @function getTypeUrl
     * @memberof VoiceAssistantResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    VoiceAssistantResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/VoiceAssistantResponse";
    };

    return VoiceAssistantResponse;
})();

/**
 * VoiceAssistantEvent enum.
 * @exports VoiceAssistantEvent
 * @enum {number}
 * @property {number} VOICE_ASSISTANT_ERROR=0 VOICE_ASSISTANT_ERROR value
 * @property {number} VOICE_ASSISTANT_RUN_START=1 VOICE_ASSISTANT_RUN_START value
 * @property {number} VOICE_ASSISTANT_RUN_END=2 VOICE_ASSISTANT_RUN_END value
 * @property {number} VOICE_ASSISTANT_STT_START=3 VOICE_ASSISTANT_STT_START value
 * @property {number} VOICE_ASSISTANT_STT_END=4 VOICE_ASSISTANT_STT_END value
 * @property {number} VOICE_ASSISTANT_INTENT_START=5 VOICE_ASSISTANT_INTENT_START value
 * @property {number} VOICE_ASSISTANT_INTENT_END=6 VOICE_ASSISTANT_INTENT_END value
 * @property {number} VOICE_ASSISTANT_TTS_START=7 VOICE_ASSISTANT_TTS_START value
 * @property {number} VOICE_ASSISTANT_TTS_END=8 VOICE_ASSISTANT_TTS_END value
 * @property {number} VOICE_ASSISTANT_WAKE_WORD_START=9 VOICE_ASSISTANT_WAKE_WORD_START value
 * @property {number} VOICE_ASSISTANT_WAKE_WORD_END=10 VOICE_ASSISTANT_WAKE_WORD_END value
 * @property {number} VOICE_ASSISTANT_STT_VAD_START=11 VOICE_ASSISTANT_STT_VAD_START value
 * @property {number} VOICE_ASSISTANT_STT_VAD_END=12 VOICE_ASSISTANT_STT_VAD_END value
 * @property {number} VOICE_ASSISTANT_TTS_STREAM_START=98 VOICE_ASSISTANT_TTS_STREAM_START value
 * @property {number} VOICE_ASSISTANT_TTS_STREAM_END=99 VOICE_ASSISTANT_TTS_STREAM_END value
 * @property {number} VOICE_ASSISTANT_INTENT_PROGRESS=100 VOICE_ASSISTANT_INTENT_PROGRESS value
 */
$root.VoiceAssistantEvent = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "VOICE_ASSISTANT_ERROR"] = 0;
    values[valuesById[1] = "VOICE_ASSISTANT_RUN_START"] = 1;
    values[valuesById[2] = "VOICE_ASSISTANT_RUN_END"] = 2;
    values[valuesById[3] = "VOICE_ASSISTANT_STT_START"] = 3;
    values[valuesById[4] = "VOICE_ASSISTANT_STT_END"] = 4;
    values[valuesById[5] = "VOICE_ASSISTANT_INTENT_START"] = 5;
    values[valuesById[6] = "VOICE_ASSISTANT_INTENT_END"] = 6;
    values[valuesById[7] = "VOICE_ASSISTANT_TTS_START"] = 7;
    values[valuesById[8] = "VOICE_ASSISTANT_TTS_END"] = 8;
    values[valuesById[9] = "VOICE_ASSISTANT_WAKE_WORD_START"] = 9;
    values[valuesById[10] = "VOICE_ASSISTANT_WAKE_WORD_END"] = 10;
    values[valuesById[11] = "VOICE_ASSISTANT_STT_VAD_START"] = 11;
    values[valuesById[12] = "VOICE_ASSISTANT_STT_VAD_END"] = 12;
    values[valuesById[98] = "VOICE_ASSISTANT_TTS_STREAM_START"] = 98;
    values[valuesById[99] = "VOICE_ASSISTANT_TTS_STREAM_END"] = 99;
    values[valuesById[100] = "VOICE_ASSISTANT_INTENT_PROGRESS"] = 100;
    return values;
})();

$root.VoiceAssistantEventData = (function() {

    /**
     * Properties of a VoiceAssistantEventData.
     * @exports IVoiceAssistantEventData
     * @interface IVoiceAssistantEventData
     * @property {string|null} [name] VoiceAssistantEventData name
     * @property {string|null} [value] VoiceAssistantEventData value
     */

    /**
     * Constructs a new VoiceAssistantEventData.
     * @exports VoiceAssistantEventData
     * @classdesc Represents a VoiceAssistantEventData.
     * @implements IVoiceAssistantEventData
     * @constructor
     * @param {IVoiceAssistantEventData=} [properties] Properties to set
     */
    function VoiceAssistantEventData(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * VoiceAssistantEventData name.
     * @member {string} name
     * @memberof VoiceAssistantEventData
     * @instance
     */
    VoiceAssistantEventData.prototype.name = "";

    /**
     * VoiceAssistantEventData value.
     * @member {string} value
     * @memberof VoiceAssistantEventData
     * @instance
     */
    VoiceAssistantEventData.prototype.value = "";

    /**
     * Creates a new VoiceAssistantEventData instance using the specified properties.
     * @function create
     * @memberof VoiceAssistantEventData
     * @static
     * @param {IVoiceAssistantEventData=} [properties] Properties to set
     * @returns {VoiceAssistantEventData} VoiceAssistantEventData instance
     */
    VoiceAssistantEventData.create = function create(properties) {
        return new VoiceAssistantEventData(properties);
    };

    /**
     * Encodes the specified VoiceAssistantEventData message. Does not implicitly {@link VoiceAssistantEventData.verify|verify} messages.
     * @function encode
     * @memberof VoiceAssistantEventData
     * @static
     * @param {IVoiceAssistantEventData} message VoiceAssistantEventData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantEventData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
        return writer;
    };

    /**
     * Encodes the specified VoiceAssistantEventData message, length delimited. Does not implicitly {@link VoiceAssistantEventData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof VoiceAssistantEventData
     * @static
     * @param {IVoiceAssistantEventData} message VoiceAssistantEventData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantEventData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a VoiceAssistantEventData message from the specified reader or buffer.
     * @function decode
     * @memberof VoiceAssistantEventData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {VoiceAssistantEventData} VoiceAssistantEventData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantEventData.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.VoiceAssistantEventData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.name = reader.string();
                    break;
                }
            case 2: {
                    message.value = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a VoiceAssistantEventData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof VoiceAssistantEventData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {VoiceAssistantEventData} VoiceAssistantEventData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantEventData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a VoiceAssistantEventData message.
     * @function verify
     * @memberof VoiceAssistantEventData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    VoiceAssistantEventData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.value != null && message.hasOwnProperty("value"))
            if (!$util.isString(message.value))
                return "value: string expected";
        return null;
    };

    /**
     * Creates a VoiceAssistantEventData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof VoiceAssistantEventData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {VoiceAssistantEventData} VoiceAssistantEventData
     */
    VoiceAssistantEventData.fromObject = function fromObject(object) {
        if (object instanceof $root.VoiceAssistantEventData)
            return object;
        var message = new $root.VoiceAssistantEventData();
        if (object.name != null)
            message.name = String(object.name);
        if (object.value != null)
            message.value = String(object.value);
        return message;
    };

    /**
     * Creates a plain object from a VoiceAssistantEventData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof VoiceAssistantEventData
     * @static
     * @param {VoiceAssistantEventData} message VoiceAssistantEventData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    VoiceAssistantEventData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.name = "";
            object.value = "";
        }
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.value != null && message.hasOwnProperty("value"))
            object.value = message.value;
        return object;
    };

    /**
     * Converts this VoiceAssistantEventData to JSON.
     * @function toJSON
     * @memberof VoiceAssistantEventData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    VoiceAssistantEventData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for VoiceAssistantEventData
     * @function getTypeUrl
     * @memberof VoiceAssistantEventData
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    VoiceAssistantEventData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/VoiceAssistantEventData";
    };

    return VoiceAssistantEventData;
})();

$root.VoiceAssistantEventResponse = (function() {

    /**
     * Properties of a VoiceAssistantEventResponse.
     * @exports IVoiceAssistantEventResponse
     * @interface IVoiceAssistantEventResponse
     * @property {VoiceAssistantEvent|null} [event_type] VoiceAssistantEventResponse event_type
     * @property {Array.<IVoiceAssistantEventData>|null} [data] VoiceAssistantEventResponse data
     */

    /**
     * Constructs a new VoiceAssistantEventResponse.
     * @exports VoiceAssistantEventResponse
     * @classdesc Represents a VoiceAssistantEventResponse.
     * @implements IVoiceAssistantEventResponse
     * @constructor
     * @param {IVoiceAssistantEventResponse=} [properties] Properties to set
     */
    function VoiceAssistantEventResponse(properties) {
        this.data = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * VoiceAssistantEventResponse event_type.
     * @member {VoiceAssistantEvent} event_type
     * @memberof VoiceAssistantEventResponse
     * @instance
     */
    VoiceAssistantEventResponse.prototype.event_type = 0;

    /**
     * VoiceAssistantEventResponse data.
     * @member {Array.<IVoiceAssistantEventData>} data
     * @memberof VoiceAssistantEventResponse
     * @instance
     */
    VoiceAssistantEventResponse.prototype.data = $util.emptyArray;

    /**
     * Creates a new VoiceAssistantEventResponse instance using the specified properties.
     * @function create
     * @memberof VoiceAssistantEventResponse
     * @static
     * @param {IVoiceAssistantEventResponse=} [properties] Properties to set
     * @returns {VoiceAssistantEventResponse} VoiceAssistantEventResponse instance
     */
    VoiceAssistantEventResponse.create = function create(properties) {
        return new VoiceAssistantEventResponse(properties);
    };

    /**
     * Encodes the specified VoiceAssistantEventResponse message. Does not implicitly {@link VoiceAssistantEventResponse.verify|verify} messages.
     * @function encode
     * @memberof VoiceAssistantEventResponse
     * @static
     * @param {IVoiceAssistantEventResponse} message VoiceAssistantEventResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantEventResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.event_type != null && Object.hasOwnProperty.call(message, "event_type"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.event_type);
        if (message.data != null && message.data.length)
            for (var i = 0; i < message.data.length; ++i)
                $root.VoiceAssistantEventData.encode(message.data[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified VoiceAssistantEventResponse message, length delimited. Does not implicitly {@link VoiceAssistantEventResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof VoiceAssistantEventResponse
     * @static
     * @param {IVoiceAssistantEventResponse} message VoiceAssistantEventResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantEventResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a VoiceAssistantEventResponse message from the specified reader or buffer.
     * @function decode
     * @memberof VoiceAssistantEventResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {VoiceAssistantEventResponse} VoiceAssistantEventResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantEventResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.VoiceAssistantEventResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.event_type = reader.int32();
                    break;
                }
            case 2: {
                    if (!(message.data && message.data.length))
                        message.data = [];
                    message.data.push($root.VoiceAssistantEventData.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a VoiceAssistantEventResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof VoiceAssistantEventResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {VoiceAssistantEventResponse} VoiceAssistantEventResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantEventResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a VoiceAssistantEventResponse message.
     * @function verify
     * @memberof VoiceAssistantEventResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    VoiceAssistantEventResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.event_type != null && message.hasOwnProperty("event_type"))
            switch (message.event_type) {
            default:
                return "event_type: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 98:
            case 99:
            case 100:
                break;
            }
        if (message.data != null && message.hasOwnProperty("data")) {
            if (!Array.isArray(message.data))
                return "data: array expected";
            for (var i = 0; i < message.data.length; ++i) {
                var error = $root.VoiceAssistantEventData.verify(message.data[i]);
                if (error)
                    return "data." + error;
            }
        }
        return null;
    };

    /**
     * Creates a VoiceAssistantEventResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof VoiceAssistantEventResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {VoiceAssistantEventResponse} VoiceAssistantEventResponse
     */
    VoiceAssistantEventResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.VoiceAssistantEventResponse)
            return object;
        var message = new $root.VoiceAssistantEventResponse();
        switch (object.event_type) {
        default:
            if (typeof object.event_type === "number") {
                message.event_type = object.event_type;
                break;
            }
            break;
        case "VOICE_ASSISTANT_ERROR":
        case 0:
            message.event_type = 0;
            break;
        case "VOICE_ASSISTANT_RUN_START":
        case 1:
            message.event_type = 1;
            break;
        case "VOICE_ASSISTANT_RUN_END":
        case 2:
            message.event_type = 2;
            break;
        case "VOICE_ASSISTANT_STT_START":
        case 3:
            message.event_type = 3;
            break;
        case "VOICE_ASSISTANT_STT_END":
        case 4:
            message.event_type = 4;
            break;
        case "VOICE_ASSISTANT_INTENT_START":
        case 5:
            message.event_type = 5;
            break;
        case "VOICE_ASSISTANT_INTENT_END":
        case 6:
            message.event_type = 6;
            break;
        case "VOICE_ASSISTANT_TTS_START":
        case 7:
            message.event_type = 7;
            break;
        case "VOICE_ASSISTANT_TTS_END":
        case 8:
            message.event_type = 8;
            break;
        case "VOICE_ASSISTANT_WAKE_WORD_START":
        case 9:
            message.event_type = 9;
            break;
        case "VOICE_ASSISTANT_WAKE_WORD_END":
        case 10:
            message.event_type = 10;
            break;
        case "VOICE_ASSISTANT_STT_VAD_START":
        case 11:
            message.event_type = 11;
            break;
        case "VOICE_ASSISTANT_STT_VAD_END":
        case 12:
            message.event_type = 12;
            break;
        case "VOICE_ASSISTANT_TTS_STREAM_START":
        case 98:
            message.event_type = 98;
            break;
        case "VOICE_ASSISTANT_TTS_STREAM_END":
        case 99:
            message.event_type = 99;
            break;
        case "VOICE_ASSISTANT_INTENT_PROGRESS":
        case 100:
            message.event_type = 100;
            break;
        }
        if (object.data) {
            if (!Array.isArray(object.data))
                throw TypeError(".VoiceAssistantEventResponse.data: array expected");
            message.data = [];
            for (var i = 0; i < object.data.length; ++i) {
                if (typeof object.data[i] !== "object")
                    throw TypeError(".VoiceAssistantEventResponse.data: object expected");
                message.data[i] = $root.VoiceAssistantEventData.fromObject(object.data[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a VoiceAssistantEventResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof VoiceAssistantEventResponse
     * @static
     * @param {VoiceAssistantEventResponse} message VoiceAssistantEventResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    VoiceAssistantEventResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.data = [];
        if (options.defaults)
            object.event_type = options.enums === String ? "VOICE_ASSISTANT_ERROR" : 0;
        if (message.event_type != null && message.hasOwnProperty("event_type"))
            object.event_type = options.enums === String ? $root.VoiceAssistantEvent[message.event_type] === undefined ? message.event_type : $root.VoiceAssistantEvent[message.event_type] : message.event_type;
        if (message.data && message.data.length) {
            object.data = [];
            for (var j = 0; j < message.data.length; ++j)
                object.data[j] = $root.VoiceAssistantEventData.toObject(message.data[j], options);
        }
        return object;
    };

    /**
     * Converts this VoiceAssistantEventResponse to JSON.
     * @function toJSON
     * @memberof VoiceAssistantEventResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    VoiceAssistantEventResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for VoiceAssistantEventResponse
     * @function getTypeUrl
     * @memberof VoiceAssistantEventResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    VoiceAssistantEventResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/VoiceAssistantEventResponse";
    };

    return VoiceAssistantEventResponse;
})();

$root.VoiceAssistantAudio = (function() {

    /**
     * Properties of a VoiceAssistantAudio.
     * @exports IVoiceAssistantAudio
     * @interface IVoiceAssistantAudio
     * @property {Uint8Array|null} [data] VoiceAssistantAudio data
     * @property {boolean|null} [end] VoiceAssistantAudio end
     */

    /**
     * Constructs a new VoiceAssistantAudio.
     * @exports VoiceAssistantAudio
     * @classdesc Represents a VoiceAssistantAudio.
     * @implements IVoiceAssistantAudio
     * @constructor
     * @param {IVoiceAssistantAudio=} [properties] Properties to set
     */
    function VoiceAssistantAudio(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * VoiceAssistantAudio data.
     * @member {Uint8Array} data
     * @memberof VoiceAssistantAudio
     * @instance
     */
    VoiceAssistantAudio.prototype.data = $util.newBuffer([]);

    /**
     * VoiceAssistantAudio end.
     * @member {boolean} end
     * @memberof VoiceAssistantAudio
     * @instance
     */
    VoiceAssistantAudio.prototype.end = false;

    /**
     * Creates a new VoiceAssistantAudio instance using the specified properties.
     * @function create
     * @memberof VoiceAssistantAudio
     * @static
     * @param {IVoiceAssistantAudio=} [properties] Properties to set
     * @returns {VoiceAssistantAudio} VoiceAssistantAudio instance
     */
    VoiceAssistantAudio.create = function create(properties) {
        return new VoiceAssistantAudio(properties);
    };

    /**
     * Encodes the specified VoiceAssistantAudio message. Does not implicitly {@link VoiceAssistantAudio.verify|verify} messages.
     * @function encode
     * @memberof VoiceAssistantAudio
     * @static
     * @param {IVoiceAssistantAudio} message VoiceAssistantAudio message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantAudio.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.data);
        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.end);
        return writer;
    };

    /**
     * Encodes the specified VoiceAssistantAudio message, length delimited. Does not implicitly {@link VoiceAssistantAudio.verify|verify} messages.
     * @function encodeDelimited
     * @memberof VoiceAssistantAudio
     * @static
     * @param {IVoiceAssistantAudio} message VoiceAssistantAudio message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantAudio.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a VoiceAssistantAudio message from the specified reader or buffer.
     * @function decode
     * @memberof VoiceAssistantAudio
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {VoiceAssistantAudio} VoiceAssistantAudio
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantAudio.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.VoiceAssistantAudio();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.data = reader.bytes();
                    break;
                }
            case 2: {
                    message.end = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a VoiceAssistantAudio message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof VoiceAssistantAudio
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {VoiceAssistantAudio} VoiceAssistantAudio
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantAudio.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a VoiceAssistantAudio message.
     * @function verify
     * @memberof VoiceAssistantAudio
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    VoiceAssistantAudio.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.data != null && message.hasOwnProperty("data"))
            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                return "data: buffer expected";
        if (message.end != null && message.hasOwnProperty("end"))
            if (typeof message.end !== "boolean")
                return "end: boolean expected";
        return null;
    };

    /**
     * Creates a VoiceAssistantAudio message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof VoiceAssistantAudio
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {VoiceAssistantAudio} VoiceAssistantAudio
     */
    VoiceAssistantAudio.fromObject = function fromObject(object) {
        if (object instanceof $root.VoiceAssistantAudio)
            return object;
        var message = new $root.VoiceAssistantAudio();
        if (object.data != null)
            if (typeof object.data === "string")
                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
            else if (object.data.length >= 0)
                message.data = object.data;
        if (object.end != null)
            message.end = Boolean(object.end);
        return message;
    };

    /**
     * Creates a plain object from a VoiceAssistantAudio message. Also converts values to other types if specified.
     * @function toObject
     * @memberof VoiceAssistantAudio
     * @static
     * @param {VoiceAssistantAudio} message VoiceAssistantAudio
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    VoiceAssistantAudio.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            if (options.bytes === String)
                object.data = "";
            else {
                object.data = [];
                if (options.bytes !== Array)
                    object.data = $util.newBuffer(object.data);
            }
            object.end = false;
        }
        if (message.data != null && message.hasOwnProperty("data"))
            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
        if (message.end != null && message.hasOwnProperty("end"))
            object.end = message.end;
        return object;
    };

    /**
     * Converts this VoiceAssistantAudio to JSON.
     * @function toJSON
     * @memberof VoiceAssistantAudio
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    VoiceAssistantAudio.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for VoiceAssistantAudio
     * @function getTypeUrl
     * @memberof VoiceAssistantAudio
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    VoiceAssistantAudio.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/VoiceAssistantAudio";
    };

    return VoiceAssistantAudio;
})();

/**
 * VoiceAssistantTimerEvent enum.
 * @exports VoiceAssistantTimerEvent
 * @enum {number}
 * @property {number} VOICE_ASSISTANT_TIMER_STARTED=0 VOICE_ASSISTANT_TIMER_STARTED value
 * @property {number} VOICE_ASSISTANT_TIMER_UPDATED=1 VOICE_ASSISTANT_TIMER_UPDATED value
 * @property {number} VOICE_ASSISTANT_TIMER_CANCELLED=2 VOICE_ASSISTANT_TIMER_CANCELLED value
 * @property {number} VOICE_ASSISTANT_TIMER_FINISHED=3 VOICE_ASSISTANT_TIMER_FINISHED value
 */
$root.VoiceAssistantTimerEvent = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "VOICE_ASSISTANT_TIMER_STARTED"] = 0;
    values[valuesById[1] = "VOICE_ASSISTANT_TIMER_UPDATED"] = 1;
    values[valuesById[2] = "VOICE_ASSISTANT_TIMER_CANCELLED"] = 2;
    values[valuesById[3] = "VOICE_ASSISTANT_TIMER_FINISHED"] = 3;
    return values;
})();

$root.VoiceAssistantTimerEventResponse = (function() {

    /**
     * Properties of a VoiceAssistantTimerEventResponse.
     * @exports IVoiceAssistantTimerEventResponse
     * @interface IVoiceAssistantTimerEventResponse
     * @property {VoiceAssistantTimerEvent|null} [event_type] VoiceAssistantTimerEventResponse event_type
     * @property {string|null} [timer_id] VoiceAssistantTimerEventResponse timer_id
     * @property {string|null} [name] VoiceAssistantTimerEventResponse name
     * @property {number|null} [total_seconds] VoiceAssistantTimerEventResponse total_seconds
     * @property {number|null} [seconds_left] VoiceAssistantTimerEventResponse seconds_left
     * @property {boolean|null} [is_active] VoiceAssistantTimerEventResponse is_active
     */

    /**
     * Constructs a new VoiceAssistantTimerEventResponse.
     * @exports VoiceAssistantTimerEventResponse
     * @classdesc Represents a VoiceAssistantTimerEventResponse.
     * @implements IVoiceAssistantTimerEventResponse
     * @constructor
     * @param {IVoiceAssistantTimerEventResponse=} [properties] Properties to set
     */
    function VoiceAssistantTimerEventResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * VoiceAssistantTimerEventResponse event_type.
     * @member {VoiceAssistantTimerEvent} event_type
     * @memberof VoiceAssistantTimerEventResponse
     * @instance
     */
    VoiceAssistantTimerEventResponse.prototype.event_type = 0;

    /**
     * VoiceAssistantTimerEventResponse timer_id.
     * @member {string} timer_id
     * @memberof VoiceAssistantTimerEventResponse
     * @instance
     */
    VoiceAssistantTimerEventResponse.prototype.timer_id = "";

    /**
     * VoiceAssistantTimerEventResponse name.
     * @member {string} name
     * @memberof VoiceAssistantTimerEventResponse
     * @instance
     */
    VoiceAssistantTimerEventResponse.prototype.name = "";

    /**
     * VoiceAssistantTimerEventResponse total_seconds.
     * @member {number} total_seconds
     * @memberof VoiceAssistantTimerEventResponse
     * @instance
     */
    VoiceAssistantTimerEventResponse.prototype.total_seconds = 0;

    /**
     * VoiceAssistantTimerEventResponse seconds_left.
     * @member {number} seconds_left
     * @memberof VoiceAssistantTimerEventResponse
     * @instance
     */
    VoiceAssistantTimerEventResponse.prototype.seconds_left = 0;

    /**
     * VoiceAssistantTimerEventResponse is_active.
     * @member {boolean} is_active
     * @memberof VoiceAssistantTimerEventResponse
     * @instance
     */
    VoiceAssistantTimerEventResponse.prototype.is_active = false;

    /**
     * Creates a new VoiceAssistantTimerEventResponse instance using the specified properties.
     * @function create
     * @memberof VoiceAssistantTimerEventResponse
     * @static
     * @param {IVoiceAssistantTimerEventResponse=} [properties] Properties to set
     * @returns {VoiceAssistantTimerEventResponse} VoiceAssistantTimerEventResponse instance
     */
    VoiceAssistantTimerEventResponse.create = function create(properties) {
        return new VoiceAssistantTimerEventResponse(properties);
    };

    /**
     * Encodes the specified VoiceAssistantTimerEventResponse message. Does not implicitly {@link VoiceAssistantTimerEventResponse.verify|verify} messages.
     * @function encode
     * @memberof VoiceAssistantTimerEventResponse
     * @static
     * @param {IVoiceAssistantTimerEventResponse} message VoiceAssistantTimerEventResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantTimerEventResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.event_type != null && Object.hasOwnProperty.call(message, "event_type"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.event_type);
        if (message.timer_id != null && Object.hasOwnProperty.call(message, "timer_id"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.timer_id);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.total_seconds != null && Object.hasOwnProperty.call(message, "total_seconds"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.total_seconds);
        if (message.seconds_left != null && Object.hasOwnProperty.call(message, "seconds_left"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.seconds_left);
        if (message.is_active != null && Object.hasOwnProperty.call(message, "is_active"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.is_active);
        return writer;
    };

    /**
     * Encodes the specified VoiceAssistantTimerEventResponse message, length delimited. Does not implicitly {@link VoiceAssistantTimerEventResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof VoiceAssistantTimerEventResponse
     * @static
     * @param {IVoiceAssistantTimerEventResponse} message VoiceAssistantTimerEventResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantTimerEventResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a VoiceAssistantTimerEventResponse message from the specified reader or buffer.
     * @function decode
     * @memberof VoiceAssistantTimerEventResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {VoiceAssistantTimerEventResponse} VoiceAssistantTimerEventResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantTimerEventResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.VoiceAssistantTimerEventResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.event_type = reader.int32();
                    break;
                }
            case 2: {
                    message.timer_id = reader.string();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 4: {
                    message.total_seconds = reader.uint32();
                    break;
                }
            case 5: {
                    message.seconds_left = reader.uint32();
                    break;
                }
            case 6: {
                    message.is_active = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a VoiceAssistantTimerEventResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof VoiceAssistantTimerEventResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {VoiceAssistantTimerEventResponse} VoiceAssistantTimerEventResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantTimerEventResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a VoiceAssistantTimerEventResponse message.
     * @function verify
     * @memberof VoiceAssistantTimerEventResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    VoiceAssistantTimerEventResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.event_type != null && message.hasOwnProperty("event_type"))
            switch (message.event_type) {
            default:
                return "event_type: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        if (message.timer_id != null && message.hasOwnProperty("timer_id"))
            if (!$util.isString(message.timer_id))
                return "timer_id: string expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.total_seconds != null && message.hasOwnProperty("total_seconds"))
            if (!$util.isInteger(message.total_seconds))
                return "total_seconds: integer expected";
        if (message.seconds_left != null && message.hasOwnProperty("seconds_left"))
            if (!$util.isInteger(message.seconds_left))
                return "seconds_left: integer expected";
        if (message.is_active != null && message.hasOwnProperty("is_active"))
            if (typeof message.is_active !== "boolean")
                return "is_active: boolean expected";
        return null;
    };

    /**
     * Creates a VoiceAssistantTimerEventResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof VoiceAssistantTimerEventResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {VoiceAssistantTimerEventResponse} VoiceAssistantTimerEventResponse
     */
    VoiceAssistantTimerEventResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.VoiceAssistantTimerEventResponse)
            return object;
        var message = new $root.VoiceAssistantTimerEventResponse();
        switch (object.event_type) {
        default:
            if (typeof object.event_type === "number") {
                message.event_type = object.event_type;
                break;
            }
            break;
        case "VOICE_ASSISTANT_TIMER_STARTED":
        case 0:
            message.event_type = 0;
            break;
        case "VOICE_ASSISTANT_TIMER_UPDATED":
        case 1:
            message.event_type = 1;
            break;
        case "VOICE_ASSISTANT_TIMER_CANCELLED":
        case 2:
            message.event_type = 2;
            break;
        case "VOICE_ASSISTANT_TIMER_FINISHED":
        case 3:
            message.event_type = 3;
            break;
        }
        if (object.timer_id != null)
            message.timer_id = String(object.timer_id);
        if (object.name != null)
            message.name = String(object.name);
        if (object.total_seconds != null)
            message.total_seconds = object.total_seconds >>> 0;
        if (object.seconds_left != null)
            message.seconds_left = object.seconds_left >>> 0;
        if (object.is_active != null)
            message.is_active = Boolean(object.is_active);
        return message;
    };

    /**
     * Creates a plain object from a VoiceAssistantTimerEventResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof VoiceAssistantTimerEventResponse
     * @static
     * @param {VoiceAssistantTimerEventResponse} message VoiceAssistantTimerEventResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    VoiceAssistantTimerEventResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.event_type = options.enums === String ? "VOICE_ASSISTANT_TIMER_STARTED" : 0;
            object.timer_id = "";
            object.name = "";
            object.total_seconds = 0;
            object.seconds_left = 0;
            object.is_active = false;
        }
        if (message.event_type != null && message.hasOwnProperty("event_type"))
            object.event_type = options.enums === String ? $root.VoiceAssistantTimerEvent[message.event_type] === undefined ? message.event_type : $root.VoiceAssistantTimerEvent[message.event_type] : message.event_type;
        if (message.timer_id != null && message.hasOwnProperty("timer_id"))
            object.timer_id = message.timer_id;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.total_seconds != null && message.hasOwnProperty("total_seconds"))
            object.total_seconds = message.total_seconds;
        if (message.seconds_left != null && message.hasOwnProperty("seconds_left"))
            object.seconds_left = message.seconds_left;
        if (message.is_active != null && message.hasOwnProperty("is_active"))
            object.is_active = message.is_active;
        return object;
    };

    /**
     * Converts this VoiceAssistantTimerEventResponse to JSON.
     * @function toJSON
     * @memberof VoiceAssistantTimerEventResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    VoiceAssistantTimerEventResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for VoiceAssistantTimerEventResponse
     * @function getTypeUrl
     * @memberof VoiceAssistantTimerEventResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    VoiceAssistantTimerEventResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/VoiceAssistantTimerEventResponse";
    };

    return VoiceAssistantTimerEventResponse;
})();

$root.VoiceAssistantAnnounceRequest = (function() {

    /**
     * Properties of a VoiceAssistantAnnounceRequest.
     * @exports IVoiceAssistantAnnounceRequest
     * @interface IVoiceAssistantAnnounceRequest
     * @property {string|null} [media_id] VoiceAssistantAnnounceRequest media_id
     * @property {string|null} [text] VoiceAssistantAnnounceRequest text
     * @property {string|null} [preannounce_media_id] VoiceAssistantAnnounceRequest preannounce_media_id
     * @property {boolean|null} [start_conversation] VoiceAssistantAnnounceRequest start_conversation
     */

    /**
     * Constructs a new VoiceAssistantAnnounceRequest.
     * @exports VoiceAssistantAnnounceRequest
     * @classdesc Represents a VoiceAssistantAnnounceRequest.
     * @implements IVoiceAssistantAnnounceRequest
     * @constructor
     * @param {IVoiceAssistantAnnounceRequest=} [properties] Properties to set
     */
    function VoiceAssistantAnnounceRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * VoiceAssistantAnnounceRequest media_id.
     * @member {string} media_id
     * @memberof VoiceAssistantAnnounceRequest
     * @instance
     */
    VoiceAssistantAnnounceRequest.prototype.media_id = "";

    /**
     * VoiceAssistantAnnounceRequest text.
     * @member {string} text
     * @memberof VoiceAssistantAnnounceRequest
     * @instance
     */
    VoiceAssistantAnnounceRequest.prototype.text = "";

    /**
     * VoiceAssistantAnnounceRequest preannounce_media_id.
     * @member {string} preannounce_media_id
     * @memberof VoiceAssistantAnnounceRequest
     * @instance
     */
    VoiceAssistantAnnounceRequest.prototype.preannounce_media_id = "";

    /**
     * VoiceAssistantAnnounceRequest start_conversation.
     * @member {boolean} start_conversation
     * @memberof VoiceAssistantAnnounceRequest
     * @instance
     */
    VoiceAssistantAnnounceRequest.prototype.start_conversation = false;

    /**
     * Creates a new VoiceAssistantAnnounceRequest instance using the specified properties.
     * @function create
     * @memberof VoiceAssistantAnnounceRequest
     * @static
     * @param {IVoiceAssistantAnnounceRequest=} [properties] Properties to set
     * @returns {VoiceAssistantAnnounceRequest} VoiceAssistantAnnounceRequest instance
     */
    VoiceAssistantAnnounceRequest.create = function create(properties) {
        return new VoiceAssistantAnnounceRequest(properties);
    };

    /**
     * Encodes the specified VoiceAssistantAnnounceRequest message. Does not implicitly {@link VoiceAssistantAnnounceRequest.verify|verify} messages.
     * @function encode
     * @memberof VoiceAssistantAnnounceRequest
     * @static
     * @param {IVoiceAssistantAnnounceRequest} message VoiceAssistantAnnounceRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantAnnounceRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.media_id != null && Object.hasOwnProperty.call(message, "media_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.media_id);
        if (message.text != null && Object.hasOwnProperty.call(message, "text"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
        if (message.preannounce_media_id != null && Object.hasOwnProperty.call(message, "preannounce_media_id"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.preannounce_media_id);
        if (message.start_conversation != null && Object.hasOwnProperty.call(message, "start_conversation"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.start_conversation);
        return writer;
    };

    /**
     * Encodes the specified VoiceAssistantAnnounceRequest message, length delimited. Does not implicitly {@link VoiceAssistantAnnounceRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof VoiceAssistantAnnounceRequest
     * @static
     * @param {IVoiceAssistantAnnounceRequest} message VoiceAssistantAnnounceRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantAnnounceRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a VoiceAssistantAnnounceRequest message from the specified reader or buffer.
     * @function decode
     * @memberof VoiceAssistantAnnounceRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {VoiceAssistantAnnounceRequest} VoiceAssistantAnnounceRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantAnnounceRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.VoiceAssistantAnnounceRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.media_id = reader.string();
                    break;
                }
            case 2: {
                    message.text = reader.string();
                    break;
                }
            case 3: {
                    message.preannounce_media_id = reader.string();
                    break;
                }
            case 4: {
                    message.start_conversation = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a VoiceAssistantAnnounceRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof VoiceAssistantAnnounceRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {VoiceAssistantAnnounceRequest} VoiceAssistantAnnounceRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantAnnounceRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a VoiceAssistantAnnounceRequest message.
     * @function verify
     * @memberof VoiceAssistantAnnounceRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    VoiceAssistantAnnounceRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.media_id != null && message.hasOwnProperty("media_id"))
            if (!$util.isString(message.media_id))
                return "media_id: string expected";
        if (message.text != null && message.hasOwnProperty("text"))
            if (!$util.isString(message.text))
                return "text: string expected";
        if (message.preannounce_media_id != null && message.hasOwnProperty("preannounce_media_id"))
            if (!$util.isString(message.preannounce_media_id))
                return "preannounce_media_id: string expected";
        if (message.start_conversation != null && message.hasOwnProperty("start_conversation"))
            if (typeof message.start_conversation !== "boolean")
                return "start_conversation: boolean expected";
        return null;
    };

    /**
     * Creates a VoiceAssistantAnnounceRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof VoiceAssistantAnnounceRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {VoiceAssistantAnnounceRequest} VoiceAssistantAnnounceRequest
     */
    VoiceAssistantAnnounceRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.VoiceAssistantAnnounceRequest)
            return object;
        var message = new $root.VoiceAssistantAnnounceRequest();
        if (object.media_id != null)
            message.media_id = String(object.media_id);
        if (object.text != null)
            message.text = String(object.text);
        if (object.preannounce_media_id != null)
            message.preannounce_media_id = String(object.preannounce_media_id);
        if (object.start_conversation != null)
            message.start_conversation = Boolean(object.start_conversation);
        return message;
    };

    /**
     * Creates a plain object from a VoiceAssistantAnnounceRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof VoiceAssistantAnnounceRequest
     * @static
     * @param {VoiceAssistantAnnounceRequest} message VoiceAssistantAnnounceRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    VoiceAssistantAnnounceRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.media_id = "";
            object.text = "";
            object.preannounce_media_id = "";
            object.start_conversation = false;
        }
        if (message.media_id != null && message.hasOwnProperty("media_id"))
            object.media_id = message.media_id;
        if (message.text != null && message.hasOwnProperty("text"))
            object.text = message.text;
        if (message.preannounce_media_id != null && message.hasOwnProperty("preannounce_media_id"))
            object.preannounce_media_id = message.preannounce_media_id;
        if (message.start_conversation != null && message.hasOwnProperty("start_conversation"))
            object.start_conversation = message.start_conversation;
        return object;
    };

    /**
     * Converts this VoiceAssistantAnnounceRequest to JSON.
     * @function toJSON
     * @memberof VoiceAssistantAnnounceRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    VoiceAssistantAnnounceRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for VoiceAssistantAnnounceRequest
     * @function getTypeUrl
     * @memberof VoiceAssistantAnnounceRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    VoiceAssistantAnnounceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/VoiceAssistantAnnounceRequest";
    };

    return VoiceAssistantAnnounceRequest;
})();

$root.VoiceAssistantAnnounceFinished = (function() {

    /**
     * Properties of a VoiceAssistantAnnounceFinished.
     * @exports IVoiceAssistantAnnounceFinished
     * @interface IVoiceAssistantAnnounceFinished
     * @property {boolean|null} [success] VoiceAssistantAnnounceFinished success
     */

    /**
     * Constructs a new VoiceAssistantAnnounceFinished.
     * @exports VoiceAssistantAnnounceFinished
     * @classdesc Represents a VoiceAssistantAnnounceFinished.
     * @implements IVoiceAssistantAnnounceFinished
     * @constructor
     * @param {IVoiceAssistantAnnounceFinished=} [properties] Properties to set
     */
    function VoiceAssistantAnnounceFinished(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * VoiceAssistantAnnounceFinished success.
     * @member {boolean} success
     * @memberof VoiceAssistantAnnounceFinished
     * @instance
     */
    VoiceAssistantAnnounceFinished.prototype.success = false;

    /**
     * Creates a new VoiceAssistantAnnounceFinished instance using the specified properties.
     * @function create
     * @memberof VoiceAssistantAnnounceFinished
     * @static
     * @param {IVoiceAssistantAnnounceFinished=} [properties] Properties to set
     * @returns {VoiceAssistantAnnounceFinished} VoiceAssistantAnnounceFinished instance
     */
    VoiceAssistantAnnounceFinished.create = function create(properties) {
        return new VoiceAssistantAnnounceFinished(properties);
    };

    /**
     * Encodes the specified VoiceAssistantAnnounceFinished message. Does not implicitly {@link VoiceAssistantAnnounceFinished.verify|verify} messages.
     * @function encode
     * @memberof VoiceAssistantAnnounceFinished
     * @static
     * @param {IVoiceAssistantAnnounceFinished} message VoiceAssistantAnnounceFinished message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantAnnounceFinished.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.success != null && Object.hasOwnProperty.call(message, "success"))
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.success);
        return writer;
    };

    /**
     * Encodes the specified VoiceAssistantAnnounceFinished message, length delimited. Does not implicitly {@link VoiceAssistantAnnounceFinished.verify|verify} messages.
     * @function encodeDelimited
     * @memberof VoiceAssistantAnnounceFinished
     * @static
     * @param {IVoiceAssistantAnnounceFinished} message VoiceAssistantAnnounceFinished message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantAnnounceFinished.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a VoiceAssistantAnnounceFinished message from the specified reader or buffer.
     * @function decode
     * @memberof VoiceAssistantAnnounceFinished
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {VoiceAssistantAnnounceFinished} VoiceAssistantAnnounceFinished
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantAnnounceFinished.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.VoiceAssistantAnnounceFinished();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.success = reader.bool();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a VoiceAssistantAnnounceFinished message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof VoiceAssistantAnnounceFinished
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {VoiceAssistantAnnounceFinished} VoiceAssistantAnnounceFinished
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantAnnounceFinished.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a VoiceAssistantAnnounceFinished message.
     * @function verify
     * @memberof VoiceAssistantAnnounceFinished
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    VoiceAssistantAnnounceFinished.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.success != null && message.hasOwnProperty("success"))
            if (typeof message.success !== "boolean")
                return "success: boolean expected";
        return null;
    };

    /**
     * Creates a VoiceAssistantAnnounceFinished message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof VoiceAssistantAnnounceFinished
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {VoiceAssistantAnnounceFinished} VoiceAssistantAnnounceFinished
     */
    VoiceAssistantAnnounceFinished.fromObject = function fromObject(object) {
        if (object instanceof $root.VoiceAssistantAnnounceFinished)
            return object;
        var message = new $root.VoiceAssistantAnnounceFinished();
        if (object.success != null)
            message.success = Boolean(object.success);
        return message;
    };

    /**
     * Creates a plain object from a VoiceAssistantAnnounceFinished message. Also converts values to other types if specified.
     * @function toObject
     * @memberof VoiceAssistantAnnounceFinished
     * @static
     * @param {VoiceAssistantAnnounceFinished} message VoiceAssistantAnnounceFinished
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    VoiceAssistantAnnounceFinished.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.success = false;
        if (message.success != null && message.hasOwnProperty("success"))
            object.success = message.success;
        return object;
    };

    /**
     * Converts this VoiceAssistantAnnounceFinished to JSON.
     * @function toJSON
     * @memberof VoiceAssistantAnnounceFinished
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    VoiceAssistantAnnounceFinished.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for VoiceAssistantAnnounceFinished
     * @function getTypeUrl
     * @memberof VoiceAssistantAnnounceFinished
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    VoiceAssistantAnnounceFinished.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/VoiceAssistantAnnounceFinished";
    };

    return VoiceAssistantAnnounceFinished;
})();

$root.VoiceAssistantWakeWord = (function() {

    /**
     * Properties of a VoiceAssistantWakeWord.
     * @exports IVoiceAssistantWakeWord
     * @interface IVoiceAssistantWakeWord
     * @property {string|null} [id] VoiceAssistantWakeWord id
     * @property {string|null} [wake_word] VoiceAssistantWakeWord wake_word
     * @property {Array.<string>|null} [trained_languages] VoiceAssistantWakeWord trained_languages
     */

    /**
     * Constructs a new VoiceAssistantWakeWord.
     * @exports VoiceAssistantWakeWord
     * @classdesc Represents a VoiceAssistantWakeWord.
     * @implements IVoiceAssistantWakeWord
     * @constructor
     * @param {IVoiceAssistantWakeWord=} [properties] Properties to set
     */
    function VoiceAssistantWakeWord(properties) {
        this.trained_languages = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * VoiceAssistantWakeWord id.
     * @member {string} id
     * @memberof VoiceAssistantWakeWord
     * @instance
     */
    VoiceAssistantWakeWord.prototype.id = "";

    /**
     * VoiceAssistantWakeWord wake_word.
     * @member {string} wake_word
     * @memberof VoiceAssistantWakeWord
     * @instance
     */
    VoiceAssistantWakeWord.prototype.wake_word = "";

    /**
     * VoiceAssistantWakeWord trained_languages.
     * @member {Array.<string>} trained_languages
     * @memberof VoiceAssistantWakeWord
     * @instance
     */
    VoiceAssistantWakeWord.prototype.trained_languages = $util.emptyArray;

    /**
     * Creates a new VoiceAssistantWakeWord instance using the specified properties.
     * @function create
     * @memberof VoiceAssistantWakeWord
     * @static
     * @param {IVoiceAssistantWakeWord=} [properties] Properties to set
     * @returns {VoiceAssistantWakeWord} VoiceAssistantWakeWord instance
     */
    VoiceAssistantWakeWord.create = function create(properties) {
        return new VoiceAssistantWakeWord(properties);
    };

    /**
     * Encodes the specified VoiceAssistantWakeWord message. Does not implicitly {@link VoiceAssistantWakeWord.verify|verify} messages.
     * @function encode
     * @memberof VoiceAssistantWakeWord
     * @static
     * @param {IVoiceAssistantWakeWord} message VoiceAssistantWakeWord message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantWakeWord.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
        if (message.wake_word != null && Object.hasOwnProperty.call(message, "wake_word"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.wake_word);
        if (message.trained_languages != null && message.trained_languages.length)
            for (var i = 0; i < message.trained_languages.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.trained_languages[i]);
        return writer;
    };

    /**
     * Encodes the specified VoiceAssistantWakeWord message, length delimited. Does not implicitly {@link VoiceAssistantWakeWord.verify|verify} messages.
     * @function encodeDelimited
     * @memberof VoiceAssistantWakeWord
     * @static
     * @param {IVoiceAssistantWakeWord} message VoiceAssistantWakeWord message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantWakeWord.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a VoiceAssistantWakeWord message from the specified reader or buffer.
     * @function decode
     * @memberof VoiceAssistantWakeWord
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {VoiceAssistantWakeWord} VoiceAssistantWakeWord
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantWakeWord.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.VoiceAssistantWakeWord();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.id = reader.string();
                    break;
                }
            case 2: {
                    message.wake_word = reader.string();
                    break;
                }
            case 3: {
                    if (!(message.trained_languages && message.trained_languages.length))
                        message.trained_languages = [];
                    message.trained_languages.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a VoiceAssistantWakeWord message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof VoiceAssistantWakeWord
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {VoiceAssistantWakeWord} VoiceAssistantWakeWord
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantWakeWord.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a VoiceAssistantWakeWord message.
     * @function verify
     * @memberof VoiceAssistantWakeWord
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    VoiceAssistantWakeWord.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isString(message.id))
                return "id: string expected";
        if (message.wake_word != null && message.hasOwnProperty("wake_word"))
            if (!$util.isString(message.wake_word))
                return "wake_word: string expected";
        if (message.trained_languages != null && message.hasOwnProperty("trained_languages")) {
            if (!Array.isArray(message.trained_languages))
                return "trained_languages: array expected";
            for (var i = 0; i < message.trained_languages.length; ++i)
                if (!$util.isString(message.trained_languages[i]))
                    return "trained_languages: string[] expected";
        }
        return null;
    };

    /**
     * Creates a VoiceAssistantWakeWord message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof VoiceAssistantWakeWord
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {VoiceAssistantWakeWord} VoiceAssistantWakeWord
     */
    VoiceAssistantWakeWord.fromObject = function fromObject(object) {
        if (object instanceof $root.VoiceAssistantWakeWord)
            return object;
        var message = new $root.VoiceAssistantWakeWord();
        if (object.id != null)
            message.id = String(object.id);
        if (object.wake_word != null)
            message.wake_word = String(object.wake_word);
        if (object.trained_languages) {
            if (!Array.isArray(object.trained_languages))
                throw TypeError(".VoiceAssistantWakeWord.trained_languages: array expected");
            message.trained_languages = [];
            for (var i = 0; i < object.trained_languages.length; ++i)
                message.trained_languages[i] = String(object.trained_languages[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a VoiceAssistantWakeWord message. Also converts values to other types if specified.
     * @function toObject
     * @memberof VoiceAssistantWakeWord
     * @static
     * @param {VoiceAssistantWakeWord} message VoiceAssistantWakeWord
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    VoiceAssistantWakeWord.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.trained_languages = [];
        if (options.defaults) {
            object.id = "";
            object.wake_word = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.wake_word != null && message.hasOwnProperty("wake_word"))
            object.wake_word = message.wake_word;
        if (message.trained_languages && message.trained_languages.length) {
            object.trained_languages = [];
            for (var j = 0; j < message.trained_languages.length; ++j)
                object.trained_languages[j] = message.trained_languages[j];
        }
        return object;
    };

    /**
     * Converts this VoiceAssistantWakeWord to JSON.
     * @function toJSON
     * @memberof VoiceAssistantWakeWord
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    VoiceAssistantWakeWord.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for VoiceAssistantWakeWord
     * @function getTypeUrl
     * @memberof VoiceAssistantWakeWord
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    VoiceAssistantWakeWord.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/VoiceAssistantWakeWord";
    };

    return VoiceAssistantWakeWord;
})();

$root.VoiceAssistantExternalWakeWord = (function() {

    /**
     * Properties of a VoiceAssistantExternalWakeWord.
     * @exports IVoiceAssistantExternalWakeWord
     * @interface IVoiceAssistantExternalWakeWord
     * @property {string|null} [id] VoiceAssistantExternalWakeWord id
     * @property {string|null} [wake_word] VoiceAssistantExternalWakeWord wake_word
     * @property {Array.<string>|null} [trained_languages] VoiceAssistantExternalWakeWord trained_languages
     * @property {string|null} [model_type] VoiceAssistantExternalWakeWord model_type
     * @property {number|null} [model_size] VoiceAssistantExternalWakeWord model_size
     * @property {string|null} [model_hash] VoiceAssistantExternalWakeWord model_hash
     * @property {string|null} [url] VoiceAssistantExternalWakeWord url
     */

    /**
     * Constructs a new VoiceAssistantExternalWakeWord.
     * @exports VoiceAssistantExternalWakeWord
     * @classdesc Represents a VoiceAssistantExternalWakeWord.
     * @implements IVoiceAssistantExternalWakeWord
     * @constructor
     * @param {IVoiceAssistantExternalWakeWord=} [properties] Properties to set
     */
    function VoiceAssistantExternalWakeWord(properties) {
        this.trained_languages = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * VoiceAssistantExternalWakeWord id.
     * @member {string} id
     * @memberof VoiceAssistantExternalWakeWord
     * @instance
     */
    VoiceAssistantExternalWakeWord.prototype.id = "";

    /**
     * VoiceAssistantExternalWakeWord wake_word.
     * @member {string} wake_word
     * @memberof VoiceAssistantExternalWakeWord
     * @instance
     */
    VoiceAssistantExternalWakeWord.prototype.wake_word = "";

    /**
     * VoiceAssistantExternalWakeWord trained_languages.
     * @member {Array.<string>} trained_languages
     * @memberof VoiceAssistantExternalWakeWord
     * @instance
     */
    VoiceAssistantExternalWakeWord.prototype.trained_languages = $util.emptyArray;

    /**
     * VoiceAssistantExternalWakeWord model_type.
     * @member {string} model_type
     * @memberof VoiceAssistantExternalWakeWord
     * @instance
     */
    VoiceAssistantExternalWakeWord.prototype.model_type = "";

    /**
     * VoiceAssistantExternalWakeWord model_size.
     * @member {number} model_size
     * @memberof VoiceAssistantExternalWakeWord
     * @instance
     */
    VoiceAssistantExternalWakeWord.prototype.model_size = 0;

    /**
     * VoiceAssistantExternalWakeWord model_hash.
     * @member {string} model_hash
     * @memberof VoiceAssistantExternalWakeWord
     * @instance
     */
    VoiceAssistantExternalWakeWord.prototype.model_hash = "";

    /**
     * VoiceAssistantExternalWakeWord url.
     * @member {string} url
     * @memberof VoiceAssistantExternalWakeWord
     * @instance
     */
    VoiceAssistantExternalWakeWord.prototype.url = "";

    /**
     * Creates a new VoiceAssistantExternalWakeWord instance using the specified properties.
     * @function create
     * @memberof VoiceAssistantExternalWakeWord
     * @static
     * @param {IVoiceAssistantExternalWakeWord=} [properties] Properties to set
     * @returns {VoiceAssistantExternalWakeWord} VoiceAssistantExternalWakeWord instance
     */
    VoiceAssistantExternalWakeWord.create = function create(properties) {
        return new VoiceAssistantExternalWakeWord(properties);
    };

    /**
     * Encodes the specified VoiceAssistantExternalWakeWord message. Does not implicitly {@link VoiceAssistantExternalWakeWord.verify|verify} messages.
     * @function encode
     * @memberof VoiceAssistantExternalWakeWord
     * @static
     * @param {IVoiceAssistantExternalWakeWord} message VoiceAssistantExternalWakeWord message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantExternalWakeWord.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
        if (message.wake_word != null && Object.hasOwnProperty.call(message, "wake_word"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.wake_word);
        if (message.trained_languages != null && message.trained_languages.length)
            for (var i = 0; i < message.trained_languages.length; ++i)
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.trained_languages[i]);
        if (message.model_type != null && Object.hasOwnProperty.call(message, "model_type"))
            writer.uint32(/* id 4, wireType 2 =*/34).string(message.model_type);
        if (message.model_size != null && Object.hasOwnProperty.call(message, "model_size"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.model_size);
        if (message.model_hash != null && Object.hasOwnProperty.call(message, "model_hash"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.model_hash);
        if (message.url != null && Object.hasOwnProperty.call(message, "url"))
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.url);
        return writer;
    };

    /**
     * Encodes the specified VoiceAssistantExternalWakeWord message, length delimited. Does not implicitly {@link VoiceAssistantExternalWakeWord.verify|verify} messages.
     * @function encodeDelimited
     * @memberof VoiceAssistantExternalWakeWord
     * @static
     * @param {IVoiceAssistantExternalWakeWord} message VoiceAssistantExternalWakeWord message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantExternalWakeWord.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a VoiceAssistantExternalWakeWord message from the specified reader or buffer.
     * @function decode
     * @memberof VoiceAssistantExternalWakeWord
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {VoiceAssistantExternalWakeWord} VoiceAssistantExternalWakeWord
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantExternalWakeWord.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.VoiceAssistantExternalWakeWord();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.id = reader.string();
                    break;
                }
            case 2: {
                    message.wake_word = reader.string();
                    break;
                }
            case 3: {
                    if (!(message.trained_languages && message.trained_languages.length))
                        message.trained_languages = [];
                    message.trained_languages.push(reader.string());
                    break;
                }
            case 4: {
                    message.model_type = reader.string();
                    break;
                }
            case 5: {
                    message.model_size = reader.uint32();
                    break;
                }
            case 6: {
                    message.model_hash = reader.string();
                    break;
                }
            case 7: {
                    message.url = reader.string();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a VoiceAssistantExternalWakeWord message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof VoiceAssistantExternalWakeWord
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {VoiceAssistantExternalWakeWord} VoiceAssistantExternalWakeWord
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantExternalWakeWord.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a VoiceAssistantExternalWakeWord message.
     * @function verify
     * @memberof VoiceAssistantExternalWakeWord
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    VoiceAssistantExternalWakeWord.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.id != null && message.hasOwnProperty("id"))
            if (!$util.isString(message.id))
                return "id: string expected";
        if (message.wake_word != null && message.hasOwnProperty("wake_word"))
            if (!$util.isString(message.wake_word))
                return "wake_word: string expected";
        if (message.trained_languages != null && message.hasOwnProperty("trained_languages")) {
            if (!Array.isArray(message.trained_languages))
                return "trained_languages: array expected";
            for (var i = 0; i < message.trained_languages.length; ++i)
                if (!$util.isString(message.trained_languages[i]))
                    return "trained_languages: string[] expected";
        }
        if (message.model_type != null && message.hasOwnProperty("model_type"))
            if (!$util.isString(message.model_type))
                return "model_type: string expected";
        if (message.model_size != null && message.hasOwnProperty("model_size"))
            if (!$util.isInteger(message.model_size))
                return "model_size: integer expected";
        if (message.model_hash != null && message.hasOwnProperty("model_hash"))
            if (!$util.isString(message.model_hash))
                return "model_hash: string expected";
        if (message.url != null && message.hasOwnProperty("url"))
            if (!$util.isString(message.url))
                return "url: string expected";
        return null;
    };

    /**
     * Creates a VoiceAssistantExternalWakeWord message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof VoiceAssistantExternalWakeWord
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {VoiceAssistantExternalWakeWord} VoiceAssistantExternalWakeWord
     */
    VoiceAssistantExternalWakeWord.fromObject = function fromObject(object) {
        if (object instanceof $root.VoiceAssistantExternalWakeWord)
            return object;
        var message = new $root.VoiceAssistantExternalWakeWord();
        if (object.id != null)
            message.id = String(object.id);
        if (object.wake_word != null)
            message.wake_word = String(object.wake_word);
        if (object.trained_languages) {
            if (!Array.isArray(object.trained_languages))
                throw TypeError(".VoiceAssistantExternalWakeWord.trained_languages: array expected");
            message.trained_languages = [];
            for (var i = 0; i < object.trained_languages.length; ++i)
                message.trained_languages[i] = String(object.trained_languages[i]);
        }
        if (object.model_type != null)
            message.model_type = String(object.model_type);
        if (object.model_size != null)
            message.model_size = object.model_size >>> 0;
        if (object.model_hash != null)
            message.model_hash = String(object.model_hash);
        if (object.url != null)
            message.url = String(object.url);
        return message;
    };

    /**
     * Creates a plain object from a VoiceAssistantExternalWakeWord message. Also converts values to other types if specified.
     * @function toObject
     * @memberof VoiceAssistantExternalWakeWord
     * @static
     * @param {VoiceAssistantExternalWakeWord} message VoiceAssistantExternalWakeWord
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    VoiceAssistantExternalWakeWord.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.trained_languages = [];
        if (options.defaults) {
            object.id = "";
            object.wake_word = "";
            object.model_type = "";
            object.model_size = 0;
            object.model_hash = "";
            object.url = "";
        }
        if (message.id != null && message.hasOwnProperty("id"))
            object.id = message.id;
        if (message.wake_word != null && message.hasOwnProperty("wake_word"))
            object.wake_word = message.wake_word;
        if (message.trained_languages && message.trained_languages.length) {
            object.trained_languages = [];
            for (var j = 0; j < message.trained_languages.length; ++j)
                object.trained_languages[j] = message.trained_languages[j];
        }
        if (message.model_type != null && message.hasOwnProperty("model_type"))
            object.model_type = message.model_type;
        if (message.model_size != null && message.hasOwnProperty("model_size"))
            object.model_size = message.model_size;
        if (message.model_hash != null && message.hasOwnProperty("model_hash"))
            object.model_hash = message.model_hash;
        if (message.url != null && message.hasOwnProperty("url"))
            object.url = message.url;
        return object;
    };

    /**
     * Converts this VoiceAssistantExternalWakeWord to JSON.
     * @function toJSON
     * @memberof VoiceAssistantExternalWakeWord
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    VoiceAssistantExternalWakeWord.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for VoiceAssistantExternalWakeWord
     * @function getTypeUrl
     * @memberof VoiceAssistantExternalWakeWord
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    VoiceAssistantExternalWakeWord.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/VoiceAssistantExternalWakeWord";
    };

    return VoiceAssistantExternalWakeWord;
})();

$root.VoiceAssistantConfigurationRequest = (function() {

    /**
     * Properties of a VoiceAssistantConfigurationRequest.
     * @exports IVoiceAssistantConfigurationRequest
     * @interface IVoiceAssistantConfigurationRequest
     * @property {Array.<IVoiceAssistantExternalWakeWord>|null} [external_wake_words] VoiceAssistantConfigurationRequest external_wake_words
     */

    /**
     * Constructs a new VoiceAssistantConfigurationRequest.
     * @exports VoiceAssistantConfigurationRequest
     * @classdesc Represents a VoiceAssistantConfigurationRequest.
     * @implements IVoiceAssistantConfigurationRequest
     * @constructor
     * @param {IVoiceAssistantConfigurationRequest=} [properties] Properties to set
     */
    function VoiceAssistantConfigurationRequest(properties) {
        this.external_wake_words = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * VoiceAssistantConfigurationRequest external_wake_words.
     * @member {Array.<IVoiceAssistantExternalWakeWord>} external_wake_words
     * @memberof VoiceAssistantConfigurationRequest
     * @instance
     */
    VoiceAssistantConfigurationRequest.prototype.external_wake_words = $util.emptyArray;

    /**
     * Creates a new VoiceAssistantConfigurationRequest instance using the specified properties.
     * @function create
     * @memberof VoiceAssistantConfigurationRequest
     * @static
     * @param {IVoiceAssistantConfigurationRequest=} [properties] Properties to set
     * @returns {VoiceAssistantConfigurationRequest} VoiceAssistantConfigurationRequest instance
     */
    VoiceAssistantConfigurationRequest.create = function create(properties) {
        return new VoiceAssistantConfigurationRequest(properties);
    };

    /**
     * Encodes the specified VoiceAssistantConfigurationRequest message. Does not implicitly {@link VoiceAssistantConfigurationRequest.verify|verify} messages.
     * @function encode
     * @memberof VoiceAssistantConfigurationRequest
     * @static
     * @param {IVoiceAssistantConfigurationRequest} message VoiceAssistantConfigurationRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantConfigurationRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.external_wake_words != null && message.external_wake_words.length)
            for (var i = 0; i < message.external_wake_words.length; ++i)
                $root.VoiceAssistantExternalWakeWord.encode(message.external_wake_words[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified VoiceAssistantConfigurationRequest message, length delimited. Does not implicitly {@link VoiceAssistantConfigurationRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof VoiceAssistantConfigurationRequest
     * @static
     * @param {IVoiceAssistantConfigurationRequest} message VoiceAssistantConfigurationRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantConfigurationRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a VoiceAssistantConfigurationRequest message from the specified reader or buffer.
     * @function decode
     * @memberof VoiceAssistantConfigurationRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {VoiceAssistantConfigurationRequest} VoiceAssistantConfigurationRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantConfigurationRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.VoiceAssistantConfigurationRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    if (!(message.external_wake_words && message.external_wake_words.length))
                        message.external_wake_words = [];
                    message.external_wake_words.push($root.VoiceAssistantExternalWakeWord.decode(reader, reader.uint32()));
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a VoiceAssistantConfigurationRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof VoiceAssistantConfigurationRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {VoiceAssistantConfigurationRequest} VoiceAssistantConfigurationRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantConfigurationRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a VoiceAssistantConfigurationRequest message.
     * @function verify
     * @memberof VoiceAssistantConfigurationRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    VoiceAssistantConfigurationRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.external_wake_words != null && message.hasOwnProperty("external_wake_words")) {
            if (!Array.isArray(message.external_wake_words))
                return "external_wake_words: array expected";
            for (var i = 0; i < message.external_wake_words.length; ++i) {
                var error = $root.VoiceAssistantExternalWakeWord.verify(message.external_wake_words[i]);
                if (error)
                    return "external_wake_words." + error;
            }
        }
        return null;
    };

    /**
     * Creates a VoiceAssistantConfigurationRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof VoiceAssistantConfigurationRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {VoiceAssistantConfigurationRequest} VoiceAssistantConfigurationRequest
     */
    VoiceAssistantConfigurationRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.VoiceAssistantConfigurationRequest)
            return object;
        var message = new $root.VoiceAssistantConfigurationRequest();
        if (object.external_wake_words) {
            if (!Array.isArray(object.external_wake_words))
                throw TypeError(".VoiceAssistantConfigurationRequest.external_wake_words: array expected");
            message.external_wake_words = [];
            for (var i = 0; i < object.external_wake_words.length; ++i) {
                if (typeof object.external_wake_words[i] !== "object")
                    throw TypeError(".VoiceAssistantConfigurationRequest.external_wake_words: object expected");
                message.external_wake_words[i] = $root.VoiceAssistantExternalWakeWord.fromObject(object.external_wake_words[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a VoiceAssistantConfigurationRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof VoiceAssistantConfigurationRequest
     * @static
     * @param {VoiceAssistantConfigurationRequest} message VoiceAssistantConfigurationRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    VoiceAssistantConfigurationRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.external_wake_words = [];
        if (message.external_wake_words && message.external_wake_words.length) {
            object.external_wake_words = [];
            for (var j = 0; j < message.external_wake_words.length; ++j)
                object.external_wake_words[j] = $root.VoiceAssistantExternalWakeWord.toObject(message.external_wake_words[j], options);
        }
        return object;
    };

    /**
     * Converts this VoiceAssistantConfigurationRequest to JSON.
     * @function toJSON
     * @memberof VoiceAssistantConfigurationRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    VoiceAssistantConfigurationRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for VoiceAssistantConfigurationRequest
     * @function getTypeUrl
     * @memberof VoiceAssistantConfigurationRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    VoiceAssistantConfigurationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/VoiceAssistantConfigurationRequest";
    };

    return VoiceAssistantConfigurationRequest;
})();

$root.VoiceAssistantConfigurationResponse = (function() {

    /**
     * Properties of a VoiceAssistantConfigurationResponse.
     * @exports IVoiceAssistantConfigurationResponse
     * @interface IVoiceAssistantConfigurationResponse
     * @property {Array.<IVoiceAssistantWakeWord>|null} [available_wake_words] VoiceAssistantConfigurationResponse available_wake_words
     * @property {Array.<string>|null} [active_wake_words] VoiceAssistantConfigurationResponse active_wake_words
     * @property {number|null} [max_active_wake_words] VoiceAssistantConfigurationResponse max_active_wake_words
     */

    /**
     * Constructs a new VoiceAssistantConfigurationResponse.
     * @exports VoiceAssistantConfigurationResponse
     * @classdesc Represents a VoiceAssistantConfigurationResponse.
     * @implements IVoiceAssistantConfigurationResponse
     * @constructor
     * @param {IVoiceAssistantConfigurationResponse=} [properties] Properties to set
     */
    function VoiceAssistantConfigurationResponse(properties) {
        this.available_wake_words = [];
        this.active_wake_words = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * VoiceAssistantConfigurationResponse available_wake_words.
     * @member {Array.<IVoiceAssistantWakeWord>} available_wake_words
     * @memberof VoiceAssistantConfigurationResponse
     * @instance
     */
    VoiceAssistantConfigurationResponse.prototype.available_wake_words = $util.emptyArray;

    /**
     * VoiceAssistantConfigurationResponse active_wake_words.
     * @member {Array.<string>} active_wake_words
     * @memberof VoiceAssistantConfigurationResponse
     * @instance
     */
    VoiceAssistantConfigurationResponse.prototype.active_wake_words = $util.emptyArray;

    /**
     * VoiceAssistantConfigurationResponse max_active_wake_words.
     * @member {number} max_active_wake_words
     * @memberof VoiceAssistantConfigurationResponse
     * @instance
     */
    VoiceAssistantConfigurationResponse.prototype.max_active_wake_words = 0;

    /**
     * Creates a new VoiceAssistantConfigurationResponse instance using the specified properties.
     * @function create
     * @memberof VoiceAssistantConfigurationResponse
     * @static
     * @param {IVoiceAssistantConfigurationResponse=} [properties] Properties to set
     * @returns {VoiceAssistantConfigurationResponse} VoiceAssistantConfigurationResponse instance
     */
    VoiceAssistantConfigurationResponse.create = function create(properties) {
        return new VoiceAssistantConfigurationResponse(properties);
    };

    /**
     * Encodes the specified VoiceAssistantConfigurationResponse message. Does not implicitly {@link VoiceAssistantConfigurationResponse.verify|verify} messages.
     * @function encode
     * @memberof VoiceAssistantConfigurationResponse
     * @static
     * @param {IVoiceAssistantConfigurationResponse} message VoiceAssistantConfigurationResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantConfigurationResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.available_wake_words != null && message.available_wake_words.length)
            for (var i = 0; i < message.available_wake_words.length; ++i)
                $root.VoiceAssistantWakeWord.encode(message.available_wake_words[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        if (message.active_wake_words != null && message.active_wake_words.length)
            for (var i = 0; i < message.active_wake_words.length; ++i)
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.active_wake_words[i]);
        if (message.max_active_wake_words != null && Object.hasOwnProperty.call(message, "max_active_wake_words"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.max_active_wake_words);
        return writer;
    };

    /**
     * Encodes the specified VoiceAssistantConfigurationResponse message, length delimited. Does not implicitly {@link VoiceAssistantConfigurationResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof VoiceAssistantConfigurationResponse
     * @static
     * @param {IVoiceAssistantConfigurationResponse} message VoiceAssistantConfigurationResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantConfigurationResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a VoiceAssistantConfigurationResponse message from the specified reader or buffer.
     * @function decode
     * @memberof VoiceAssistantConfigurationResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {VoiceAssistantConfigurationResponse} VoiceAssistantConfigurationResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantConfigurationResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.VoiceAssistantConfigurationResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    if (!(message.available_wake_words && message.available_wake_words.length))
                        message.available_wake_words = [];
                    message.available_wake_words.push($root.VoiceAssistantWakeWord.decode(reader, reader.uint32()));
                    break;
                }
            case 2: {
                    if (!(message.active_wake_words && message.active_wake_words.length))
                        message.active_wake_words = [];
                    message.active_wake_words.push(reader.string());
                    break;
                }
            case 3: {
                    message.max_active_wake_words = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a VoiceAssistantConfigurationResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof VoiceAssistantConfigurationResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {VoiceAssistantConfigurationResponse} VoiceAssistantConfigurationResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantConfigurationResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a VoiceAssistantConfigurationResponse message.
     * @function verify
     * @memberof VoiceAssistantConfigurationResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    VoiceAssistantConfigurationResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.available_wake_words != null && message.hasOwnProperty("available_wake_words")) {
            if (!Array.isArray(message.available_wake_words))
                return "available_wake_words: array expected";
            for (var i = 0; i < message.available_wake_words.length; ++i) {
                var error = $root.VoiceAssistantWakeWord.verify(message.available_wake_words[i]);
                if (error)
                    return "available_wake_words." + error;
            }
        }
        if (message.active_wake_words != null && message.hasOwnProperty("active_wake_words")) {
            if (!Array.isArray(message.active_wake_words))
                return "active_wake_words: array expected";
            for (var i = 0; i < message.active_wake_words.length; ++i)
                if (!$util.isString(message.active_wake_words[i]))
                    return "active_wake_words: string[] expected";
        }
        if (message.max_active_wake_words != null && message.hasOwnProperty("max_active_wake_words"))
            if (!$util.isInteger(message.max_active_wake_words))
                return "max_active_wake_words: integer expected";
        return null;
    };

    /**
     * Creates a VoiceAssistantConfigurationResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof VoiceAssistantConfigurationResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {VoiceAssistantConfigurationResponse} VoiceAssistantConfigurationResponse
     */
    VoiceAssistantConfigurationResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.VoiceAssistantConfigurationResponse)
            return object;
        var message = new $root.VoiceAssistantConfigurationResponse();
        if (object.available_wake_words) {
            if (!Array.isArray(object.available_wake_words))
                throw TypeError(".VoiceAssistantConfigurationResponse.available_wake_words: array expected");
            message.available_wake_words = [];
            for (var i = 0; i < object.available_wake_words.length; ++i) {
                if (typeof object.available_wake_words[i] !== "object")
                    throw TypeError(".VoiceAssistantConfigurationResponse.available_wake_words: object expected");
                message.available_wake_words[i] = $root.VoiceAssistantWakeWord.fromObject(object.available_wake_words[i]);
            }
        }
        if (object.active_wake_words) {
            if (!Array.isArray(object.active_wake_words))
                throw TypeError(".VoiceAssistantConfigurationResponse.active_wake_words: array expected");
            message.active_wake_words = [];
            for (var i = 0; i < object.active_wake_words.length; ++i)
                message.active_wake_words[i] = String(object.active_wake_words[i]);
        }
        if (object.max_active_wake_words != null)
            message.max_active_wake_words = object.max_active_wake_words >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a VoiceAssistantConfigurationResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof VoiceAssistantConfigurationResponse
     * @static
     * @param {VoiceAssistantConfigurationResponse} message VoiceAssistantConfigurationResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    VoiceAssistantConfigurationResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.available_wake_words = [];
            object.active_wake_words = [];
        }
        if (options.defaults)
            object.max_active_wake_words = 0;
        if (message.available_wake_words && message.available_wake_words.length) {
            object.available_wake_words = [];
            for (var j = 0; j < message.available_wake_words.length; ++j)
                object.available_wake_words[j] = $root.VoiceAssistantWakeWord.toObject(message.available_wake_words[j], options);
        }
        if (message.active_wake_words && message.active_wake_words.length) {
            object.active_wake_words = [];
            for (var j = 0; j < message.active_wake_words.length; ++j)
                object.active_wake_words[j] = message.active_wake_words[j];
        }
        if (message.max_active_wake_words != null && message.hasOwnProperty("max_active_wake_words"))
            object.max_active_wake_words = message.max_active_wake_words;
        return object;
    };

    /**
     * Converts this VoiceAssistantConfigurationResponse to JSON.
     * @function toJSON
     * @memberof VoiceAssistantConfigurationResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    VoiceAssistantConfigurationResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for VoiceAssistantConfigurationResponse
     * @function getTypeUrl
     * @memberof VoiceAssistantConfigurationResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    VoiceAssistantConfigurationResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/VoiceAssistantConfigurationResponse";
    };

    return VoiceAssistantConfigurationResponse;
})();

$root.VoiceAssistantSetConfiguration = (function() {

    /**
     * Properties of a VoiceAssistantSetConfiguration.
     * @exports IVoiceAssistantSetConfiguration
     * @interface IVoiceAssistantSetConfiguration
     * @property {Array.<string>|null} [active_wake_words] VoiceAssistantSetConfiguration active_wake_words
     */

    /**
     * Constructs a new VoiceAssistantSetConfiguration.
     * @exports VoiceAssistantSetConfiguration
     * @classdesc Represents a VoiceAssistantSetConfiguration.
     * @implements IVoiceAssistantSetConfiguration
     * @constructor
     * @param {IVoiceAssistantSetConfiguration=} [properties] Properties to set
     */
    function VoiceAssistantSetConfiguration(properties) {
        this.active_wake_words = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * VoiceAssistantSetConfiguration active_wake_words.
     * @member {Array.<string>} active_wake_words
     * @memberof VoiceAssistantSetConfiguration
     * @instance
     */
    VoiceAssistantSetConfiguration.prototype.active_wake_words = $util.emptyArray;

    /**
     * Creates a new VoiceAssistantSetConfiguration instance using the specified properties.
     * @function create
     * @memberof VoiceAssistantSetConfiguration
     * @static
     * @param {IVoiceAssistantSetConfiguration=} [properties] Properties to set
     * @returns {VoiceAssistantSetConfiguration} VoiceAssistantSetConfiguration instance
     */
    VoiceAssistantSetConfiguration.create = function create(properties) {
        return new VoiceAssistantSetConfiguration(properties);
    };

    /**
     * Encodes the specified VoiceAssistantSetConfiguration message. Does not implicitly {@link VoiceAssistantSetConfiguration.verify|verify} messages.
     * @function encode
     * @memberof VoiceAssistantSetConfiguration
     * @static
     * @param {IVoiceAssistantSetConfiguration} message VoiceAssistantSetConfiguration message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantSetConfiguration.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.active_wake_words != null && message.active_wake_words.length)
            for (var i = 0; i < message.active_wake_words.length; ++i)
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.active_wake_words[i]);
        return writer;
    };

    /**
     * Encodes the specified VoiceAssistantSetConfiguration message, length delimited. Does not implicitly {@link VoiceAssistantSetConfiguration.verify|verify} messages.
     * @function encodeDelimited
     * @memberof VoiceAssistantSetConfiguration
     * @static
     * @param {IVoiceAssistantSetConfiguration} message VoiceAssistantSetConfiguration message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    VoiceAssistantSetConfiguration.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a VoiceAssistantSetConfiguration message from the specified reader or buffer.
     * @function decode
     * @memberof VoiceAssistantSetConfiguration
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {VoiceAssistantSetConfiguration} VoiceAssistantSetConfiguration
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantSetConfiguration.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.VoiceAssistantSetConfiguration();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    if (!(message.active_wake_words && message.active_wake_words.length))
                        message.active_wake_words = [];
                    message.active_wake_words.push(reader.string());
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a VoiceAssistantSetConfiguration message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof VoiceAssistantSetConfiguration
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {VoiceAssistantSetConfiguration} VoiceAssistantSetConfiguration
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    VoiceAssistantSetConfiguration.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a VoiceAssistantSetConfiguration message.
     * @function verify
     * @memberof VoiceAssistantSetConfiguration
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    VoiceAssistantSetConfiguration.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.active_wake_words != null && message.hasOwnProperty("active_wake_words")) {
            if (!Array.isArray(message.active_wake_words))
                return "active_wake_words: array expected";
            for (var i = 0; i < message.active_wake_words.length; ++i)
                if (!$util.isString(message.active_wake_words[i]))
                    return "active_wake_words: string[] expected";
        }
        return null;
    };

    /**
     * Creates a VoiceAssistantSetConfiguration message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof VoiceAssistantSetConfiguration
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {VoiceAssistantSetConfiguration} VoiceAssistantSetConfiguration
     */
    VoiceAssistantSetConfiguration.fromObject = function fromObject(object) {
        if (object instanceof $root.VoiceAssistantSetConfiguration)
            return object;
        var message = new $root.VoiceAssistantSetConfiguration();
        if (object.active_wake_words) {
            if (!Array.isArray(object.active_wake_words))
                throw TypeError(".VoiceAssistantSetConfiguration.active_wake_words: array expected");
            message.active_wake_words = [];
            for (var i = 0; i < object.active_wake_words.length; ++i)
                message.active_wake_words[i] = String(object.active_wake_words[i]);
        }
        return message;
    };

    /**
     * Creates a plain object from a VoiceAssistantSetConfiguration message. Also converts values to other types if specified.
     * @function toObject
     * @memberof VoiceAssistantSetConfiguration
     * @static
     * @param {VoiceAssistantSetConfiguration} message VoiceAssistantSetConfiguration
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    VoiceAssistantSetConfiguration.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.active_wake_words = [];
        if (message.active_wake_words && message.active_wake_words.length) {
            object.active_wake_words = [];
            for (var j = 0; j < message.active_wake_words.length; ++j)
                object.active_wake_words[j] = message.active_wake_words[j];
        }
        return object;
    };

    /**
     * Converts this VoiceAssistantSetConfiguration to JSON.
     * @function toJSON
     * @memberof VoiceAssistantSetConfiguration
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    VoiceAssistantSetConfiguration.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for VoiceAssistantSetConfiguration
     * @function getTypeUrl
     * @memberof VoiceAssistantSetConfiguration
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    VoiceAssistantSetConfiguration.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/VoiceAssistantSetConfiguration";
    };

    return VoiceAssistantSetConfiguration;
})();

/**
 * AlarmControlPanelState enum.
 * @exports AlarmControlPanelState
 * @enum {number}
 * @property {number} ALARM_STATE_DISARMED=0 ALARM_STATE_DISARMED value
 * @property {number} ALARM_STATE_ARMED_HOME=1 ALARM_STATE_ARMED_HOME value
 * @property {number} ALARM_STATE_ARMED_AWAY=2 ALARM_STATE_ARMED_AWAY value
 * @property {number} ALARM_STATE_ARMED_NIGHT=3 ALARM_STATE_ARMED_NIGHT value
 * @property {number} ALARM_STATE_ARMED_VACATION=4 ALARM_STATE_ARMED_VACATION value
 * @property {number} ALARM_STATE_ARMED_CUSTOM_BYPASS=5 ALARM_STATE_ARMED_CUSTOM_BYPASS value
 * @property {number} ALARM_STATE_PENDING=6 ALARM_STATE_PENDING value
 * @property {number} ALARM_STATE_ARMING=7 ALARM_STATE_ARMING value
 * @property {number} ALARM_STATE_DISARMING=8 ALARM_STATE_DISARMING value
 * @property {number} ALARM_STATE_TRIGGERED=9 ALARM_STATE_TRIGGERED value
 */
$root.AlarmControlPanelState = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "ALARM_STATE_DISARMED"] = 0;
    values[valuesById[1] = "ALARM_STATE_ARMED_HOME"] = 1;
    values[valuesById[2] = "ALARM_STATE_ARMED_AWAY"] = 2;
    values[valuesById[3] = "ALARM_STATE_ARMED_NIGHT"] = 3;
    values[valuesById[4] = "ALARM_STATE_ARMED_VACATION"] = 4;
    values[valuesById[5] = "ALARM_STATE_ARMED_CUSTOM_BYPASS"] = 5;
    values[valuesById[6] = "ALARM_STATE_PENDING"] = 6;
    values[valuesById[7] = "ALARM_STATE_ARMING"] = 7;
    values[valuesById[8] = "ALARM_STATE_DISARMING"] = 8;
    values[valuesById[9] = "ALARM_STATE_TRIGGERED"] = 9;
    return values;
})();

/**
 * AlarmControlPanelStateCommand enum.
 * @exports AlarmControlPanelStateCommand
 * @enum {number}
 * @property {number} ALARM_CONTROL_PANEL_DISARM=0 ALARM_CONTROL_PANEL_DISARM value
 * @property {number} ALARM_CONTROL_PANEL_ARM_AWAY=1 ALARM_CONTROL_PANEL_ARM_AWAY value
 * @property {number} ALARM_CONTROL_PANEL_ARM_HOME=2 ALARM_CONTROL_PANEL_ARM_HOME value
 * @property {number} ALARM_CONTROL_PANEL_ARM_NIGHT=3 ALARM_CONTROL_PANEL_ARM_NIGHT value
 * @property {number} ALARM_CONTROL_PANEL_ARM_VACATION=4 ALARM_CONTROL_PANEL_ARM_VACATION value
 * @property {number} ALARM_CONTROL_PANEL_ARM_CUSTOM_BYPASS=5 ALARM_CONTROL_PANEL_ARM_CUSTOM_BYPASS value
 * @property {number} ALARM_CONTROL_PANEL_TRIGGER=6 ALARM_CONTROL_PANEL_TRIGGER value
 */
$root.AlarmControlPanelStateCommand = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "ALARM_CONTROL_PANEL_DISARM"] = 0;
    values[valuesById[1] = "ALARM_CONTROL_PANEL_ARM_AWAY"] = 1;
    values[valuesById[2] = "ALARM_CONTROL_PANEL_ARM_HOME"] = 2;
    values[valuesById[3] = "ALARM_CONTROL_PANEL_ARM_NIGHT"] = 3;
    values[valuesById[4] = "ALARM_CONTROL_PANEL_ARM_VACATION"] = 4;
    values[valuesById[5] = "ALARM_CONTROL_PANEL_ARM_CUSTOM_BYPASS"] = 5;
    values[valuesById[6] = "ALARM_CONTROL_PANEL_TRIGGER"] = 6;
    return values;
})();

$root.ListEntitiesAlarmControlPanelResponse = (function() {

    /**
     * Properties of a ListEntitiesAlarmControlPanelResponse.
     * @exports IListEntitiesAlarmControlPanelResponse
     * @interface IListEntitiesAlarmControlPanelResponse
     * @property {string|null} [object_id] ListEntitiesAlarmControlPanelResponse object_id
     * @property {number|null} [key] ListEntitiesAlarmControlPanelResponse key
     * @property {string|null} [name] ListEntitiesAlarmControlPanelResponse name
     * @property {string|null} [icon] ListEntitiesAlarmControlPanelResponse icon
     * @property {boolean|null} [disabled_by_default] ListEntitiesAlarmControlPanelResponse disabled_by_default
     * @property {EntityCategory|null} [entity_category] ListEntitiesAlarmControlPanelResponse entity_category
     * @property {number|null} [supported_features] ListEntitiesAlarmControlPanelResponse supported_features
     * @property {boolean|null} [requires_code] ListEntitiesAlarmControlPanelResponse requires_code
     * @property {boolean|null} [requires_code_to_arm] ListEntitiesAlarmControlPanelResponse requires_code_to_arm
     * @property {number|null} [device_id] ListEntitiesAlarmControlPanelResponse device_id
     */

    /**
     * Constructs a new ListEntitiesAlarmControlPanelResponse.
     * @exports ListEntitiesAlarmControlPanelResponse
     * @classdesc Represents a ListEntitiesAlarmControlPanelResponse.
     * @implements IListEntitiesAlarmControlPanelResponse
     * @constructor
     * @param {IListEntitiesAlarmControlPanelResponse=} [properties] Properties to set
     */
    function ListEntitiesAlarmControlPanelResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesAlarmControlPanelResponse object_id.
     * @member {string} object_id
     * @memberof ListEntitiesAlarmControlPanelResponse
     * @instance
     */
    ListEntitiesAlarmControlPanelResponse.prototype.object_id = "";

    /**
     * ListEntitiesAlarmControlPanelResponse key.
     * @member {number} key
     * @memberof ListEntitiesAlarmControlPanelResponse
     * @instance
     */
    ListEntitiesAlarmControlPanelResponse.prototype.key = 0;

    /**
     * ListEntitiesAlarmControlPanelResponse name.
     * @member {string} name
     * @memberof ListEntitiesAlarmControlPanelResponse
     * @instance
     */
    ListEntitiesAlarmControlPanelResponse.prototype.name = "";

    /**
     * ListEntitiesAlarmControlPanelResponse icon.
     * @member {string} icon
     * @memberof ListEntitiesAlarmControlPanelResponse
     * @instance
     */
    ListEntitiesAlarmControlPanelResponse.prototype.icon = "";

    /**
     * ListEntitiesAlarmControlPanelResponse disabled_by_default.
     * @member {boolean} disabled_by_default
     * @memberof ListEntitiesAlarmControlPanelResponse
     * @instance
     */
    ListEntitiesAlarmControlPanelResponse.prototype.disabled_by_default = false;

    /**
     * ListEntitiesAlarmControlPanelResponse entity_category.
     * @member {EntityCategory} entity_category
     * @memberof ListEntitiesAlarmControlPanelResponse
     * @instance
     */
    ListEntitiesAlarmControlPanelResponse.prototype.entity_category = 0;

    /**
     * ListEntitiesAlarmControlPanelResponse supported_features.
     * @member {number} supported_features
     * @memberof ListEntitiesAlarmControlPanelResponse
     * @instance
     */
    ListEntitiesAlarmControlPanelResponse.prototype.supported_features = 0;

    /**
     * ListEntitiesAlarmControlPanelResponse requires_code.
     * @member {boolean} requires_code
     * @memberof ListEntitiesAlarmControlPanelResponse
     * @instance
     */
    ListEntitiesAlarmControlPanelResponse.prototype.requires_code = false;

    /**
     * ListEntitiesAlarmControlPanelResponse requires_code_to_arm.
     * @member {boolean} requires_code_to_arm
     * @memberof ListEntitiesAlarmControlPanelResponse
     * @instance
     */
    ListEntitiesAlarmControlPanelResponse.prototype.requires_code_to_arm = false;

    /**
     * ListEntitiesAlarmControlPanelResponse device_id.
     * @member {number} device_id
     * @memberof ListEntitiesAlarmControlPanelResponse
     * @instance
     */
    ListEntitiesAlarmControlPanelResponse.prototype.device_id = 0;

    /**
     * Creates a new ListEntitiesAlarmControlPanelResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesAlarmControlPanelResponse
     * @static
     * @param {IListEntitiesAlarmControlPanelResponse=} [properties] Properties to set
     * @returns {ListEntitiesAlarmControlPanelResponse} ListEntitiesAlarmControlPanelResponse instance
     */
    ListEntitiesAlarmControlPanelResponse.create = function create(properties) {
        return new ListEntitiesAlarmControlPanelResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesAlarmControlPanelResponse message. Does not implicitly {@link ListEntitiesAlarmControlPanelResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesAlarmControlPanelResponse
     * @static
     * @param {IListEntitiesAlarmControlPanelResponse} message ListEntitiesAlarmControlPanelResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesAlarmControlPanelResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.object_id != null && Object.hasOwnProperty.call(message, "object_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.object_id);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.icon);
        if (message.disabled_by_default != null && Object.hasOwnProperty.call(message, "disabled_by_default"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.disabled_by_default);
        if (message.entity_category != null && Object.hasOwnProperty.call(message, "entity_category"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.entity_category);
        if (message.supported_features != null && Object.hasOwnProperty.call(message, "supported_features"))
            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.supported_features);
        if (message.requires_code != null && Object.hasOwnProperty.call(message, "requires_code"))
            writer.uint32(/* id 9, wireType 0 =*/72).bool(message.requires_code);
        if (message.requires_code_to_arm != null && Object.hasOwnProperty.call(message, "requires_code_to_arm"))
            writer.uint32(/* id 10, wireType 0 =*/80).bool(message.requires_code_to_arm);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesAlarmControlPanelResponse message, length delimited. Does not implicitly {@link ListEntitiesAlarmControlPanelResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesAlarmControlPanelResponse
     * @static
     * @param {IListEntitiesAlarmControlPanelResponse} message ListEntitiesAlarmControlPanelResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesAlarmControlPanelResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesAlarmControlPanelResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesAlarmControlPanelResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesAlarmControlPanelResponse} ListEntitiesAlarmControlPanelResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesAlarmControlPanelResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesAlarmControlPanelResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.object_id = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 5: {
                    message.icon = reader.string();
                    break;
                }
            case 6: {
                    message.disabled_by_default = reader.bool();
                    break;
                }
            case 7: {
                    message.entity_category = reader.int32();
                    break;
                }
            case 8: {
                    message.supported_features = reader.uint32();
                    break;
                }
            case 9: {
                    message.requires_code = reader.bool();
                    break;
                }
            case 10: {
                    message.requires_code_to_arm = reader.bool();
                    break;
                }
            case 11: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesAlarmControlPanelResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesAlarmControlPanelResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesAlarmControlPanelResponse} ListEntitiesAlarmControlPanelResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesAlarmControlPanelResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesAlarmControlPanelResponse message.
     * @function verify
     * @memberof ListEntitiesAlarmControlPanelResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesAlarmControlPanelResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            if (!$util.isString(message.object_id))
                return "object_id: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isString(message.icon))
                return "icon: string expected";
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            if (typeof message.disabled_by_default !== "boolean")
                return "disabled_by_default: boolean expected";
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            switch (message.entity_category) {
            default:
                return "entity_category: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.supported_features != null && message.hasOwnProperty("supported_features"))
            if (!$util.isInteger(message.supported_features))
                return "supported_features: integer expected";
        if (message.requires_code != null && message.hasOwnProperty("requires_code"))
            if (typeof message.requires_code !== "boolean")
                return "requires_code: boolean expected";
        if (message.requires_code_to_arm != null && message.hasOwnProperty("requires_code_to_arm"))
            if (typeof message.requires_code_to_arm !== "boolean")
                return "requires_code_to_arm: boolean expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ListEntitiesAlarmControlPanelResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesAlarmControlPanelResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesAlarmControlPanelResponse} ListEntitiesAlarmControlPanelResponse
     */
    ListEntitiesAlarmControlPanelResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesAlarmControlPanelResponse)
            return object;
        var message = new $root.ListEntitiesAlarmControlPanelResponse();
        if (object.object_id != null)
            message.object_id = String(object.object_id);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.icon != null)
            message.icon = String(object.icon);
        if (object.disabled_by_default != null)
            message.disabled_by_default = Boolean(object.disabled_by_default);
        switch (object.entity_category) {
        default:
            if (typeof object.entity_category === "number") {
                message.entity_category = object.entity_category;
                break;
            }
            break;
        case "ENTITY_CATEGORY_NONE":
        case 0:
            message.entity_category = 0;
            break;
        case "ENTITY_CATEGORY_CONFIG":
        case 1:
            message.entity_category = 1;
            break;
        case "ENTITY_CATEGORY_DIAGNOSTIC":
        case 2:
            message.entity_category = 2;
            break;
        }
        if (object.supported_features != null)
            message.supported_features = object.supported_features >>> 0;
        if (object.requires_code != null)
            message.requires_code = Boolean(object.requires_code);
        if (object.requires_code_to_arm != null)
            message.requires_code_to_arm = Boolean(object.requires_code_to_arm);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesAlarmControlPanelResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesAlarmControlPanelResponse
     * @static
     * @param {ListEntitiesAlarmControlPanelResponse} message ListEntitiesAlarmControlPanelResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesAlarmControlPanelResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.object_id = "";
            object.key = 0;
            object.name = "";
            object.icon = "";
            object.disabled_by_default = false;
            object.entity_category = options.enums === String ? "ENTITY_CATEGORY_NONE" : 0;
            object.supported_features = 0;
            object.requires_code = false;
            object.requires_code_to_arm = false;
            object.device_id = 0;
        }
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            object.object_id = message.object_id;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            object.disabled_by_default = message.disabled_by_default;
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            object.entity_category = options.enums === String ? $root.EntityCategory[message.entity_category] === undefined ? message.entity_category : $root.EntityCategory[message.entity_category] : message.entity_category;
        if (message.supported_features != null && message.hasOwnProperty("supported_features"))
            object.supported_features = message.supported_features;
        if (message.requires_code != null && message.hasOwnProperty("requires_code"))
            object.requires_code = message.requires_code;
        if (message.requires_code_to_arm != null && message.hasOwnProperty("requires_code_to_arm"))
            object.requires_code_to_arm = message.requires_code_to_arm;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ListEntitiesAlarmControlPanelResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesAlarmControlPanelResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesAlarmControlPanelResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesAlarmControlPanelResponse
     * @function getTypeUrl
     * @memberof ListEntitiesAlarmControlPanelResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesAlarmControlPanelResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesAlarmControlPanelResponse";
    };

    return ListEntitiesAlarmControlPanelResponse;
})();

$root.AlarmControlPanelStateResponse = (function() {

    /**
     * Properties of an AlarmControlPanelStateResponse.
     * @exports IAlarmControlPanelStateResponse
     * @interface IAlarmControlPanelStateResponse
     * @property {number|null} [key] AlarmControlPanelStateResponse key
     * @property {AlarmControlPanelState|null} [state] AlarmControlPanelStateResponse state
     * @property {number|null} [device_id] AlarmControlPanelStateResponse device_id
     */

    /**
     * Constructs a new AlarmControlPanelStateResponse.
     * @exports AlarmControlPanelStateResponse
     * @classdesc Represents an AlarmControlPanelStateResponse.
     * @implements IAlarmControlPanelStateResponse
     * @constructor
     * @param {IAlarmControlPanelStateResponse=} [properties] Properties to set
     */
    function AlarmControlPanelStateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * AlarmControlPanelStateResponse key.
     * @member {number} key
     * @memberof AlarmControlPanelStateResponse
     * @instance
     */
    AlarmControlPanelStateResponse.prototype.key = 0;

    /**
     * AlarmControlPanelStateResponse state.
     * @member {AlarmControlPanelState} state
     * @memberof AlarmControlPanelStateResponse
     * @instance
     */
    AlarmControlPanelStateResponse.prototype.state = 0;

    /**
     * AlarmControlPanelStateResponse device_id.
     * @member {number} device_id
     * @memberof AlarmControlPanelStateResponse
     * @instance
     */
    AlarmControlPanelStateResponse.prototype.device_id = 0;

    /**
     * Creates a new AlarmControlPanelStateResponse instance using the specified properties.
     * @function create
     * @memberof AlarmControlPanelStateResponse
     * @static
     * @param {IAlarmControlPanelStateResponse=} [properties] Properties to set
     * @returns {AlarmControlPanelStateResponse} AlarmControlPanelStateResponse instance
     */
    AlarmControlPanelStateResponse.create = function create(properties) {
        return new AlarmControlPanelStateResponse(properties);
    };

    /**
     * Encodes the specified AlarmControlPanelStateResponse message. Does not implicitly {@link AlarmControlPanelStateResponse.verify|verify} messages.
     * @function encode
     * @memberof AlarmControlPanelStateResponse
     * @static
     * @param {IAlarmControlPanelStateResponse} message AlarmControlPanelStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AlarmControlPanelStateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.state);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified AlarmControlPanelStateResponse message, length delimited. Does not implicitly {@link AlarmControlPanelStateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof AlarmControlPanelStateResponse
     * @static
     * @param {IAlarmControlPanelStateResponse} message AlarmControlPanelStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AlarmControlPanelStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an AlarmControlPanelStateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof AlarmControlPanelStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {AlarmControlPanelStateResponse} AlarmControlPanelStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AlarmControlPanelStateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AlarmControlPanelStateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.state = reader.int32();
                    break;
                }
            case 3: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an AlarmControlPanelStateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof AlarmControlPanelStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {AlarmControlPanelStateResponse} AlarmControlPanelStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AlarmControlPanelStateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an AlarmControlPanelStateResponse message.
     * @function verify
     * @memberof AlarmControlPanelStateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    AlarmControlPanelStateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            switch (message.state) {
            default:
                return "state: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
                break;
            }
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates an AlarmControlPanelStateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof AlarmControlPanelStateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {AlarmControlPanelStateResponse} AlarmControlPanelStateResponse
     */
    AlarmControlPanelStateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.AlarmControlPanelStateResponse)
            return object;
        var message = new $root.AlarmControlPanelStateResponse();
        if (object.key != null)
            message.key = object.key >>> 0;
        switch (object.state) {
        default:
            if (typeof object.state === "number") {
                message.state = object.state;
                break;
            }
            break;
        case "ALARM_STATE_DISARMED":
        case 0:
            message.state = 0;
            break;
        case "ALARM_STATE_ARMED_HOME":
        case 1:
            message.state = 1;
            break;
        case "ALARM_STATE_ARMED_AWAY":
        case 2:
            message.state = 2;
            break;
        case "ALARM_STATE_ARMED_NIGHT":
        case 3:
            message.state = 3;
            break;
        case "ALARM_STATE_ARMED_VACATION":
        case 4:
            message.state = 4;
            break;
        case "ALARM_STATE_ARMED_CUSTOM_BYPASS":
        case 5:
            message.state = 5;
            break;
        case "ALARM_STATE_PENDING":
        case 6:
            message.state = 6;
            break;
        case "ALARM_STATE_ARMING":
        case 7:
            message.state = 7;
            break;
        case "ALARM_STATE_DISARMING":
        case 8:
            message.state = 8;
            break;
        case "ALARM_STATE_TRIGGERED":
        case 9:
            message.state = 9;
            break;
        }
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from an AlarmControlPanelStateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof AlarmControlPanelStateResponse
     * @static
     * @param {AlarmControlPanelStateResponse} message AlarmControlPanelStateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    AlarmControlPanelStateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.state = options.enums === String ? "ALARM_STATE_DISARMED" : 0;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = options.enums === String ? $root.AlarmControlPanelState[message.state] === undefined ? message.state : $root.AlarmControlPanelState[message.state] : message.state;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this AlarmControlPanelStateResponse to JSON.
     * @function toJSON
     * @memberof AlarmControlPanelStateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    AlarmControlPanelStateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for AlarmControlPanelStateResponse
     * @function getTypeUrl
     * @memberof AlarmControlPanelStateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    AlarmControlPanelStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/AlarmControlPanelStateResponse";
    };

    return AlarmControlPanelStateResponse;
})();

$root.AlarmControlPanelCommandRequest = (function() {

    /**
     * Properties of an AlarmControlPanelCommandRequest.
     * @exports IAlarmControlPanelCommandRequest
     * @interface IAlarmControlPanelCommandRequest
     * @property {number|null} [key] AlarmControlPanelCommandRequest key
     * @property {AlarmControlPanelStateCommand|null} [command] AlarmControlPanelCommandRequest command
     * @property {string|null} [code] AlarmControlPanelCommandRequest code
     * @property {number|null} [device_id] AlarmControlPanelCommandRequest device_id
     */

    /**
     * Constructs a new AlarmControlPanelCommandRequest.
     * @exports AlarmControlPanelCommandRequest
     * @classdesc Represents an AlarmControlPanelCommandRequest.
     * @implements IAlarmControlPanelCommandRequest
     * @constructor
     * @param {IAlarmControlPanelCommandRequest=} [properties] Properties to set
     */
    function AlarmControlPanelCommandRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * AlarmControlPanelCommandRequest key.
     * @member {number} key
     * @memberof AlarmControlPanelCommandRequest
     * @instance
     */
    AlarmControlPanelCommandRequest.prototype.key = 0;

    /**
     * AlarmControlPanelCommandRequest command.
     * @member {AlarmControlPanelStateCommand} command
     * @memberof AlarmControlPanelCommandRequest
     * @instance
     */
    AlarmControlPanelCommandRequest.prototype.command = 0;

    /**
     * AlarmControlPanelCommandRequest code.
     * @member {string} code
     * @memberof AlarmControlPanelCommandRequest
     * @instance
     */
    AlarmControlPanelCommandRequest.prototype.code = "";

    /**
     * AlarmControlPanelCommandRequest device_id.
     * @member {number} device_id
     * @memberof AlarmControlPanelCommandRequest
     * @instance
     */
    AlarmControlPanelCommandRequest.prototype.device_id = 0;

    /**
     * Creates a new AlarmControlPanelCommandRequest instance using the specified properties.
     * @function create
     * @memberof AlarmControlPanelCommandRequest
     * @static
     * @param {IAlarmControlPanelCommandRequest=} [properties] Properties to set
     * @returns {AlarmControlPanelCommandRequest} AlarmControlPanelCommandRequest instance
     */
    AlarmControlPanelCommandRequest.create = function create(properties) {
        return new AlarmControlPanelCommandRequest(properties);
    };

    /**
     * Encodes the specified AlarmControlPanelCommandRequest message. Does not implicitly {@link AlarmControlPanelCommandRequest.verify|verify} messages.
     * @function encode
     * @memberof AlarmControlPanelCommandRequest
     * @static
     * @param {IAlarmControlPanelCommandRequest} message AlarmControlPanelCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AlarmControlPanelCommandRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.command != null && Object.hasOwnProperty.call(message, "command"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.command);
        if (message.code != null && Object.hasOwnProperty.call(message, "code"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.code);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified AlarmControlPanelCommandRequest message, length delimited. Does not implicitly {@link AlarmControlPanelCommandRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof AlarmControlPanelCommandRequest
     * @static
     * @param {IAlarmControlPanelCommandRequest} message AlarmControlPanelCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AlarmControlPanelCommandRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an AlarmControlPanelCommandRequest message from the specified reader or buffer.
     * @function decode
     * @memberof AlarmControlPanelCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {AlarmControlPanelCommandRequest} AlarmControlPanelCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AlarmControlPanelCommandRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AlarmControlPanelCommandRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.command = reader.int32();
                    break;
                }
            case 3: {
                    message.code = reader.string();
                    break;
                }
            case 4: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an AlarmControlPanelCommandRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof AlarmControlPanelCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {AlarmControlPanelCommandRequest} AlarmControlPanelCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AlarmControlPanelCommandRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an AlarmControlPanelCommandRequest message.
     * @function verify
     * @memberof AlarmControlPanelCommandRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    AlarmControlPanelCommandRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.command != null && message.hasOwnProperty("command"))
            switch (message.command) {
            default:
                return "command: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            }
        if (message.code != null && message.hasOwnProperty("code"))
            if (!$util.isString(message.code))
                return "code: string expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates an AlarmControlPanelCommandRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof AlarmControlPanelCommandRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {AlarmControlPanelCommandRequest} AlarmControlPanelCommandRequest
     */
    AlarmControlPanelCommandRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.AlarmControlPanelCommandRequest)
            return object;
        var message = new $root.AlarmControlPanelCommandRequest();
        if (object.key != null)
            message.key = object.key >>> 0;
        switch (object.command) {
        default:
            if (typeof object.command === "number") {
                message.command = object.command;
                break;
            }
            break;
        case "ALARM_CONTROL_PANEL_DISARM":
        case 0:
            message.command = 0;
            break;
        case "ALARM_CONTROL_PANEL_ARM_AWAY":
        case 1:
            message.command = 1;
            break;
        case "ALARM_CONTROL_PANEL_ARM_HOME":
        case 2:
            message.command = 2;
            break;
        case "ALARM_CONTROL_PANEL_ARM_NIGHT":
        case 3:
            message.command = 3;
            break;
        case "ALARM_CONTROL_PANEL_ARM_VACATION":
        case 4:
            message.command = 4;
            break;
        case "ALARM_CONTROL_PANEL_ARM_CUSTOM_BYPASS":
        case 5:
            message.command = 5;
            break;
        case "ALARM_CONTROL_PANEL_TRIGGER":
        case 6:
            message.command = 6;
            break;
        }
        if (object.code != null)
            message.code = String(object.code);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from an AlarmControlPanelCommandRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof AlarmControlPanelCommandRequest
     * @static
     * @param {AlarmControlPanelCommandRequest} message AlarmControlPanelCommandRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    AlarmControlPanelCommandRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.command = options.enums === String ? "ALARM_CONTROL_PANEL_DISARM" : 0;
            object.code = "";
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.command != null && message.hasOwnProperty("command"))
            object.command = options.enums === String ? $root.AlarmControlPanelStateCommand[message.command] === undefined ? message.command : $root.AlarmControlPanelStateCommand[message.command] : message.command;
        if (message.code != null && message.hasOwnProperty("code"))
            object.code = message.code;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this AlarmControlPanelCommandRequest to JSON.
     * @function toJSON
     * @memberof AlarmControlPanelCommandRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    AlarmControlPanelCommandRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for AlarmControlPanelCommandRequest
     * @function getTypeUrl
     * @memberof AlarmControlPanelCommandRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    AlarmControlPanelCommandRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/AlarmControlPanelCommandRequest";
    };

    return AlarmControlPanelCommandRequest;
})();

/**
 * TextMode enum.
 * @exports TextMode
 * @enum {number}
 * @property {number} TEXT_MODE_TEXT=0 TEXT_MODE_TEXT value
 * @property {number} TEXT_MODE_PASSWORD=1 TEXT_MODE_PASSWORD value
 */
$root.TextMode = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "TEXT_MODE_TEXT"] = 0;
    values[valuesById[1] = "TEXT_MODE_PASSWORD"] = 1;
    return values;
})();

$root.ListEntitiesTextResponse = (function() {

    /**
     * Properties of a ListEntitiesTextResponse.
     * @exports IListEntitiesTextResponse
     * @interface IListEntitiesTextResponse
     * @property {string|null} [object_id] ListEntitiesTextResponse object_id
     * @property {number|null} [key] ListEntitiesTextResponse key
     * @property {string|null} [name] ListEntitiesTextResponse name
     * @property {string|null} [icon] ListEntitiesTextResponse icon
     * @property {boolean|null} [disabled_by_default] ListEntitiesTextResponse disabled_by_default
     * @property {EntityCategory|null} [entity_category] ListEntitiesTextResponse entity_category
     * @property {number|null} [min_length] ListEntitiesTextResponse min_length
     * @property {number|null} [max_length] ListEntitiesTextResponse max_length
     * @property {string|null} [pattern] ListEntitiesTextResponse pattern
     * @property {TextMode|null} [mode] ListEntitiesTextResponse mode
     * @property {number|null} [device_id] ListEntitiesTextResponse device_id
     */

    /**
     * Constructs a new ListEntitiesTextResponse.
     * @exports ListEntitiesTextResponse
     * @classdesc Represents a ListEntitiesTextResponse.
     * @implements IListEntitiesTextResponse
     * @constructor
     * @param {IListEntitiesTextResponse=} [properties] Properties to set
     */
    function ListEntitiesTextResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesTextResponse object_id.
     * @member {string} object_id
     * @memberof ListEntitiesTextResponse
     * @instance
     */
    ListEntitiesTextResponse.prototype.object_id = "";

    /**
     * ListEntitiesTextResponse key.
     * @member {number} key
     * @memberof ListEntitiesTextResponse
     * @instance
     */
    ListEntitiesTextResponse.prototype.key = 0;

    /**
     * ListEntitiesTextResponse name.
     * @member {string} name
     * @memberof ListEntitiesTextResponse
     * @instance
     */
    ListEntitiesTextResponse.prototype.name = "";

    /**
     * ListEntitiesTextResponse icon.
     * @member {string} icon
     * @memberof ListEntitiesTextResponse
     * @instance
     */
    ListEntitiesTextResponse.prototype.icon = "";

    /**
     * ListEntitiesTextResponse disabled_by_default.
     * @member {boolean} disabled_by_default
     * @memberof ListEntitiesTextResponse
     * @instance
     */
    ListEntitiesTextResponse.prototype.disabled_by_default = false;

    /**
     * ListEntitiesTextResponse entity_category.
     * @member {EntityCategory} entity_category
     * @memberof ListEntitiesTextResponse
     * @instance
     */
    ListEntitiesTextResponse.prototype.entity_category = 0;

    /**
     * ListEntitiesTextResponse min_length.
     * @member {number} min_length
     * @memberof ListEntitiesTextResponse
     * @instance
     */
    ListEntitiesTextResponse.prototype.min_length = 0;

    /**
     * ListEntitiesTextResponse max_length.
     * @member {number} max_length
     * @memberof ListEntitiesTextResponse
     * @instance
     */
    ListEntitiesTextResponse.prototype.max_length = 0;

    /**
     * ListEntitiesTextResponse pattern.
     * @member {string} pattern
     * @memberof ListEntitiesTextResponse
     * @instance
     */
    ListEntitiesTextResponse.prototype.pattern = "";

    /**
     * ListEntitiesTextResponse mode.
     * @member {TextMode} mode
     * @memberof ListEntitiesTextResponse
     * @instance
     */
    ListEntitiesTextResponse.prototype.mode = 0;

    /**
     * ListEntitiesTextResponse device_id.
     * @member {number} device_id
     * @memberof ListEntitiesTextResponse
     * @instance
     */
    ListEntitiesTextResponse.prototype.device_id = 0;

    /**
     * Creates a new ListEntitiesTextResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesTextResponse
     * @static
     * @param {IListEntitiesTextResponse=} [properties] Properties to set
     * @returns {ListEntitiesTextResponse} ListEntitiesTextResponse instance
     */
    ListEntitiesTextResponse.create = function create(properties) {
        return new ListEntitiesTextResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesTextResponse message. Does not implicitly {@link ListEntitiesTextResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesTextResponse
     * @static
     * @param {IListEntitiesTextResponse} message ListEntitiesTextResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesTextResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.object_id != null && Object.hasOwnProperty.call(message, "object_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.object_id);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.icon);
        if (message.disabled_by_default != null && Object.hasOwnProperty.call(message, "disabled_by_default"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.disabled_by_default);
        if (message.entity_category != null && Object.hasOwnProperty.call(message, "entity_category"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.entity_category);
        if (message.min_length != null && Object.hasOwnProperty.call(message, "min_length"))
            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.min_length);
        if (message.max_length != null && Object.hasOwnProperty.call(message, "max_length"))
            writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.max_length);
        if (message.pattern != null && Object.hasOwnProperty.call(message, "pattern"))
            writer.uint32(/* id 10, wireType 2 =*/82).string(message.pattern);
        if (message.mode != null && Object.hasOwnProperty.call(message, "mode"))
            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.mode);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesTextResponse message, length delimited. Does not implicitly {@link ListEntitiesTextResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesTextResponse
     * @static
     * @param {IListEntitiesTextResponse} message ListEntitiesTextResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesTextResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesTextResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesTextResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesTextResponse} ListEntitiesTextResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesTextResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesTextResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.object_id = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 5: {
                    message.icon = reader.string();
                    break;
                }
            case 6: {
                    message.disabled_by_default = reader.bool();
                    break;
                }
            case 7: {
                    message.entity_category = reader.int32();
                    break;
                }
            case 8: {
                    message.min_length = reader.uint32();
                    break;
                }
            case 9: {
                    message.max_length = reader.uint32();
                    break;
                }
            case 10: {
                    message.pattern = reader.string();
                    break;
                }
            case 11: {
                    message.mode = reader.int32();
                    break;
                }
            case 12: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesTextResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesTextResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesTextResponse} ListEntitiesTextResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesTextResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesTextResponse message.
     * @function verify
     * @memberof ListEntitiesTextResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesTextResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            if (!$util.isString(message.object_id))
                return "object_id: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isString(message.icon))
                return "icon: string expected";
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            if (typeof message.disabled_by_default !== "boolean")
                return "disabled_by_default: boolean expected";
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            switch (message.entity_category) {
            default:
                return "entity_category: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.min_length != null && message.hasOwnProperty("min_length"))
            if (!$util.isInteger(message.min_length))
                return "min_length: integer expected";
        if (message.max_length != null && message.hasOwnProperty("max_length"))
            if (!$util.isInteger(message.max_length))
                return "max_length: integer expected";
        if (message.pattern != null && message.hasOwnProperty("pattern"))
            if (!$util.isString(message.pattern))
                return "pattern: string expected";
        if (message.mode != null && message.hasOwnProperty("mode"))
            switch (message.mode) {
            default:
                return "mode: enum value expected";
            case 0:
            case 1:
                break;
            }
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ListEntitiesTextResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesTextResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesTextResponse} ListEntitiesTextResponse
     */
    ListEntitiesTextResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesTextResponse)
            return object;
        var message = new $root.ListEntitiesTextResponse();
        if (object.object_id != null)
            message.object_id = String(object.object_id);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.icon != null)
            message.icon = String(object.icon);
        if (object.disabled_by_default != null)
            message.disabled_by_default = Boolean(object.disabled_by_default);
        switch (object.entity_category) {
        default:
            if (typeof object.entity_category === "number") {
                message.entity_category = object.entity_category;
                break;
            }
            break;
        case "ENTITY_CATEGORY_NONE":
        case 0:
            message.entity_category = 0;
            break;
        case "ENTITY_CATEGORY_CONFIG":
        case 1:
            message.entity_category = 1;
            break;
        case "ENTITY_CATEGORY_DIAGNOSTIC":
        case 2:
            message.entity_category = 2;
            break;
        }
        if (object.min_length != null)
            message.min_length = object.min_length >>> 0;
        if (object.max_length != null)
            message.max_length = object.max_length >>> 0;
        if (object.pattern != null)
            message.pattern = String(object.pattern);
        switch (object.mode) {
        default:
            if (typeof object.mode === "number") {
                message.mode = object.mode;
                break;
            }
            break;
        case "TEXT_MODE_TEXT":
        case 0:
            message.mode = 0;
            break;
        case "TEXT_MODE_PASSWORD":
        case 1:
            message.mode = 1;
            break;
        }
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesTextResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesTextResponse
     * @static
     * @param {ListEntitiesTextResponse} message ListEntitiesTextResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesTextResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.object_id = "";
            object.key = 0;
            object.name = "";
            object.icon = "";
            object.disabled_by_default = false;
            object.entity_category = options.enums === String ? "ENTITY_CATEGORY_NONE" : 0;
            object.min_length = 0;
            object.max_length = 0;
            object.pattern = "";
            object.mode = options.enums === String ? "TEXT_MODE_TEXT" : 0;
            object.device_id = 0;
        }
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            object.object_id = message.object_id;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            object.disabled_by_default = message.disabled_by_default;
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            object.entity_category = options.enums === String ? $root.EntityCategory[message.entity_category] === undefined ? message.entity_category : $root.EntityCategory[message.entity_category] : message.entity_category;
        if (message.min_length != null && message.hasOwnProperty("min_length"))
            object.min_length = message.min_length;
        if (message.max_length != null && message.hasOwnProperty("max_length"))
            object.max_length = message.max_length;
        if (message.pattern != null && message.hasOwnProperty("pattern"))
            object.pattern = message.pattern;
        if (message.mode != null && message.hasOwnProperty("mode"))
            object.mode = options.enums === String ? $root.TextMode[message.mode] === undefined ? message.mode : $root.TextMode[message.mode] : message.mode;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ListEntitiesTextResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesTextResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesTextResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesTextResponse
     * @function getTypeUrl
     * @memberof ListEntitiesTextResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesTextResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesTextResponse";
    };

    return ListEntitiesTextResponse;
})();

$root.TextStateResponse = (function() {

    /**
     * Properties of a TextStateResponse.
     * @exports ITextStateResponse
     * @interface ITextStateResponse
     * @property {number|null} [key] TextStateResponse key
     * @property {string|null} [state] TextStateResponse state
     * @property {boolean|null} [missing_state] TextStateResponse missing_state
     * @property {number|null} [device_id] TextStateResponse device_id
     */

    /**
     * Constructs a new TextStateResponse.
     * @exports TextStateResponse
     * @classdesc Represents a TextStateResponse.
     * @implements ITextStateResponse
     * @constructor
     * @param {ITextStateResponse=} [properties] Properties to set
     */
    function TextStateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * TextStateResponse key.
     * @member {number} key
     * @memberof TextStateResponse
     * @instance
     */
    TextStateResponse.prototype.key = 0;

    /**
     * TextStateResponse state.
     * @member {string} state
     * @memberof TextStateResponse
     * @instance
     */
    TextStateResponse.prototype.state = "";

    /**
     * TextStateResponse missing_state.
     * @member {boolean} missing_state
     * @memberof TextStateResponse
     * @instance
     */
    TextStateResponse.prototype.missing_state = false;

    /**
     * TextStateResponse device_id.
     * @member {number} device_id
     * @memberof TextStateResponse
     * @instance
     */
    TextStateResponse.prototype.device_id = 0;

    /**
     * Creates a new TextStateResponse instance using the specified properties.
     * @function create
     * @memberof TextStateResponse
     * @static
     * @param {ITextStateResponse=} [properties] Properties to set
     * @returns {TextStateResponse} TextStateResponse instance
     */
    TextStateResponse.create = function create(properties) {
        return new TextStateResponse(properties);
    };

    /**
     * Encodes the specified TextStateResponse message. Does not implicitly {@link TextStateResponse.verify|verify} messages.
     * @function encode
     * @memberof TextStateResponse
     * @static
     * @param {ITextStateResponse} message TextStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    TextStateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.state);
        if (message.missing_state != null && Object.hasOwnProperty.call(message, "missing_state"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.missing_state);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified TextStateResponse message, length delimited. Does not implicitly {@link TextStateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof TextStateResponse
     * @static
     * @param {ITextStateResponse} message TextStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    TextStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a TextStateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof TextStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {TextStateResponse} TextStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    TextStateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TextStateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.state = reader.string();
                    break;
                }
            case 3: {
                    message.missing_state = reader.bool();
                    break;
                }
            case 4: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a TextStateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof TextStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {TextStateResponse} TextStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    TextStateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a TextStateResponse message.
     * @function verify
     * @memberof TextStateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    TextStateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            if (!$util.isString(message.state))
                return "state: string expected";
        if (message.missing_state != null && message.hasOwnProperty("missing_state"))
            if (typeof message.missing_state !== "boolean")
                return "missing_state: boolean expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a TextStateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof TextStateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {TextStateResponse} TextStateResponse
     */
    TextStateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.TextStateResponse)
            return object;
        var message = new $root.TextStateResponse();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.state != null)
            message.state = String(object.state);
        if (object.missing_state != null)
            message.missing_state = Boolean(object.missing_state);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a TextStateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof TextStateResponse
     * @static
     * @param {TextStateResponse} message TextStateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    TextStateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.state = "";
            object.missing_state = false;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = message.state;
        if (message.missing_state != null && message.hasOwnProperty("missing_state"))
            object.missing_state = message.missing_state;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this TextStateResponse to JSON.
     * @function toJSON
     * @memberof TextStateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    TextStateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for TextStateResponse
     * @function getTypeUrl
     * @memberof TextStateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    TextStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/TextStateResponse";
    };

    return TextStateResponse;
})();

$root.TextCommandRequest = (function() {

    /**
     * Properties of a TextCommandRequest.
     * @exports ITextCommandRequest
     * @interface ITextCommandRequest
     * @property {number|null} [key] TextCommandRequest key
     * @property {string|null} [state] TextCommandRequest state
     * @property {number|null} [device_id] TextCommandRequest device_id
     */

    /**
     * Constructs a new TextCommandRequest.
     * @exports TextCommandRequest
     * @classdesc Represents a TextCommandRequest.
     * @implements ITextCommandRequest
     * @constructor
     * @param {ITextCommandRequest=} [properties] Properties to set
     */
    function TextCommandRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * TextCommandRequest key.
     * @member {number} key
     * @memberof TextCommandRequest
     * @instance
     */
    TextCommandRequest.prototype.key = 0;

    /**
     * TextCommandRequest state.
     * @member {string} state
     * @memberof TextCommandRequest
     * @instance
     */
    TextCommandRequest.prototype.state = "";

    /**
     * TextCommandRequest device_id.
     * @member {number} device_id
     * @memberof TextCommandRequest
     * @instance
     */
    TextCommandRequest.prototype.device_id = 0;

    /**
     * Creates a new TextCommandRequest instance using the specified properties.
     * @function create
     * @memberof TextCommandRequest
     * @static
     * @param {ITextCommandRequest=} [properties] Properties to set
     * @returns {TextCommandRequest} TextCommandRequest instance
     */
    TextCommandRequest.create = function create(properties) {
        return new TextCommandRequest(properties);
    };

    /**
     * Encodes the specified TextCommandRequest message. Does not implicitly {@link TextCommandRequest.verify|verify} messages.
     * @function encode
     * @memberof TextCommandRequest
     * @static
     * @param {ITextCommandRequest} message TextCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    TextCommandRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.state);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified TextCommandRequest message, length delimited. Does not implicitly {@link TextCommandRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof TextCommandRequest
     * @static
     * @param {ITextCommandRequest} message TextCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    TextCommandRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a TextCommandRequest message from the specified reader or buffer.
     * @function decode
     * @memberof TextCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {TextCommandRequest} TextCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    TextCommandRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TextCommandRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.state = reader.string();
                    break;
                }
            case 3: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a TextCommandRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof TextCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {TextCommandRequest} TextCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    TextCommandRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a TextCommandRequest message.
     * @function verify
     * @memberof TextCommandRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    TextCommandRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.state != null && message.hasOwnProperty("state"))
            if (!$util.isString(message.state))
                return "state: string expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a TextCommandRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof TextCommandRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {TextCommandRequest} TextCommandRequest
     */
    TextCommandRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.TextCommandRequest)
            return object;
        var message = new $root.TextCommandRequest();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.state != null)
            message.state = String(object.state);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a TextCommandRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof TextCommandRequest
     * @static
     * @param {TextCommandRequest} message TextCommandRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    TextCommandRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.state = "";
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.state != null && message.hasOwnProperty("state"))
            object.state = message.state;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this TextCommandRequest to JSON.
     * @function toJSON
     * @memberof TextCommandRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    TextCommandRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for TextCommandRequest
     * @function getTypeUrl
     * @memberof TextCommandRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    TextCommandRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/TextCommandRequest";
    };

    return TextCommandRequest;
})();

$root.ListEntitiesDateResponse = (function() {

    /**
     * Properties of a ListEntitiesDateResponse.
     * @exports IListEntitiesDateResponse
     * @interface IListEntitiesDateResponse
     * @property {string|null} [object_id] ListEntitiesDateResponse object_id
     * @property {number|null} [key] ListEntitiesDateResponse key
     * @property {string|null} [name] ListEntitiesDateResponse name
     * @property {string|null} [icon] ListEntitiesDateResponse icon
     * @property {boolean|null} [disabled_by_default] ListEntitiesDateResponse disabled_by_default
     * @property {EntityCategory|null} [entity_category] ListEntitiesDateResponse entity_category
     * @property {number|null} [device_id] ListEntitiesDateResponse device_id
     */

    /**
     * Constructs a new ListEntitiesDateResponse.
     * @exports ListEntitiesDateResponse
     * @classdesc Represents a ListEntitiesDateResponse.
     * @implements IListEntitiesDateResponse
     * @constructor
     * @param {IListEntitiesDateResponse=} [properties] Properties to set
     */
    function ListEntitiesDateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesDateResponse object_id.
     * @member {string} object_id
     * @memberof ListEntitiesDateResponse
     * @instance
     */
    ListEntitiesDateResponse.prototype.object_id = "";

    /**
     * ListEntitiesDateResponse key.
     * @member {number} key
     * @memberof ListEntitiesDateResponse
     * @instance
     */
    ListEntitiesDateResponse.prototype.key = 0;

    /**
     * ListEntitiesDateResponse name.
     * @member {string} name
     * @memberof ListEntitiesDateResponse
     * @instance
     */
    ListEntitiesDateResponse.prototype.name = "";

    /**
     * ListEntitiesDateResponse icon.
     * @member {string} icon
     * @memberof ListEntitiesDateResponse
     * @instance
     */
    ListEntitiesDateResponse.prototype.icon = "";

    /**
     * ListEntitiesDateResponse disabled_by_default.
     * @member {boolean} disabled_by_default
     * @memberof ListEntitiesDateResponse
     * @instance
     */
    ListEntitiesDateResponse.prototype.disabled_by_default = false;

    /**
     * ListEntitiesDateResponse entity_category.
     * @member {EntityCategory} entity_category
     * @memberof ListEntitiesDateResponse
     * @instance
     */
    ListEntitiesDateResponse.prototype.entity_category = 0;

    /**
     * ListEntitiesDateResponse device_id.
     * @member {number} device_id
     * @memberof ListEntitiesDateResponse
     * @instance
     */
    ListEntitiesDateResponse.prototype.device_id = 0;

    /**
     * Creates a new ListEntitiesDateResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesDateResponse
     * @static
     * @param {IListEntitiesDateResponse=} [properties] Properties to set
     * @returns {ListEntitiesDateResponse} ListEntitiesDateResponse instance
     */
    ListEntitiesDateResponse.create = function create(properties) {
        return new ListEntitiesDateResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesDateResponse message. Does not implicitly {@link ListEntitiesDateResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesDateResponse
     * @static
     * @param {IListEntitiesDateResponse} message ListEntitiesDateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesDateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.object_id != null && Object.hasOwnProperty.call(message, "object_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.object_id);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.icon);
        if (message.disabled_by_default != null && Object.hasOwnProperty.call(message, "disabled_by_default"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.disabled_by_default);
        if (message.entity_category != null && Object.hasOwnProperty.call(message, "entity_category"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.entity_category);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesDateResponse message, length delimited. Does not implicitly {@link ListEntitiesDateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesDateResponse
     * @static
     * @param {IListEntitiesDateResponse} message ListEntitiesDateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesDateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesDateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesDateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesDateResponse} ListEntitiesDateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesDateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesDateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.object_id = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 5: {
                    message.icon = reader.string();
                    break;
                }
            case 6: {
                    message.disabled_by_default = reader.bool();
                    break;
                }
            case 7: {
                    message.entity_category = reader.int32();
                    break;
                }
            case 8: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesDateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesDateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesDateResponse} ListEntitiesDateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesDateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesDateResponse message.
     * @function verify
     * @memberof ListEntitiesDateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesDateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            if (!$util.isString(message.object_id))
                return "object_id: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isString(message.icon))
                return "icon: string expected";
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            if (typeof message.disabled_by_default !== "boolean")
                return "disabled_by_default: boolean expected";
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            switch (message.entity_category) {
            default:
                return "entity_category: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ListEntitiesDateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesDateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesDateResponse} ListEntitiesDateResponse
     */
    ListEntitiesDateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesDateResponse)
            return object;
        var message = new $root.ListEntitiesDateResponse();
        if (object.object_id != null)
            message.object_id = String(object.object_id);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.icon != null)
            message.icon = String(object.icon);
        if (object.disabled_by_default != null)
            message.disabled_by_default = Boolean(object.disabled_by_default);
        switch (object.entity_category) {
        default:
            if (typeof object.entity_category === "number") {
                message.entity_category = object.entity_category;
                break;
            }
            break;
        case "ENTITY_CATEGORY_NONE":
        case 0:
            message.entity_category = 0;
            break;
        case "ENTITY_CATEGORY_CONFIG":
        case 1:
            message.entity_category = 1;
            break;
        case "ENTITY_CATEGORY_DIAGNOSTIC":
        case 2:
            message.entity_category = 2;
            break;
        }
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesDateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesDateResponse
     * @static
     * @param {ListEntitiesDateResponse} message ListEntitiesDateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesDateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.object_id = "";
            object.key = 0;
            object.name = "";
            object.icon = "";
            object.disabled_by_default = false;
            object.entity_category = options.enums === String ? "ENTITY_CATEGORY_NONE" : 0;
            object.device_id = 0;
        }
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            object.object_id = message.object_id;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            object.disabled_by_default = message.disabled_by_default;
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            object.entity_category = options.enums === String ? $root.EntityCategory[message.entity_category] === undefined ? message.entity_category : $root.EntityCategory[message.entity_category] : message.entity_category;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ListEntitiesDateResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesDateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesDateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesDateResponse
     * @function getTypeUrl
     * @memberof ListEntitiesDateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesDateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesDateResponse";
    };

    return ListEntitiesDateResponse;
})();

$root.DateStateResponse = (function() {

    /**
     * Properties of a DateStateResponse.
     * @exports IDateStateResponse
     * @interface IDateStateResponse
     * @property {number|null} [key] DateStateResponse key
     * @property {boolean|null} [missing_state] DateStateResponse missing_state
     * @property {number|null} [year] DateStateResponse year
     * @property {number|null} [month] DateStateResponse month
     * @property {number|null} [day] DateStateResponse day
     * @property {number|null} [device_id] DateStateResponse device_id
     */

    /**
     * Constructs a new DateStateResponse.
     * @exports DateStateResponse
     * @classdesc Represents a DateStateResponse.
     * @implements IDateStateResponse
     * @constructor
     * @param {IDateStateResponse=} [properties] Properties to set
     */
    function DateStateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DateStateResponse key.
     * @member {number} key
     * @memberof DateStateResponse
     * @instance
     */
    DateStateResponse.prototype.key = 0;

    /**
     * DateStateResponse missing_state.
     * @member {boolean} missing_state
     * @memberof DateStateResponse
     * @instance
     */
    DateStateResponse.prototype.missing_state = false;

    /**
     * DateStateResponse year.
     * @member {number} year
     * @memberof DateStateResponse
     * @instance
     */
    DateStateResponse.prototype.year = 0;

    /**
     * DateStateResponse month.
     * @member {number} month
     * @memberof DateStateResponse
     * @instance
     */
    DateStateResponse.prototype.month = 0;

    /**
     * DateStateResponse day.
     * @member {number} day
     * @memberof DateStateResponse
     * @instance
     */
    DateStateResponse.prototype.day = 0;

    /**
     * DateStateResponse device_id.
     * @member {number} device_id
     * @memberof DateStateResponse
     * @instance
     */
    DateStateResponse.prototype.device_id = 0;

    /**
     * Creates a new DateStateResponse instance using the specified properties.
     * @function create
     * @memberof DateStateResponse
     * @static
     * @param {IDateStateResponse=} [properties] Properties to set
     * @returns {DateStateResponse} DateStateResponse instance
     */
    DateStateResponse.create = function create(properties) {
        return new DateStateResponse(properties);
    };

    /**
     * Encodes the specified DateStateResponse message. Does not implicitly {@link DateStateResponse.verify|verify} messages.
     * @function encode
     * @memberof DateStateResponse
     * @static
     * @param {IDateStateResponse} message DateStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DateStateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.missing_state != null && Object.hasOwnProperty.call(message, "missing_state"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.missing_state);
        if (message.year != null && Object.hasOwnProperty.call(message, "year"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.year);
        if (message.month != null && Object.hasOwnProperty.call(message, "month"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.month);
        if (message.day != null && Object.hasOwnProperty.call(message, "day"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.day);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified DateStateResponse message, length delimited. Does not implicitly {@link DateStateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DateStateResponse
     * @static
     * @param {IDateStateResponse} message DateStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DateStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DateStateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof DateStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DateStateResponse} DateStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DateStateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DateStateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.missing_state = reader.bool();
                    break;
                }
            case 3: {
                    message.year = reader.uint32();
                    break;
                }
            case 4: {
                    message.month = reader.uint32();
                    break;
                }
            case 5: {
                    message.day = reader.uint32();
                    break;
                }
            case 6: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a DateStateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DateStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DateStateResponse} DateStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DateStateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DateStateResponse message.
     * @function verify
     * @memberof DateStateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DateStateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.missing_state != null && message.hasOwnProperty("missing_state"))
            if (typeof message.missing_state !== "boolean")
                return "missing_state: boolean expected";
        if (message.year != null && message.hasOwnProperty("year"))
            if (!$util.isInteger(message.year))
                return "year: integer expected";
        if (message.month != null && message.hasOwnProperty("month"))
            if (!$util.isInteger(message.month))
                return "month: integer expected";
        if (message.day != null && message.hasOwnProperty("day"))
            if (!$util.isInteger(message.day))
                return "day: integer expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a DateStateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DateStateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DateStateResponse} DateStateResponse
     */
    DateStateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.DateStateResponse)
            return object;
        var message = new $root.DateStateResponse();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.missing_state != null)
            message.missing_state = Boolean(object.missing_state);
        if (object.year != null)
            message.year = object.year >>> 0;
        if (object.month != null)
            message.month = object.month >>> 0;
        if (object.day != null)
            message.day = object.day >>> 0;
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DateStateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DateStateResponse
     * @static
     * @param {DateStateResponse} message DateStateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DateStateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.missing_state = false;
            object.year = 0;
            object.month = 0;
            object.day = 0;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.missing_state != null && message.hasOwnProperty("missing_state"))
            object.missing_state = message.missing_state;
        if (message.year != null && message.hasOwnProperty("year"))
            object.year = message.year;
        if (message.month != null && message.hasOwnProperty("month"))
            object.month = message.month;
        if (message.day != null && message.hasOwnProperty("day"))
            object.day = message.day;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this DateStateResponse to JSON.
     * @function toJSON
     * @memberof DateStateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DateStateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DateStateResponse
     * @function getTypeUrl
     * @memberof DateStateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DateStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DateStateResponse";
    };

    return DateStateResponse;
})();

$root.DateCommandRequest = (function() {

    /**
     * Properties of a DateCommandRequest.
     * @exports IDateCommandRequest
     * @interface IDateCommandRequest
     * @property {number|null} [key] DateCommandRequest key
     * @property {number|null} [year] DateCommandRequest year
     * @property {number|null} [month] DateCommandRequest month
     * @property {number|null} [day] DateCommandRequest day
     * @property {number|null} [device_id] DateCommandRequest device_id
     */

    /**
     * Constructs a new DateCommandRequest.
     * @exports DateCommandRequest
     * @classdesc Represents a DateCommandRequest.
     * @implements IDateCommandRequest
     * @constructor
     * @param {IDateCommandRequest=} [properties] Properties to set
     */
    function DateCommandRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DateCommandRequest key.
     * @member {number} key
     * @memberof DateCommandRequest
     * @instance
     */
    DateCommandRequest.prototype.key = 0;

    /**
     * DateCommandRequest year.
     * @member {number} year
     * @memberof DateCommandRequest
     * @instance
     */
    DateCommandRequest.prototype.year = 0;

    /**
     * DateCommandRequest month.
     * @member {number} month
     * @memberof DateCommandRequest
     * @instance
     */
    DateCommandRequest.prototype.month = 0;

    /**
     * DateCommandRequest day.
     * @member {number} day
     * @memberof DateCommandRequest
     * @instance
     */
    DateCommandRequest.prototype.day = 0;

    /**
     * DateCommandRequest device_id.
     * @member {number} device_id
     * @memberof DateCommandRequest
     * @instance
     */
    DateCommandRequest.prototype.device_id = 0;

    /**
     * Creates a new DateCommandRequest instance using the specified properties.
     * @function create
     * @memberof DateCommandRequest
     * @static
     * @param {IDateCommandRequest=} [properties] Properties to set
     * @returns {DateCommandRequest} DateCommandRequest instance
     */
    DateCommandRequest.create = function create(properties) {
        return new DateCommandRequest(properties);
    };

    /**
     * Encodes the specified DateCommandRequest message. Does not implicitly {@link DateCommandRequest.verify|verify} messages.
     * @function encode
     * @memberof DateCommandRequest
     * @static
     * @param {IDateCommandRequest} message DateCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DateCommandRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.year != null && Object.hasOwnProperty.call(message, "year"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.year);
        if (message.month != null && Object.hasOwnProperty.call(message, "month"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.month);
        if (message.day != null && Object.hasOwnProperty.call(message, "day"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.day);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified DateCommandRequest message, length delimited. Does not implicitly {@link DateCommandRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DateCommandRequest
     * @static
     * @param {IDateCommandRequest} message DateCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DateCommandRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DateCommandRequest message from the specified reader or buffer.
     * @function decode
     * @memberof DateCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DateCommandRequest} DateCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DateCommandRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DateCommandRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.year = reader.uint32();
                    break;
                }
            case 3: {
                    message.month = reader.uint32();
                    break;
                }
            case 4: {
                    message.day = reader.uint32();
                    break;
                }
            case 5: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a DateCommandRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DateCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DateCommandRequest} DateCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DateCommandRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DateCommandRequest message.
     * @function verify
     * @memberof DateCommandRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DateCommandRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.year != null && message.hasOwnProperty("year"))
            if (!$util.isInteger(message.year))
                return "year: integer expected";
        if (message.month != null && message.hasOwnProperty("month"))
            if (!$util.isInteger(message.month))
                return "month: integer expected";
        if (message.day != null && message.hasOwnProperty("day"))
            if (!$util.isInteger(message.day))
                return "day: integer expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a DateCommandRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DateCommandRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DateCommandRequest} DateCommandRequest
     */
    DateCommandRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.DateCommandRequest)
            return object;
        var message = new $root.DateCommandRequest();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.year != null)
            message.year = object.year >>> 0;
        if (object.month != null)
            message.month = object.month >>> 0;
        if (object.day != null)
            message.day = object.day >>> 0;
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DateCommandRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DateCommandRequest
     * @static
     * @param {DateCommandRequest} message DateCommandRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DateCommandRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.year = 0;
            object.month = 0;
            object.day = 0;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.year != null && message.hasOwnProperty("year"))
            object.year = message.year;
        if (message.month != null && message.hasOwnProperty("month"))
            object.month = message.month;
        if (message.day != null && message.hasOwnProperty("day"))
            object.day = message.day;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this DateCommandRequest to JSON.
     * @function toJSON
     * @memberof DateCommandRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DateCommandRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DateCommandRequest
     * @function getTypeUrl
     * @memberof DateCommandRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DateCommandRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DateCommandRequest";
    };

    return DateCommandRequest;
})();

$root.ListEntitiesTimeResponse = (function() {

    /**
     * Properties of a ListEntitiesTimeResponse.
     * @exports IListEntitiesTimeResponse
     * @interface IListEntitiesTimeResponse
     * @property {string|null} [object_id] ListEntitiesTimeResponse object_id
     * @property {number|null} [key] ListEntitiesTimeResponse key
     * @property {string|null} [name] ListEntitiesTimeResponse name
     * @property {string|null} [icon] ListEntitiesTimeResponse icon
     * @property {boolean|null} [disabled_by_default] ListEntitiesTimeResponse disabled_by_default
     * @property {EntityCategory|null} [entity_category] ListEntitiesTimeResponse entity_category
     * @property {number|null} [device_id] ListEntitiesTimeResponse device_id
     */

    /**
     * Constructs a new ListEntitiesTimeResponse.
     * @exports ListEntitiesTimeResponse
     * @classdesc Represents a ListEntitiesTimeResponse.
     * @implements IListEntitiesTimeResponse
     * @constructor
     * @param {IListEntitiesTimeResponse=} [properties] Properties to set
     */
    function ListEntitiesTimeResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesTimeResponse object_id.
     * @member {string} object_id
     * @memberof ListEntitiesTimeResponse
     * @instance
     */
    ListEntitiesTimeResponse.prototype.object_id = "";

    /**
     * ListEntitiesTimeResponse key.
     * @member {number} key
     * @memberof ListEntitiesTimeResponse
     * @instance
     */
    ListEntitiesTimeResponse.prototype.key = 0;

    /**
     * ListEntitiesTimeResponse name.
     * @member {string} name
     * @memberof ListEntitiesTimeResponse
     * @instance
     */
    ListEntitiesTimeResponse.prototype.name = "";

    /**
     * ListEntitiesTimeResponse icon.
     * @member {string} icon
     * @memberof ListEntitiesTimeResponse
     * @instance
     */
    ListEntitiesTimeResponse.prototype.icon = "";

    /**
     * ListEntitiesTimeResponse disabled_by_default.
     * @member {boolean} disabled_by_default
     * @memberof ListEntitiesTimeResponse
     * @instance
     */
    ListEntitiesTimeResponse.prototype.disabled_by_default = false;

    /**
     * ListEntitiesTimeResponse entity_category.
     * @member {EntityCategory} entity_category
     * @memberof ListEntitiesTimeResponse
     * @instance
     */
    ListEntitiesTimeResponse.prototype.entity_category = 0;

    /**
     * ListEntitiesTimeResponse device_id.
     * @member {number} device_id
     * @memberof ListEntitiesTimeResponse
     * @instance
     */
    ListEntitiesTimeResponse.prototype.device_id = 0;

    /**
     * Creates a new ListEntitiesTimeResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesTimeResponse
     * @static
     * @param {IListEntitiesTimeResponse=} [properties] Properties to set
     * @returns {ListEntitiesTimeResponse} ListEntitiesTimeResponse instance
     */
    ListEntitiesTimeResponse.create = function create(properties) {
        return new ListEntitiesTimeResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesTimeResponse message. Does not implicitly {@link ListEntitiesTimeResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesTimeResponse
     * @static
     * @param {IListEntitiesTimeResponse} message ListEntitiesTimeResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesTimeResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.object_id != null && Object.hasOwnProperty.call(message, "object_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.object_id);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.icon);
        if (message.disabled_by_default != null && Object.hasOwnProperty.call(message, "disabled_by_default"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.disabled_by_default);
        if (message.entity_category != null && Object.hasOwnProperty.call(message, "entity_category"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.entity_category);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesTimeResponse message, length delimited. Does not implicitly {@link ListEntitiesTimeResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesTimeResponse
     * @static
     * @param {IListEntitiesTimeResponse} message ListEntitiesTimeResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesTimeResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesTimeResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesTimeResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesTimeResponse} ListEntitiesTimeResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesTimeResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesTimeResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.object_id = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 5: {
                    message.icon = reader.string();
                    break;
                }
            case 6: {
                    message.disabled_by_default = reader.bool();
                    break;
                }
            case 7: {
                    message.entity_category = reader.int32();
                    break;
                }
            case 8: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesTimeResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesTimeResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesTimeResponse} ListEntitiesTimeResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesTimeResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesTimeResponse message.
     * @function verify
     * @memberof ListEntitiesTimeResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesTimeResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            if (!$util.isString(message.object_id))
                return "object_id: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isString(message.icon))
                return "icon: string expected";
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            if (typeof message.disabled_by_default !== "boolean")
                return "disabled_by_default: boolean expected";
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            switch (message.entity_category) {
            default:
                return "entity_category: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ListEntitiesTimeResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesTimeResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesTimeResponse} ListEntitiesTimeResponse
     */
    ListEntitiesTimeResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesTimeResponse)
            return object;
        var message = new $root.ListEntitiesTimeResponse();
        if (object.object_id != null)
            message.object_id = String(object.object_id);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.icon != null)
            message.icon = String(object.icon);
        if (object.disabled_by_default != null)
            message.disabled_by_default = Boolean(object.disabled_by_default);
        switch (object.entity_category) {
        default:
            if (typeof object.entity_category === "number") {
                message.entity_category = object.entity_category;
                break;
            }
            break;
        case "ENTITY_CATEGORY_NONE":
        case 0:
            message.entity_category = 0;
            break;
        case "ENTITY_CATEGORY_CONFIG":
        case 1:
            message.entity_category = 1;
            break;
        case "ENTITY_CATEGORY_DIAGNOSTIC":
        case 2:
            message.entity_category = 2;
            break;
        }
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesTimeResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesTimeResponse
     * @static
     * @param {ListEntitiesTimeResponse} message ListEntitiesTimeResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesTimeResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.object_id = "";
            object.key = 0;
            object.name = "";
            object.icon = "";
            object.disabled_by_default = false;
            object.entity_category = options.enums === String ? "ENTITY_CATEGORY_NONE" : 0;
            object.device_id = 0;
        }
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            object.object_id = message.object_id;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            object.disabled_by_default = message.disabled_by_default;
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            object.entity_category = options.enums === String ? $root.EntityCategory[message.entity_category] === undefined ? message.entity_category : $root.EntityCategory[message.entity_category] : message.entity_category;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ListEntitiesTimeResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesTimeResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesTimeResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesTimeResponse
     * @function getTypeUrl
     * @memberof ListEntitiesTimeResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesTimeResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesTimeResponse";
    };

    return ListEntitiesTimeResponse;
})();

$root.TimeStateResponse = (function() {

    /**
     * Properties of a TimeStateResponse.
     * @exports ITimeStateResponse
     * @interface ITimeStateResponse
     * @property {number|null} [key] TimeStateResponse key
     * @property {boolean|null} [missing_state] TimeStateResponse missing_state
     * @property {number|null} [hour] TimeStateResponse hour
     * @property {number|null} [minute] TimeStateResponse minute
     * @property {number|null} [second] TimeStateResponse second
     * @property {number|null} [device_id] TimeStateResponse device_id
     */

    /**
     * Constructs a new TimeStateResponse.
     * @exports TimeStateResponse
     * @classdesc Represents a TimeStateResponse.
     * @implements ITimeStateResponse
     * @constructor
     * @param {ITimeStateResponse=} [properties] Properties to set
     */
    function TimeStateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * TimeStateResponse key.
     * @member {number} key
     * @memberof TimeStateResponse
     * @instance
     */
    TimeStateResponse.prototype.key = 0;

    /**
     * TimeStateResponse missing_state.
     * @member {boolean} missing_state
     * @memberof TimeStateResponse
     * @instance
     */
    TimeStateResponse.prototype.missing_state = false;

    /**
     * TimeStateResponse hour.
     * @member {number} hour
     * @memberof TimeStateResponse
     * @instance
     */
    TimeStateResponse.prototype.hour = 0;

    /**
     * TimeStateResponse minute.
     * @member {number} minute
     * @memberof TimeStateResponse
     * @instance
     */
    TimeStateResponse.prototype.minute = 0;

    /**
     * TimeStateResponse second.
     * @member {number} second
     * @memberof TimeStateResponse
     * @instance
     */
    TimeStateResponse.prototype.second = 0;

    /**
     * TimeStateResponse device_id.
     * @member {number} device_id
     * @memberof TimeStateResponse
     * @instance
     */
    TimeStateResponse.prototype.device_id = 0;

    /**
     * Creates a new TimeStateResponse instance using the specified properties.
     * @function create
     * @memberof TimeStateResponse
     * @static
     * @param {ITimeStateResponse=} [properties] Properties to set
     * @returns {TimeStateResponse} TimeStateResponse instance
     */
    TimeStateResponse.create = function create(properties) {
        return new TimeStateResponse(properties);
    };

    /**
     * Encodes the specified TimeStateResponse message. Does not implicitly {@link TimeStateResponse.verify|verify} messages.
     * @function encode
     * @memberof TimeStateResponse
     * @static
     * @param {ITimeStateResponse} message TimeStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    TimeStateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.missing_state != null && Object.hasOwnProperty.call(message, "missing_state"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.missing_state);
        if (message.hour != null && Object.hasOwnProperty.call(message, "hour"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.hour);
        if (message.minute != null && Object.hasOwnProperty.call(message, "minute"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.minute);
        if (message.second != null && Object.hasOwnProperty.call(message, "second"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.second);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified TimeStateResponse message, length delimited. Does not implicitly {@link TimeStateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof TimeStateResponse
     * @static
     * @param {ITimeStateResponse} message TimeStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    TimeStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a TimeStateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof TimeStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {TimeStateResponse} TimeStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    TimeStateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TimeStateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.missing_state = reader.bool();
                    break;
                }
            case 3: {
                    message.hour = reader.uint32();
                    break;
                }
            case 4: {
                    message.minute = reader.uint32();
                    break;
                }
            case 5: {
                    message.second = reader.uint32();
                    break;
                }
            case 6: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a TimeStateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof TimeStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {TimeStateResponse} TimeStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    TimeStateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a TimeStateResponse message.
     * @function verify
     * @memberof TimeStateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    TimeStateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.missing_state != null && message.hasOwnProperty("missing_state"))
            if (typeof message.missing_state !== "boolean")
                return "missing_state: boolean expected";
        if (message.hour != null && message.hasOwnProperty("hour"))
            if (!$util.isInteger(message.hour))
                return "hour: integer expected";
        if (message.minute != null && message.hasOwnProperty("minute"))
            if (!$util.isInteger(message.minute))
                return "minute: integer expected";
        if (message.second != null && message.hasOwnProperty("second"))
            if (!$util.isInteger(message.second))
                return "second: integer expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a TimeStateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof TimeStateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {TimeStateResponse} TimeStateResponse
     */
    TimeStateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.TimeStateResponse)
            return object;
        var message = new $root.TimeStateResponse();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.missing_state != null)
            message.missing_state = Boolean(object.missing_state);
        if (object.hour != null)
            message.hour = object.hour >>> 0;
        if (object.minute != null)
            message.minute = object.minute >>> 0;
        if (object.second != null)
            message.second = object.second >>> 0;
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a TimeStateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof TimeStateResponse
     * @static
     * @param {TimeStateResponse} message TimeStateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    TimeStateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.missing_state = false;
            object.hour = 0;
            object.minute = 0;
            object.second = 0;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.missing_state != null && message.hasOwnProperty("missing_state"))
            object.missing_state = message.missing_state;
        if (message.hour != null && message.hasOwnProperty("hour"))
            object.hour = message.hour;
        if (message.minute != null && message.hasOwnProperty("minute"))
            object.minute = message.minute;
        if (message.second != null && message.hasOwnProperty("second"))
            object.second = message.second;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this TimeStateResponse to JSON.
     * @function toJSON
     * @memberof TimeStateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    TimeStateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for TimeStateResponse
     * @function getTypeUrl
     * @memberof TimeStateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    TimeStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/TimeStateResponse";
    };

    return TimeStateResponse;
})();

$root.TimeCommandRequest = (function() {

    /**
     * Properties of a TimeCommandRequest.
     * @exports ITimeCommandRequest
     * @interface ITimeCommandRequest
     * @property {number|null} [key] TimeCommandRequest key
     * @property {number|null} [hour] TimeCommandRequest hour
     * @property {number|null} [minute] TimeCommandRequest minute
     * @property {number|null} [second] TimeCommandRequest second
     * @property {number|null} [device_id] TimeCommandRequest device_id
     */

    /**
     * Constructs a new TimeCommandRequest.
     * @exports TimeCommandRequest
     * @classdesc Represents a TimeCommandRequest.
     * @implements ITimeCommandRequest
     * @constructor
     * @param {ITimeCommandRequest=} [properties] Properties to set
     */
    function TimeCommandRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * TimeCommandRequest key.
     * @member {number} key
     * @memberof TimeCommandRequest
     * @instance
     */
    TimeCommandRequest.prototype.key = 0;

    /**
     * TimeCommandRequest hour.
     * @member {number} hour
     * @memberof TimeCommandRequest
     * @instance
     */
    TimeCommandRequest.prototype.hour = 0;

    /**
     * TimeCommandRequest minute.
     * @member {number} minute
     * @memberof TimeCommandRequest
     * @instance
     */
    TimeCommandRequest.prototype.minute = 0;

    /**
     * TimeCommandRequest second.
     * @member {number} second
     * @memberof TimeCommandRequest
     * @instance
     */
    TimeCommandRequest.prototype.second = 0;

    /**
     * TimeCommandRequest device_id.
     * @member {number} device_id
     * @memberof TimeCommandRequest
     * @instance
     */
    TimeCommandRequest.prototype.device_id = 0;

    /**
     * Creates a new TimeCommandRequest instance using the specified properties.
     * @function create
     * @memberof TimeCommandRequest
     * @static
     * @param {ITimeCommandRequest=} [properties] Properties to set
     * @returns {TimeCommandRequest} TimeCommandRequest instance
     */
    TimeCommandRequest.create = function create(properties) {
        return new TimeCommandRequest(properties);
    };

    /**
     * Encodes the specified TimeCommandRequest message. Does not implicitly {@link TimeCommandRequest.verify|verify} messages.
     * @function encode
     * @memberof TimeCommandRequest
     * @static
     * @param {ITimeCommandRequest} message TimeCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    TimeCommandRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.hour != null && Object.hasOwnProperty.call(message, "hour"))
            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.hour);
        if (message.minute != null && Object.hasOwnProperty.call(message, "minute"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.minute);
        if (message.second != null && Object.hasOwnProperty.call(message, "second"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.second);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified TimeCommandRequest message, length delimited. Does not implicitly {@link TimeCommandRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof TimeCommandRequest
     * @static
     * @param {ITimeCommandRequest} message TimeCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    TimeCommandRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a TimeCommandRequest message from the specified reader or buffer.
     * @function decode
     * @memberof TimeCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {TimeCommandRequest} TimeCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    TimeCommandRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TimeCommandRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.hour = reader.uint32();
                    break;
                }
            case 3: {
                    message.minute = reader.uint32();
                    break;
                }
            case 4: {
                    message.second = reader.uint32();
                    break;
                }
            case 5: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a TimeCommandRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof TimeCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {TimeCommandRequest} TimeCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    TimeCommandRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a TimeCommandRequest message.
     * @function verify
     * @memberof TimeCommandRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    TimeCommandRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.hour != null && message.hasOwnProperty("hour"))
            if (!$util.isInteger(message.hour))
                return "hour: integer expected";
        if (message.minute != null && message.hasOwnProperty("minute"))
            if (!$util.isInteger(message.minute))
                return "minute: integer expected";
        if (message.second != null && message.hasOwnProperty("second"))
            if (!$util.isInteger(message.second))
                return "second: integer expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a TimeCommandRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof TimeCommandRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {TimeCommandRequest} TimeCommandRequest
     */
    TimeCommandRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.TimeCommandRequest)
            return object;
        var message = new $root.TimeCommandRequest();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.hour != null)
            message.hour = object.hour >>> 0;
        if (object.minute != null)
            message.minute = object.minute >>> 0;
        if (object.second != null)
            message.second = object.second >>> 0;
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a TimeCommandRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof TimeCommandRequest
     * @static
     * @param {TimeCommandRequest} message TimeCommandRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    TimeCommandRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.hour = 0;
            object.minute = 0;
            object.second = 0;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.hour != null && message.hasOwnProperty("hour"))
            object.hour = message.hour;
        if (message.minute != null && message.hasOwnProperty("minute"))
            object.minute = message.minute;
        if (message.second != null && message.hasOwnProperty("second"))
            object.second = message.second;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this TimeCommandRequest to JSON.
     * @function toJSON
     * @memberof TimeCommandRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    TimeCommandRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for TimeCommandRequest
     * @function getTypeUrl
     * @memberof TimeCommandRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    TimeCommandRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/TimeCommandRequest";
    };

    return TimeCommandRequest;
})();

$root.ListEntitiesEventResponse = (function() {

    /**
     * Properties of a ListEntitiesEventResponse.
     * @exports IListEntitiesEventResponse
     * @interface IListEntitiesEventResponse
     * @property {string|null} [object_id] ListEntitiesEventResponse object_id
     * @property {number|null} [key] ListEntitiesEventResponse key
     * @property {string|null} [name] ListEntitiesEventResponse name
     * @property {string|null} [icon] ListEntitiesEventResponse icon
     * @property {boolean|null} [disabled_by_default] ListEntitiesEventResponse disabled_by_default
     * @property {EntityCategory|null} [entity_category] ListEntitiesEventResponse entity_category
     * @property {string|null} [device_class] ListEntitiesEventResponse device_class
     * @property {Array.<string>|null} [event_types] ListEntitiesEventResponse event_types
     * @property {number|null} [device_id] ListEntitiesEventResponse device_id
     */

    /**
     * Constructs a new ListEntitiesEventResponse.
     * @exports ListEntitiesEventResponse
     * @classdesc Represents a ListEntitiesEventResponse.
     * @implements IListEntitiesEventResponse
     * @constructor
     * @param {IListEntitiesEventResponse=} [properties] Properties to set
     */
    function ListEntitiesEventResponse(properties) {
        this.event_types = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesEventResponse object_id.
     * @member {string} object_id
     * @memberof ListEntitiesEventResponse
     * @instance
     */
    ListEntitiesEventResponse.prototype.object_id = "";

    /**
     * ListEntitiesEventResponse key.
     * @member {number} key
     * @memberof ListEntitiesEventResponse
     * @instance
     */
    ListEntitiesEventResponse.prototype.key = 0;

    /**
     * ListEntitiesEventResponse name.
     * @member {string} name
     * @memberof ListEntitiesEventResponse
     * @instance
     */
    ListEntitiesEventResponse.prototype.name = "";

    /**
     * ListEntitiesEventResponse icon.
     * @member {string} icon
     * @memberof ListEntitiesEventResponse
     * @instance
     */
    ListEntitiesEventResponse.prototype.icon = "";

    /**
     * ListEntitiesEventResponse disabled_by_default.
     * @member {boolean} disabled_by_default
     * @memberof ListEntitiesEventResponse
     * @instance
     */
    ListEntitiesEventResponse.prototype.disabled_by_default = false;

    /**
     * ListEntitiesEventResponse entity_category.
     * @member {EntityCategory} entity_category
     * @memberof ListEntitiesEventResponse
     * @instance
     */
    ListEntitiesEventResponse.prototype.entity_category = 0;

    /**
     * ListEntitiesEventResponse device_class.
     * @member {string} device_class
     * @memberof ListEntitiesEventResponse
     * @instance
     */
    ListEntitiesEventResponse.prototype.device_class = "";

    /**
     * ListEntitiesEventResponse event_types.
     * @member {Array.<string>} event_types
     * @memberof ListEntitiesEventResponse
     * @instance
     */
    ListEntitiesEventResponse.prototype.event_types = $util.emptyArray;

    /**
     * ListEntitiesEventResponse device_id.
     * @member {number} device_id
     * @memberof ListEntitiesEventResponse
     * @instance
     */
    ListEntitiesEventResponse.prototype.device_id = 0;

    /**
     * Creates a new ListEntitiesEventResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesEventResponse
     * @static
     * @param {IListEntitiesEventResponse=} [properties] Properties to set
     * @returns {ListEntitiesEventResponse} ListEntitiesEventResponse instance
     */
    ListEntitiesEventResponse.create = function create(properties) {
        return new ListEntitiesEventResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesEventResponse message. Does not implicitly {@link ListEntitiesEventResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesEventResponse
     * @static
     * @param {IListEntitiesEventResponse} message ListEntitiesEventResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesEventResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.object_id != null && Object.hasOwnProperty.call(message, "object_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.object_id);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.icon);
        if (message.disabled_by_default != null && Object.hasOwnProperty.call(message, "disabled_by_default"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.disabled_by_default);
        if (message.entity_category != null && Object.hasOwnProperty.call(message, "entity_category"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.entity_category);
        if (message.device_class != null && Object.hasOwnProperty.call(message, "device_class"))
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.device_class);
        if (message.event_types != null && message.event_types.length)
            for (var i = 0; i < message.event_types.length; ++i)
                writer.uint32(/* id 9, wireType 2 =*/74).string(message.event_types[i]);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesEventResponse message, length delimited. Does not implicitly {@link ListEntitiesEventResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesEventResponse
     * @static
     * @param {IListEntitiesEventResponse} message ListEntitiesEventResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesEventResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesEventResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesEventResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesEventResponse} ListEntitiesEventResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesEventResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesEventResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.object_id = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 5: {
                    message.icon = reader.string();
                    break;
                }
            case 6: {
                    message.disabled_by_default = reader.bool();
                    break;
                }
            case 7: {
                    message.entity_category = reader.int32();
                    break;
                }
            case 8: {
                    message.device_class = reader.string();
                    break;
                }
            case 9: {
                    if (!(message.event_types && message.event_types.length))
                        message.event_types = [];
                    message.event_types.push(reader.string());
                    break;
                }
            case 10: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesEventResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesEventResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesEventResponse} ListEntitiesEventResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesEventResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesEventResponse message.
     * @function verify
     * @memberof ListEntitiesEventResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesEventResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            if (!$util.isString(message.object_id))
                return "object_id: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isString(message.icon))
                return "icon: string expected";
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            if (typeof message.disabled_by_default !== "boolean")
                return "disabled_by_default: boolean expected";
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            switch (message.entity_category) {
            default:
                return "entity_category: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.device_class != null && message.hasOwnProperty("device_class"))
            if (!$util.isString(message.device_class))
                return "device_class: string expected";
        if (message.event_types != null && message.hasOwnProperty("event_types")) {
            if (!Array.isArray(message.event_types))
                return "event_types: array expected";
            for (var i = 0; i < message.event_types.length; ++i)
                if (!$util.isString(message.event_types[i]))
                    return "event_types: string[] expected";
        }
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ListEntitiesEventResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesEventResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesEventResponse} ListEntitiesEventResponse
     */
    ListEntitiesEventResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesEventResponse)
            return object;
        var message = new $root.ListEntitiesEventResponse();
        if (object.object_id != null)
            message.object_id = String(object.object_id);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.icon != null)
            message.icon = String(object.icon);
        if (object.disabled_by_default != null)
            message.disabled_by_default = Boolean(object.disabled_by_default);
        switch (object.entity_category) {
        default:
            if (typeof object.entity_category === "number") {
                message.entity_category = object.entity_category;
                break;
            }
            break;
        case "ENTITY_CATEGORY_NONE":
        case 0:
            message.entity_category = 0;
            break;
        case "ENTITY_CATEGORY_CONFIG":
        case 1:
            message.entity_category = 1;
            break;
        case "ENTITY_CATEGORY_DIAGNOSTIC":
        case 2:
            message.entity_category = 2;
            break;
        }
        if (object.device_class != null)
            message.device_class = String(object.device_class);
        if (object.event_types) {
            if (!Array.isArray(object.event_types))
                throw TypeError(".ListEntitiesEventResponse.event_types: array expected");
            message.event_types = [];
            for (var i = 0; i < object.event_types.length; ++i)
                message.event_types[i] = String(object.event_types[i]);
        }
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesEventResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesEventResponse
     * @static
     * @param {ListEntitiesEventResponse} message ListEntitiesEventResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesEventResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.event_types = [];
        if (options.defaults) {
            object.object_id = "";
            object.key = 0;
            object.name = "";
            object.icon = "";
            object.disabled_by_default = false;
            object.entity_category = options.enums === String ? "ENTITY_CATEGORY_NONE" : 0;
            object.device_class = "";
            object.device_id = 0;
        }
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            object.object_id = message.object_id;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            object.disabled_by_default = message.disabled_by_default;
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            object.entity_category = options.enums === String ? $root.EntityCategory[message.entity_category] === undefined ? message.entity_category : $root.EntityCategory[message.entity_category] : message.entity_category;
        if (message.device_class != null && message.hasOwnProperty("device_class"))
            object.device_class = message.device_class;
        if (message.event_types && message.event_types.length) {
            object.event_types = [];
            for (var j = 0; j < message.event_types.length; ++j)
                object.event_types[j] = message.event_types[j];
        }
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ListEntitiesEventResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesEventResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesEventResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesEventResponse
     * @function getTypeUrl
     * @memberof ListEntitiesEventResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesEventResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesEventResponse";
    };

    return ListEntitiesEventResponse;
})();

$root.EventResponse = (function() {

    /**
     * Properties of an EventResponse.
     * @exports IEventResponse
     * @interface IEventResponse
     * @property {number|null} [key] EventResponse key
     * @property {string|null} [event_type] EventResponse event_type
     * @property {number|null} [device_id] EventResponse device_id
     */

    /**
     * Constructs a new EventResponse.
     * @exports EventResponse
     * @classdesc Represents an EventResponse.
     * @implements IEventResponse
     * @constructor
     * @param {IEventResponse=} [properties] Properties to set
     */
    function EventResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * EventResponse key.
     * @member {number} key
     * @memberof EventResponse
     * @instance
     */
    EventResponse.prototype.key = 0;

    /**
     * EventResponse event_type.
     * @member {string} event_type
     * @memberof EventResponse
     * @instance
     */
    EventResponse.prototype.event_type = "";

    /**
     * EventResponse device_id.
     * @member {number} device_id
     * @memberof EventResponse
     * @instance
     */
    EventResponse.prototype.device_id = 0;

    /**
     * Creates a new EventResponse instance using the specified properties.
     * @function create
     * @memberof EventResponse
     * @static
     * @param {IEventResponse=} [properties] Properties to set
     * @returns {EventResponse} EventResponse instance
     */
    EventResponse.create = function create(properties) {
        return new EventResponse(properties);
    };

    /**
     * Encodes the specified EventResponse message. Does not implicitly {@link EventResponse.verify|verify} messages.
     * @function encode
     * @memberof EventResponse
     * @static
     * @param {IEventResponse} message EventResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    EventResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.event_type != null && Object.hasOwnProperty.call(message, "event_type"))
            writer.uint32(/* id 2, wireType 2 =*/18).string(message.event_type);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified EventResponse message, length delimited. Does not implicitly {@link EventResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof EventResponse
     * @static
     * @param {IEventResponse} message EventResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    EventResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an EventResponse message from the specified reader or buffer.
     * @function decode
     * @memberof EventResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {EventResponse} EventResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    EventResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EventResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.event_type = reader.string();
                    break;
                }
            case 3: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an EventResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof EventResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {EventResponse} EventResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    EventResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an EventResponse message.
     * @function verify
     * @memberof EventResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    EventResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.event_type != null && message.hasOwnProperty("event_type"))
            if (!$util.isString(message.event_type))
                return "event_type: string expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates an EventResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof EventResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {EventResponse} EventResponse
     */
    EventResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.EventResponse)
            return object;
        var message = new $root.EventResponse();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.event_type != null)
            message.event_type = String(object.event_type);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from an EventResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof EventResponse
     * @static
     * @param {EventResponse} message EventResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    EventResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.event_type = "";
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.event_type != null && message.hasOwnProperty("event_type"))
            object.event_type = message.event_type;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this EventResponse to JSON.
     * @function toJSON
     * @memberof EventResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    EventResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for EventResponse
     * @function getTypeUrl
     * @memberof EventResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    EventResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/EventResponse";
    };

    return EventResponse;
})();

$root.ListEntitiesValveResponse = (function() {

    /**
     * Properties of a ListEntitiesValveResponse.
     * @exports IListEntitiesValveResponse
     * @interface IListEntitiesValveResponse
     * @property {string|null} [object_id] ListEntitiesValveResponse object_id
     * @property {number|null} [key] ListEntitiesValveResponse key
     * @property {string|null} [name] ListEntitiesValveResponse name
     * @property {string|null} [icon] ListEntitiesValveResponse icon
     * @property {boolean|null} [disabled_by_default] ListEntitiesValveResponse disabled_by_default
     * @property {EntityCategory|null} [entity_category] ListEntitiesValveResponse entity_category
     * @property {string|null} [device_class] ListEntitiesValveResponse device_class
     * @property {boolean|null} [assumed_state] ListEntitiesValveResponse assumed_state
     * @property {boolean|null} [supports_position] ListEntitiesValveResponse supports_position
     * @property {boolean|null} [supports_stop] ListEntitiesValveResponse supports_stop
     * @property {number|null} [device_id] ListEntitiesValveResponse device_id
     */

    /**
     * Constructs a new ListEntitiesValveResponse.
     * @exports ListEntitiesValveResponse
     * @classdesc Represents a ListEntitiesValveResponse.
     * @implements IListEntitiesValveResponse
     * @constructor
     * @param {IListEntitiesValveResponse=} [properties] Properties to set
     */
    function ListEntitiesValveResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesValveResponse object_id.
     * @member {string} object_id
     * @memberof ListEntitiesValveResponse
     * @instance
     */
    ListEntitiesValveResponse.prototype.object_id = "";

    /**
     * ListEntitiesValveResponse key.
     * @member {number} key
     * @memberof ListEntitiesValveResponse
     * @instance
     */
    ListEntitiesValveResponse.prototype.key = 0;

    /**
     * ListEntitiesValveResponse name.
     * @member {string} name
     * @memberof ListEntitiesValveResponse
     * @instance
     */
    ListEntitiesValveResponse.prototype.name = "";

    /**
     * ListEntitiesValveResponse icon.
     * @member {string} icon
     * @memberof ListEntitiesValveResponse
     * @instance
     */
    ListEntitiesValveResponse.prototype.icon = "";

    /**
     * ListEntitiesValveResponse disabled_by_default.
     * @member {boolean} disabled_by_default
     * @memberof ListEntitiesValveResponse
     * @instance
     */
    ListEntitiesValveResponse.prototype.disabled_by_default = false;

    /**
     * ListEntitiesValveResponse entity_category.
     * @member {EntityCategory} entity_category
     * @memberof ListEntitiesValveResponse
     * @instance
     */
    ListEntitiesValveResponse.prototype.entity_category = 0;

    /**
     * ListEntitiesValveResponse device_class.
     * @member {string} device_class
     * @memberof ListEntitiesValveResponse
     * @instance
     */
    ListEntitiesValveResponse.prototype.device_class = "";

    /**
     * ListEntitiesValveResponse assumed_state.
     * @member {boolean} assumed_state
     * @memberof ListEntitiesValveResponse
     * @instance
     */
    ListEntitiesValveResponse.prototype.assumed_state = false;

    /**
     * ListEntitiesValveResponse supports_position.
     * @member {boolean} supports_position
     * @memberof ListEntitiesValveResponse
     * @instance
     */
    ListEntitiesValveResponse.prototype.supports_position = false;

    /**
     * ListEntitiesValveResponse supports_stop.
     * @member {boolean} supports_stop
     * @memberof ListEntitiesValveResponse
     * @instance
     */
    ListEntitiesValveResponse.prototype.supports_stop = false;

    /**
     * ListEntitiesValveResponse device_id.
     * @member {number} device_id
     * @memberof ListEntitiesValveResponse
     * @instance
     */
    ListEntitiesValveResponse.prototype.device_id = 0;

    /**
     * Creates a new ListEntitiesValveResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesValveResponse
     * @static
     * @param {IListEntitiesValveResponse=} [properties] Properties to set
     * @returns {ListEntitiesValveResponse} ListEntitiesValveResponse instance
     */
    ListEntitiesValveResponse.create = function create(properties) {
        return new ListEntitiesValveResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesValveResponse message. Does not implicitly {@link ListEntitiesValveResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesValveResponse
     * @static
     * @param {IListEntitiesValveResponse} message ListEntitiesValveResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesValveResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.object_id != null && Object.hasOwnProperty.call(message, "object_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.object_id);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.icon);
        if (message.disabled_by_default != null && Object.hasOwnProperty.call(message, "disabled_by_default"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.disabled_by_default);
        if (message.entity_category != null && Object.hasOwnProperty.call(message, "entity_category"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.entity_category);
        if (message.device_class != null && Object.hasOwnProperty.call(message, "device_class"))
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.device_class);
        if (message.assumed_state != null && Object.hasOwnProperty.call(message, "assumed_state"))
            writer.uint32(/* id 9, wireType 0 =*/72).bool(message.assumed_state);
        if (message.supports_position != null && Object.hasOwnProperty.call(message, "supports_position"))
            writer.uint32(/* id 10, wireType 0 =*/80).bool(message.supports_position);
        if (message.supports_stop != null && Object.hasOwnProperty.call(message, "supports_stop"))
            writer.uint32(/* id 11, wireType 0 =*/88).bool(message.supports_stop);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesValveResponse message, length delimited. Does not implicitly {@link ListEntitiesValveResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesValveResponse
     * @static
     * @param {IListEntitiesValveResponse} message ListEntitiesValveResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesValveResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesValveResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesValveResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesValveResponse} ListEntitiesValveResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesValveResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesValveResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.object_id = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 5: {
                    message.icon = reader.string();
                    break;
                }
            case 6: {
                    message.disabled_by_default = reader.bool();
                    break;
                }
            case 7: {
                    message.entity_category = reader.int32();
                    break;
                }
            case 8: {
                    message.device_class = reader.string();
                    break;
                }
            case 9: {
                    message.assumed_state = reader.bool();
                    break;
                }
            case 10: {
                    message.supports_position = reader.bool();
                    break;
                }
            case 11: {
                    message.supports_stop = reader.bool();
                    break;
                }
            case 12: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesValveResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesValveResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesValveResponse} ListEntitiesValveResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesValveResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesValveResponse message.
     * @function verify
     * @memberof ListEntitiesValveResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesValveResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            if (!$util.isString(message.object_id))
                return "object_id: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isString(message.icon))
                return "icon: string expected";
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            if (typeof message.disabled_by_default !== "boolean")
                return "disabled_by_default: boolean expected";
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            switch (message.entity_category) {
            default:
                return "entity_category: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.device_class != null && message.hasOwnProperty("device_class"))
            if (!$util.isString(message.device_class))
                return "device_class: string expected";
        if (message.assumed_state != null && message.hasOwnProperty("assumed_state"))
            if (typeof message.assumed_state !== "boolean")
                return "assumed_state: boolean expected";
        if (message.supports_position != null && message.hasOwnProperty("supports_position"))
            if (typeof message.supports_position !== "boolean")
                return "supports_position: boolean expected";
        if (message.supports_stop != null && message.hasOwnProperty("supports_stop"))
            if (typeof message.supports_stop !== "boolean")
                return "supports_stop: boolean expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ListEntitiesValveResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesValveResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesValveResponse} ListEntitiesValveResponse
     */
    ListEntitiesValveResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesValveResponse)
            return object;
        var message = new $root.ListEntitiesValveResponse();
        if (object.object_id != null)
            message.object_id = String(object.object_id);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.icon != null)
            message.icon = String(object.icon);
        if (object.disabled_by_default != null)
            message.disabled_by_default = Boolean(object.disabled_by_default);
        switch (object.entity_category) {
        default:
            if (typeof object.entity_category === "number") {
                message.entity_category = object.entity_category;
                break;
            }
            break;
        case "ENTITY_CATEGORY_NONE":
        case 0:
            message.entity_category = 0;
            break;
        case "ENTITY_CATEGORY_CONFIG":
        case 1:
            message.entity_category = 1;
            break;
        case "ENTITY_CATEGORY_DIAGNOSTIC":
        case 2:
            message.entity_category = 2;
            break;
        }
        if (object.device_class != null)
            message.device_class = String(object.device_class);
        if (object.assumed_state != null)
            message.assumed_state = Boolean(object.assumed_state);
        if (object.supports_position != null)
            message.supports_position = Boolean(object.supports_position);
        if (object.supports_stop != null)
            message.supports_stop = Boolean(object.supports_stop);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesValveResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesValveResponse
     * @static
     * @param {ListEntitiesValveResponse} message ListEntitiesValveResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesValveResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.object_id = "";
            object.key = 0;
            object.name = "";
            object.icon = "";
            object.disabled_by_default = false;
            object.entity_category = options.enums === String ? "ENTITY_CATEGORY_NONE" : 0;
            object.device_class = "";
            object.assumed_state = false;
            object.supports_position = false;
            object.supports_stop = false;
            object.device_id = 0;
        }
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            object.object_id = message.object_id;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            object.disabled_by_default = message.disabled_by_default;
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            object.entity_category = options.enums === String ? $root.EntityCategory[message.entity_category] === undefined ? message.entity_category : $root.EntityCategory[message.entity_category] : message.entity_category;
        if (message.device_class != null && message.hasOwnProperty("device_class"))
            object.device_class = message.device_class;
        if (message.assumed_state != null && message.hasOwnProperty("assumed_state"))
            object.assumed_state = message.assumed_state;
        if (message.supports_position != null && message.hasOwnProperty("supports_position"))
            object.supports_position = message.supports_position;
        if (message.supports_stop != null && message.hasOwnProperty("supports_stop"))
            object.supports_stop = message.supports_stop;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ListEntitiesValveResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesValveResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesValveResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesValveResponse
     * @function getTypeUrl
     * @memberof ListEntitiesValveResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesValveResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesValveResponse";
    };

    return ListEntitiesValveResponse;
})();

/**
 * ValveOperation enum.
 * @exports ValveOperation
 * @enum {number}
 * @property {number} VALVE_OPERATION_IDLE=0 VALVE_OPERATION_IDLE value
 * @property {number} VALVE_OPERATION_IS_OPENING=1 VALVE_OPERATION_IS_OPENING value
 * @property {number} VALVE_OPERATION_IS_CLOSING=2 VALVE_OPERATION_IS_CLOSING value
 */
$root.ValveOperation = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "VALVE_OPERATION_IDLE"] = 0;
    values[valuesById[1] = "VALVE_OPERATION_IS_OPENING"] = 1;
    values[valuesById[2] = "VALVE_OPERATION_IS_CLOSING"] = 2;
    return values;
})();

$root.ValveStateResponse = (function() {

    /**
     * Properties of a ValveStateResponse.
     * @exports IValveStateResponse
     * @interface IValveStateResponse
     * @property {number|null} [key] ValveStateResponse key
     * @property {number|null} [position] ValveStateResponse position
     * @property {ValveOperation|null} [current_operation] ValveStateResponse current_operation
     * @property {number|null} [device_id] ValveStateResponse device_id
     */

    /**
     * Constructs a new ValveStateResponse.
     * @exports ValveStateResponse
     * @classdesc Represents a ValveStateResponse.
     * @implements IValveStateResponse
     * @constructor
     * @param {IValveStateResponse=} [properties] Properties to set
     */
    function ValveStateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ValveStateResponse key.
     * @member {number} key
     * @memberof ValveStateResponse
     * @instance
     */
    ValveStateResponse.prototype.key = 0;

    /**
     * ValveStateResponse position.
     * @member {number} position
     * @memberof ValveStateResponse
     * @instance
     */
    ValveStateResponse.prototype.position = 0;

    /**
     * ValveStateResponse current_operation.
     * @member {ValveOperation} current_operation
     * @memberof ValveStateResponse
     * @instance
     */
    ValveStateResponse.prototype.current_operation = 0;

    /**
     * ValveStateResponse device_id.
     * @member {number} device_id
     * @memberof ValveStateResponse
     * @instance
     */
    ValveStateResponse.prototype.device_id = 0;

    /**
     * Creates a new ValveStateResponse instance using the specified properties.
     * @function create
     * @memberof ValveStateResponse
     * @static
     * @param {IValveStateResponse=} [properties] Properties to set
     * @returns {ValveStateResponse} ValveStateResponse instance
     */
    ValveStateResponse.create = function create(properties) {
        return new ValveStateResponse(properties);
    };

    /**
     * Encodes the specified ValveStateResponse message. Does not implicitly {@link ValveStateResponse.verify|verify} messages.
     * @function encode
     * @memberof ValveStateResponse
     * @static
     * @param {IValveStateResponse} message ValveStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ValveStateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.position != null && Object.hasOwnProperty.call(message, "position"))
            writer.uint32(/* id 2, wireType 5 =*/21).float(message.position);
        if (message.current_operation != null && Object.hasOwnProperty.call(message, "current_operation"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.current_operation);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ValveStateResponse message, length delimited. Does not implicitly {@link ValveStateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ValveStateResponse
     * @static
     * @param {IValveStateResponse} message ValveStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ValveStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ValveStateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ValveStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ValveStateResponse} ValveStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ValveStateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ValveStateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.position = reader.float();
                    break;
                }
            case 3: {
                    message.current_operation = reader.int32();
                    break;
                }
            case 4: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ValveStateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ValveStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ValveStateResponse} ValveStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ValveStateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ValveStateResponse message.
     * @function verify
     * @memberof ValveStateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ValveStateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.position != null && message.hasOwnProperty("position"))
            if (typeof message.position !== "number")
                return "position: number expected";
        if (message.current_operation != null && message.hasOwnProperty("current_operation"))
            switch (message.current_operation) {
            default:
                return "current_operation: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ValveStateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ValveStateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ValveStateResponse} ValveStateResponse
     */
    ValveStateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ValveStateResponse)
            return object;
        var message = new $root.ValveStateResponse();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.position != null)
            message.position = Number(object.position);
        switch (object.current_operation) {
        default:
            if (typeof object.current_operation === "number") {
                message.current_operation = object.current_operation;
                break;
            }
            break;
        case "VALVE_OPERATION_IDLE":
        case 0:
            message.current_operation = 0;
            break;
        case "VALVE_OPERATION_IS_OPENING":
        case 1:
            message.current_operation = 1;
            break;
        case "VALVE_OPERATION_IS_CLOSING":
        case 2:
            message.current_operation = 2;
            break;
        }
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ValveStateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ValveStateResponse
     * @static
     * @param {ValveStateResponse} message ValveStateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ValveStateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.position = 0;
            object.current_operation = options.enums === String ? "VALVE_OPERATION_IDLE" : 0;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.position != null && message.hasOwnProperty("position"))
            object.position = options.json && !isFinite(message.position) ? String(message.position) : message.position;
        if (message.current_operation != null && message.hasOwnProperty("current_operation"))
            object.current_operation = options.enums === String ? $root.ValveOperation[message.current_operation] === undefined ? message.current_operation : $root.ValveOperation[message.current_operation] : message.current_operation;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ValveStateResponse to JSON.
     * @function toJSON
     * @memberof ValveStateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ValveStateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ValveStateResponse
     * @function getTypeUrl
     * @memberof ValveStateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ValveStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ValveStateResponse";
    };

    return ValveStateResponse;
})();

$root.ValveCommandRequest = (function() {

    /**
     * Properties of a ValveCommandRequest.
     * @exports IValveCommandRequest
     * @interface IValveCommandRequest
     * @property {number|null} [key] ValveCommandRequest key
     * @property {boolean|null} [has_position] ValveCommandRequest has_position
     * @property {number|null} [position] ValveCommandRequest position
     * @property {boolean|null} [stop] ValveCommandRequest stop
     * @property {number|null} [device_id] ValveCommandRequest device_id
     */

    /**
     * Constructs a new ValveCommandRequest.
     * @exports ValveCommandRequest
     * @classdesc Represents a ValveCommandRequest.
     * @implements IValveCommandRequest
     * @constructor
     * @param {IValveCommandRequest=} [properties] Properties to set
     */
    function ValveCommandRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ValveCommandRequest key.
     * @member {number} key
     * @memberof ValveCommandRequest
     * @instance
     */
    ValveCommandRequest.prototype.key = 0;

    /**
     * ValveCommandRequest has_position.
     * @member {boolean} has_position
     * @memberof ValveCommandRequest
     * @instance
     */
    ValveCommandRequest.prototype.has_position = false;

    /**
     * ValveCommandRequest position.
     * @member {number} position
     * @memberof ValveCommandRequest
     * @instance
     */
    ValveCommandRequest.prototype.position = 0;

    /**
     * ValveCommandRequest stop.
     * @member {boolean} stop
     * @memberof ValveCommandRequest
     * @instance
     */
    ValveCommandRequest.prototype.stop = false;

    /**
     * ValveCommandRequest device_id.
     * @member {number} device_id
     * @memberof ValveCommandRequest
     * @instance
     */
    ValveCommandRequest.prototype.device_id = 0;

    /**
     * Creates a new ValveCommandRequest instance using the specified properties.
     * @function create
     * @memberof ValveCommandRequest
     * @static
     * @param {IValveCommandRequest=} [properties] Properties to set
     * @returns {ValveCommandRequest} ValveCommandRequest instance
     */
    ValveCommandRequest.create = function create(properties) {
        return new ValveCommandRequest(properties);
    };

    /**
     * Encodes the specified ValveCommandRequest message. Does not implicitly {@link ValveCommandRequest.verify|verify} messages.
     * @function encode
     * @memberof ValveCommandRequest
     * @static
     * @param {IValveCommandRequest} message ValveCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ValveCommandRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.has_position != null && Object.hasOwnProperty.call(message, "has_position"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.has_position);
        if (message.position != null && Object.hasOwnProperty.call(message, "position"))
            writer.uint32(/* id 3, wireType 5 =*/29).float(message.position);
        if (message.stop != null && Object.hasOwnProperty.call(message, "stop"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.stop);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ValveCommandRequest message, length delimited. Does not implicitly {@link ValveCommandRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ValveCommandRequest
     * @static
     * @param {IValveCommandRequest} message ValveCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ValveCommandRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ValveCommandRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ValveCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ValveCommandRequest} ValveCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ValveCommandRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ValveCommandRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.has_position = reader.bool();
                    break;
                }
            case 3: {
                    message.position = reader.float();
                    break;
                }
            case 4: {
                    message.stop = reader.bool();
                    break;
                }
            case 5: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ValveCommandRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ValveCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ValveCommandRequest} ValveCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ValveCommandRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ValveCommandRequest message.
     * @function verify
     * @memberof ValveCommandRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ValveCommandRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.has_position != null && message.hasOwnProperty("has_position"))
            if (typeof message.has_position !== "boolean")
                return "has_position: boolean expected";
        if (message.position != null && message.hasOwnProperty("position"))
            if (typeof message.position !== "number")
                return "position: number expected";
        if (message.stop != null && message.hasOwnProperty("stop"))
            if (typeof message.stop !== "boolean")
                return "stop: boolean expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ValveCommandRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ValveCommandRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ValveCommandRequest} ValveCommandRequest
     */
    ValveCommandRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ValveCommandRequest)
            return object;
        var message = new $root.ValveCommandRequest();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.has_position != null)
            message.has_position = Boolean(object.has_position);
        if (object.position != null)
            message.position = Number(object.position);
        if (object.stop != null)
            message.stop = Boolean(object.stop);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ValveCommandRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ValveCommandRequest
     * @static
     * @param {ValveCommandRequest} message ValveCommandRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ValveCommandRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.has_position = false;
            object.position = 0;
            object.stop = false;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.has_position != null && message.hasOwnProperty("has_position"))
            object.has_position = message.has_position;
        if (message.position != null && message.hasOwnProperty("position"))
            object.position = options.json && !isFinite(message.position) ? String(message.position) : message.position;
        if (message.stop != null && message.hasOwnProperty("stop"))
            object.stop = message.stop;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ValveCommandRequest to JSON.
     * @function toJSON
     * @memberof ValveCommandRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ValveCommandRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ValveCommandRequest
     * @function getTypeUrl
     * @memberof ValveCommandRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ValveCommandRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ValveCommandRequest";
    };

    return ValveCommandRequest;
})();

$root.ListEntitiesDateTimeResponse = (function() {

    /**
     * Properties of a ListEntitiesDateTimeResponse.
     * @exports IListEntitiesDateTimeResponse
     * @interface IListEntitiesDateTimeResponse
     * @property {string|null} [object_id] ListEntitiesDateTimeResponse object_id
     * @property {number|null} [key] ListEntitiesDateTimeResponse key
     * @property {string|null} [name] ListEntitiesDateTimeResponse name
     * @property {string|null} [icon] ListEntitiesDateTimeResponse icon
     * @property {boolean|null} [disabled_by_default] ListEntitiesDateTimeResponse disabled_by_default
     * @property {EntityCategory|null} [entity_category] ListEntitiesDateTimeResponse entity_category
     * @property {number|null} [device_id] ListEntitiesDateTimeResponse device_id
     */

    /**
     * Constructs a new ListEntitiesDateTimeResponse.
     * @exports ListEntitiesDateTimeResponse
     * @classdesc Represents a ListEntitiesDateTimeResponse.
     * @implements IListEntitiesDateTimeResponse
     * @constructor
     * @param {IListEntitiesDateTimeResponse=} [properties] Properties to set
     */
    function ListEntitiesDateTimeResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesDateTimeResponse object_id.
     * @member {string} object_id
     * @memberof ListEntitiesDateTimeResponse
     * @instance
     */
    ListEntitiesDateTimeResponse.prototype.object_id = "";

    /**
     * ListEntitiesDateTimeResponse key.
     * @member {number} key
     * @memberof ListEntitiesDateTimeResponse
     * @instance
     */
    ListEntitiesDateTimeResponse.prototype.key = 0;

    /**
     * ListEntitiesDateTimeResponse name.
     * @member {string} name
     * @memberof ListEntitiesDateTimeResponse
     * @instance
     */
    ListEntitiesDateTimeResponse.prototype.name = "";

    /**
     * ListEntitiesDateTimeResponse icon.
     * @member {string} icon
     * @memberof ListEntitiesDateTimeResponse
     * @instance
     */
    ListEntitiesDateTimeResponse.prototype.icon = "";

    /**
     * ListEntitiesDateTimeResponse disabled_by_default.
     * @member {boolean} disabled_by_default
     * @memberof ListEntitiesDateTimeResponse
     * @instance
     */
    ListEntitiesDateTimeResponse.prototype.disabled_by_default = false;

    /**
     * ListEntitiesDateTimeResponse entity_category.
     * @member {EntityCategory} entity_category
     * @memberof ListEntitiesDateTimeResponse
     * @instance
     */
    ListEntitiesDateTimeResponse.prototype.entity_category = 0;

    /**
     * ListEntitiesDateTimeResponse device_id.
     * @member {number} device_id
     * @memberof ListEntitiesDateTimeResponse
     * @instance
     */
    ListEntitiesDateTimeResponse.prototype.device_id = 0;

    /**
     * Creates a new ListEntitiesDateTimeResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesDateTimeResponse
     * @static
     * @param {IListEntitiesDateTimeResponse=} [properties] Properties to set
     * @returns {ListEntitiesDateTimeResponse} ListEntitiesDateTimeResponse instance
     */
    ListEntitiesDateTimeResponse.create = function create(properties) {
        return new ListEntitiesDateTimeResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesDateTimeResponse message. Does not implicitly {@link ListEntitiesDateTimeResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesDateTimeResponse
     * @static
     * @param {IListEntitiesDateTimeResponse} message ListEntitiesDateTimeResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesDateTimeResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.object_id != null && Object.hasOwnProperty.call(message, "object_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.object_id);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.icon);
        if (message.disabled_by_default != null && Object.hasOwnProperty.call(message, "disabled_by_default"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.disabled_by_default);
        if (message.entity_category != null && Object.hasOwnProperty.call(message, "entity_category"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.entity_category);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesDateTimeResponse message, length delimited. Does not implicitly {@link ListEntitiesDateTimeResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesDateTimeResponse
     * @static
     * @param {IListEntitiesDateTimeResponse} message ListEntitiesDateTimeResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesDateTimeResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesDateTimeResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesDateTimeResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesDateTimeResponse} ListEntitiesDateTimeResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesDateTimeResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesDateTimeResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.object_id = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 5: {
                    message.icon = reader.string();
                    break;
                }
            case 6: {
                    message.disabled_by_default = reader.bool();
                    break;
                }
            case 7: {
                    message.entity_category = reader.int32();
                    break;
                }
            case 8: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesDateTimeResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesDateTimeResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesDateTimeResponse} ListEntitiesDateTimeResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesDateTimeResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesDateTimeResponse message.
     * @function verify
     * @memberof ListEntitiesDateTimeResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesDateTimeResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            if (!$util.isString(message.object_id))
                return "object_id: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isString(message.icon))
                return "icon: string expected";
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            if (typeof message.disabled_by_default !== "boolean")
                return "disabled_by_default: boolean expected";
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            switch (message.entity_category) {
            default:
                return "entity_category: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ListEntitiesDateTimeResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesDateTimeResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesDateTimeResponse} ListEntitiesDateTimeResponse
     */
    ListEntitiesDateTimeResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesDateTimeResponse)
            return object;
        var message = new $root.ListEntitiesDateTimeResponse();
        if (object.object_id != null)
            message.object_id = String(object.object_id);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.icon != null)
            message.icon = String(object.icon);
        if (object.disabled_by_default != null)
            message.disabled_by_default = Boolean(object.disabled_by_default);
        switch (object.entity_category) {
        default:
            if (typeof object.entity_category === "number") {
                message.entity_category = object.entity_category;
                break;
            }
            break;
        case "ENTITY_CATEGORY_NONE":
        case 0:
            message.entity_category = 0;
            break;
        case "ENTITY_CATEGORY_CONFIG":
        case 1:
            message.entity_category = 1;
            break;
        case "ENTITY_CATEGORY_DIAGNOSTIC":
        case 2:
            message.entity_category = 2;
            break;
        }
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesDateTimeResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesDateTimeResponse
     * @static
     * @param {ListEntitiesDateTimeResponse} message ListEntitiesDateTimeResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesDateTimeResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.object_id = "";
            object.key = 0;
            object.name = "";
            object.icon = "";
            object.disabled_by_default = false;
            object.entity_category = options.enums === String ? "ENTITY_CATEGORY_NONE" : 0;
            object.device_id = 0;
        }
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            object.object_id = message.object_id;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            object.disabled_by_default = message.disabled_by_default;
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            object.entity_category = options.enums === String ? $root.EntityCategory[message.entity_category] === undefined ? message.entity_category : $root.EntityCategory[message.entity_category] : message.entity_category;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ListEntitiesDateTimeResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesDateTimeResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesDateTimeResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesDateTimeResponse
     * @function getTypeUrl
     * @memberof ListEntitiesDateTimeResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesDateTimeResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesDateTimeResponse";
    };

    return ListEntitiesDateTimeResponse;
})();

$root.DateTimeStateResponse = (function() {

    /**
     * Properties of a DateTimeStateResponse.
     * @exports IDateTimeStateResponse
     * @interface IDateTimeStateResponse
     * @property {number|null} [key] DateTimeStateResponse key
     * @property {boolean|null} [missing_state] DateTimeStateResponse missing_state
     * @property {number|null} [epoch_seconds] DateTimeStateResponse epoch_seconds
     * @property {number|null} [device_id] DateTimeStateResponse device_id
     */

    /**
     * Constructs a new DateTimeStateResponse.
     * @exports DateTimeStateResponse
     * @classdesc Represents a DateTimeStateResponse.
     * @implements IDateTimeStateResponse
     * @constructor
     * @param {IDateTimeStateResponse=} [properties] Properties to set
     */
    function DateTimeStateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DateTimeStateResponse key.
     * @member {number} key
     * @memberof DateTimeStateResponse
     * @instance
     */
    DateTimeStateResponse.prototype.key = 0;

    /**
     * DateTimeStateResponse missing_state.
     * @member {boolean} missing_state
     * @memberof DateTimeStateResponse
     * @instance
     */
    DateTimeStateResponse.prototype.missing_state = false;

    /**
     * DateTimeStateResponse epoch_seconds.
     * @member {number} epoch_seconds
     * @memberof DateTimeStateResponse
     * @instance
     */
    DateTimeStateResponse.prototype.epoch_seconds = 0;

    /**
     * DateTimeStateResponse device_id.
     * @member {number} device_id
     * @memberof DateTimeStateResponse
     * @instance
     */
    DateTimeStateResponse.prototype.device_id = 0;

    /**
     * Creates a new DateTimeStateResponse instance using the specified properties.
     * @function create
     * @memberof DateTimeStateResponse
     * @static
     * @param {IDateTimeStateResponse=} [properties] Properties to set
     * @returns {DateTimeStateResponse} DateTimeStateResponse instance
     */
    DateTimeStateResponse.create = function create(properties) {
        return new DateTimeStateResponse(properties);
    };

    /**
     * Encodes the specified DateTimeStateResponse message. Does not implicitly {@link DateTimeStateResponse.verify|verify} messages.
     * @function encode
     * @memberof DateTimeStateResponse
     * @static
     * @param {IDateTimeStateResponse} message DateTimeStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DateTimeStateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.missing_state != null && Object.hasOwnProperty.call(message, "missing_state"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.missing_state);
        if (message.epoch_seconds != null && Object.hasOwnProperty.call(message, "epoch_seconds"))
            writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.epoch_seconds);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified DateTimeStateResponse message, length delimited. Does not implicitly {@link DateTimeStateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DateTimeStateResponse
     * @static
     * @param {IDateTimeStateResponse} message DateTimeStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DateTimeStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DateTimeStateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof DateTimeStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DateTimeStateResponse} DateTimeStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DateTimeStateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DateTimeStateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.missing_state = reader.bool();
                    break;
                }
            case 3: {
                    message.epoch_seconds = reader.fixed32();
                    break;
                }
            case 4: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a DateTimeStateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DateTimeStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DateTimeStateResponse} DateTimeStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DateTimeStateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DateTimeStateResponse message.
     * @function verify
     * @memberof DateTimeStateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DateTimeStateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.missing_state != null && message.hasOwnProperty("missing_state"))
            if (typeof message.missing_state !== "boolean")
                return "missing_state: boolean expected";
        if (message.epoch_seconds != null && message.hasOwnProperty("epoch_seconds"))
            if (!$util.isInteger(message.epoch_seconds))
                return "epoch_seconds: integer expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a DateTimeStateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DateTimeStateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DateTimeStateResponse} DateTimeStateResponse
     */
    DateTimeStateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.DateTimeStateResponse)
            return object;
        var message = new $root.DateTimeStateResponse();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.missing_state != null)
            message.missing_state = Boolean(object.missing_state);
        if (object.epoch_seconds != null)
            message.epoch_seconds = object.epoch_seconds >>> 0;
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DateTimeStateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DateTimeStateResponse
     * @static
     * @param {DateTimeStateResponse} message DateTimeStateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DateTimeStateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.missing_state = false;
            object.epoch_seconds = 0;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.missing_state != null && message.hasOwnProperty("missing_state"))
            object.missing_state = message.missing_state;
        if (message.epoch_seconds != null && message.hasOwnProperty("epoch_seconds"))
            object.epoch_seconds = message.epoch_seconds;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this DateTimeStateResponse to JSON.
     * @function toJSON
     * @memberof DateTimeStateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DateTimeStateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DateTimeStateResponse
     * @function getTypeUrl
     * @memberof DateTimeStateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DateTimeStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DateTimeStateResponse";
    };

    return DateTimeStateResponse;
})();

$root.DateTimeCommandRequest = (function() {

    /**
     * Properties of a DateTimeCommandRequest.
     * @exports IDateTimeCommandRequest
     * @interface IDateTimeCommandRequest
     * @property {number|null} [key] DateTimeCommandRequest key
     * @property {number|null} [epoch_seconds] DateTimeCommandRequest epoch_seconds
     * @property {number|null} [device_id] DateTimeCommandRequest device_id
     */

    /**
     * Constructs a new DateTimeCommandRequest.
     * @exports DateTimeCommandRequest
     * @classdesc Represents a DateTimeCommandRequest.
     * @implements IDateTimeCommandRequest
     * @constructor
     * @param {IDateTimeCommandRequest=} [properties] Properties to set
     */
    function DateTimeCommandRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * DateTimeCommandRequest key.
     * @member {number} key
     * @memberof DateTimeCommandRequest
     * @instance
     */
    DateTimeCommandRequest.prototype.key = 0;

    /**
     * DateTimeCommandRequest epoch_seconds.
     * @member {number} epoch_seconds
     * @memberof DateTimeCommandRequest
     * @instance
     */
    DateTimeCommandRequest.prototype.epoch_seconds = 0;

    /**
     * DateTimeCommandRequest device_id.
     * @member {number} device_id
     * @memberof DateTimeCommandRequest
     * @instance
     */
    DateTimeCommandRequest.prototype.device_id = 0;

    /**
     * Creates a new DateTimeCommandRequest instance using the specified properties.
     * @function create
     * @memberof DateTimeCommandRequest
     * @static
     * @param {IDateTimeCommandRequest=} [properties] Properties to set
     * @returns {DateTimeCommandRequest} DateTimeCommandRequest instance
     */
    DateTimeCommandRequest.create = function create(properties) {
        return new DateTimeCommandRequest(properties);
    };

    /**
     * Encodes the specified DateTimeCommandRequest message. Does not implicitly {@link DateTimeCommandRequest.verify|verify} messages.
     * @function encode
     * @memberof DateTimeCommandRequest
     * @static
     * @param {IDateTimeCommandRequest} message DateTimeCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DateTimeCommandRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.epoch_seconds != null && Object.hasOwnProperty.call(message, "epoch_seconds"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.epoch_seconds);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified DateTimeCommandRequest message, length delimited. Does not implicitly {@link DateTimeCommandRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof DateTimeCommandRequest
     * @static
     * @param {IDateTimeCommandRequest} message DateTimeCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    DateTimeCommandRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a DateTimeCommandRequest message from the specified reader or buffer.
     * @function decode
     * @memberof DateTimeCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {DateTimeCommandRequest} DateTimeCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DateTimeCommandRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DateTimeCommandRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.epoch_seconds = reader.fixed32();
                    break;
                }
            case 3: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a DateTimeCommandRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof DateTimeCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {DateTimeCommandRequest} DateTimeCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    DateTimeCommandRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a DateTimeCommandRequest message.
     * @function verify
     * @memberof DateTimeCommandRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    DateTimeCommandRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.epoch_seconds != null && message.hasOwnProperty("epoch_seconds"))
            if (!$util.isInteger(message.epoch_seconds))
                return "epoch_seconds: integer expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a DateTimeCommandRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof DateTimeCommandRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {DateTimeCommandRequest} DateTimeCommandRequest
     */
    DateTimeCommandRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.DateTimeCommandRequest)
            return object;
        var message = new $root.DateTimeCommandRequest();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.epoch_seconds != null)
            message.epoch_seconds = object.epoch_seconds >>> 0;
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a DateTimeCommandRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof DateTimeCommandRequest
     * @static
     * @param {DateTimeCommandRequest} message DateTimeCommandRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    DateTimeCommandRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.epoch_seconds = 0;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.epoch_seconds != null && message.hasOwnProperty("epoch_seconds"))
            object.epoch_seconds = message.epoch_seconds;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this DateTimeCommandRequest to JSON.
     * @function toJSON
     * @memberof DateTimeCommandRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    DateTimeCommandRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for DateTimeCommandRequest
     * @function getTypeUrl
     * @memberof DateTimeCommandRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    DateTimeCommandRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/DateTimeCommandRequest";
    };

    return DateTimeCommandRequest;
})();

$root.ListEntitiesUpdateResponse = (function() {

    /**
     * Properties of a ListEntitiesUpdateResponse.
     * @exports IListEntitiesUpdateResponse
     * @interface IListEntitiesUpdateResponse
     * @property {string|null} [object_id] ListEntitiesUpdateResponse object_id
     * @property {number|null} [key] ListEntitiesUpdateResponse key
     * @property {string|null} [name] ListEntitiesUpdateResponse name
     * @property {string|null} [icon] ListEntitiesUpdateResponse icon
     * @property {boolean|null} [disabled_by_default] ListEntitiesUpdateResponse disabled_by_default
     * @property {EntityCategory|null} [entity_category] ListEntitiesUpdateResponse entity_category
     * @property {string|null} [device_class] ListEntitiesUpdateResponse device_class
     * @property {number|null} [device_id] ListEntitiesUpdateResponse device_id
     */

    /**
     * Constructs a new ListEntitiesUpdateResponse.
     * @exports ListEntitiesUpdateResponse
     * @classdesc Represents a ListEntitiesUpdateResponse.
     * @implements IListEntitiesUpdateResponse
     * @constructor
     * @param {IListEntitiesUpdateResponse=} [properties] Properties to set
     */
    function ListEntitiesUpdateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ListEntitiesUpdateResponse object_id.
     * @member {string} object_id
     * @memberof ListEntitiesUpdateResponse
     * @instance
     */
    ListEntitiesUpdateResponse.prototype.object_id = "";

    /**
     * ListEntitiesUpdateResponse key.
     * @member {number} key
     * @memberof ListEntitiesUpdateResponse
     * @instance
     */
    ListEntitiesUpdateResponse.prototype.key = 0;

    /**
     * ListEntitiesUpdateResponse name.
     * @member {string} name
     * @memberof ListEntitiesUpdateResponse
     * @instance
     */
    ListEntitiesUpdateResponse.prototype.name = "";

    /**
     * ListEntitiesUpdateResponse icon.
     * @member {string} icon
     * @memberof ListEntitiesUpdateResponse
     * @instance
     */
    ListEntitiesUpdateResponse.prototype.icon = "";

    /**
     * ListEntitiesUpdateResponse disabled_by_default.
     * @member {boolean} disabled_by_default
     * @memberof ListEntitiesUpdateResponse
     * @instance
     */
    ListEntitiesUpdateResponse.prototype.disabled_by_default = false;

    /**
     * ListEntitiesUpdateResponse entity_category.
     * @member {EntityCategory} entity_category
     * @memberof ListEntitiesUpdateResponse
     * @instance
     */
    ListEntitiesUpdateResponse.prototype.entity_category = 0;

    /**
     * ListEntitiesUpdateResponse device_class.
     * @member {string} device_class
     * @memberof ListEntitiesUpdateResponse
     * @instance
     */
    ListEntitiesUpdateResponse.prototype.device_class = "";

    /**
     * ListEntitiesUpdateResponse device_id.
     * @member {number} device_id
     * @memberof ListEntitiesUpdateResponse
     * @instance
     */
    ListEntitiesUpdateResponse.prototype.device_id = 0;

    /**
     * Creates a new ListEntitiesUpdateResponse instance using the specified properties.
     * @function create
     * @memberof ListEntitiesUpdateResponse
     * @static
     * @param {IListEntitiesUpdateResponse=} [properties] Properties to set
     * @returns {ListEntitiesUpdateResponse} ListEntitiesUpdateResponse instance
     */
    ListEntitiesUpdateResponse.create = function create(properties) {
        return new ListEntitiesUpdateResponse(properties);
    };

    /**
     * Encodes the specified ListEntitiesUpdateResponse message. Does not implicitly {@link ListEntitiesUpdateResponse.verify|verify} messages.
     * @function encode
     * @memberof ListEntitiesUpdateResponse
     * @static
     * @param {IListEntitiesUpdateResponse} message ListEntitiesUpdateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesUpdateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.object_id != null && Object.hasOwnProperty.call(message, "object_id"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.object_id);
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.key);
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
        if (message.icon != null && Object.hasOwnProperty.call(message, "icon"))
            writer.uint32(/* id 5, wireType 2 =*/42).string(message.icon);
        if (message.disabled_by_default != null && Object.hasOwnProperty.call(message, "disabled_by_default"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.disabled_by_default);
        if (message.entity_category != null && Object.hasOwnProperty.call(message, "entity_category"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.entity_category);
        if (message.device_class != null && Object.hasOwnProperty.call(message, "device_class"))
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.device_class);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 9, wireType 0 =*/72).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified ListEntitiesUpdateResponse message, length delimited. Does not implicitly {@link ListEntitiesUpdateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ListEntitiesUpdateResponse
     * @static
     * @param {IListEntitiesUpdateResponse} message ListEntitiesUpdateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ListEntitiesUpdateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ListEntitiesUpdateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ListEntitiesUpdateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ListEntitiesUpdateResponse} ListEntitiesUpdateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesUpdateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListEntitiesUpdateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.object_id = reader.string();
                    break;
                }
            case 2: {
                    message.key = reader.fixed32();
                    break;
                }
            case 3: {
                    message.name = reader.string();
                    break;
                }
            case 5: {
                    message.icon = reader.string();
                    break;
                }
            case 6: {
                    message.disabled_by_default = reader.bool();
                    break;
                }
            case 7: {
                    message.entity_category = reader.int32();
                    break;
                }
            case 8: {
                    message.device_class = reader.string();
                    break;
                }
            case 9: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ListEntitiesUpdateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ListEntitiesUpdateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ListEntitiesUpdateResponse} ListEntitiesUpdateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ListEntitiesUpdateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ListEntitiesUpdateResponse message.
     * @function verify
     * @memberof ListEntitiesUpdateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ListEntitiesUpdateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            if (!$util.isString(message.object_id))
                return "object_id: string expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        if (message.icon != null && message.hasOwnProperty("icon"))
            if (!$util.isString(message.icon))
                return "icon: string expected";
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            if (typeof message.disabled_by_default !== "boolean")
                return "disabled_by_default: boolean expected";
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            switch (message.entity_category) {
            default:
                return "entity_category: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.device_class != null && message.hasOwnProperty("device_class"))
            if (!$util.isString(message.device_class))
                return "device_class: string expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates a ListEntitiesUpdateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ListEntitiesUpdateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ListEntitiesUpdateResponse} ListEntitiesUpdateResponse
     */
    ListEntitiesUpdateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ListEntitiesUpdateResponse)
            return object;
        var message = new $root.ListEntitiesUpdateResponse();
        if (object.object_id != null)
            message.object_id = String(object.object_id);
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.name != null)
            message.name = String(object.name);
        if (object.icon != null)
            message.icon = String(object.icon);
        if (object.disabled_by_default != null)
            message.disabled_by_default = Boolean(object.disabled_by_default);
        switch (object.entity_category) {
        default:
            if (typeof object.entity_category === "number") {
                message.entity_category = object.entity_category;
                break;
            }
            break;
        case "ENTITY_CATEGORY_NONE":
        case 0:
            message.entity_category = 0;
            break;
        case "ENTITY_CATEGORY_CONFIG":
        case 1:
            message.entity_category = 1;
            break;
        case "ENTITY_CATEGORY_DIAGNOSTIC":
        case 2:
            message.entity_category = 2;
            break;
        }
        if (object.device_class != null)
            message.device_class = String(object.device_class);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from a ListEntitiesUpdateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ListEntitiesUpdateResponse
     * @static
     * @param {ListEntitiesUpdateResponse} message ListEntitiesUpdateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ListEntitiesUpdateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.object_id = "";
            object.key = 0;
            object.name = "";
            object.icon = "";
            object.disabled_by_default = false;
            object.entity_category = options.enums === String ? "ENTITY_CATEGORY_NONE" : 0;
            object.device_class = "";
            object.device_id = 0;
        }
        if (message.object_id != null && message.hasOwnProperty("object_id"))
            object.object_id = message.object_id;
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        if (message.icon != null && message.hasOwnProperty("icon"))
            object.icon = message.icon;
        if (message.disabled_by_default != null && message.hasOwnProperty("disabled_by_default"))
            object.disabled_by_default = message.disabled_by_default;
        if (message.entity_category != null && message.hasOwnProperty("entity_category"))
            object.entity_category = options.enums === String ? $root.EntityCategory[message.entity_category] === undefined ? message.entity_category : $root.EntityCategory[message.entity_category] : message.entity_category;
        if (message.device_class != null && message.hasOwnProperty("device_class"))
            object.device_class = message.device_class;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this ListEntitiesUpdateResponse to JSON.
     * @function toJSON
     * @memberof ListEntitiesUpdateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ListEntitiesUpdateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ListEntitiesUpdateResponse
     * @function getTypeUrl
     * @memberof ListEntitiesUpdateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ListEntitiesUpdateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ListEntitiesUpdateResponse";
    };

    return ListEntitiesUpdateResponse;
})();

$root.UpdateStateResponse = (function() {

    /**
     * Properties of an UpdateStateResponse.
     * @exports IUpdateStateResponse
     * @interface IUpdateStateResponse
     * @property {number|null} [key] UpdateStateResponse key
     * @property {boolean|null} [missing_state] UpdateStateResponse missing_state
     * @property {boolean|null} [in_progress] UpdateStateResponse in_progress
     * @property {boolean|null} [has_progress] UpdateStateResponse has_progress
     * @property {number|null} [progress] UpdateStateResponse progress
     * @property {string|null} [current_version] UpdateStateResponse current_version
     * @property {string|null} [latest_version] UpdateStateResponse latest_version
     * @property {string|null} [title] UpdateStateResponse title
     * @property {string|null} [release_summary] UpdateStateResponse release_summary
     * @property {string|null} [release_url] UpdateStateResponse release_url
     * @property {number|null} [device_id] UpdateStateResponse device_id
     */

    /**
     * Constructs a new UpdateStateResponse.
     * @exports UpdateStateResponse
     * @classdesc Represents an UpdateStateResponse.
     * @implements IUpdateStateResponse
     * @constructor
     * @param {IUpdateStateResponse=} [properties] Properties to set
     */
    function UpdateStateResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * UpdateStateResponse key.
     * @member {number} key
     * @memberof UpdateStateResponse
     * @instance
     */
    UpdateStateResponse.prototype.key = 0;

    /**
     * UpdateStateResponse missing_state.
     * @member {boolean} missing_state
     * @memberof UpdateStateResponse
     * @instance
     */
    UpdateStateResponse.prototype.missing_state = false;

    /**
     * UpdateStateResponse in_progress.
     * @member {boolean} in_progress
     * @memberof UpdateStateResponse
     * @instance
     */
    UpdateStateResponse.prototype.in_progress = false;

    /**
     * UpdateStateResponse has_progress.
     * @member {boolean} has_progress
     * @memberof UpdateStateResponse
     * @instance
     */
    UpdateStateResponse.prototype.has_progress = false;

    /**
     * UpdateStateResponse progress.
     * @member {number} progress
     * @memberof UpdateStateResponse
     * @instance
     */
    UpdateStateResponse.prototype.progress = 0;

    /**
     * UpdateStateResponse current_version.
     * @member {string} current_version
     * @memberof UpdateStateResponse
     * @instance
     */
    UpdateStateResponse.prototype.current_version = "";

    /**
     * UpdateStateResponse latest_version.
     * @member {string} latest_version
     * @memberof UpdateStateResponse
     * @instance
     */
    UpdateStateResponse.prototype.latest_version = "";

    /**
     * UpdateStateResponse title.
     * @member {string} title
     * @memberof UpdateStateResponse
     * @instance
     */
    UpdateStateResponse.prototype.title = "";

    /**
     * UpdateStateResponse release_summary.
     * @member {string} release_summary
     * @memberof UpdateStateResponse
     * @instance
     */
    UpdateStateResponse.prototype.release_summary = "";

    /**
     * UpdateStateResponse release_url.
     * @member {string} release_url
     * @memberof UpdateStateResponse
     * @instance
     */
    UpdateStateResponse.prototype.release_url = "";

    /**
     * UpdateStateResponse device_id.
     * @member {number} device_id
     * @memberof UpdateStateResponse
     * @instance
     */
    UpdateStateResponse.prototype.device_id = 0;

    /**
     * Creates a new UpdateStateResponse instance using the specified properties.
     * @function create
     * @memberof UpdateStateResponse
     * @static
     * @param {IUpdateStateResponse=} [properties] Properties to set
     * @returns {UpdateStateResponse} UpdateStateResponse instance
     */
    UpdateStateResponse.create = function create(properties) {
        return new UpdateStateResponse(properties);
    };

    /**
     * Encodes the specified UpdateStateResponse message. Does not implicitly {@link UpdateStateResponse.verify|verify} messages.
     * @function encode
     * @memberof UpdateStateResponse
     * @static
     * @param {IUpdateStateResponse} message UpdateStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    UpdateStateResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.missing_state != null && Object.hasOwnProperty.call(message, "missing_state"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.missing_state);
        if (message.in_progress != null && Object.hasOwnProperty.call(message, "in_progress"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.in_progress);
        if (message.has_progress != null && Object.hasOwnProperty.call(message, "has_progress"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.has_progress);
        if (message.progress != null && Object.hasOwnProperty.call(message, "progress"))
            writer.uint32(/* id 5, wireType 5 =*/45).float(message.progress);
        if (message.current_version != null && Object.hasOwnProperty.call(message, "current_version"))
            writer.uint32(/* id 6, wireType 2 =*/50).string(message.current_version);
        if (message.latest_version != null && Object.hasOwnProperty.call(message, "latest_version"))
            writer.uint32(/* id 7, wireType 2 =*/58).string(message.latest_version);
        if (message.title != null && Object.hasOwnProperty.call(message, "title"))
            writer.uint32(/* id 8, wireType 2 =*/66).string(message.title);
        if (message.release_summary != null && Object.hasOwnProperty.call(message, "release_summary"))
            writer.uint32(/* id 9, wireType 2 =*/74).string(message.release_summary);
        if (message.release_url != null && Object.hasOwnProperty.call(message, "release_url"))
            writer.uint32(/* id 10, wireType 2 =*/82).string(message.release_url);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 11, wireType 0 =*/88).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified UpdateStateResponse message, length delimited. Does not implicitly {@link UpdateStateResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof UpdateStateResponse
     * @static
     * @param {IUpdateStateResponse} message UpdateStateResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    UpdateStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an UpdateStateResponse message from the specified reader or buffer.
     * @function decode
     * @memberof UpdateStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {UpdateStateResponse} UpdateStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    UpdateStateResponse.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UpdateStateResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.missing_state = reader.bool();
                    break;
                }
            case 3: {
                    message.in_progress = reader.bool();
                    break;
                }
            case 4: {
                    message.has_progress = reader.bool();
                    break;
                }
            case 5: {
                    message.progress = reader.float();
                    break;
                }
            case 6: {
                    message.current_version = reader.string();
                    break;
                }
            case 7: {
                    message.latest_version = reader.string();
                    break;
                }
            case 8: {
                    message.title = reader.string();
                    break;
                }
            case 9: {
                    message.release_summary = reader.string();
                    break;
                }
            case 10: {
                    message.release_url = reader.string();
                    break;
                }
            case 11: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an UpdateStateResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof UpdateStateResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {UpdateStateResponse} UpdateStateResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    UpdateStateResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an UpdateStateResponse message.
     * @function verify
     * @memberof UpdateStateResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    UpdateStateResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.missing_state != null && message.hasOwnProperty("missing_state"))
            if (typeof message.missing_state !== "boolean")
                return "missing_state: boolean expected";
        if (message.in_progress != null && message.hasOwnProperty("in_progress"))
            if (typeof message.in_progress !== "boolean")
                return "in_progress: boolean expected";
        if (message.has_progress != null && message.hasOwnProperty("has_progress"))
            if (typeof message.has_progress !== "boolean")
                return "has_progress: boolean expected";
        if (message.progress != null && message.hasOwnProperty("progress"))
            if (typeof message.progress !== "number")
                return "progress: number expected";
        if (message.current_version != null && message.hasOwnProperty("current_version"))
            if (!$util.isString(message.current_version))
                return "current_version: string expected";
        if (message.latest_version != null && message.hasOwnProperty("latest_version"))
            if (!$util.isString(message.latest_version))
                return "latest_version: string expected";
        if (message.title != null && message.hasOwnProperty("title"))
            if (!$util.isString(message.title))
                return "title: string expected";
        if (message.release_summary != null && message.hasOwnProperty("release_summary"))
            if (!$util.isString(message.release_summary))
                return "release_summary: string expected";
        if (message.release_url != null && message.hasOwnProperty("release_url"))
            if (!$util.isString(message.release_url))
                return "release_url: string expected";
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates an UpdateStateResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof UpdateStateResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {UpdateStateResponse} UpdateStateResponse
     */
    UpdateStateResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.UpdateStateResponse)
            return object;
        var message = new $root.UpdateStateResponse();
        if (object.key != null)
            message.key = object.key >>> 0;
        if (object.missing_state != null)
            message.missing_state = Boolean(object.missing_state);
        if (object.in_progress != null)
            message.in_progress = Boolean(object.in_progress);
        if (object.has_progress != null)
            message.has_progress = Boolean(object.has_progress);
        if (object.progress != null)
            message.progress = Number(object.progress);
        if (object.current_version != null)
            message.current_version = String(object.current_version);
        if (object.latest_version != null)
            message.latest_version = String(object.latest_version);
        if (object.title != null)
            message.title = String(object.title);
        if (object.release_summary != null)
            message.release_summary = String(object.release_summary);
        if (object.release_url != null)
            message.release_url = String(object.release_url);
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from an UpdateStateResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof UpdateStateResponse
     * @static
     * @param {UpdateStateResponse} message UpdateStateResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    UpdateStateResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.missing_state = false;
            object.in_progress = false;
            object.has_progress = false;
            object.progress = 0;
            object.current_version = "";
            object.latest_version = "";
            object.title = "";
            object.release_summary = "";
            object.release_url = "";
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.missing_state != null && message.hasOwnProperty("missing_state"))
            object.missing_state = message.missing_state;
        if (message.in_progress != null && message.hasOwnProperty("in_progress"))
            object.in_progress = message.in_progress;
        if (message.has_progress != null && message.hasOwnProperty("has_progress"))
            object.has_progress = message.has_progress;
        if (message.progress != null && message.hasOwnProperty("progress"))
            object.progress = options.json && !isFinite(message.progress) ? String(message.progress) : message.progress;
        if (message.current_version != null && message.hasOwnProperty("current_version"))
            object.current_version = message.current_version;
        if (message.latest_version != null && message.hasOwnProperty("latest_version"))
            object.latest_version = message.latest_version;
        if (message.title != null && message.hasOwnProperty("title"))
            object.title = message.title;
        if (message.release_summary != null && message.hasOwnProperty("release_summary"))
            object.release_summary = message.release_summary;
        if (message.release_url != null && message.hasOwnProperty("release_url"))
            object.release_url = message.release_url;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this UpdateStateResponse to JSON.
     * @function toJSON
     * @memberof UpdateStateResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    UpdateStateResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for UpdateStateResponse
     * @function getTypeUrl
     * @memberof UpdateStateResponse
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    UpdateStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/UpdateStateResponse";
    };

    return UpdateStateResponse;
})();

/**
 * UpdateCommand enum.
 * @exports UpdateCommand
 * @enum {number}
 * @property {number} UPDATE_COMMAND_NONE=0 UPDATE_COMMAND_NONE value
 * @property {number} UPDATE_COMMAND_UPDATE=1 UPDATE_COMMAND_UPDATE value
 * @property {number} UPDATE_COMMAND_CHECK=2 UPDATE_COMMAND_CHECK value
 */
$root.UpdateCommand = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "UPDATE_COMMAND_NONE"] = 0;
    values[valuesById[1] = "UPDATE_COMMAND_UPDATE"] = 1;
    values[valuesById[2] = "UPDATE_COMMAND_CHECK"] = 2;
    return values;
})();

$root.UpdateCommandRequest = (function() {

    /**
     * Properties of an UpdateCommandRequest.
     * @exports IUpdateCommandRequest
     * @interface IUpdateCommandRequest
     * @property {number|null} [key] UpdateCommandRequest key
     * @property {UpdateCommand|null} [command] UpdateCommandRequest command
     * @property {number|null} [device_id] UpdateCommandRequest device_id
     */

    /**
     * Constructs a new UpdateCommandRequest.
     * @exports UpdateCommandRequest
     * @classdesc Represents an UpdateCommandRequest.
     * @implements IUpdateCommandRequest
     * @constructor
     * @param {IUpdateCommandRequest=} [properties] Properties to set
     */
    function UpdateCommandRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * UpdateCommandRequest key.
     * @member {number} key
     * @memberof UpdateCommandRequest
     * @instance
     */
    UpdateCommandRequest.prototype.key = 0;

    /**
     * UpdateCommandRequest command.
     * @member {UpdateCommand} command
     * @memberof UpdateCommandRequest
     * @instance
     */
    UpdateCommandRequest.prototype.command = 0;

    /**
     * UpdateCommandRequest device_id.
     * @member {number} device_id
     * @memberof UpdateCommandRequest
     * @instance
     */
    UpdateCommandRequest.prototype.device_id = 0;

    /**
     * Creates a new UpdateCommandRequest instance using the specified properties.
     * @function create
     * @memberof UpdateCommandRequest
     * @static
     * @param {IUpdateCommandRequest=} [properties] Properties to set
     * @returns {UpdateCommandRequest} UpdateCommandRequest instance
     */
    UpdateCommandRequest.create = function create(properties) {
        return new UpdateCommandRequest(properties);
    };

    /**
     * Encodes the specified UpdateCommandRequest message. Does not implicitly {@link UpdateCommandRequest.verify|verify} messages.
     * @function encode
     * @memberof UpdateCommandRequest
     * @static
     * @param {IUpdateCommandRequest} message UpdateCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    UpdateCommandRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
            writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message.key);
        if (message.command != null && Object.hasOwnProperty.call(message, "command"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.command);
        if (message.device_id != null && Object.hasOwnProperty.call(message, "device_id"))
            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.device_id);
        return writer;
    };

    /**
     * Encodes the specified UpdateCommandRequest message, length delimited. Does not implicitly {@link UpdateCommandRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof UpdateCommandRequest
     * @static
     * @param {IUpdateCommandRequest} message UpdateCommandRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    UpdateCommandRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an UpdateCommandRequest message from the specified reader or buffer.
     * @function decode
     * @memberof UpdateCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {UpdateCommandRequest} UpdateCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    UpdateCommandRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.UpdateCommandRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.key = reader.fixed32();
                    break;
                }
            case 2: {
                    message.command = reader.int32();
                    break;
                }
            case 3: {
                    message.device_id = reader.uint32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an UpdateCommandRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof UpdateCommandRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {UpdateCommandRequest} UpdateCommandRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    UpdateCommandRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an UpdateCommandRequest message.
     * @function verify
     * @memberof UpdateCommandRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    UpdateCommandRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.key != null && message.hasOwnProperty("key"))
            if (!$util.isInteger(message.key))
                return "key: integer expected";
        if (message.command != null && message.hasOwnProperty("command"))
            switch (message.command) {
            default:
                return "command: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            if (!$util.isInteger(message.device_id))
                return "device_id: integer expected";
        return null;
    };

    /**
     * Creates an UpdateCommandRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof UpdateCommandRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {UpdateCommandRequest} UpdateCommandRequest
     */
    UpdateCommandRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.UpdateCommandRequest)
            return object;
        var message = new $root.UpdateCommandRequest();
        if (object.key != null)
            message.key = object.key >>> 0;
        switch (object.command) {
        default:
            if (typeof object.command === "number") {
                message.command = object.command;
                break;
            }
            break;
        case "UPDATE_COMMAND_NONE":
        case 0:
            message.command = 0;
            break;
        case "UPDATE_COMMAND_UPDATE":
        case 1:
            message.command = 1;
            break;
        case "UPDATE_COMMAND_CHECK":
        case 2:
            message.command = 2;
            break;
        }
        if (object.device_id != null)
            message.device_id = object.device_id >>> 0;
        return message;
    };

    /**
     * Creates a plain object from an UpdateCommandRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof UpdateCommandRequest
     * @static
     * @param {UpdateCommandRequest} message UpdateCommandRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    UpdateCommandRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.key = 0;
            object.command = options.enums === String ? "UPDATE_COMMAND_NONE" : 0;
            object.device_id = 0;
        }
        if (message.key != null && message.hasOwnProperty("key"))
            object.key = message.key;
        if (message.command != null && message.hasOwnProperty("command"))
            object.command = options.enums === String ? $root.UpdateCommand[message.command] === undefined ? message.command : $root.UpdateCommand[message.command] : message.command;
        if (message.device_id != null && message.hasOwnProperty("device_id"))
            object.device_id = message.device_id;
        return object;
    };

    /**
     * Converts this UpdateCommandRequest to JSON.
     * @function toJSON
     * @memberof UpdateCommandRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    UpdateCommandRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for UpdateCommandRequest
     * @function getTypeUrl
     * @memberof UpdateCommandRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    UpdateCommandRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/UpdateCommandRequest";
    };

    return UpdateCommandRequest;
})();

$root.ZWaveProxyFrame = (function() {

    /**
     * Properties of a ZWaveProxyFrame.
     * @exports IZWaveProxyFrame
     * @interface IZWaveProxyFrame
     * @property {Uint8Array|null} [data] ZWaveProxyFrame data
     */

    /**
     * Constructs a new ZWaveProxyFrame.
     * @exports ZWaveProxyFrame
     * @classdesc Represents a ZWaveProxyFrame.
     * @implements IZWaveProxyFrame
     * @constructor
     * @param {IZWaveProxyFrame=} [properties] Properties to set
     */
    function ZWaveProxyFrame(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ZWaveProxyFrame data.
     * @member {Uint8Array} data
     * @memberof ZWaveProxyFrame
     * @instance
     */
    ZWaveProxyFrame.prototype.data = $util.newBuffer([]);

    /**
     * Creates a new ZWaveProxyFrame instance using the specified properties.
     * @function create
     * @memberof ZWaveProxyFrame
     * @static
     * @param {IZWaveProxyFrame=} [properties] Properties to set
     * @returns {ZWaveProxyFrame} ZWaveProxyFrame instance
     */
    ZWaveProxyFrame.create = function create(properties) {
        return new ZWaveProxyFrame(properties);
    };

    /**
     * Encodes the specified ZWaveProxyFrame message. Does not implicitly {@link ZWaveProxyFrame.verify|verify} messages.
     * @function encode
     * @memberof ZWaveProxyFrame
     * @static
     * @param {IZWaveProxyFrame} message ZWaveProxyFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ZWaveProxyFrame.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.data);
        return writer;
    };

    /**
     * Encodes the specified ZWaveProxyFrame message, length delimited. Does not implicitly {@link ZWaveProxyFrame.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ZWaveProxyFrame
     * @static
     * @param {IZWaveProxyFrame} message ZWaveProxyFrame message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ZWaveProxyFrame.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ZWaveProxyFrame message from the specified reader or buffer.
     * @function decode
     * @memberof ZWaveProxyFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ZWaveProxyFrame} ZWaveProxyFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ZWaveProxyFrame.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ZWaveProxyFrame();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.data = reader.bytes();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ZWaveProxyFrame message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ZWaveProxyFrame
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ZWaveProxyFrame} ZWaveProxyFrame
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ZWaveProxyFrame.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ZWaveProxyFrame message.
     * @function verify
     * @memberof ZWaveProxyFrame
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ZWaveProxyFrame.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.data != null && message.hasOwnProperty("data"))
            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                return "data: buffer expected";
        return null;
    };

    /**
     * Creates a ZWaveProxyFrame message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ZWaveProxyFrame
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ZWaveProxyFrame} ZWaveProxyFrame
     */
    ZWaveProxyFrame.fromObject = function fromObject(object) {
        if (object instanceof $root.ZWaveProxyFrame)
            return object;
        var message = new $root.ZWaveProxyFrame();
        if (object.data != null)
            if (typeof object.data === "string")
                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
            else if (object.data.length >= 0)
                message.data = object.data;
        return message;
    };

    /**
     * Creates a plain object from a ZWaveProxyFrame message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ZWaveProxyFrame
     * @static
     * @param {ZWaveProxyFrame} message ZWaveProxyFrame
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ZWaveProxyFrame.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            if (options.bytes === String)
                object.data = "";
            else {
                object.data = [];
                if (options.bytes !== Array)
                    object.data = $util.newBuffer(object.data);
            }
        if (message.data != null && message.hasOwnProperty("data"))
            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
        return object;
    };

    /**
     * Converts this ZWaveProxyFrame to JSON.
     * @function toJSON
     * @memberof ZWaveProxyFrame
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ZWaveProxyFrame.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ZWaveProxyFrame
     * @function getTypeUrl
     * @memberof ZWaveProxyFrame
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ZWaveProxyFrame.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ZWaveProxyFrame";
    };

    return ZWaveProxyFrame;
})();

/**
 * ZWaveProxyRequestType enum.
 * @exports ZWaveProxyRequestType
 * @enum {number}
 * @property {number} ZWAVE_PROXY_REQUEST_TYPE_SUBSCRIBE=0 ZWAVE_PROXY_REQUEST_TYPE_SUBSCRIBE value
 * @property {number} ZWAVE_PROXY_REQUEST_TYPE_UNSUBSCRIBE=1 ZWAVE_PROXY_REQUEST_TYPE_UNSUBSCRIBE value
 */
$root.ZWaveProxyRequestType = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "ZWAVE_PROXY_REQUEST_TYPE_SUBSCRIBE"] = 0;
    values[valuesById[1] = "ZWAVE_PROXY_REQUEST_TYPE_UNSUBSCRIBE"] = 1;
    return values;
})();

$root.ZWaveProxyRequest = (function() {

    /**
     * Properties of a ZWaveProxyRequest.
     * @exports IZWaveProxyRequest
     * @interface IZWaveProxyRequest
     * @property {ZWaveProxyRequestType|null} [type] ZWaveProxyRequest type
     */

    /**
     * Constructs a new ZWaveProxyRequest.
     * @exports ZWaveProxyRequest
     * @classdesc Represents a ZWaveProxyRequest.
     * @implements IZWaveProxyRequest
     * @constructor
     * @param {IZWaveProxyRequest=} [properties] Properties to set
     */
    function ZWaveProxyRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ZWaveProxyRequest type.
     * @member {ZWaveProxyRequestType} type
     * @memberof ZWaveProxyRequest
     * @instance
     */
    ZWaveProxyRequest.prototype.type = 0;

    /**
     * Creates a new ZWaveProxyRequest instance using the specified properties.
     * @function create
     * @memberof ZWaveProxyRequest
     * @static
     * @param {IZWaveProxyRequest=} [properties] Properties to set
     * @returns {ZWaveProxyRequest} ZWaveProxyRequest instance
     */
    ZWaveProxyRequest.create = function create(properties) {
        return new ZWaveProxyRequest(properties);
    };

    /**
     * Encodes the specified ZWaveProxyRequest message. Does not implicitly {@link ZWaveProxyRequest.verify|verify} messages.
     * @function encode
     * @memberof ZWaveProxyRequest
     * @static
     * @param {IZWaveProxyRequest} message ZWaveProxyRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ZWaveProxyRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.type != null && Object.hasOwnProperty.call(message, "type"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
        return writer;
    };

    /**
     * Encodes the specified ZWaveProxyRequest message, length delimited. Does not implicitly {@link ZWaveProxyRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ZWaveProxyRequest
     * @static
     * @param {IZWaveProxyRequest} message ZWaveProxyRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ZWaveProxyRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ZWaveProxyRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ZWaveProxyRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ZWaveProxyRequest} ZWaveProxyRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ZWaveProxyRequest.decode = function decode(reader, length, error) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ZWaveProxyRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            if (tag === error)
                break;
            switch (tag >>> 3) {
            case 1: {
                    message.type = reader.int32();
                    break;
                }
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ZWaveProxyRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ZWaveProxyRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ZWaveProxyRequest} ZWaveProxyRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ZWaveProxyRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ZWaveProxyRequest message.
     * @function verify
     * @memberof ZWaveProxyRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ZWaveProxyRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
                break;
            }
        return null;
    };

    /**
     * Creates a ZWaveProxyRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ZWaveProxyRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ZWaveProxyRequest} ZWaveProxyRequest
     */
    ZWaveProxyRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ZWaveProxyRequest)
            return object;
        var message = new $root.ZWaveProxyRequest();
        switch (object.type) {
        default:
            if (typeof object.type === "number") {
                message.type = object.type;
                break;
            }
            break;
        case "ZWAVE_PROXY_REQUEST_TYPE_SUBSCRIBE":
        case 0:
            message.type = 0;
            break;
        case "ZWAVE_PROXY_REQUEST_TYPE_UNSUBSCRIBE":
        case 1:
            message.type = 1;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a ZWaveProxyRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ZWaveProxyRequest
     * @static
     * @param {ZWaveProxyRequest} message ZWaveProxyRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ZWaveProxyRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.type = options.enums === String ? "ZWAVE_PROXY_REQUEST_TYPE_SUBSCRIBE" : 0;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.ZWaveProxyRequestType[message.type] === undefined ? message.type : $root.ZWaveProxyRequestType[message.type] : message.type;
        return object;
    };

    /**
     * Converts this ZWaveProxyRequest to JSON.
     * @function toJSON
     * @memberof ZWaveProxyRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ZWaveProxyRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * Gets the default type url for ZWaveProxyRequest
     * @function getTypeUrl
     * @memberof ZWaveProxyRequest
     * @static
     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
     * @returns {string} The default type url
     */
    ZWaveProxyRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
        if (typeUrlPrefix === undefined) {
            typeUrlPrefix = "type.googleapis.com";
        }
        return typeUrlPrefix + "/ZWaveProxyRequest";
    };

    return ZWaveProxyRequest;
})();

module.exports = $root;
